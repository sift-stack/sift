<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_AuthenticateService" Id="{c708e00d-d6d9-42cd-81fa-2f8fc40f4f67}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AuthenticateService
VAR_INPUT
	hSiftClient : T_SiftClient;
	bExecute : BOOL;
END_VAR

VAR_OUTPUT
	bBusy : BOOL;
	bError : BOOL;
	nErrId : UDINT;
	bSuccess : BOOL;
	stSiftError : ST_SiftError;
END_VAR

VAR
END_VAR

VAR
	eState : (IDLE, SEND_MESSAGE, WAIT_FOR_RESPONSE, SUCCESS, FAILURE) := IDLE;
	fbSendSiftMessage : _FB_SendSiftMessage;
	stAuthReq : _ST_SiftMessage;
	fbJson : FB_JsonDomParser;
	sResponse : STRING(GVL_SIFT.MAX_JSON_RESPONSE_SIZE);
	jsonDoc : SJsonValue;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eState OF
	IDLE:
		IF bExecute THEN
			eState := SEND_MESSAGE;
		END_IF
		
	SEND_MESSAGE:
		bBusy := TRUE;
		bError := FALSE;
		
		stSiftError := _F_CreateAuthenticateMessage(sApiKey:=hSiftClient.sApiKey, 
			                                        sGrpcUri:=hSiftClient.sGrpcUri, 
													pJsonBuffer := hSiftClient.pJsonBuffer,
													nLength := hSiftClient.pJbLength,
                                                    stMsg:=stAuthReq);
		IF stSiftError.bError THEN
			nErrId := stSiftError.nErrId;
			eState := FAILURE;
		END_IF
		
		fbSendSiftMessage(hSiftClient:=hSiftClient, stMsg:=stAuthReq, bExecute:=TRUE);
		eState := WAIT_FOR_RESPONSE;

	WAIT_FOR_RESPONSE:
		bBusy := TRUE;
		bError := FALSE;
		fbSendSiftMessage(bExecute:=FALSE);
		
		IF fbSendSiftMessage.bBusy THEN
			RETURN;
		ELSIF fbSendSiftMessage.bError THEN
			nErrId := fbSendSiftMessage.nErrId;
			eState := FAILURE;
			RETURN;
		END_IF

		// Verify response.
		IF fbSendSiftMessage.stResponse.nLength > GVL_SIFT.MAX_JSON_RESPONSE_SIZE THEN
			nErrId := GVL_SIFT.JSON_CAPACITY_REACHED;
			eState := FAILURE;
			RETURN;	
		END_IF
		
		IF NOT SAFE_MEMCPY(ADR(sResponse), SIZEOF(sResponse), 
			               ADR(fbSendSiftMessage.stResponse.aData), fbSendSiftMessage.stResponse.nLength) THEN
			nErrId := GVL_SIFT.MEMCPY_ERROR;
			eState := FAILURE;
		END_IF
		
		jsonDoc := fbJson.ParseDocument(sResponse);
		IF jsonDoc = 0 THEN
			eState := FAILURE;
			nErrId := GVL_SIFT.UNABLE_TO_PARSE_JSON;
		END_IF
		
		IF _F_IsSuccessfulResponse(jsonDoc) THEN
			eState := SUCCESS;
		ELSE
			IF NOT _F_SetSiftError(jsonDoc, stSiftError) THEN
				nErrId := GVL_SIFT.SIFT_PROXY_INVALID_RESPONSE;
			END_IF
			nErrId := stSiftError.nErrId;
			eState := FAILURE;
		END_IF
		
	SUCCESS:
		bBusy := FALSE;
		bError := FALSE;
		bSuccess := TRUE;
		eState := IDLE;
		
	FAILURE:
		bBusy := FALSE;
		bError := TRUE;
		eState := IDLE;
END_CASE

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>