<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_IngestService" Id="{3c66359b-9e66-4237-8835-89dcf998f3e0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_IngestService
VAR_INPUT
	hSiftClient : REFERENCE TO T_SiftClient;
	sRunId : STRING(255);
	aFlowConfigs : POINTER TO ST_FlowConfig;
END_VAR

VAR_OUTPUT
	bError : BOOL;
	nErrId : UDINT;
	nMsgsSent : UDINT; // Number of total messages sent to sift_proxy.
	nBufSize : UDINT; // The number of messages in the buffer.
	fBufferUtilization : LREAL; // The percent utilization of the internal buffer.
END_VAR

VAR
	eState : (IDLE, SEND_MESSAGE, SEND_MESSAGE_WAIT, SUCCESS, FAILURE):= IDLE;
	fbSendRingBuffer : FB_MemRingBuffer;
	aSendRingBuffer : ARRAY[0..SiftClientParameters.MAX_PACKET_SIZE - 1] OF BYTE;
	aTmpBuffer : ARRAY[0..SiftClientParameters.MAX_PACKET_SIZE - 1] OF BYTE;
	curOffset : UDINT;
	i : UDINT;
	nCount : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[nBufSize := fbSendRingBuffer.nCount;
fBufferUtilization := UDINT_TO_LREAL(fbSendRingBuffer.cbSize) / UDINT_TO_LREAL(SiftClientParameters.MAX_PACKET_SIZE);

CASE eState OF
	IDLE:
		bError := FALSE;
		IF nBufSize > 0 THEN
			nCount := nBufSize;
			eState := SEND_MESSAGE;
			
		END_IF
			
	SEND_MESSAGE:
		bError := FALSE;
		
		curOffset := 0;
		FOR i := 1 TO nCount DO
			fbSendRingBuffer.A_RemoveHead(pRead := ADR(aTmpBuffer[curOffset]),
										  cbRead := SiftClientParameters.MAX_PACKET_SIZE - curOffset,
										  pBuffer := ADR(aSendRingBuffer),
										  cbBuffer := SiftClientParameters.MAX_PACKET_SIZE);
			IF NOT fbSendRingBuffer.bOk THEN
				eState := FAILURE;
				nErrId := GVL_SIFT.INGEST_RING_BUFFER_REMOVE_ERROR;
				RETURN;
			END_IF
			curOffset := curOffset + fbSendRingBuffer.cbReturn;
		END_FOR
		nCount := 0;
		
		hSiftClient.fbSend(
			hSocket := hSiftClient.fbConnect.hSocket, 
			pSrc := ADR(aTmpBuffer),
			cbLen := curOffset,
			bExecute := TRUE,
		);
		
		eState := SEND_MESSAGE_WAIT;

	SEND_MESSAGE_WAIT:
		bError := FALSE;
		hSiftClient.fbSend(bExecute := FALSE);
		
		IF hSiftClient.fbSend.bBusy THEN
			RETURN;
		ELSIF hSiftClient.fbSend.bError THEN
			nErrId := hSiftClient.fbSend.nErrId;
			eState := FAILURE;
			RETURN;
		END_IF	
		
		nMsgsSent := nMsgsSent + 1;
		eState := IDLE;
		
	FAILURE:
		bError := TRUE;
END_CASE
]]></ST>
    </Implementation>
    <Method Name="WriteData" Id="{e66bc1ce-d5b1-4b4a-9edc-01a0ca24d04c}">
      <Declaration><![CDATA[METHOD PUBLIC WriteData : BOOL
VAR_INPUT
	pFlowConfig : POINTER TO ST_FlowConfig;
	stTimestamp : ST_Timestamp;
END_VAR
VAR_OUTPUT
	bError : BOOL;
END_VAR
VAR
	stFlowConfig : REFERENCE TO ST_FlowConfig;
	tmpCC : REFERENCE TO ST_ChannelConfig;
	i : UDINT;
	nStrLen : UINT;
	aRawBuf : ARRAY[1..SiftClientParameters.MAX_PACKET_SIZE] OF BYTE;
	stBuf : _FB_BufferWriter := (pRawBuf := ADR(aRawBuf), nSize := SIZEOF(aRawBuf));
	nMsgSize : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pFlowConfig = 0 THEN
	WriteData := FALSE;
	RETURN;
END_IF

stFlowConfig REF= pFlowConfig^;

stBuf.SetOffset(GVL_SIFT.HEADER_LENGTH);

(* Timestamp *);
IF NOT stBuf.Write(ADR(stTimestamp.nSeconds), 8) THEN
		WriteData := FALSE;
	RETURN;
END_IF

IF NOT stBuf.Write(ADR(stTimestamp.nNanoseconds), 4) THEN
		WriteData := FALSE;
	RETURN;
END_IF

(* Flow Name *)
nStrLen := INT_TO_UINT(LEN(stFlowConfig.sName));
IF NOT stBuf.Write(ADR(stFlowConfig.sName), nStrLen) THEN
		WriteData := FALSE;
	RETURN;
END_IF
IF NOT stBuf.WriteByte(0) THEN
		WriteData := FALSE;
	RETURN;
END_IF

(* Run ID *)
nStrLen := INT_TO_UINT(LEN(sRunId));
IF NOT stBuf.Write(ADR(sRunId), nStrLen) THEN
		WriteData := FALSE;
	RETURN;
END_IF
IF NOT stBuf.WriteByte(0) THEN
		WriteData := FALSE;
	RETURN;
END_IF

FOR i := 1 TO stFlowConfig.nNumChannelConfigs  BY 1 DO
	tmpCC REF= stFlowConfig.aChannelConfigs[i-1];
	
	CASE tmpCC.eDataType OF
		E_ChannelDataType.Bool_:
			IF NOT stBuf.Write(ADR(tmpCC.Value.bBool), 1) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
	
		E_ChannelDataType.Double:
			IF NOT stBuf.Write(ADR(tmpCC.Value.fDouble), 8) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.Enum:
			IF NOT stBuf.Write(ADR(tmpCC.Value.nEnum), 4) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.Float:
			IF NOT stBuf.Write(ADR(tmpCC.Value.fFloat), 4) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.Int32:
			IF NOT stBuf.Write(ADR(tmpCC.Value.nInt32), 4) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.Int64:
			IF NOT stBuf.Write(ADR(tmpCC.Value.nInt64), 8) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.UInt32:
			IF NOT stBuf.Write(ADR(tmpCC.Value.nInt32), 4) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.UInt64:
			IF NOT stBuf.Write(ADR(tmpCC.Value.nInt64), 8) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
			
		E_ChannelDataType.String_:
			nStrLen := INT_TO_UINT(LEN(tmpCC.Value.sString));
			IF NOT stBuf.Write(ADR(tmpCC.Value.sString), nStrLen) THEN
				WriteData := FALSE;
					RETURN;
			END_IF
			IF NOT stBuf.WriteByte(0) THEN
				WriteData := FALSE;
				RETURN;
			END_IF
	END_CASE

END_FOR

IF NOT stBuf.WriteAt(0, ADR(GVL_SIFT.SYNC_WORD), 4) THEN
	WriteData := FALSE;
	RETURN;
END_IF

IF NOT stBuf.WriteAt(GVL_SIFT.MESSAGE_TYPE_INDEX, ADR(GVL_SIFT.DATA_MESSAGE_TYPE), 1) THEN
	WriteData := FALSE;
	RETURN;
END_IF

nMsgSize := stBuf.nCurOffset - GVL_SIFT.HEADER_LENGTH;
IF NOT stBuf.WriteAt(GVL_SIFT.MESSGE_LENGTH_INDEX, ADR(nMsgSize), 4) THEN
	WriteData := FALSE;
	RETURN;
END_IF

fbSendRingBuffer.A_AddTail(pWrite := ADR(aRawBuf), 
						   cbWrite := nMsgSize + GVL_SIFT.HEADER_LENGTH, 
						   pBuffer := ADR(aSendRingBuffer), 
						   cbBuffer := SiftClientParameters.MAX_PACKET_SIZE);
						   
WriteData := fbSendRingBuffer.bOk;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>