// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/calculated_channels/v2/calculated_channels.proto

package calculated_channelsv2

import (
	_ "github.com/sift-stack/sift/go/gen/google/api"
	_ "github.com/sift-stack/sift/go/gen/protoc-gen-openapiv2/options"
	v11 "github.com/sift-stack/sift/go/gen/sift/calculated_channels/v1"
	v1 "github.com/sift-stack/sift/go/gen/sift/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CalculatedChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannelId            string                          `protobuf:"bytes,1,opt,name=calculated_channel_id,json=calculatedChannelId,proto3" json:"calculated_channel_id,omitempty"`
	OrganizationId                 string                          `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ClientKey                      *string                         `protobuf:"bytes,3,opt,name=client_key,json=clientKey,proto3,oneof" json:"client_key,omitempty"`
	ArchivedDate                   *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=archived_date,json=archivedDate,proto3,oneof" json:"archived_date,omitempty"`
	VersionId                      string                          `protobuf:"bytes,5,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Version                        uint32                          `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Name                           string                          `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description                    string                          `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	ChangeMessage                  string                          `protobuf:"bytes,9,opt,name=change_message,json=changeMessage,proto3" json:"change_message,omitempty"`
	UserNotes                      string                          `protobuf:"bytes,10,opt,name=user_notes,json=userNotes,proto3" json:"user_notes,omitempty"`
	Units                          *string                         `protobuf:"bytes,18,opt,name=units,proto3,oneof" json:"units,omitempty"`
	CreatedDate                    *timestamppb.Timestamp          `protobuf:"bytes,11,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate                   *timestamppb.Timestamp          `protobuf:"bytes,12,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	CalculatedChannelConfiguration *CalculatedChannelConfiguration `protobuf:"bytes,15,opt,name=calculated_channel_configuration,json=calculatedChannelConfiguration,proto3" json:"calculated_channel_configuration,omitempty"`
	CreatedByUserId                string                          `protobuf:"bytes,16,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	ModifiedByUserId               string                          `protobuf:"bytes,17,opt,name=modified_by_user_id,json=modifiedByUserId,proto3" json:"modified_by_user_id,omitempty"`
}

func (x *CalculatedChannel) Reset() {
	*x = CalculatedChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannel) ProtoMessage() {}

func (x *CalculatedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannel.ProtoReflect.Descriptor instead.
func (*CalculatedChannel) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{0}
}

func (x *CalculatedChannel) GetCalculatedChannelId() string {
	if x != nil {
		return x.CalculatedChannelId
	}
	return ""
}

func (x *CalculatedChannel) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CalculatedChannel) GetClientKey() string {
	if x != nil && x.ClientKey != nil {
		return *x.ClientKey
	}
	return ""
}

func (x *CalculatedChannel) GetArchivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedDate
	}
	return nil
}

func (x *CalculatedChannel) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *CalculatedChannel) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CalculatedChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CalculatedChannel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CalculatedChannel) GetChangeMessage() string {
	if x != nil {
		return x.ChangeMessage
	}
	return ""
}

func (x *CalculatedChannel) GetUserNotes() string {
	if x != nil {
		return x.UserNotes
	}
	return ""
}

func (x *CalculatedChannel) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *CalculatedChannel) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *CalculatedChannel) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *CalculatedChannel) GetCalculatedChannelConfiguration() *CalculatedChannelConfiguration {
	if x != nil {
		return x.CalculatedChannelConfiguration
	}
	return nil
}

func (x *CalculatedChannel) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *CalculatedChannel) GetModifiedByUserId() string {
	if x != nil {
		return x.ModifiedByUserId
	}
	return ""
}

type CalculatedChannelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetConfiguration *CalculatedChannelAssetConfiguration `protobuf:"bytes,1,opt,name=asset_configuration,json=assetConfiguration,proto3" json:"asset_configuration,omitempty"`
	QueryConfiguration *CalculatedChannelQueryConfiguration `protobuf:"bytes,2,opt,name=query_configuration,json=queryConfiguration,proto3" json:"query_configuration,omitempty"`
}

func (x *CalculatedChannelConfiguration) Reset() {
	*x = CalculatedChannelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelConfiguration) ProtoMessage() {}

func (x *CalculatedChannelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelConfiguration.ProtoReflect.Descriptor instead.
func (*CalculatedChannelConfiguration) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{1}
}

func (x *CalculatedChannelConfiguration) GetAssetConfiguration() *CalculatedChannelAssetConfiguration {
	if x != nil {
		return x.AssetConfiguration
	}
	return nil
}

func (x *CalculatedChannelConfiguration) GetQueryConfiguration() *CalculatedChannelQueryConfiguration {
	if x != nil {
		return x.QueryConfiguration
	}
	return nil
}

type CalculatedChannelAssetConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AssetScope:
	//
	//	*CalculatedChannelAssetConfiguration_AllAssets
	//	*CalculatedChannelAssetConfiguration_Selection
	AssetScope isCalculatedChannelAssetConfiguration_AssetScope `protobuf_oneof:"asset_scope"`
}

func (x *CalculatedChannelAssetConfiguration) Reset() {
	*x = CalculatedChannelAssetConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelAssetConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelAssetConfiguration) ProtoMessage() {}

func (x *CalculatedChannelAssetConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelAssetConfiguration.ProtoReflect.Descriptor instead.
func (*CalculatedChannelAssetConfiguration) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{2}
}

func (m *CalculatedChannelAssetConfiguration) GetAssetScope() isCalculatedChannelAssetConfiguration_AssetScope {
	if m != nil {
		return m.AssetScope
	}
	return nil
}

func (x *CalculatedChannelAssetConfiguration) GetAllAssets() bool {
	if x, ok := x.GetAssetScope().(*CalculatedChannelAssetConfiguration_AllAssets); ok {
		return x.AllAssets
	}
	return false
}

func (x *CalculatedChannelAssetConfiguration) GetSelection() *CalculatedChannelAssetConfiguration_AssetSelection {
	if x, ok := x.GetAssetScope().(*CalculatedChannelAssetConfiguration_Selection); ok {
		return x.Selection
	}
	return nil
}

type isCalculatedChannelAssetConfiguration_AssetScope interface {
	isCalculatedChannelAssetConfiguration_AssetScope()
}

type CalculatedChannelAssetConfiguration_AllAssets struct {
	AllAssets bool `protobuf:"varint,1,opt,name=all_assets,json=allAssets,proto3,oneof"`
}

type CalculatedChannelAssetConfiguration_Selection struct {
	Selection *CalculatedChannelAssetConfiguration_AssetSelection `protobuf:"bytes,2,opt,name=selection,proto3,oneof"`
}

func (*CalculatedChannelAssetConfiguration_AllAssets) isCalculatedChannelAssetConfiguration_AssetScope() {
}

func (*CalculatedChannelAssetConfiguration_Selection) isCalculatedChannelAssetConfiguration_AssetScope() {
}

type CalculatedChannelQueryConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*CalculatedChannelQueryConfiguration_Sel_
	Query isCalculatedChannelQueryConfiguration_Query `protobuf_oneof:"query"`
}

func (x *CalculatedChannelQueryConfiguration) Reset() {
	*x = CalculatedChannelQueryConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelQueryConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelQueryConfiguration) ProtoMessage() {}

func (x *CalculatedChannelQueryConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelQueryConfiguration.ProtoReflect.Descriptor instead.
func (*CalculatedChannelQueryConfiguration) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{3}
}

func (m *CalculatedChannelQueryConfiguration) GetQuery() isCalculatedChannelQueryConfiguration_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *CalculatedChannelQueryConfiguration) GetSel() *CalculatedChannelQueryConfiguration_Sel {
	if x, ok := x.GetQuery().(*CalculatedChannelQueryConfiguration_Sel_); ok {
		return x.Sel
	}
	return nil
}

type isCalculatedChannelQueryConfiguration_Query interface {
	isCalculatedChannelQueryConfiguration_Query()
}

type CalculatedChannelQueryConfiguration_Sel_ struct {
	Sel *CalculatedChannelQueryConfiguration_Sel `protobuf:"bytes,1,opt,name=sel,proto3,oneof"`
}

func (*CalculatedChannelQueryConfiguration_Sel_) isCalculatedChannelQueryConfiguration_Query() {}

type CalculatedChannelAbstractChannelReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelReference  string `protobuf:"bytes,1,opt,name=channel_reference,json=channelReference,proto3" json:"channel_reference,omitempty"`
	ChannelIdentifier string `protobuf:"bytes,2,opt,name=channel_identifier,json=channelIdentifier,proto3" json:"channel_identifier,omitempty"`
}

func (x *CalculatedChannelAbstractChannelReference) Reset() {
	*x = CalculatedChannelAbstractChannelReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelAbstractChannelReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelAbstractChannelReference) ProtoMessage() {}

func (x *CalculatedChannelAbstractChannelReference) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelAbstractChannelReference.ProtoReflect.Descriptor instead.
func (*CalculatedChannelAbstractChannelReference) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{4}
}

func (x *CalculatedChannelAbstractChannelReference) GetChannelReference() string {
	if x != nil {
		return x.ChannelReference
	}
	return ""
}

func (x *CalculatedChannelAbstractChannelReference) GetChannelIdentifier() string {
	if x != nil {
		return x.ChannelIdentifier
	}
	return ""
}

type CalculatedChannelValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// Only included if asset was named in the request
	AssetName *string `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3,oneof" json:"asset_name,omitempty"`
	// Includes all tags that have this asset
	TagNames []string `protobuf:"bytes,3,rep,name=tag_names,json=tagNames,proto3" json:"tag_names,omitempty"`
	// Names of the channels that asset does not have
	MissingChannels []string `protobuf:"bytes,4,rep,name=missing_channels,json=missingChannels,proto3" json:"missing_channels,omitempty"`
}

func (x *CalculatedChannelValidationResult) Reset() {
	*x = CalculatedChannelValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelValidationResult) ProtoMessage() {}

func (x *CalculatedChannelValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelValidationResult.ProtoReflect.Descriptor instead.
func (*CalculatedChannelValidationResult) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{5}
}

func (x *CalculatedChannelValidationResult) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *CalculatedChannelValidationResult) GetAssetName() string {
	if x != nil && x.AssetName != nil {
		return *x.AssetName
	}
	return ""
}

func (x *CalculatedChannelValidationResult) GetTagNames() []string {
	if x != nil {
		return x.TagNames
	}
	return nil
}

func (x *CalculatedChannelValidationResult) GetMissingChannels() []string {
	if x != nil {
		return x.MissingChannels
	}
	return nil
}

// The request for a call to `CalculatedChannelService_GetCalculatedChannel` to retrieve the latest version of a calculated channel.
// If `calculated_channel_id` is provided then all other arguments will be ignored. The argument `calculated_channel_id`
// should not be used together with `client_key`. The `organization_id` argument is only required
// if using `client_key` and the user belongs to multiple organizations.
type GetCalculatedChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannelId string `protobuf:"bytes,1,opt,name=calculated_channel_id,json=calculatedChannelId,proto3" json:"calculated_channel_id,omitempty"`
	ClientKey           string `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	OrganizationId      string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *GetCalculatedChannelRequest) Reset() {
	*x = GetCalculatedChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalculatedChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalculatedChannelRequest) ProtoMessage() {}

func (x *GetCalculatedChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalculatedChannelRequest.ProtoReflect.Descriptor instead.
func (*GetCalculatedChannelRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{6}
}

func (x *GetCalculatedChannelRequest) GetCalculatedChannelId() string {
	if x != nil {
		return x.CalculatedChannelId
	}
	return ""
}

func (x *GetCalculatedChannelRequest) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *GetCalculatedChannelRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetCalculatedChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannel *CalculatedChannel `protobuf:"bytes,1,opt,name=calculated_channel,json=calculatedChannel,proto3" json:"calculated_channel,omitempty"`
}

func (x *GetCalculatedChannelResponse) Reset() {
	*x = GetCalculatedChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalculatedChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalculatedChannelResponse) ProtoMessage() {}

func (x *GetCalculatedChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalculatedChannelResponse.ProtoReflect.Descriptor instead.
func (*GetCalculatedChannelResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{7}
}

func (x *GetCalculatedChannelResponse) GetCalculatedChannel() *CalculatedChannel {
	if x != nil {
		return x.CalculatedChannel
	}
	return nil
}

type CreateCalculatedChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description                    string                          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserNotes                      string                          `protobuf:"bytes,3,opt,name=user_notes,json=userNotes,proto3" json:"user_notes,omitempty"`
	Units                          *string                         `protobuf:"bytes,7,opt,name=units,proto3,oneof" json:"units,omitempty"`
	ClientKey                      *string                         `protobuf:"bytes,4,opt,name=client_key,json=clientKey,proto3,oneof" json:"client_key,omitempty"`
	CalculatedChannelConfiguration *CalculatedChannelConfiguration `protobuf:"bytes,5,opt,name=calculated_channel_configuration,json=calculatedChannelConfiguration,proto3" json:"calculated_channel_configuration,omitempty"`
}

func (x *CreateCalculatedChannelRequest) Reset() {
	*x = CreateCalculatedChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCalculatedChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalculatedChannelRequest) ProtoMessage() {}

func (x *CreateCalculatedChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalculatedChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateCalculatedChannelRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCalculatedChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCalculatedChannelRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCalculatedChannelRequest) GetUserNotes() string {
	if x != nil {
		return x.UserNotes
	}
	return ""
}

func (x *CreateCalculatedChannelRequest) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *CreateCalculatedChannelRequest) GetClientKey() string {
	if x != nil && x.ClientKey != nil {
		return *x.ClientKey
	}
	return ""
}

func (x *CreateCalculatedChannelRequest) GetCalculatedChannelConfiguration() *CalculatedChannelConfiguration {
	if x != nil {
		return x.CalculatedChannelConfiguration
	}
	return nil
}

type CreateCalculatedChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannel  *CalculatedChannel                   `protobuf:"bytes,1,opt,name=calculated_channel,json=calculatedChannel,proto3" json:"calculated_channel,omitempty"`
	InapplicableAssets []*CalculatedChannelValidationResult `protobuf:"bytes,2,rep,name=inapplicable_assets,json=inapplicableAssets,proto3" json:"inapplicable_assets,omitempty"`
}

func (x *CreateCalculatedChannelResponse) Reset() {
	*x = CreateCalculatedChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCalculatedChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalculatedChannelResponse) ProtoMessage() {}

func (x *CreateCalculatedChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalculatedChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateCalculatedChannelResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{9}
}

func (x *CreateCalculatedChannelResponse) GetCalculatedChannel() *CalculatedChannel {
	if x != nil {
		return x.CalculatedChannel
	}
	return nil
}

func (x *CreateCalculatedChannelResponse) GetInapplicableAssets() []*CalculatedChannelValidationResult {
	if x != nil {
		return x.InapplicableAssets
	}
	return nil
}

// The request for a call to `CalculatedChannelService_ListCalculatedChannels` to retrieve latest versions of calculated channels.
type ListCalculatedChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of calculated channels to return. The service may return fewer than this value.
	// If unspecified, at most 50 calculated channels will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListCalculatedChannels` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListCalculatedChannels` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `calculated_channel_id`, `client_key`, `name`, `asset_id`, `asset_name`, `tag_id`, `tag_name`, `version`, and `archived_date.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/calculated_channels#calculated_channel). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// How to order the retrieved calculated channels. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `created_date` and `modified_date`.
	// If left empty, items are ordered by `created_date` in ascending order (oldest-first).
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "created_date desc,modified_date"
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListCalculatedChannelsRequest) Reset() {
	*x = ListCalculatedChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatedChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatedChannelsRequest) ProtoMessage() {}

func (x *ListCalculatedChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatedChannelsRequest.ProtoReflect.Descriptor instead.
func (*ListCalculatedChannelsRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{10}
}

func (x *ListCalculatedChannelsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCalculatedChannelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCalculatedChannelsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCalculatedChannelsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListCalculatedChannelsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response of a call to `CalculatedChannelService_ListCalculatedChannels`.
type ListCalculatedChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannels []*CalculatedChannel `protobuf:"bytes,1,rep,name=calculated_channels,json=calculatedChannels,proto3" json:"calculated_channels,omitempty"`
	NextPageToken      string               `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCalculatedChannelsResponse) Reset() {
	*x = ListCalculatedChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatedChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatedChannelsResponse) ProtoMessage() {}

func (x *ListCalculatedChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatedChannelsResponse.ProtoReflect.Descriptor instead.
func (*ListCalculatedChannelsResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{11}
}

func (x *ListCalculatedChannelsResponse) GetCalculatedChannels() []*CalculatedChannel {
	if x != nil {
		return x.CalculatedChannels
	}
	return nil
}

func (x *ListCalculatedChannelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for a call to `CalculatedChannelService_UpdateCalculatedChannel` to update a calculated channel. Updating a calculated
// channel creates a new version of the calculated channel, leaving the previous untouched. If no update is deemed necessary, then the
// the current version is returned. To archive calculated channel, specify `archived_date` in the `update mask` as well as a non-null
// value for `archived_date` in the `calculated_channel` object. To unarchive a calculated channel, specify `archived_date` in the
// `update mask` and a `null` value for `archived_date` in the `calculated_channel` object.
type UpdateCalculatedChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The calculated channel to update.
	CalculatedChannel *CalculatedChannel `protobuf:"bytes,1,opt,name=calculated_channel,json=calculatedChannel,proto3" json:"calculated_channel,omitempty"`
	// The list of fields to be updated. The fields available to be updated are `name`, `description`, `units`,
	// `query_configuration`, `archived_date`, and `asset_configuration`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Optional user notes to describe changes.
	UserNotes *string `protobuf:"bytes,3,opt,name=user_notes,json=userNotes,proto3,oneof" json:"user_notes,omitempty"`
}

func (x *UpdateCalculatedChannelRequest) Reset() {
	*x = UpdateCalculatedChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalculatedChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalculatedChannelRequest) ProtoMessage() {}

func (x *UpdateCalculatedChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalculatedChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateCalculatedChannelRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCalculatedChannelRequest) GetCalculatedChannel() *CalculatedChannel {
	if x != nil {
		return x.CalculatedChannel
	}
	return nil
}

func (x *UpdateCalculatedChannelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateCalculatedChannelRequest) GetUserNotes() string {
	if x != nil && x.UserNotes != nil {
		return *x.UserNotes
	}
	return ""
}

// The response of a call to `CalculatedChannelService_UpdateCalculatedChannel`.
type UpdateCalculatedChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannel  *CalculatedChannel                   `protobuf:"bytes,1,opt,name=calculated_channel,json=calculatedChannel,proto3" json:"calculated_channel,omitempty"`
	InapplicableAssets []*CalculatedChannelValidationResult `protobuf:"bytes,2,rep,name=inapplicable_assets,json=inapplicableAssets,proto3" json:"inapplicable_assets,omitempty"`
}

func (x *UpdateCalculatedChannelResponse) Reset() {
	*x = UpdateCalculatedChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalculatedChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalculatedChannelResponse) ProtoMessage() {}

func (x *UpdateCalculatedChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalculatedChannelResponse.ProtoReflect.Descriptor instead.
func (*UpdateCalculatedChannelResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCalculatedChannelResponse) GetCalculatedChannel() *CalculatedChannel {
	if x != nil {
		return x.CalculatedChannel
	}
	return nil
}

func (x *UpdateCalculatedChannelResponse) GetInapplicableAssets() []*CalculatedChannelValidationResult {
	if x != nil {
		return x.InapplicableAssets
	}
	return nil
}

// The request for a call to `CalculatedChannelService_ListCalculatedChannelVersions` to retrieve versions
// of a particular calculated channel. If `calculated_channel_id` is provided then `client_key` is ignored.
type ListCalculatedChannelVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannelId string `protobuf:"bytes,1,opt,name=calculated_channel_id,json=calculatedChannelId,proto3" json:"calculated_channel_id,omitempty"`
	ClientKey           string `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// The maximum number of calculated channel versions to return. The service may return fewer than this value.
	// If unspecified, at most 50 calculated channels will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListCalculatedChannelVersions` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListCalculatedChannelVersions` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `calculated_channel_id`, `client_key`, `name`, `asset_id`, `asset_name`, `tag_id`, `tag_name`, `version`, and `archived_date.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/calculated_channels#calculated_channel). Optional.
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// How to order the retrieved calculated channel versions. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `created_date`, `modified_date`, and `version`.
	// If left empty, items are ordered by `created_date` in ascending order (oldest-first).
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "created_date desc,modified_date".
	OrderBy string `protobuf:"bytes,7,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListCalculatedChannelVersionsRequest) Reset() {
	*x = ListCalculatedChannelVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatedChannelVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatedChannelVersionsRequest) ProtoMessage() {}

func (x *ListCalculatedChannelVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatedChannelVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListCalculatedChannelVersionsRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{14}
}

func (x *ListCalculatedChannelVersionsRequest) GetCalculatedChannelId() string {
	if x != nil {
		return x.CalculatedChannelId
	}
	return ""
}

func (x *ListCalculatedChannelVersionsRequest) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *ListCalculatedChannelVersionsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCalculatedChannelVersionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCalculatedChannelVersionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCalculatedChannelVersionsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListCalculatedChannelVersionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response of a call to `CalculatedChannelService_ListCalculatedChannelVersions`.
type ListCalculatedChannelVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalculatedChannelVersions []*CalculatedChannel `protobuf:"bytes,1,rep,name=calculated_channel_versions,json=calculatedChannelVersions,proto3" json:"calculated_channel_versions,omitempty"`
	NextPageToken             string               `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCalculatedChannelVersionsResponse) Reset() {
	*x = ListCalculatedChannelVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatedChannelVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatedChannelVersionsResponse) ProtoMessage() {}

func (x *ListCalculatedChannelVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatedChannelVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListCalculatedChannelVersionsResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{15}
}

func (x *ListCalculatedChannelVersionsResponse) GetCalculatedChannelVersions() []*CalculatedChannel {
	if x != nil {
		return x.CalculatedChannelVersions
	}
	return nil
}

func (x *ListCalculatedChannelVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for a call to `CalculatedChannelService_ResolveCalculatedChannel` to get the all possible calculated channels.
//  1. If the calculated channel has a selection of assets and tags then those assets will be used as a base and then filtered down by the given assets and assets from the run.
//  2. If the calculated channel is enabled for all assets then:
//     a) If the request has run and assets from the run will be used as a base and then filtered down by the given assets.
//     b) If the request has run and no assets then those assets will be used.
//     c) If the request has only assets then those assets will be used.
//
// The `organization_id` argument is only required if using `client_key` and the user belongs to multiple organizations.
type ResolveCalculatedChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CalculatedChannel:
	//
	//	*ResolveCalculatedChannelRequest_Identifier
	//	*ResolveCalculatedChannelRequest_CalculatedChannelConfiguration
	CalculatedChannel isResolveCalculatedChannelRequest_CalculatedChannel `protobuf_oneof:"calculated_channel"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Assets to be included or filtered through.  See above.
	Assets *v1.NamedResources `protobuf:"bytes,4,opt,name=assets,proto3" json:"assets,omitempty"`
	// Run to get assets to be included or filtered through.  See above.
	Run *v1.ResourceIdentifier `protobuf:"bytes,5,opt,name=run,proto3,oneof" json:"run,omitempty"`
}

func (x *ResolveCalculatedChannelRequest) Reset() {
	*x = ResolveCalculatedChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCalculatedChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCalculatedChannelRequest) ProtoMessage() {}

func (x *ResolveCalculatedChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCalculatedChannelRequest.ProtoReflect.Descriptor instead.
func (*ResolveCalculatedChannelRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{16}
}

func (m *ResolveCalculatedChannelRequest) GetCalculatedChannel() isResolveCalculatedChannelRequest_CalculatedChannel {
	if m != nil {
		return m.CalculatedChannel
	}
	return nil
}

func (x *ResolveCalculatedChannelRequest) GetIdentifier() *v1.ResourceIdentifier {
	if x, ok := x.GetCalculatedChannel().(*ResolveCalculatedChannelRequest_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ResolveCalculatedChannelRequest) GetCalculatedChannelConfiguration() *CalculatedChannelConfiguration {
	if x, ok := x.GetCalculatedChannel().(*ResolveCalculatedChannelRequest_CalculatedChannelConfiguration); ok {
		return x.CalculatedChannelConfiguration
	}
	return nil
}

func (x *ResolveCalculatedChannelRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ResolveCalculatedChannelRequest) GetAssets() *v1.NamedResources {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ResolveCalculatedChannelRequest) GetRun() *v1.ResourceIdentifier {
	if x != nil {
		return x.Run
	}
	return nil
}

type isResolveCalculatedChannelRequest_CalculatedChannel interface {
	isResolveCalculatedChannelRequest_CalculatedChannel()
}

type ResolveCalculatedChannelRequest_Identifier struct {
	// The calculated channel to resolve.
	Identifier *v1.ResourceIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type ResolveCalculatedChannelRequest_CalculatedChannelConfiguration struct {
	// A configuration for the calculated channel to resolve.
	CalculatedChannelConfiguration *CalculatedChannelConfiguration `protobuf:"bytes,2,opt,name=calculated_channel_configuration,json=calculatedChannelConfiguration,proto3,oneof"`
}

func (*ResolveCalculatedChannelRequest_Identifier) isResolveCalculatedChannelRequest_CalculatedChannel() {
}

func (*ResolveCalculatedChannelRequest_CalculatedChannelConfiguration) isResolveCalculatedChannelRequest_CalculatedChannel() {
}

// The response of a call to `CalculatedChannelService_ResolveCalculatedChannel`.
type ResolveCalculatedChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If provided in the request, the calculated channel resolved.
	CalculatedChannelId *string `protobuf:"bytes,1,opt,name=calculated_channel_id,json=calculatedChannelId,proto3,oneof" json:"calculated_channel_id,omitempty"`
	// All resolved calculated channels.
	Resolved []*ResolveCalculatedChannelResponse_ResolvedCalculatedChannel `protobuf:"bytes,2,rep,name=resolved,proto3" json:"resolved,omitempty"`
	// All assets with any issues in resolution.
	Unresolved []*ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel `protobuf:"bytes,3,rep,name=unresolved,proto3" json:"unresolved,omitempty"`
}

func (x *ResolveCalculatedChannelResponse) Reset() {
	*x = ResolveCalculatedChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCalculatedChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCalculatedChannelResponse) ProtoMessage() {}

func (x *ResolveCalculatedChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCalculatedChannelResponse.ProtoReflect.Descriptor instead.
func (*ResolveCalculatedChannelResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{17}
}

func (x *ResolveCalculatedChannelResponse) GetCalculatedChannelId() string {
	if x != nil && x.CalculatedChannelId != nil {
		return *x.CalculatedChannelId
	}
	return ""
}

func (x *ResolveCalculatedChannelResponse) GetResolved() []*ResolveCalculatedChannelResponse_ResolvedCalculatedChannel {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *ResolveCalculatedChannelResponse) GetUnresolved() []*ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel {
	if x != nil {
		return x.Unresolved
	}
	return nil
}

// The request of a call to `CalculatedChannelService_BatchResolveCalculatedChannels`.
type BatchResolveCalculatedChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All calculated channels to resolve.
	Requests []*ResolveCalculatedChannelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchResolveCalculatedChannelsRequest) Reset() {
	*x = BatchResolveCalculatedChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResolveCalculatedChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResolveCalculatedChannelsRequest) ProtoMessage() {}

func (x *BatchResolveCalculatedChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResolveCalculatedChannelsRequest.ProtoReflect.Descriptor instead.
func (*BatchResolveCalculatedChannelsRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{18}
}

func (x *BatchResolveCalculatedChannelsRequest) GetRequests() []*ResolveCalculatedChannelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// The response of a call to `CalculatedChannelService_BatchResolveCalculatedChannels`.
type BatchResolveCalculatedChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All calculated channels that attempted resolution.
	Responses []*ResolveCalculatedChannelResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BatchResolveCalculatedChannelsResponse) Reset() {
	*x = BatchResolveCalculatedChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResolveCalculatedChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResolveCalculatedChannelsResponse) ProtoMessage() {}

func (x *BatchResolveCalculatedChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResolveCalculatedChannelsResponse.ProtoReflect.Descriptor instead.
func (*BatchResolveCalculatedChannelsResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{19}
}

func (x *BatchResolveCalculatedChannelsResponse) GetResponses() []*ResolveCalculatedChannelResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CalculatedChannelAssetConfiguration_AssetSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIds []string `protobuf:"bytes,1,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
	TagIds   []string `protobuf:"bytes,2,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
}

func (x *CalculatedChannelAssetConfiguration_AssetSelection) Reset() {
	*x = CalculatedChannelAssetConfiguration_AssetSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelAssetConfiguration_AssetSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelAssetConfiguration_AssetSelection) ProtoMessage() {}

func (x *CalculatedChannelAssetConfiguration_AssetSelection) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelAssetConfiguration_AssetSelection.ProtoReflect.Descriptor instead.
func (*CalculatedChannelAssetConfiguration_AssetSelection) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CalculatedChannelAssetConfiguration_AssetSelection) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

func (x *CalculatedChannelAssetConfiguration_AssetSelection) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

// Sift Expression Language.
type CalculatedChannelQueryConfiguration_Sel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression                  string                                       `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	ExpressionChannelReferences []*CalculatedChannelAbstractChannelReference `protobuf:"bytes,2,rep,name=expression_channel_references,json=expressionChannelReferences,proto3" json:"expression_channel_references,omitempty"`
}

func (x *CalculatedChannelQueryConfiguration_Sel) Reset() {
	*x = CalculatedChannelQueryConfiguration_Sel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelQueryConfiguration_Sel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelQueryConfiguration_Sel) ProtoMessage() {}

func (x *CalculatedChannelQueryConfiguration_Sel) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelQueryConfiguration_Sel.ProtoReflect.Descriptor instead.
func (*CalculatedChannelQueryConfiguration_Sel) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CalculatedChannelQueryConfiguration_Sel) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CalculatedChannelQueryConfiguration_Sel) GetExpressionChannelReferences() []*CalculatedChannelAbstractChannelReference {
	if x != nil {
		return x.ExpressionChannelReferences
	}
	return nil
}

// A specific calculated channel including the asset and exact channels to query.
type ResolveCalculatedChannelResponse_ResolvedCalculatedChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the specific asset that was resolved.
	AssetName string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// The expression resolved including channel references.
	ExpressionRequest *v11.ExpressionRequest `protobuf:"bytes,2,opt,name=expression_request,json=expressionRequest,proto3" json:"expression_request,omitempty"`
	OutputDataType    v1.ChannelDataType     `protobuf:"varint,3,opt,name=output_data_type,json=outputDataType,proto3,enum=sift.common.type.v1.ChannelDataType" json:"output_data_type,omitempty"`
}

func (x *ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) Reset() {
	*x = ResolveCalculatedChannelResponse_ResolvedCalculatedChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) ProtoMessage() {}

func (x *ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCalculatedChannelResponse_ResolvedCalculatedChannel.ProtoReflect.Descriptor instead.
func (*ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) GetExpressionRequest() *v11.ExpressionRequest {
	if x != nil {
		return x.ExpressionRequest
	}
	return nil
}

func (x *ResolveCalculatedChannelResponse_ResolvedCalculatedChannel) GetOutputDataType() v1.ChannelDataType {
	if x != nil {
		return x.OutputDataType
	}
	return v1.ChannelDataType(0)
}

// Any failure in resolution.
type ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the specific asset that was not resolved.
	AssetName    string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) Reset() {
	*x = ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) ProtoMessage() {}

func (x *ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel.ProtoReflect.Descriptor instead.
func (*ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP(), []int{17, 1}
}

func (x *ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_sift_calculated_channels_v2_calculated_channels_proto protoreflect.FileDescriptor

var file_sift_calculated_channels_v2_calculated_channels_proto_rawDesc = []byte{
	0x0a, 0x35, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73,
	0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x73, 0x69, 0x66, 0x74,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x07, 0x0a, 0x11, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x37, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x02, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x20, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x1e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x76, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x23, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x6f, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x23, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x03, 0x73,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x65, 0x6c, 0x1a, 0xbc, 0x01, 0x0a, 0x03, 0x53, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x91, 0x01,
	0x0a, 0x29, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xcd, 0x01, 0x0a, 0x21, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xf3, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x8a, 0x01, 0x0a, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x1e,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xfb, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x74, 0x0a, 0x13, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x12, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfe,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0xfb, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x74, 0x0a, 0x13, 0x69, 0x6e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x69, 0x6e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xb4, 0x02,
	0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73,
	0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xd3, 0x03, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01,
	0x52, 0x03, 0x72, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x72, 0x75, 0x6e, 0x22, 0xdc, 0x05, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x15, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x1a, 0xf8, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x6b,
	0x0a, 0x1b, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x25, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x26, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x32, 0xd8, 0x11, 0x0a, 0x18,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe0, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x92, 0x41, 0x4c, 0x12, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x1a, 0x34, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7d, 0x5a, 0x46,
	0x12, 0x44, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x60, 0x92, 0x41, 0x37, 0x12, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0xa4, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x3a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x92, 0x41, 0x6a, 0x12, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x50, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x92, 0x02, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x53, 0x12, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x38, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x32, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0xac, 0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x41, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x02, 0x92, 0x41, 0x6a, 0x12,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8f, 0x01,
	0x5a, 0x4f, 0x12, 0x4d, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xa6, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3c, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x92, 0x41, 0x5b, 0x12,
	0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x3f, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0xcb, 0x02, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x42, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x92, 0x41, 0x68, 0x12, 0x1d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x47, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x20, 0x61, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x99, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x17, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66,
	0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x76, 0x32, 0x3b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x58,
	0xaa, 0x02, 0x1a, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x1a,
	0x53, 0x69, 0x66, 0x74, 0x5c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x26, 0x53, 0x69, 0x66,
	0x74, 0x5c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x3a,
	0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_calculated_channels_v2_calculated_channels_proto_rawDescOnce sync.Once
	file_sift_calculated_channels_v2_calculated_channels_proto_rawDescData = file_sift_calculated_channels_v2_calculated_channels_proto_rawDesc
)

func file_sift_calculated_channels_v2_calculated_channels_proto_rawDescGZIP() []byte {
	file_sift_calculated_channels_v2_calculated_channels_proto_rawDescOnce.Do(func() {
		file_sift_calculated_channels_v2_calculated_channels_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_calculated_channels_v2_calculated_channels_proto_rawDescData)
	})
	return file_sift_calculated_channels_v2_calculated_channels_proto_rawDescData
}

var file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_sift_calculated_channels_v2_calculated_channels_proto_goTypes = []interface{}{
	(*CalculatedChannel)(nil),                                            // 0: sift.calculated_channels.v2.CalculatedChannel
	(*CalculatedChannelConfiguration)(nil),                               // 1: sift.calculated_channels.v2.CalculatedChannelConfiguration
	(*CalculatedChannelAssetConfiguration)(nil),                          // 2: sift.calculated_channels.v2.CalculatedChannelAssetConfiguration
	(*CalculatedChannelQueryConfiguration)(nil),                          // 3: sift.calculated_channels.v2.CalculatedChannelQueryConfiguration
	(*CalculatedChannelAbstractChannelReference)(nil),                    // 4: sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference
	(*CalculatedChannelValidationResult)(nil),                            // 5: sift.calculated_channels.v2.CalculatedChannelValidationResult
	(*GetCalculatedChannelRequest)(nil),                                  // 6: sift.calculated_channels.v2.GetCalculatedChannelRequest
	(*GetCalculatedChannelResponse)(nil),                                 // 7: sift.calculated_channels.v2.GetCalculatedChannelResponse
	(*CreateCalculatedChannelRequest)(nil),                               // 8: sift.calculated_channels.v2.CreateCalculatedChannelRequest
	(*CreateCalculatedChannelResponse)(nil),                              // 9: sift.calculated_channels.v2.CreateCalculatedChannelResponse
	(*ListCalculatedChannelsRequest)(nil),                                // 10: sift.calculated_channels.v2.ListCalculatedChannelsRequest
	(*ListCalculatedChannelsResponse)(nil),                               // 11: sift.calculated_channels.v2.ListCalculatedChannelsResponse
	(*UpdateCalculatedChannelRequest)(nil),                               // 12: sift.calculated_channels.v2.UpdateCalculatedChannelRequest
	(*UpdateCalculatedChannelResponse)(nil),                              // 13: sift.calculated_channels.v2.UpdateCalculatedChannelResponse
	(*ListCalculatedChannelVersionsRequest)(nil),                         // 14: sift.calculated_channels.v2.ListCalculatedChannelVersionsRequest
	(*ListCalculatedChannelVersionsResponse)(nil),                        // 15: sift.calculated_channels.v2.ListCalculatedChannelVersionsResponse
	(*ResolveCalculatedChannelRequest)(nil),                              // 16: sift.calculated_channels.v2.ResolveCalculatedChannelRequest
	(*ResolveCalculatedChannelResponse)(nil),                             // 17: sift.calculated_channels.v2.ResolveCalculatedChannelResponse
	(*BatchResolveCalculatedChannelsRequest)(nil),                        // 18: sift.calculated_channels.v2.BatchResolveCalculatedChannelsRequest
	(*BatchResolveCalculatedChannelsResponse)(nil),                       // 19: sift.calculated_channels.v2.BatchResolveCalculatedChannelsResponse
	(*CalculatedChannelAssetConfiguration_AssetSelection)(nil),           // 20: sift.calculated_channels.v2.CalculatedChannelAssetConfiguration.AssetSelection
	(*CalculatedChannelQueryConfiguration_Sel)(nil),                      // 21: sift.calculated_channels.v2.CalculatedChannelQueryConfiguration.Sel
	(*ResolveCalculatedChannelResponse_ResolvedCalculatedChannel)(nil),   // 22: sift.calculated_channels.v2.ResolveCalculatedChannelResponse.ResolvedCalculatedChannel
	(*ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel)(nil), // 23: sift.calculated_channels.v2.ResolveCalculatedChannelResponse.UnresolvedCalculatedChannel
	(*timestamppb.Timestamp)(nil),                                        // 24: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                                        // 25: google.protobuf.FieldMask
	(*v1.ResourceIdentifier)(nil),                                        // 26: sift.common.type.v1.ResourceIdentifier
	(*v1.NamedResources)(nil),                                            // 27: sift.common.type.v1.NamedResources
	(*v11.ExpressionRequest)(nil),                                        // 28: sift.calculated_channels.v1.ExpressionRequest
	(v1.ChannelDataType)(0),                                              // 29: sift.common.type.v1.ChannelDataType
}
var file_sift_calculated_channels_v2_calculated_channels_proto_depIdxs = []int32{
	24, // 0: sift.calculated_channels.v2.CalculatedChannel.archived_date:type_name -> google.protobuf.Timestamp
	24, // 1: sift.calculated_channels.v2.CalculatedChannel.created_date:type_name -> google.protobuf.Timestamp
	24, // 2: sift.calculated_channels.v2.CalculatedChannel.modified_date:type_name -> google.protobuf.Timestamp
	1,  // 3: sift.calculated_channels.v2.CalculatedChannel.calculated_channel_configuration:type_name -> sift.calculated_channels.v2.CalculatedChannelConfiguration
	2,  // 4: sift.calculated_channels.v2.CalculatedChannelConfiguration.asset_configuration:type_name -> sift.calculated_channels.v2.CalculatedChannelAssetConfiguration
	3,  // 5: sift.calculated_channels.v2.CalculatedChannelConfiguration.query_configuration:type_name -> sift.calculated_channels.v2.CalculatedChannelQueryConfiguration
	20, // 6: sift.calculated_channels.v2.CalculatedChannelAssetConfiguration.selection:type_name -> sift.calculated_channels.v2.CalculatedChannelAssetConfiguration.AssetSelection
	21, // 7: sift.calculated_channels.v2.CalculatedChannelQueryConfiguration.sel:type_name -> sift.calculated_channels.v2.CalculatedChannelQueryConfiguration.Sel
	0,  // 8: sift.calculated_channels.v2.GetCalculatedChannelResponse.calculated_channel:type_name -> sift.calculated_channels.v2.CalculatedChannel
	1,  // 9: sift.calculated_channels.v2.CreateCalculatedChannelRequest.calculated_channel_configuration:type_name -> sift.calculated_channels.v2.CalculatedChannelConfiguration
	0,  // 10: sift.calculated_channels.v2.CreateCalculatedChannelResponse.calculated_channel:type_name -> sift.calculated_channels.v2.CalculatedChannel
	5,  // 11: sift.calculated_channels.v2.CreateCalculatedChannelResponse.inapplicable_assets:type_name -> sift.calculated_channels.v2.CalculatedChannelValidationResult
	0,  // 12: sift.calculated_channels.v2.ListCalculatedChannelsResponse.calculated_channels:type_name -> sift.calculated_channels.v2.CalculatedChannel
	0,  // 13: sift.calculated_channels.v2.UpdateCalculatedChannelRequest.calculated_channel:type_name -> sift.calculated_channels.v2.CalculatedChannel
	25, // 14: sift.calculated_channels.v2.UpdateCalculatedChannelRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 15: sift.calculated_channels.v2.UpdateCalculatedChannelResponse.calculated_channel:type_name -> sift.calculated_channels.v2.CalculatedChannel
	5,  // 16: sift.calculated_channels.v2.UpdateCalculatedChannelResponse.inapplicable_assets:type_name -> sift.calculated_channels.v2.CalculatedChannelValidationResult
	0,  // 17: sift.calculated_channels.v2.ListCalculatedChannelVersionsResponse.calculated_channel_versions:type_name -> sift.calculated_channels.v2.CalculatedChannel
	26, // 18: sift.calculated_channels.v2.ResolveCalculatedChannelRequest.identifier:type_name -> sift.common.type.v1.ResourceIdentifier
	1,  // 19: sift.calculated_channels.v2.ResolveCalculatedChannelRequest.calculated_channel_configuration:type_name -> sift.calculated_channels.v2.CalculatedChannelConfiguration
	27, // 20: sift.calculated_channels.v2.ResolveCalculatedChannelRequest.assets:type_name -> sift.common.type.v1.NamedResources
	26, // 21: sift.calculated_channels.v2.ResolveCalculatedChannelRequest.run:type_name -> sift.common.type.v1.ResourceIdentifier
	22, // 22: sift.calculated_channels.v2.ResolveCalculatedChannelResponse.resolved:type_name -> sift.calculated_channels.v2.ResolveCalculatedChannelResponse.ResolvedCalculatedChannel
	23, // 23: sift.calculated_channels.v2.ResolveCalculatedChannelResponse.unresolved:type_name -> sift.calculated_channels.v2.ResolveCalculatedChannelResponse.UnresolvedCalculatedChannel
	16, // 24: sift.calculated_channels.v2.BatchResolveCalculatedChannelsRequest.requests:type_name -> sift.calculated_channels.v2.ResolveCalculatedChannelRequest
	17, // 25: sift.calculated_channels.v2.BatchResolveCalculatedChannelsResponse.responses:type_name -> sift.calculated_channels.v2.ResolveCalculatedChannelResponse
	4,  // 26: sift.calculated_channels.v2.CalculatedChannelQueryConfiguration.Sel.expression_channel_references:type_name -> sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference
	28, // 27: sift.calculated_channels.v2.ResolveCalculatedChannelResponse.ResolvedCalculatedChannel.expression_request:type_name -> sift.calculated_channels.v1.ExpressionRequest
	29, // 28: sift.calculated_channels.v2.ResolveCalculatedChannelResponse.ResolvedCalculatedChannel.output_data_type:type_name -> sift.common.type.v1.ChannelDataType
	6,  // 29: sift.calculated_channels.v2.CalculatedChannelService.GetCalculatedChannel:input_type -> sift.calculated_channels.v2.GetCalculatedChannelRequest
	8,  // 30: sift.calculated_channels.v2.CalculatedChannelService.CreateCalculatedChannel:input_type -> sift.calculated_channels.v2.CreateCalculatedChannelRequest
	10, // 31: sift.calculated_channels.v2.CalculatedChannelService.ListCalculatedChannels:input_type -> sift.calculated_channels.v2.ListCalculatedChannelsRequest
	12, // 32: sift.calculated_channels.v2.CalculatedChannelService.UpdateCalculatedChannel:input_type -> sift.calculated_channels.v2.UpdateCalculatedChannelRequest
	14, // 33: sift.calculated_channels.v2.CalculatedChannelService.ListCalculatedChannelVersions:input_type -> sift.calculated_channels.v2.ListCalculatedChannelVersionsRequest
	16, // 34: sift.calculated_channels.v2.CalculatedChannelService.ResolveCalculatedChannel:input_type -> sift.calculated_channels.v2.ResolveCalculatedChannelRequest
	18, // 35: sift.calculated_channels.v2.CalculatedChannelService.BatchResolveCalculatedChannels:input_type -> sift.calculated_channels.v2.BatchResolveCalculatedChannelsRequest
	7,  // 36: sift.calculated_channels.v2.CalculatedChannelService.GetCalculatedChannel:output_type -> sift.calculated_channels.v2.GetCalculatedChannelResponse
	9,  // 37: sift.calculated_channels.v2.CalculatedChannelService.CreateCalculatedChannel:output_type -> sift.calculated_channels.v2.CreateCalculatedChannelResponse
	11, // 38: sift.calculated_channels.v2.CalculatedChannelService.ListCalculatedChannels:output_type -> sift.calculated_channels.v2.ListCalculatedChannelsResponse
	13, // 39: sift.calculated_channels.v2.CalculatedChannelService.UpdateCalculatedChannel:output_type -> sift.calculated_channels.v2.UpdateCalculatedChannelResponse
	15, // 40: sift.calculated_channels.v2.CalculatedChannelService.ListCalculatedChannelVersions:output_type -> sift.calculated_channels.v2.ListCalculatedChannelVersionsResponse
	17, // 41: sift.calculated_channels.v2.CalculatedChannelService.ResolveCalculatedChannel:output_type -> sift.calculated_channels.v2.ResolveCalculatedChannelResponse
	19, // 42: sift.calculated_channels.v2.CalculatedChannelService.BatchResolveCalculatedChannels:output_type -> sift.calculated_channels.v2.BatchResolveCalculatedChannelsResponse
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_sift_calculated_channels_v2_calculated_channels_proto_init() }
func file_sift_calculated_channels_v2_calculated_channels_proto_init() {
	if File_sift_calculated_channels_v2_calculated_channels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelAssetConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelQueryConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelAbstractChannelReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalculatedChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalculatedChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCalculatedChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCalculatedChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatedChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatedChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalculatedChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalculatedChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatedChannelVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatedChannelVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCalculatedChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCalculatedChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResolveCalculatedChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResolveCalculatedChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelAssetConfiguration_AssetSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelQueryConfiguration_Sel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCalculatedChannelResponse_ResolvedCalculatedChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCalculatedChannelResponse_UnresolvedCalculatedChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CalculatedChannelAssetConfiguration_AllAssets)(nil),
		(*CalculatedChannelAssetConfiguration_Selection)(nil),
	}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CalculatedChannelQueryConfiguration_Sel_)(nil),
	}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ResolveCalculatedChannelRequest_Identifier)(nil),
		(*ResolveCalculatedChannelRequest_CalculatedChannelConfiguration)(nil),
	}
	file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_calculated_channels_v2_calculated_channels_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_calculated_channels_v2_calculated_channels_proto_goTypes,
		DependencyIndexes: file_sift_calculated_channels_v2_calculated_channels_proto_depIdxs,
		MessageInfos:      file_sift_calculated_channels_v2_calculated_channels_proto_msgTypes,
	}.Build()
	File_sift_calculated_channels_v2_calculated_channels_proto = out.File
	file_sift_calculated_channels_v2_calculated_channels_proto_rawDesc = nil
	file_sift_calculated_channels_v2_calculated_channels_proto_goTypes = nil
	file_sift_calculated_channels_v2_calculated_channels_proto_depIdxs = nil
}
