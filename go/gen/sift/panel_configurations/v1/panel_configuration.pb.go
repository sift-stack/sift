// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/panel_configurations/v1/panel_configuration.proto

package panel_configurationsv1

import (
	_ "github.com/sift-stack/sift/go/gen/google/api"
	_ "github.com/sift-stack/sift/go/gen/protoc-gen-openapiv2/options"
	v2 "github.com/sift-stack/sift/go/gen/sift/calculated_channels/v2"
	v1 "github.com/sift-stack/sift/go/gen/sift/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PanelType int32

const (
	// Deprecated: Do not use.
	PanelType_PANEL_TYPE_UNSPECIFIED  PanelType = 0
	PanelType_PANEL_TYPE_TIMESERIES   PanelType = 1
	PanelType_PANEL_TYPE_TABLE        PanelType = 2
	PanelType_PANEL_TYPE_FFT          PanelType = 3
	PanelType_PANEL_TYPE_GEO_MAP      PanelType = 4
	PanelType_PANEL_TYPE_SCATTER_PLOT PanelType = 5
	PanelType_PANEL_TYPE_FILE_VIEWER  PanelType = 6
	PanelType_PANEL_TYPE_HISTOGRAM    PanelType = 7
)

// Enum value maps for PanelType.
var (
	PanelType_name = map[int32]string{
		0: "PANEL_TYPE_UNSPECIFIED",
		1: "PANEL_TYPE_TIMESERIES",
		2: "PANEL_TYPE_TABLE",
		3: "PANEL_TYPE_FFT",
		4: "PANEL_TYPE_GEO_MAP",
		5: "PANEL_TYPE_SCATTER_PLOT",
		6: "PANEL_TYPE_FILE_VIEWER",
		7: "PANEL_TYPE_HISTOGRAM",
	}
	PanelType_value = map[string]int32{
		"PANEL_TYPE_UNSPECIFIED":  0,
		"PANEL_TYPE_TIMESERIES":   1,
		"PANEL_TYPE_TABLE":        2,
		"PANEL_TYPE_FFT":          3,
		"PANEL_TYPE_GEO_MAP":      4,
		"PANEL_TYPE_SCATTER_PLOT": 5,
		"PANEL_TYPE_FILE_VIEWER":  6,
		"PANEL_TYPE_HISTOGRAM":    7,
	}
)

func (x PanelType) Enum() *PanelType {
	p := new(PanelType)
	*p = x
	return p
}

func (x PanelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PanelType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_panel_configurations_v1_panel_configuration_proto_enumTypes[0].Descriptor()
}

func (PanelType) Type() protoreflect.EnumType {
	return &file_sift_panel_configurations_v1_panel_configuration_proto_enumTypes[0]
}

func (x PanelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PanelType.Descriptor instead.
func (PanelType) EnumDescriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{0}
}

type PlottedChannelType int32

const (
	// Deprecated: Do not use.
	PlottedChannelType_PLOTTED_CHANNEL_TYPE_UNSPECIFIED        PlottedChannelType = 0
	PlottedChannelType_PLOTTED_CHANNEL_TYPE_REGULAR            PlottedChannelType = 1
	PlottedChannelType_PLOTTED_CHANNEL_TYPE_CALCULATED_CHANNEL PlottedChannelType = 2
	PlottedChannelType_PLOTTED_CHANNEL_TYPE_BIT_FIELD_ELEMENT  PlottedChannelType = 3
	PlottedChannelType_PLOTTED_CHANNEL_TYPE_ENUM               PlottedChannelType = 4
)

// Enum value maps for PlottedChannelType.
var (
	PlottedChannelType_name = map[int32]string{
		0: "PLOTTED_CHANNEL_TYPE_UNSPECIFIED",
		1: "PLOTTED_CHANNEL_TYPE_REGULAR",
		2: "PLOTTED_CHANNEL_TYPE_CALCULATED_CHANNEL",
		3: "PLOTTED_CHANNEL_TYPE_BIT_FIELD_ELEMENT",
		4: "PLOTTED_CHANNEL_TYPE_ENUM",
	}
	PlottedChannelType_value = map[string]int32{
		"PLOTTED_CHANNEL_TYPE_UNSPECIFIED":        0,
		"PLOTTED_CHANNEL_TYPE_REGULAR":            1,
		"PLOTTED_CHANNEL_TYPE_CALCULATED_CHANNEL": 2,
		"PLOTTED_CHANNEL_TYPE_BIT_FIELD_ELEMENT":  3,
		"PLOTTED_CHANNEL_TYPE_ENUM":               4,
	}
)

func (x PlottedChannelType) Enum() *PlottedChannelType {
	p := new(PlottedChannelType)
	*p = x
	return p
}

func (x PlottedChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlottedChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_panel_configurations_v1_panel_configuration_proto_enumTypes[1].Descriptor()
}

func (PlottedChannelType) Type() protoreflect.EnumType {
	return &file_sift_panel_configurations_v1_panel_configuration_proto_enumTypes[1]
}

func (x PlottedChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlottedChannelType.Descriptor instead.
func (PlottedChannelType) EnumDescriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{1}
}

type PanelConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelConfigurationId  string                   `protobuf:"bytes,1,opt,name=panel_configuration_id,json=panelConfigurationId,proto3" json:"panel_configuration_id,omitempty"`
	VersionId             string                   `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Version               uint32                   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ChangeMessage         string                   `protobuf:"bytes,4,opt,name=change_message,json=changeMessage,proto3" json:"change_message,omitempty"`
	Name                  string                   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PanelType             PanelType                `protobuf:"varint,6,opt,name=panel_type,json=panelType,proto3,enum=sift.panel_configurations.v1.PanelType" json:"panel_type,omitempty"`
	ChannelConfigurations []*ChannelConfigurations `protobuf:"bytes,7,rep,name=channel_configurations,json=channelConfigurations,proto3" json:"channel_configurations,omitempty"`
	ChartSettings         *structpb.Struct         `protobuf:"bytes,8,opt,name=chart_settings,json=chartSettings,proto3,oneof" json:"chart_settings,omitempty"`
	CreatedDate           *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate          *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	ArchivedDate          *timestamppb.Timestamp   `protobuf:"bytes,11,opt,name=archived_date,json=archivedDate,proto3" json:"archived_date,omitempty"`
	CreatedByUserId       string                   `protobuf:"bytes,12,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	ModifiedByUserId      string                   `protobuf:"bytes,13,opt,name=modified_by_user_id,json=modifiedByUserId,proto3" json:"modified_by_user_id,omitempty"`
	IsArchived            bool                     `protobuf:"varint,14,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
}

func (x *PanelConfiguration) Reset() {
	*x = PanelConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelConfiguration) ProtoMessage() {}

func (x *PanelConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelConfiguration.ProtoReflect.Descriptor instead.
func (*PanelConfiguration) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *PanelConfiguration) GetPanelConfigurationId() string {
	if x != nil {
		return x.PanelConfigurationId
	}
	return ""
}

func (x *PanelConfiguration) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PanelConfiguration) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PanelConfiguration) GetChangeMessage() string {
	if x != nil {
		return x.ChangeMessage
	}
	return ""
}

func (x *PanelConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PanelConfiguration) GetPanelType() PanelType {
	if x != nil {
		return x.PanelType
	}
	return PanelType_PANEL_TYPE_UNSPECIFIED
}

func (x *PanelConfiguration) GetChannelConfigurations() []*ChannelConfigurations {
	if x != nil {
		return x.ChannelConfigurations
	}
	return nil
}

func (x *PanelConfiguration) GetChartSettings() *structpb.Struct {
	if x != nil {
		return x.ChartSettings
	}
	return nil
}

func (x *PanelConfiguration) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *PanelConfiguration) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *PanelConfiguration) GetArchivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedDate
	}
	return nil
}

func (x *PanelConfiguration) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *PanelConfiguration) GetModifiedByUserId() string {
	if x != nil {
		return x.ModifiedByUserId
	}
	return ""
}

func (x *PanelConfiguration) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

type ChannelConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type            PlottedChannelType `protobuf:"varint,2,opt,name=type,proto3,enum=sift.panel_configurations.v1.PlottedChannelType" json:"type,omitempty"`
	Color           string             `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	ChannelSettings *structpb.Struct   `protobuf:"bytes,4,opt,name=channel_settings,json=channelSettings,proto3" json:"channel_settings,omitempty"`
	// bitfield
	BitFieldIndex   *int32                     `protobuf:"varint,5,opt,name=bit_field_index,json=bitFieldIndex,proto3,oneof" json:"bit_field_index,omitempty"`
	BitFieldElement *v1.ChannelBitFieldElement `protobuf:"bytes,6,opt,name=bit_field_element,json=bitFieldElement,proto3,oneof" json:"bit_field_element,omitempty"`
	// temporary calculated channel
	Expression                  *string                                         `protobuf:"bytes,7,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	ExpressionChannelReferences []*v2.CalculatedChannelAbstractChannelReference `protobuf:"bytes,8,rep,name=expression_channel_references,json=expressionChannelReferences,proto3" json:"expression_channel_references,omitempty"`
	DataType                    *v1.ChannelDataType                             `protobuf:"varint,9,opt,name=data_type,json=dataType,proto3,enum=sift.common.type.v1.ChannelDataType,oneof" json:"data_type,omitempty"`
}

func (x *ChannelConfigurations) Reset() {
	*x = ChannelConfigurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfigurations) ProtoMessage() {}

func (x *ChannelConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfigurations.ProtoReflect.Descriptor instead.
func (*ChannelConfigurations) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelConfigurations) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelConfigurations) GetType() PlottedChannelType {
	if x != nil {
		return x.Type
	}
	return PlottedChannelType_PLOTTED_CHANNEL_TYPE_UNSPECIFIED
}

func (x *ChannelConfigurations) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ChannelConfigurations) GetChannelSettings() *structpb.Struct {
	if x != nil {
		return x.ChannelSettings
	}
	return nil
}

func (x *ChannelConfigurations) GetBitFieldIndex() int32 {
	if x != nil && x.BitFieldIndex != nil {
		return *x.BitFieldIndex
	}
	return 0
}

func (x *ChannelConfigurations) GetBitFieldElement() *v1.ChannelBitFieldElement {
	if x != nil {
		return x.BitFieldElement
	}
	return nil
}

func (x *ChannelConfigurations) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *ChannelConfigurations) GetExpressionChannelReferences() []*v2.CalculatedChannelAbstractChannelReference {
	if x != nil {
		return x.ExpressionChannelReferences
	}
	return nil
}

func (x *ChannelConfigurations) GetDataType() v1.ChannelDataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return v1.ChannelDataType(0)
}

type GetPanelConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelConfigurationId string `protobuf:"bytes,1,opt,name=panel_configuration_id,json=panelConfigurationId,proto3" json:"panel_configuration_id,omitempty"`
}

func (x *GetPanelConfigurationRequest) Reset() {
	*x = GetPanelConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPanelConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPanelConfigurationRequest) ProtoMessage() {}

func (x *GetPanelConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPanelConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetPanelConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *GetPanelConfigurationRequest) GetPanelConfigurationId() string {
	if x != nil {
		return x.PanelConfigurationId
	}
	return ""
}

type GetPanelConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelConfiguration *PanelConfiguration `protobuf:"bytes,1,opt,name=panel_configuration,json=panelConfiguration,proto3" json:"panel_configuration,omitempty"`
}

func (x *GetPanelConfigurationResponse) Reset() {
	*x = GetPanelConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPanelConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPanelConfigurationResponse) ProtoMessage() {}

func (x *GetPanelConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPanelConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetPanelConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *GetPanelConfigurationResponse) GetPanelConfiguration() *PanelConfiguration {
	if x != nil {
		return x.PanelConfiguration
	}
	return nil
}

type ListPanelConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of panel configurations to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 panel configurations will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListPanelConfigurations` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListPanelConfigurations` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
	// Available fields to filter by are 'name', 'created_date', 'modified_date', and 'is_archived'.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// How to order the retrieved panel configurations. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `name`.
	// If left empty, items are ordered by `name` in ascending order (alphabetical).
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "name"
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListPanelConfigurationsRequest) Reset() {
	*x = ListPanelConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPanelConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPanelConfigurationsRequest) ProtoMessage() {}

func (x *ListPanelConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPanelConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*ListPanelConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *ListPanelConfigurationsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPanelConfigurationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPanelConfigurationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListPanelConfigurationsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListPanelConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelConfigurations []*PanelConfiguration `protobuf:"bytes,1,rep,name=panel_configurations,json=panelConfigurations,proto3" json:"panel_configurations,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPanelConfigurationsResponse) Reset() {
	*x = ListPanelConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPanelConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPanelConfigurationsResponse) ProtoMessage() {}

func (x *ListPanelConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPanelConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*ListPanelConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *ListPanelConfigurationsResponse) GetPanelConfigurations() []*PanelConfiguration {
	if x != nil {
		return x.PanelConfigurations
	}
	return nil
}

func (x *ListPanelConfigurationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreatePanelConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PanelType             PanelType                `protobuf:"varint,2,opt,name=panel_type,json=panelType,proto3,enum=sift.panel_configurations.v1.PanelType" json:"panel_type,omitempty"`
	ChannelConfigurations []*ChannelConfigurations `protobuf:"bytes,3,rep,name=channel_configurations,json=channelConfigurations,proto3" json:"channel_configurations,omitempty"`
	ChartSettings         *structpb.Struct         `protobuf:"bytes,4,opt,name=chart_settings,json=chartSettings,proto3,oneof" json:"chart_settings,omitempty"`
}

func (x *CreatePanelConfigurationRequest) Reset() {
	*x = CreatePanelConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePanelConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePanelConfigurationRequest) ProtoMessage() {}

func (x *CreatePanelConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePanelConfigurationRequest.ProtoReflect.Descriptor instead.
func (*CreatePanelConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePanelConfigurationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePanelConfigurationRequest) GetPanelType() PanelType {
	if x != nil {
		return x.PanelType
	}
	return PanelType_PANEL_TYPE_UNSPECIFIED
}

func (x *CreatePanelConfigurationRequest) GetChannelConfigurations() []*ChannelConfigurations {
	if x != nil {
		return x.ChannelConfigurations
	}
	return nil
}

func (x *CreatePanelConfigurationRequest) GetChartSettings() *structpb.Struct {
	if x != nil {
		return x.ChartSettings
	}
	return nil
}

type CreatePanelConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelConfiguration *PanelConfiguration `protobuf:"bytes,1,opt,name=panel_configuration,json=panelConfiguration,proto3" json:"panel_configuration,omitempty"`
}

func (x *CreatePanelConfigurationResponse) Reset() {
	*x = CreatePanelConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePanelConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePanelConfigurationResponse) ProtoMessage() {}

func (x *CreatePanelConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePanelConfigurationResponse.ProtoReflect.Descriptor instead.
func (*CreatePanelConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePanelConfigurationResponse) GetPanelConfiguration() *PanelConfiguration {
	if x != nil {
		return x.PanelConfiguration
	}
	return nil
}

// The request for a call to `PanelConfigurationService_UpdatePanelConfiguration` to update a panel configuration. Updating a panel
// configuration creates a new version of the panel configuration, leaving the previous untouched. If no update is deemed necessary, then the
// the current version is returned. Use `is_archived` to archive/unarchive a panel configuration.
type UpdatePanelConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The panel configuration to update.
	PanelConfiguration *PanelConfiguration `protobuf:"bytes,1,opt,name=panel_configuration,json=panelConfiguration,proto3" json:"panel_configuration,omitempty"`
	// The list of fields to be updated. The fields available to be updated are `name`, `panel_type`, `channel_configurations`,
	// `chart_settings`, and `is_archived`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdatePanelConfigurationRequest) Reset() {
	*x = UpdatePanelConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePanelConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePanelConfigurationRequest) ProtoMessage() {}

func (x *UpdatePanelConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePanelConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdatePanelConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePanelConfigurationRequest) GetPanelConfiguration() *PanelConfiguration {
	if x != nil {
		return x.PanelConfiguration
	}
	return nil
}

func (x *UpdatePanelConfigurationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdatePanelConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelConfiguration *PanelConfiguration `protobuf:"bytes,1,opt,name=panel_configuration,json=panelConfiguration,proto3" json:"panel_configuration,omitempty"`
}

func (x *UpdatePanelConfigurationResponse) Reset() {
	*x = UpdatePanelConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePanelConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePanelConfigurationResponse) ProtoMessage() {}

func (x *UpdatePanelConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePanelConfigurationResponse.ProtoReflect.Descriptor instead.
func (*UpdatePanelConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatePanelConfigurationResponse) GetPanelConfiguration() *PanelConfiguration {
	if x != nil {
		return x.PanelConfiguration
	}
	return nil
}

var File_sift_panel_configurations_v1_panel_configuration_proto protoreflect.FileDescriptor

var file_sift_panel_configurations_v1_panel_configuration_proto_rawDesc = []byte{
	0x0a, 0x36, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x73,
	0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x88, 0x06, 0x0a, 0x12, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xab, 0x05, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f,
	0x62, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x11, 0x62, 0x69, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x8a, 0x01, 0x0a,
	0x1d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0xae, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xd0, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x66, 0x0a, 0x13, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x13, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2a, 0xdb, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x16, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41,
	0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x46, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x5f, 0x50, 0x4c, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x4e,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x07, 0x2a,
	0xd8, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x20, 0x50, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x50, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x32, 0xfa, 0x09, 0x0a, 0x19, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x92, 0x41, 0x39,
	0x12, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x92, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7a, 0x92, 0x41, 0x53, 0x12, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x38, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xff, 0x01, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x92, 0x41, 0x3a, 0x12, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22,
	0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf1, 0x02,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x01, 0x92, 0x41, 0x7e, 0x12,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x60,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x60, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x32, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x1a, 0x44, 0x92, 0x41, 0x41, 0x12, 0x3f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0xc2, 0x02, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73,
	0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x1b, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x1b, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x27, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x53, 0x69, 0x66,
	0x74, 0x3a, 0x3a, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0x0a,
	0x1b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_panel_configurations_v1_panel_configuration_proto_rawDescOnce sync.Once
	file_sift_panel_configurations_v1_panel_configuration_proto_rawDescData = file_sift_panel_configurations_v1_panel_configuration_proto_rawDesc
)

func file_sift_panel_configurations_v1_panel_configuration_proto_rawDescGZIP() []byte {
	file_sift_panel_configurations_v1_panel_configuration_proto_rawDescOnce.Do(func() {
		file_sift_panel_configurations_v1_panel_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_panel_configurations_v1_panel_configuration_proto_rawDescData)
	})
	return file_sift_panel_configurations_v1_panel_configuration_proto_rawDescData
}

var file_sift_panel_configurations_v1_panel_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sift_panel_configurations_v1_panel_configuration_proto_goTypes = []interface{}{
	(PanelType)(0),                                       // 0: sift.panel_configurations.v1.PanelType
	(PlottedChannelType)(0),                              // 1: sift.panel_configurations.v1.PlottedChannelType
	(*PanelConfiguration)(nil),                           // 2: sift.panel_configurations.v1.PanelConfiguration
	(*ChannelConfigurations)(nil),                        // 3: sift.panel_configurations.v1.ChannelConfigurations
	(*GetPanelConfigurationRequest)(nil),                 // 4: sift.panel_configurations.v1.GetPanelConfigurationRequest
	(*GetPanelConfigurationResponse)(nil),                // 5: sift.panel_configurations.v1.GetPanelConfigurationResponse
	(*ListPanelConfigurationsRequest)(nil),               // 6: sift.panel_configurations.v1.ListPanelConfigurationsRequest
	(*ListPanelConfigurationsResponse)(nil),              // 7: sift.panel_configurations.v1.ListPanelConfigurationsResponse
	(*CreatePanelConfigurationRequest)(nil),              // 8: sift.panel_configurations.v1.CreatePanelConfigurationRequest
	(*CreatePanelConfigurationResponse)(nil),             // 9: sift.panel_configurations.v1.CreatePanelConfigurationResponse
	(*UpdatePanelConfigurationRequest)(nil),              // 10: sift.panel_configurations.v1.UpdatePanelConfigurationRequest
	(*UpdatePanelConfigurationResponse)(nil),             // 11: sift.panel_configurations.v1.UpdatePanelConfigurationResponse
	(*structpb.Struct)(nil),                              // 12: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                        // 13: google.protobuf.Timestamp
	(*v1.ChannelBitFieldElement)(nil),                    // 14: sift.common.type.v1.ChannelBitFieldElement
	(*v2.CalculatedChannelAbstractChannelReference)(nil), // 15: sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference
	(v1.ChannelDataType)(0),                              // 16: sift.common.type.v1.ChannelDataType
	(*fieldmaskpb.FieldMask)(nil),                        // 17: google.protobuf.FieldMask
}
var file_sift_panel_configurations_v1_panel_configuration_proto_depIdxs = []int32{
	0,  // 0: sift.panel_configurations.v1.PanelConfiguration.panel_type:type_name -> sift.panel_configurations.v1.PanelType
	3,  // 1: sift.panel_configurations.v1.PanelConfiguration.channel_configurations:type_name -> sift.panel_configurations.v1.ChannelConfigurations
	12, // 2: sift.panel_configurations.v1.PanelConfiguration.chart_settings:type_name -> google.protobuf.Struct
	13, // 3: sift.panel_configurations.v1.PanelConfiguration.created_date:type_name -> google.protobuf.Timestamp
	13, // 4: sift.panel_configurations.v1.PanelConfiguration.modified_date:type_name -> google.protobuf.Timestamp
	13, // 5: sift.panel_configurations.v1.PanelConfiguration.archived_date:type_name -> google.protobuf.Timestamp
	1,  // 6: sift.panel_configurations.v1.ChannelConfigurations.type:type_name -> sift.panel_configurations.v1.PlottedChannelType
	12, // 7: sift.panel_configurations.v1.ChannelConfigurations.channel_settings:type_name -> google.protobuf.Struct
	14, // 8: sift.panel_configurations.v1.ChannelConfigurations.bit_field_element:type_name -> sift.common.type.v1.ChannelBitFieldElement
	15, // 9: sift.panel_configurations.v1.ChannelConfigurations.expression_channel_references:type_name -> sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference
	16, // 10: sift.panel_configurations.v1.ChannelConfigurations.data_type:type_name -> sift.common.type.v1.ChannelDataType
	2,  // 11: sift.panel_configurations.v1.GetPanelConfigurationResponse.panel_configuration:type_name -> sift.panel_configurations.v1.PanelConfiguration
	2,  // 12: sift.panel_configurations.v1.ListPanelConfigurationsResponse.panel_configurations:type_name -> sift.panel_configurations.v1.PanelConfiguration
	0,  // 13: sift.panel_configurations.v1.CreatePanelConfigurationRequest.panel_type:type_name -> sift.panel_configurations.v1.PanelType
	3,  // 14: sift.panel_configurations.v1.CreatePanelConfigurationRequest.channel_configurations:type_name -> sift.panel_configurations.v1.ChannelConfigurations
	12, // 15: sift.panel_configurations.v1.CreatePanelConfigurationRequest.chart_settings:type_name -> google.protobuf.Struct
	2,  // 16: sift.panel_configurations.v1.CreatePanelConfigurationResponse.panel_configuration:type_name -> sift.panel_configurations.v1.PanelConfiguration
	2,  // 17: sift.panel_configurations.v1.UpdatePanelConfigurationRequest.panel_configuration:type_name -> sift.panel_configurations.v1.PanelConfiguration
	17, // 18: sift.panel_configurations.v1.UpdatePanelConfigurationRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 19: sift.panel_configurations.v1.UpdatePanelConfigurationResponse.panel_configuration:type_name -> sift.panel_configurations.v1.PanelConfiguration
	4,  // 20: sift.panel_configurations.v1.PanelConfigurationService.GetPanelConfiguration:input_type -> sift.panel_configurations.v1.GetPanelConfigurationRequest
	6,  // 21: sift.panel_configurations.v1.PanelConfigurationService.ListPanelConfigurations:input_type -> sift.panel_configurations.v1.ListPanelConfigurationsRequest
	8,  // 22: sift.panel_configurations.v1.PanelConfigurationService.CreatePanelConfiguration:input_type -> sift.panel_configurations.v1.CreatePanelConfigurationRequest
	10, // 23: sift.panel_configurations.v1.PanelConfigurationService.UpdatePanelConfiguration:input_type -> sift.panel_configurations.v1.UpdatePanelConfigurationRequest
	5,  // 24: sift.panel_configurations.v1.PanelConfigurationService.GetPanelConfiguration:output_type -> sift.panel_configurations.v1.GetPanelConfigurationResponse
	7,  // 25: sift.panel_configurations.v1.PanelConfigurationService.ListPanelConfigurations:output_type -> sift.panel_configurations.v1.ListPanelConfigurationsResponse
	9,  // 26: sift.panel_configurations.v1.PanelConfigurationService.CreatePanelConfiguration:output_type -> sift.panel_configurations.v1.CreatePanelConfigurationResponse
	11, // 27: sift.panel_configurations.v1.PanelConfigurationService.UpdatePanelConfiguration:output_type -> sift.panel_configurations.v1.UpdatePanelConfigurationResponse
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_sift_panel_configurations_v1_panel_configuration_proto_init() }
func file_sift_panel_configurations_v1_panel_configuration_proto_init() {
	if File_sift_panel_configurations_v1_panel_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PanelConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfigurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPanelConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPanelConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPanelConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPanelConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePanelConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePanelConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePanelConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePanelConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_panel_configurations_v1_panel_configuration_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_panel_configurations_v1_panel_configuration_proto_goTypes,
		DependencyIndexes: file_sift_panel_configurations_v1_panel_configuration_proto_depIdxs,
		EnumInfos:         file_sift_panel_configurations_v1_panel_configuration_proto_enumTypes,
		MessageInfos:      file_sift_panel_configurations_v1_panel_configuration_proto_msgTypes,
	}.Build()
	File_sift_panel_configurations_v1_panel_configuration_proto = out.File
	file_sift_panel_configurations_v1_panel_configuration_proto_rawDesc = nil
	file_sift_panel_configurations_v1_panel_configuration_proto_goTypes = nil
	file_sift_panel_configurations_v1_panel_configuration_proto_depIdxs = nil
}
