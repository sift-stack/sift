// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/data_imports/v2/data_imports.proto

package data_importsv2

import (
	_ "github.com/sift-stack/sift/go/gen/google/api"
	_ "github.com/sift-stack/sift/go/gen/protoc-gen-openapiv2/options"
	v1 "github.com/sift-stack/sift/go/gen/sift/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeFormat int32

const (
	TimeFormat_TIME_FORMAT_UNSPECIFIED                TimeFormat = 0
	TimeFormat_TIME_FORMAT_RELATIVE_NANOSECONDS       TimeFormat = 1
	TimeFormat_TIME_FORMAT_RELATIVE_MICROSECONDS      TimeFormat = 2
	TimeFormat_TIME_FORMAT_RELATIVE_MILLISECONDS      TimeFormat = 3
	TimeFormat_TIME_FORMAT_RELATIVE_SECONDS           TimeFormat = 4
	TimeFormat_TIME_FORMAT_RELATIVE_MINUTES           TimeFormat = 5
	TimeFormat_TIME_FORMAT_RELATIVE_HOURS             TimeFormat = 6
	TimeFormat_TIME_FORMAT_ABSOLUTE_RFC3339           TimeFormat = 10
	TimeFormat_TIME_FORMAT_ABSOLUTE_DATETIME          TimeFormat = 11
	TimeFormat_TIME_FORMAT_ABSOLUTE_UNIX_SECONDS      TimeFormat = 12
	TimeFormat_TIME_FORMAT_ABSOLUTE_UNIX_MILLISECONDS TimeFormat = 13
	TimeFormat_TIME_FORMAT_ABSOLUTE_UNIX_MICROSECONDS TimeFormat = 14
	TimeFormat_TIME_FORMAT_ABSOLUTE_UNIX_NANOSECONDS  TimeFormat = 15
)

// Enum value maps for TimeFormat.
var (
	TimeFormat_name = map[int32]string{
		0:  "TIME_FORMAT_UNSPECIFIED",
		1:  "TIME_FORMAT_RELATIVE_NANOSECONDS",
		2:  "TIME_FORMAT_RELATIVE_MICROSECONDS",
		3:  "TIME_FORMAT_RELATIVE_MILLISECONDS",
		4:  "TIME_FORMAT_RELATIVE_SECONDS",
		5:  "TIME_FORMAT_RELATIVE_MINUTES",
		6:  "TIME_FORMAT_RELATIVE_HOURS",
		10: "TIME_FORMAT_ABSOLUTE_RFC3339",
		11: "TIME_FORMAT_ABSOLUTE_DATETIME",
		12: "TIME_FORMAT_ABSOLUTE_UNIX_SECONDS",
		13: "TIME_FORMAT_ABSOLUTE_UNIX_MILLISECONDS",
		14: "TIME_FORMAT_ABSOLUTE_UNIX_MICROSECONDS",
		15: "TIME_FORMAT_ABSOLUTE_UNIX_NANOSECONDS",
	}
	TimeFormat_value = map[string]int32{
		"TIME_FORMAT_UNSPECIFIED":                0,
		"TIME_FORMAT_RELATIVE_NANOSECONDS":       1,
		"TIME_FORMAT_RELATIVE_MICROSECONDS":      2,
		"TIME_FORMAT_RELATIVE_MILLISECONDS":      3,
		"TIME_FORMAT_RELATIVE_SECONDS":           4,
		"TIME_FORMAT_RELATIVE_MINUTES":           5,
		"TIME_FORMAT_RELATIVE_HOURS":             6,
		"TIME_FORMAT_ABSOLUTE_RFC3339":           10,
		"TIME_FORMAT_ABSOLUTE_DATETIME":          11,
		"TIME_FORMAT_ABSOLUTE_UNIX_SECONDS":      12,
		"TIME_FORMAT_ABSOLUTE_UNIX_MILLISECONDS": 13,
		"TIME_FORMAT_ABSOLUTE_UNIX_MICROSECONDS": 14,
		"TIME_FORMAT_ABSOLUTE_UNIX_NANOSECONDS":  15,
	}
)

func (x TimeFormat) Enum() *TimeFormat {
	p := new(TimeFormat)
	*p = x
	return p
}

func (x TimeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_data_imports_v2_data_imports_proto_enumTypes[0].Descriptor()
}

func (TimeFormat) Type() protoreflect.EnumType {
	return &file_sift_data_imports_v2_data_imports_proto_enumTypes[0]
}

func (x TimeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeFormat.Descriptor instead.
func (TimeFormat) EnumDescriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{0}
}

type DataTypeKey int32

const (
	// Deprecated: Do not use.
	DataTypeKey_DATA_TYPE_KEY_UNSPECIFIED         DataTypeKey = 0
	DataTypeKey_DATA_TYPE_KEY_CSV                 DataTypeKey = 1
	DataTypeKey_DATA_TYPE_KEY_TDMS                DataTypeKey = 2
	DataTypeKey_DATA_TYPE_KEY_CH10                DataTypeKey = 3
	DataTypeKey_DATA_TYPE_KEY_PARQUET_FLATDATASET DataTypeKey = 4
)

// Enum value maps for DataTypeKey.
var (
	DataTypeKey_name = map[int32]string{
		0: "DATA_TYPE_KEY_UNSPECIFIED",
		1: "DATA_TYPE_KEY_CSV",
		2: "DATA_TYPE_KEY_TDMS",
		3: "DATA_TYPE_KEY_CH10",
		4: "DATA_TYPE_KEY_PARQUET_FLATDATASET",
	}
	DataTypeKey_value = map[string]int32{
		"DATA_TYPE_KEY_UNSPECIFIED":         0,
		"DATA_TYPE_KEY_CSV":                 1,
		"DATA_TYPE_KEY_TDMS":                2,
		"DATA_TYPE_KEY_CH10":                3,
		"DATA_TYPE_KEY_PARQUET_FLATDATASET": 4,
	}
)

func (x DataTypeKey) Enum() *DataTypeKey {
	p := new(DataTypeKey)
	*p = x
	return p
}

func (x DataTypeKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypeKey) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_data_imports_v2_data_imports_proto_enumTypes[1].Descriptor()
}

func (DataTypeKey) Type() protoreflect.EnumType {
	return &file_sift_data_imports_v2_data_imports_proto_enumTypes[1]
}

func (x DataTypeKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypeKey.Descriptor instead.
func (DataTypeKey) EnumDescriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{1}
}

type ParquetComplexTypesImportMode int32

const (
	// Deprecated: Do not use.
	ParquetComplexTypesImportMode_PARQUET_COMPLEX_TYPES_IMPORT_MODE_UNSPECIFIED ParquetComplexTypesImportMode = 0
	// Ignore complex types and do not ingest them.
	ParquetComplexTypesImportMode_PARQUET_COMPLEX_TYPES_IMPORT_MODE_IGNORE ParquetComplexTypesImportMode = 1
	// Import complex types as both Arrow bytes and JSON strings.
	ParquetComplexTypesImportMode_PARQUET_COMPLEX_TYPES_IMPORT_MODE_BOTH ParquetComplexTypesImportMode = 2
	// Import complex types as only JSON strings.
	ParquetComplexTypesImportMode_PARQUET_COMPLEX_TYPES_IMPORT_MODE_STRING ParquetComplexTypesImportMode = 3
	// Import complex types as only Arrow bytes.
	ParquetComplexTypesImportMode_PARQUET_COMPLEX_TYPES_IMPORT_MODE_BYTES ParquetComplexTypesImportMode = 4
)

// Enum value maps for ParquetComplexTypesImportMode.
var (
	ParquetComplexTypesImportMode_name = map[int32]string{
		0: "PARQUET_COMPLEX_TYPES_IMPORT_MODE_UNSPECIFIED",
		1: "PARQUET_COMPLEX_TYPES_IMPORT_MODE_IGNORE",
		2: "PARQUET_COMPLEX_TYPES_IMPORT_MODE_BOTH",
		3: "PARQUET_COMPLEX_TYPES_IMPORT_MODE_STRING",
		4: "PARQUET_COMPLEX_TYPES_IMPORT_MODE_BYTES",
	}
	ParquetComplexTypesImportMode_value = map[string]int32{
		"PARQUET_COMPLEX_TYPES_IMPORT_MODE_UNSPECIFIED": 0,
		"PARQUET_COMPLEX_TYPES_IMPORT_MODE_IGNORE":      1,
		"PARQUET_COMPLEX_TYPES_IMPORT_MODE_BOTH":        2,
		"PARQUET_COMPLEX_TYPES_IMPORT_MODE_STRING":      3,
		"PARQUET_COMPLEX_TYPES_IMPORT_MODE_BYTES":       4,
	}
)

func (x ParquetComplexTypesImportMode) Enum() *ParquetComplexTypesImportMode {
	p := new(ParquetComplexTypesImportMode)
	*p = x
	return p
}

func (x ParquetComplexTypesImportMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParquetComplexTypesImportMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_data_imports_v2_data_imports_proto_enumTypes[2].Descriptor()
}

func (ParquetComplexTypesImportMode) Type() protoreflect.EnumType {
	return &file_sift_data_imports_v2_data_imports_proto_enumTypes[2]
}

func (x ParquetComplexTypesImportMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParquetComplexTypesImportMode.Descriptor instead.
func (ParquetComplexTypesImportMode) EnumDescriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{2}
}

type DataImportStatus int32

const (
	// Deprecated: Do not use.
	DataImportStatus_DATA_IMPORT_STATUS_UNSPECIFIED DataImportStatus = 0
	DataImportStatus_DATA_IMPORT_STATUS_PENDING     DataImportStatus = 1
	DataImportStatus_DATA_IMPORT_STATUS_IN_PROGRESS DataImportStatus = 2
	DataImportStatus_DATA_IMPORT_STATUS_SUCCEEDED   DataImportStatus = 3
	DataImportStatus_DATA_IMPORT_STATUS_FAILED      DataImportStatus = 4
)

// Enum value maps for DataImportStatus.
var (
	DataImportStatus_name = map[int32]string{
		0: "DATA_IMPORT_STATUS_UNSPECIFIED",
		1: "DATA_IMPORT_STATUS_PENDING",
		2: "DATA_IMPORT_STATUS_IN_PROGRESS",
		3: "DATA_IMPORT_STATUS_SUCCEEDED",
		4: "DATA_IMPORT_STATUS_FAILED",
	}
	DataImportStatus_value = map[string]int32{
		"DATA_IMPORT_STATUS_UNSPECIFIED": 0,
		"DATA_IMPORT_STATUS_PENDING":     1,
		"DATA_IMPORT_STATUS_IN_PROGRESS": 2,
		"DATA_IMPORT_STATUS_SUCCEEDED":   3,
		"DATA_IMPORT_STATUS_FAILED":      4,
	}
)

func (x DataImportStatus) Enum() *DataImportStatus {
	p := new(DataImportStatus)
	*p = x
	return p
}

func (x DataImportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataImportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_data_imports_v2_data_imports_proto_enumTypes[3].Descriptor()
}

func (DataImportStatus) Type() protoreflect.EnumType {
	return &file_sift_data_imports_v2_data_imports_proto_enumTypes[3]
}

func (x DataImportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataImportStatus.Descriptor instead.
func (DataImportStatus) EnumDescriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{3}
}

type CreateDataImportFromUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The url to import. HTTP and S3 urls are supported.
	// If you need to import non-public S3 objects, please contact Sift to set that up.
	Url           string         `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CsvConfig     *CsvConfig     `protobuf:"bytes,2,opt,name=csv_config,json=csvConfig,proto3" json:"csv_config,omitempty"`
	Ch10Config    *Ch10Config    `protobuf:"bytes,3,opt,name=ch10_config,json=ch10Config,proto3" json:"ch10_config,omitempty"`
	TdmsConfig    *TDMSConfig    `protobuf:"bytes,4,opt,name=tdms_config,json=tdmsConfig,proto3" json:"tdms_config,omitempty"`
	ParquetConfig *ParquetConfig `protobuf:"bytes,5,opt,name=parquet_config,json=parquetConfig,proto3" json:"parquet_config,omitempty"`
}

func (x *CreateDataImportFromUrlRequest) Reset() {
	*x = CreateDataImportFromUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataImportFromUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataImportFromUrlRequest) ProtoMessage() {}

func (x *CreateDataImportFromUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataImportFromUrlRequest.ProtoReflect.Descriptor instead.
func (*CreateDataImportFromUrlRequest) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDataImportFromUrlRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateDataImportFromUrlRequest) GetCsvConfig() *CsvConfig {
	if x != nil {
		return x.CsvConfig
	}
	return nil
}

func (x *CreateDataImportFromUrlRequest) GetCh10Config() *Ch10Config {
	if x != nil {
		return x.Ch10Config
	}
	return nil
}

func (x *CreateDataImportFromUrlRequest) GetTdmsConfig() *TDMSConfig {
	if x != nil {
		return x.TdmsConfig
	}
	return nil
}

func (x *CreateDataImportFromUrlRequest) GetParquetConfig() *ParquetConfig {
	if x != nil {
		return x.ParquetConfig
	}
	return nil
}

type CreateDataImportFromUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataImportId string `protobuf:"bytes,1,opt,name=data_import_id,json=dataImportId,proto3" json:"data_import_id,omitempty"`
}

func (x *CreateDataImportFromUrlResponse) Reset() {
	*x = CreateDataImportFromUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataImportFromUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataImportFromUrlResponse) ProtoMessage() {}

func (x *CreateDataImportFromUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataImportFromUrlResponse.ProtoReflect.Descriptor instead.
func (*CreateDataImportFromUrlResponse) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDataImportFromUrlResponse) GetDataImportId() string {
	if x != nil {
		return x.DataImportId
	}
	return ""
}

type GetDataImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataImportId string `protobuf:"bytes,1,opt,name=data_import_id,json=dataImportId,proto3" json:"data_import_id,omitempty"`
}

func (x *GetDataImportRequest) Reset() {
	*x = GetDataImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataImportRequest) ProtoMessage() {}

func (x *GetDataImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataImportRequest.ProtoReflect.Descriptor instead.
func (*GetDataImportRequest) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{2}
}

func (x *GetDataImportRequest) GetDataImportId() string {
	if x != nil {
		return x.DataImportId
	}
	return ""
}

type GetDataImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataImport *DataImport `protobuf:"bytes,1,opt,name=data_import,json=dataImport,proto3" json:"data_import,omitempty"`
}

func (x *GetDataImportResponse) Reset() {
	*x = GetDataImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataImportResponse) ProtoMessage() {}

func (x *GetDataImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataImportResponse.ProtoReflect.Descriptor instead.
func (*GetDataImportResponse) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{3}
}

func (x *GetDataImportResponse) GetDataImport() *DataImport {
	if x != nil {
		return x.DataImport
	}
	return nil
}

type CreateDataImportFromUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsvConfig     *CsvConfig     `protobuf:"bytes,1,opt,name=csv_config,json=csvConfig,proto3" json:"csv_config,omitempty"`
	Ch10Config    *Ch10Config    `protobuf:"bytes,3,opt,name=ch10_config,json=ch10Config,proto3" json:"ch10_config,omitempty"`
	TdmsConfig    *TDMSConfig    `protobuf:"bytes,4,opt,name=tdms_config,json=tdmsConfig,proto3" json:"tdms_config,omitempty"`
	ParquetConfig *ParquetConfig `protobuf:"bytes,5,opt,name=parquet_config,json=parquetConfig,proto3" json:"parquet_config,omitempty"`
}

func (x *CreateDataImportFromUploadRequest) Reset() {
	*x = CreateDataImportFromUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataImportFromUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataImportFromUploadRequest) ProtoMessage() {}

func (x *CreateDataImportFromUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataImportFromUploadRequest.ProtoReflect.Descriptor instead.
func (*CreateDataImportFromUploadRequest) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDataImportFromUploadRequest) GetCsvConfig() *CsvConfig {
	if x != nil {
		return x.CsvConfig
	}
	return nil
}

func (x *CreateDataImportFromUploadRequest) GetCh10Config() *Ch10Config {
	if x != nil {
		return x.Ch10Config
	}
	return nil
}

func (x *CreateDataImportFromUploadRequest) GetTdmsConfig() *TDMSConfig {
	if x != nil {
		return x.TdmsConfig
	}
	return nil
}

func (x *CreateDataImportFromUploadRequest) GetParquetConfig() *ParquetConfig {
	if x != nil {
		return x.ParquetConfig
	}
	return nil
}

type CreateDataImportFromUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadUrl    string `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	DataImportId string `protobuf:"bytes,2,opt,name=data_import_id,json=dataImportId,proto3" json:"data_import_id,omitempty"`
}

func (x *CreateDataImportFromUploadResponse) Reset() {
	*x = CreateDataImportFromUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataImportFromUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataImportFromUploadResponse) ProtoMessage() {}

func (x *CreateDataImportFromUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataImportFromUploadResponse.ProtoReflect.Descriptor instead.
func (*CreateDataImportFromUploadResponse) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDataImportFromUploadResponse) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *CreateDataImportFromUploadResponse) GetDataImportId() string {
	if x != nil {
		return x.DataImportId
	}
	return ""
}

type CsvConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	RunName   string `protobuf:"bytes,2,opt,name=run_name,json=runName,proto3" json:"run_name,omitempty"`
	// The id of the run to add this data to. If set, `run_name` is ignored.
	RunId string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The first row to start reading as data. Can be used to skip header rows.
	// The first row in the file is 1.
	FirstDataRow uint32         `protobuf:"varint,4,opt,name=first_data_row,json=firstDataRow,proto3" json:"first_data_row,omitempty"`
	TimeColumn   *CsvTimeColumn `protobuf:"bytes,5,opt,name=time_column,json=timeColumn,proto3,oneof" json:"time_column,omitempty"`
	// A map from column number (1-indexed) to the channel configuration for that column.
	DataColumns map[uint32]*v1.ChannelConfig `protobuf:"bytes,6,rep,name=data_columns,json=dataColumns,proto3" json:"data_columns,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This will be read on upload from the file if not set.
	NumRows *uint64 `protobuf:"varint,7,opt,name=num_rows,json=numRows,proto3,oneof" json:"num_rows,omitempty"`
}

func (x *CsvConfig) Reset() {
	*x = CsvConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvConfig) ProtoMessage() {}

func (x *CsvConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvConfig.ProtoReflect.Descriptor instead.
func (*CsvConfig) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{6}
}

func (x *CsvConfig) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *CsvConfig) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *CsvConfig) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *CsvConfig) GetFirstDataRow() uint32 {
	if x != nil {
		return x.FirstDataRow
	}
	return 0
}

func (x *CsvConfig) GetTimeColumn() *CsvTimeColumn {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

func (x *CsvConfig) GetDataColumns() map[uint32]*v1.ChannelConfig {
	if x != nil {
		return x.DataColumns
	}
	return nil
}

func (x *CsvConfig) GetNumRows() uint64 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

type CsvTimeColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column number (1-indexed) of the time column.
	ColumnNumber      uint32                 `protobuf:"varint,1,opt,name=column_number,json=columnNumber,proto3" json:"column_number,omitempty"`
	Format            TimeFormat             `protobuf:"varint,2,opt,name=format,proto3,enum=sift.data_imports.v2.TimeFormat" json:"format,omitempty"`
	RelativeStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=relative_start_time,json=relativeStartTime,proto3,oneof" json:"relative_start_time,omitempty"`
}

func (x *CsvTimeColumn) Reset() {
	*x = CsvTimeColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvTimeColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvTimeColumn) ProtoMessage() {}

func (x *CsvTimeColumn) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvTimeColumn.ProtoReflect.Descriptor instead.
func (*CsvTimeColumn) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{7}
}

func (x *CsvTimeColumn) GetColumnNumber() uint32 {
	if x != nil {
		return x.ColumnNumber
	}
	return 0
}

func (x *CsvTimeColumn) GetFormat() TimeFormat {
	if x != nil {
		return x.Format
	}
	return TimeFormat_TIME_FORMAT_UNSPECIFIED
}

func (x *CsvTimeColumn) GetRelativeStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RelativeStartTime
	}
	return nil
}

type DetectConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type DataTypeKey `protobuf:"varint,2,opt,name=type,proto3,enum=sift.data_imports.v2.DataTypeKey" json:"type,omitempty"`
}

func (x *DetectConfigRequest) Reset() {
	*x = DetectConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectConfigRequest) ProtoMessage() {}

func (x *DetectConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectConfigRequest.ProtoReflect.Descriptor instead.
func (*DetectConfigRequest) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{8}
}

func (x *DetectConfigRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DetectConfigRequest) GetType() DataTypeKey {
	if x != nil {
		return x.Type
	}
	return DataTypeKey_DATA_TYPE_KEY_UNSPECIFIED
}

type DetectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsvConfig     *CsvConfig     `protobuf:"bytes,1,opt,name=csv_config,json=csvConfig,proto3" json:"csv_config,omitempty"`
	ParquetConfig *ParquetConfig `protobuf:"bytes,2,opt,name=parquet_config,json=parquetConfig,proto3" json:"parquet_config,omitempty"`
}

func (x *DetectConfigResponse) Reset() {
	*x = DetectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectConfigResponse) ProtoMessage() {}

func (x *DetectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectConfigResponse.ProtoReflect.Descriptor instead.
func (*DetectConfigResponse) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{9}
}

func (x *DetectConfigResponse) GetCsvConfig() *CsvConfig {
	if x != nil {
		return x.CsvConfig
	}
	return nil
}

func (x *DetectConfigResponse) GetParquetConfig() *ParquetConfig {
	if x != nil {
		return x.ParquetConfig
	}
	return nil
}

type Ch10Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName   string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	RunName     string `protobuf:"bytes,2,opt,name=run_name,json=runName,proto3" json:"run_name,omitempty"`
	ScaleValues bool   `protobuf:"varint,3,opt,name=scale_values,json=scaleValues,proto3" json:"scale_values,omitempty"`
}

func (x *Ch10Config) Reset() {
	*x = Ch10Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ch10Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ch10Config) ProtoMessage() {}

func (x *Ch10Config) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ch10Config.ProtoReflect.Descriptor instead.
func (*Ch10Config) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{10}
}

func (x *Ch10Config) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *Ch10Config) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *Ch10Config) GetScaleValues() bool {
	if x != nil {
		return x.ScaleValues
	}
	return false
}

type TDMSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	RunName   string `protobuf:"bytes,2,opt,name=run_name,json=runName,proto3" json:"run_name,omitempty"`
	// Override the wf_start_time metadata field for all channels.
	// Useful if your waveform channels have wf_increment but no wf_start_time (Veristand is guilty of this).
	StartTimeOverride *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time_override,json=startTimeOverride,proto3" json:"start_time_override,omitempty"`
	// The file size in bytes.
	// If the file has truncated chunks, this will be required to pass validation.
	FileSize *uint64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
}

func (x *TDMSConfig) Reset() {
	*x = TDMSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDMSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDMSConfig) ProtoMessage() {}

func (x *TDMSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDMSConfig.ProtoReflect.Descriptor instead.
func (*TDMSConfig) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{11}
}

func (x *TDMSConfig) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TDMSConfig) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *TDMSConfig) GetStartTimeOverride() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeOverride
	}
	return nil
}

func (x *TDMSConfig) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type ParquetTimeColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Format            TimeFormat             `protobuf:"varint,2,opt,name=format,proto3,enum=sift.data_imports.v2.TimeFormat" json:"format,omitempty"`
	RelativeStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=relative_start_time,json=relativeStartTime,proto3,oneof" json:"relative_start_time,omitempty"`
}

func (x *ParquetTimeColumn) Reset() {
	*x = ParquetTimeColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetTimeColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetTimeColumn) ProtoMessage() {}

func (x *ParquetTimeColumn) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetTimeColumn.ProtoReflect.Descriptor instead.
func (*ParquetTimeColumn) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{12}
}

func (x *ParquetTimeColumn) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParquetTimeColumn) GetFormat() TimeFormat {
	if x != nil {
		return x.Format
	}
	return TimeFormat_TIME_FORMAT_UNSPECIFIED
}

func (x *ParquetTimeColumn) GetRelativeStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RelativeStartTime
	}
	return nil
}

type ParquetDataColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path          string            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ChannelConfig *v1.ChannelConfig `protobuf:"bytes,2,opt,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty"`
}

func (x *ParquetDataColumn) Reset() {
	*x = ParquetDataColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetDataColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetDataColumn) ProtoMessage() {}

func (x *ParquetDataColumn) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetDataColumn.ProtoReflect.Descriptor instead.
func (*ParquetDataColumn) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{13}
}

func (x *ParquetDataColumn) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParquetDataColumn) GetChannelConfig() *v1.ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

type ParquetFlatDatasetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeColumn  *ParquetTimeColumn   `protobuf:"bytes,1,opt,name=time_column,json=timeColumn,proto3" json:"time_column,omitempty"`
	DataColumns []*ParquetDataColumn `protobuf:"bytes,2,rep,name=data_columns,json=dataColumns,proto3" json:"data_columns,omitempty"`
}

func (x *ParquetFlatDatasetConfig) Reset() {
	*x = ParquetFlatDatasetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetFlatDatasetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetFlatDatasetConfig) ProtoMessage() {}

func (x *ParquetFlatDatasetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetFlatDatasetConfig.ProtoReflect.Descriptor instead.
func (*ParquetFlatDatasetConfig) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{14}
}

func (x *ParquetFlatDatasetConfig) GetTimeColumn() *ParquetTimeColumn {
	if x != nil {
		return x.TimeColumn
	}
	return nil
}

func (x *ParquetFlatDatasetConfig) GetDataColumns() []*ParquetDataColumn {
	if x != nil {
		return x.DataColumns
	}
	return nil
}

type ParquetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName string `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	RunName   string `protobuf:"bytes,2,opt,name=run_name,json=runName,proto3" json:"run_name,omitempty"`
	// The id of the run to add this data to. If set, `run_name` is ignored.
	RunId string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Types that are assignable to Config:
	//
	//	*ParquetConfig_FlatDataset
	Config                 isParquetConfig_Config        `protobuf_oneof:"config"`
	FooterOffset           uint64                        `protobuf:"varint,5,opt,name=footer_offset,json=footerOffset,proto3" json:"footer_offset,omitempty"`
	FooterLength           uint32                        `protobuf:"varint,6,opt,name=footer_length,json=footerLength,proto3" json:"footer_length,omitempty"`
	ComplexTypesImportMode ParquetComplexTypesImportMode `protobuf:"varint,7,opt,name=complex_types_import_mode,json=complexTypesImportMode,proto3,enum=sift.data_imports.v2.ParquetComplexTypesImportMode" json:"complex_types_import_mode,omitempty"`
}

func (x *ParquetConfig) Reset() {
	*x = ParquetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetConfig) ProtoMessage() {}

func (x *ParquetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetConfig.ProtoReflect.Descriptor instead.
func (*ParquetConfig) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{15}
}

func (x *ParquetConfig) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *ParquetConfig) GetRunName() string {
	if x != nil {
		return x.RunName
	}
	return ""
}

func (x *ParquetConfig) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (m *ParquetConfig) GetConfig() isParquetConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ParquetConfig) GetFlatDataset() *ParquetFlatDatasetConfig {
	if x, ok := x.GetConfig().(*ParquetConfig_FlatDataset); ok {
		return x.FlatDataset
	}
	return nil
}

func (x *ParquetConfig) GetFooterOffset() uint64 {
	if x != nil {
		return x.FooterOffset
	}
	return 0
}

func (x *ParquetConfig) GetFooterLength() uint32 {
	if x != nil {
		return x.FooterLength
	}
	return 0
}

func (x *ParquetConfig) GetComplexTypesImportMode() ParquetComplexTypesImportMode {
	if x != nil {
		return x.ComplexTypesImportMode
	}
	return ParquetComplexTypesImportMode_PARQUET_COMPLEX_TYPES_IMPORT_MODE_UNSPECIFIED
}

type isParquetConfig_Config interface {
	isParquetConfig_Config()
}

type ParquetConfig_FlatDataset struct {
	FlatDataset *ParquetFlatDatasetConfig `protobuf:"bytes,4,opt,name=flat_dataset,json=flatDataset,proto3,oneof"`
}

func (*ParquetConfig_FlatDataset) isParquetConfig_Config() {}

type DataImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataImportId  string                 `protobuf:"bytes,1,opt,name=data_import_id,json=dataImportId,proto3" json:"data_import_id,omitempty"`
	SourceUrl     string                 `protobuf:"bytes,3,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Status        DataImportStatus       `protobuf:"varint,4,opt,name=status,proto3,enum=sift.data_imports.v2.DataImportStatus" json:"status,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CreatedDate   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	CsvConfig     *CsvConfig             `protobuf:"bytes,6,opt,name=csv_config,json=csvConfig,proto3" json:"csv_config,omitempty"`
	Ch10Config    *Ch10Config            `protobuf:"bytes,9,opt,name=ch10_config,json=ch10Config,proto3" json:"ch10_config,omitempty"`
	TdmsConfig    *TDMSConfig            `protobuf:"bytes,10,opt,name=tdms_config,json=tdmsConfig,proto3" json:"tdms_config,omitempty"`
	ParquetConfig *ParquetConfig         `protobuf:"bytes,16,opt,name=parquet_config,json=parquetConfig,proto3" json:"parquet_config,omitempty"`
	// The run id will be set if the data import ingests to a run once the run is available.
	RunId *string `protobuf:"bytes,11,opt,name=run_id,json=runId,proto3,oneof" json:"run_id,omitempty"`
	// The report id will be set if the data import creates a report once the report is available.
	ReportId      *string                `protobuf:"bytes,12,opt,name=report_id,json=reportId,proto3,oneof" json:"report_id,omitempty"`
	AssetId       *string                `protobuf:"bytes,13,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	DataStartTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=data_start_time,json=dataStartTime,proto3,oneof" json:"data_start_time,omitempty"`
	DataStopTime  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=data_stop_time,json=dataStopTime,proto3,oneof" json:"data_stop_time,omitempty"`
}

func (x *DataImport) Reset() {
	*x = DataImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataImport) ProtoMessage() {}

func (x *DataImport) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataImport.ProtoReflect.Descriptor instead.
func (*DataImport) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{16}
}

func (x *DataImport) GetDataImportId() string {
	if x != nil {
		return x.DataImportId
	}
	return ""
}

func (x *DataImport) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *DataImport) GetStatus() DataImportStatus {
	if x != nil {
		return x.Status
	}
	return DataImportStatus_DATA_IMPORT_STATUS_UNSPECIFIED
}

func (x *DataImport) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DataImport) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *DataImport) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *DataImport) GetCsvConfig() *CsvConfig {
	if x != nil {
		return x.CsvConfig
	}
	return nil
}

func (x *DataImport) GetCh10Config() *Ch10Config {
	if x != nil {
		return x.Ch10Config
	}
	return nil
}

func (x *DataImport) GetTdmsConfig() *TDMSConfig {
	if x != nil {
		return x.TdmsConfig
	}
	return nil
}

func (x *DataImport) GetParquetConfig() *ParquetConfig {
	if x != nil {
		return x.ParquetConfig
	}
	return nil
}

func (x *DataImport) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *DataImport) GetReportId() string {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return ""
}

func (x *DataImport) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *DataImport) GetDataStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataStartTime
	}
	return nil
}

func (x *DataImport) GetDataStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataStopTime
	}
	return nil
}

type ListDataImportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of data imports to return. The service may return fewer than this value.
	// If unspecified, at most 50 data imports will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDataImports` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListDataImports` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `data_import_id`, `source_url`, `status`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// How to order the retrieved data imports. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `created_date` and `modified_date`.
	// If left empty, items are ordered by `created_date` in ascending order (oldest-first).
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "created_date desc,modified_date"
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDataImportsRequest) Reset() {
	*x = ListDataImportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataImportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataImportsRequest) ProtoMessage() {}

func (x *ListDataImportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataImportsRequest.ProtoReflect.Descriptor instead.
func (*ListDataImportsRequest) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{17}
}

func (x *ListDataImportsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDataImportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDataImportsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDataImportsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDataImportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataImports   []*DataImport `protobuf:"bytes,1,rep,name=data_imports,json=dataImports,proto3" json:"data_imports,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDataImportsResponse) Reset() {
	*x = ListDataImportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataImportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataImportsResponse) ProtoMessage() {}

func (x *ListDataImportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataImportsResponse.ProtoReflect.Descriptor instead.
func (*ListDataImportsResponse) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{18}
}

func (x *ListDataImportsResponse) GetDataImports() []*DataImport {
	if x != nil {
		return x.DataImports
	}
	return nil
}

func (x *ListDataImportsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type RetryDataImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data_import_id is the id of the data import to retry.
	// You can only retry an import that is a "url" based import (created with CreateDataImportFromUrl) and is in a failed state.
	DataImportId string `protobuf:"bytes,1,opt,name=data_import_id,json=dataImportId,proto3" json:"data_import_id,omitempty"`
}

func (x *RetryDataImportRequest) Reset() {
	*x = RetryDataImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryDataImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryDataImportRequest) ProtoMessage() {}

func (x *RetryDataImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryDataImportRequest.ProtoReflect.Descriptor instead.
func (*RetryDataImportRequest) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{19}
}

func (x *RetryDataImportRequest) GetDataImportId() string {
	if x != nil {
		return x.DataImportId
	}
	return ""
}

type RetryDataImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RetryDataImportResponse) Reset() {
	*x = RetryDataImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryDataImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryDataImportResponse) ProtoMessage() {}

func (x *RetryDataImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_data_imports_v2_data_imports_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryDataImportResponse.ProtoReflect.Descriptor instead.
func (*RetryDataImportResponse) Descriptor() ([]byte, []int) {
	return file_sift_data_imports_v2_data_imports_proto_rawDescGZIP(), []int{20}
}

var File_sift_data_imports_v2_data_imports_proto protoreflect.FileDescriptor

var file_sift_data_imports_v2_data_imports_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x02, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63,
	0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x68, 0x31, 0x30,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x31, 0x30, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x31, 0x30, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x46, 0x0a, 0x0b, 0x74, 0x64, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x44, 0x4d,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x74, 0x64,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x22, 0x41, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xc9, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x73, 0x76, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x63, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b,
	0x63, 0x68, 0x31, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x31, 0x30, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x31, 0x30, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x64, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x44, 0x4d, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x74, 0x64, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x69, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xc8, 0x03, 0x0a, 0x09, 0x43, 0x73, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x12, 0x49, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x73, 0x76, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x88,
	0x01, 0x01, 0x1a, 0x62, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x43, 0x73, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x60, 0x0a,
	0x13, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x73, 0x76, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x63,
	0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x69, 0x0a, 0x0a, 0x43, 0x68, 0x31, 0x30, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xc2, 0x01, 0x0a, 0x0a, 0x54, 0x44, 0x4d, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x72, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4a, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x66,
	0x6c, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6e, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xc4, 0x07, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x73, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x73, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x68, 0x31, 0x30, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x31, 0x30, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x31, 0x30, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46,
	0x0a, 0x0b, 0x74, 0x64, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x44, 0x4d, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x74, 0x64, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x43, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0xf0, 0x03, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x53, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x53, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x52,
	0x46, 0x43, 0x33, 0x33, 0x33, 0x39, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c,
	0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f,
	0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x0d, 0x12, 0x2a,
	0x0a, 0x26, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x42,
	0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x53, 0x10, 0x0f, 0x2a, 0x9e, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x54, 0x44, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x48, 0x31, 0x30, 0x10, 0x03, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x8b, 0x02, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x71, 0x75,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x2d, 0x50, 0x41, 0x52, 0x51,
	0x55, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x2c, 0x0a, 0x28, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x41, 0x52,
	0x51, 0x55, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x41, 0x52, 0x51, 0x55,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x04, 0x2a, 0xbf, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x1e, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0x92, 0x0c, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x02, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x92, 0x41, 0x69, 0x12, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x55, 0x72, 0x6c, 0x1a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x61, 0x20, 0x75, 0x72, 0x6c, 0x2e, 0x2a, 0x2b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x72, 0x6c, 0x56, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x3a, 0x75, 0x72, 0x6c, 0x12, 0xb2, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x92, 0x41, 0x77, 0x12,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x29, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x2a, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x56, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xef, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x92, 0x41, 0x57, 0x12, 0x0c, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x25, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x2a,
	0x20, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x3a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xde,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x92, 0x41, 0x4f, 0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x2a, 0x23,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x56, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0xf5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x84, 0x01, 0x92, 0x41, 0x4e, 0x12, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x2a,
	0x23, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0xe1, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x77, 0x92, 0x41, 0x47, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x13, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x2a, 0x21, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0xfb, 0x01, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x10, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x73, 0x69, 0x66, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x76, 0x32, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x44, 0x58, 0xaa, 0x02, 0x13, 0x53, 0x69, 0x66, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x32, 0xca,
	0x02, 0x13, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1f, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x92,
	0x41, 0x17, 0x12, 0x15, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sift_data_imports_v2_data_imports_proto_rawDescOnce sync.Once
	file_sift_data_imports_v2_data_imports_proto_rawDescData = file_sift_data_imports_v2_data_imports_proto_rawDesc
)

func file_sift_data_imports_v2_data_imports_proto_rawDescGZIP() []byte {
	file_sift_data_imports_v2_data_imports_proto_rawDescOnce.Do(func() {
		file_sift_data_imports_v2_data_imports_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_data_imports_v2_data_imports_proto_rawDescData)
	})
	return file_sift_data_imports_v2_data_imports_proto_rawDescData
}

var file_sift_data_imports_v2_data_imports_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sift_data_imports_v2_data_imports_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_sift_data_imports_v2_data_imports_proto_goTypes = []interface{}{
	(TimeFormat)(0),                            // 0: sift.data_imports.v2.TimeFormat
	(DataTypeKey)(0),                           // 1: sift.data_imports.v2.DataTypeKey
	(ParquetComplexTypesImportMode)(0),         // 2: sift.data_imports.v2.ParquetComplexTypesImportMode
	(DataImportStatus)(0),                      // 3: sift.data_imports.v2.DataImportStatus
	(*CreateDataImportFromUrlRequest)(nil),     // 4: sift.data_imports.v2.CreateDataImportFromUrlRequest
	(*CreateDataImportFromUrlResponse)(nil),    // 5: sift.data_imports.v2.CreateDataImportFromUrlResponse
	(*GetDataImportRequest)(nil),               // 6: sift.data_imports.v2.GetDataImportRequest
	(*GetDataImportResponse)(nil),              // 7: sift.data_imports.v2.GetDataImportResponse
	(*CreateDataImportFromUploadRequest)(nil),  // 8: sift.data_imports.v2.CreateDataImportFromUploadRequest
	(*CreateDataImportFromUploadResponse)(nil), // 9: sift.data_imports.v2.CreateDataImportFromUploadResponse
	(*CsvConfig)(nil),                          // 10: sift.data_imports.v2.CsvConfig
	(*CsvTimeColumn)(nil),                      // 11: sift.data_imports.v2.CsvTimeColumn
	(*DetectConfigRequest)(nil),                // 12: sift.data_imports.v2.DetectConfigRequest
	(*DetectConfigResponse)(nil),               // 13: sift.data_imports.v2.DetectConfigResponse
	(*Ch10Config)(nil),                         // 14: sift.data_imports.v2.Ch10Config
	(*TDMSConfig)(nil),                         // 15: sift.data_imports.v2.TDMSConfig
	(*ParquetTimeColumn)(nil),                  // 16: sift.data_imports.v2.ParquetTimeColumn
	(*ParquetDataColumn)(nil),                  // 17: sift.data_imports.v2.ParquetDataColumn
	(*ParquetFlatDatasetConfig)(nil),           // 18: sift.data_imports.v2.ParquetFlatDatasetConfig
	(*ParquetConfig)(nil),                      // 19: sift.data_imports.v2.ParquetConfig
	(*DataImport)(nil),                         // 20: sift.data_imports.v2.DataImport
	(*ListDataImportsRequest)(nil),             // 21: sift.data_imports.v2.ListDataImportsRequest
	(*ListDataImportsResponse)(nil),            // 22: sift.data_imports.v2.ListDataImportsResponse
	(*RetryDataImportRequest)(nil),             // 23: sift.data_imports.v2.RetryDataImportRequest
	(*RetryDataImportResponse)(nil),            // 24: sift.data_imports.v2.RetryDataImportResponse
	nil,                                        // 25: sift.data_imports.v2.CsvConfig.DataColumnsEntry
	(*timestamppb.Timestamp)(nil),              // 26: google.protobuf.Timestamp
	(*v1.ChannelConfig)(nil),                   // 27: sift.common.type.v1.ChannelConfig
}
var file_sift_data_imports_v2_data_imports_proto_depIdxs = []int32{
	10, // 0: sift.data_imports.v2.CreateDataImportFromUrlRequest.csv_config:type_name -> sift.data_imports.v2.CsvConfig
	14, // 1: sift.data_imports.v2.CreateDataImportFromUrlRequest.ch10_config:type_name -> sift.data_imports.v2.Ch10Config
	15, // 2: sift.data_imports.v2.CreateDataImportFromUrlRequest.tdms_config:type_name -> sift.data_imports.v2.TDMSConfig
	19, // 3: sift.data_imports.v2.CreateDataImportFromUrlRequest.parquet_config:type_name -> sift.data_imports.v2.ParquetConfig
	20, // 4: sift.data_imports.v2.GetDataImportResponse.data_import:type_name -> sift.data_imports.v2.DataImport
	10, // 5: sift.data_imports.v2.CreateDataImportFromUploadRequest.csv_config:type_name -> sift.data_imports.v2.CsvConfig
	14, // 6: sift.data_imports.v2.CreateDataImportFromUploadRequest.ch10_config:type_name -> sift.data_imports.v2.Ch10Config
	15, // 7: sift.data_imports.v2.CreateDataImportFromUploadRequest.tdms_config:type_name -> sift.data_imports.v2.TDMSConfig
	19, // 8: sift.data_imports.v2.CreateDataImportFromUploadRequest.parquet_config:type_name -> sift.data_imports.v2.ParquetConfig
	11, // 9: sift.data_imports.v2.CsvConfig.time_column:type_name -> sift.data_imports.v2.CsvTimeColumn
	25, // 10: sift.data_imports.v2.CsvConfig.data_columns:type_name -> sift.data_imports.v2.CsvConfig.DataColumnsEntry
	0,  // 11: sift.data_imports.v2.CsvTimeColumn.format:type_name -> sift.data_imports.v2.TimeFormat
	26, // 12: sift.data_imports.v2.CsvTimeColumn.relative_start_time:type_name -> google.protobuf.Timestamp
	1,  // 13: sift.data_imports.v2.DetectConfigRequest.type:type_name -> sift.data_imports.v2.DataTypeKey
	10, // 14: sift.data_imports.v2.DetectConfigResponse.csv_config:type_name -> sift.data_imports.v2.CsvConfig
	19, // 15: sift.data_imports.v2.DetectConfigResponse.parquet_config:type_name -> sift.data_imports.v2.ParquetConfig
	26, // 16: sift.data_imports.v2.TDMSConfig.start_time_override:type_name -> google.protobuf.Timestamp
	0,  // 17: sift.data_imports.v2.ParquetTimeColumn.format:type_name -> sift.data_imports.v2.TimeFormat
	26, // 18: sift.data_imports.v2.ParquetTimeColumn.relative_start_time:type_name -> google.protobuf.Timestamp
	27, // 19: sift.data_imports.v2.ParquetDataColumn.channel_config:type_name -> sift.common.type.v1.ChannelConfig
	16, // 20: sift.data_imports.v2.ParquetFlatDatasetConfig.time_column:type_name -> sift.data_imports.v2.ParquetTimeColumn
	17, // 21: sift.data_imports.v2.ParquetFlatDatasetConfig.data_columns:type_name -> sift.data_imports.v2.ParquetDataColumn
	18, // 22: sift.data_imports.v2.ParquetConfig.flat_dataset:type_name -> sift.data_imports.v2.ParquetFlatDatasetConfig
	2,  // 23: sift.data_imports.v2.ParquetConfig.complex_types_import_mode:type_name -> sift.data_imports.v2.ParquetComplexTypesImportMode
	3,  // 24: sift.data_imports.v2.DataImport.status:type_name -> sift.data_imports.v2.DataImportStatus
	26, // 25: sift.data_imports.v2.DataImport.created_date:type_name -> google.protobuf.Timestamp
	26, // 26: sift.data_imports.v2.DataImport.modified_date:type_name -> google.protobuf.Timestamp
	10, // 27: sift.data_imports.v2.DataImport.csv_config:type_name -> sift.data_imports.v2.CsvConfig
	14, // 28: sift.data_imports.v2.DataImport.ch10_config:type_name -> sift.data_imports.v2.Ch10Config
	15, // 29: sift.data_imports.v2.DataImport.tdms_config:type_name -> sift.data_imports.v2.TDMSConfig
	19, // 30: sift.data_imports.v2.DataImport.parquet_config:type_name -> sift.data_imports.v2.ParquetConfig
	26, // 31: sift.data_imports.v2.DataImport.data_start_time:type_name -> google.protobuf.Timestamp
	26, // 32: sift.data_imports.v2.DataImport.data_stop_time:type_name -> google.protobuf.Timestamp
	20, // 33: sift.data_imports.v2.ListDataImportsResponse.data_imports:type_name -> sift.data_imports.v2.DataImport
	27, // 34: sift.data_imports.v2.CsvConfig.DataColumnsEntry.value:type_name -> sift.common.type.v1.ChannelConfig
	4,  // 35: sift.data_imports.v2.DataImportService.CreateDataImportFromUrl:input_type -> sift.data_imports.v2.CreateDataImportFromUrlRequest
	8,  // 36: sift.data_imports.v2.DataImportService.CreateDataImportFromUpload:input_type -> sift.data_imports.v2.CreateDataImportFromUploadRequest
	12, // 37: sift.data_imports.v2.DataImportService.DetectConfig:input_type -> sift.data_imports.v2.DetectConfigRequest
	21, // 38: sift.data_imports.v2.DataImportService.ListDataImports:input_type -> sift.data_imports.v2.ListDataImportsRequest
	23, // 39: sift.data_imports.v2.DataImportService.RetryDataImport:input_type -> sift.data_imports.v2.RetryDataImportRequest
	6,  // 40: sift.data_imports.v2.DataImportService.GetDataImport:input_type -> sift.data_imports.v2.GetDataImportRequest
	5,  // 41: sift.data_imports.v2.DataImportService.CreateDataImportFromUrl:output_type -> sift.data_imports.v2.CreateDataImportFromUrlResponse
	9,  // 42: sift.data_imports.v2.DataImportService.CreateDataImportFromUpload:output_type -> sift.data_imports.v2.CreateDataImportFromUploadResponse
	13, // 43: sift.data_imports.v2.DataImportService.DetectConfig:output_type -> sift.data_imports.v2.DetectConfigResponse
	22, // 44: sift.data_imports.v2.DataImportService.ListDataImports:output_type -> sift.data_imports.v2.ListDataImportsResponse
	24, // 45: sift.data_imports.v2.DataImportService.RetryDataImport:output_type -> sift.data_imports.v2.RetryDataImportResponse
	7,  // 46: sift.data_imports.v2.DataImportService.GetDataImport:output_type -> sift.data_imports.v2.GetDataImportResponse
	41, // [41:47] is the sub-list for method output_type
	35, // [35:41] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sift_data_imports_v2_data_imports_proto_init() }
func file_sift_data_imports_v2_data_imports_proto_init() {
	if File_sift_data_imports_v2_data_imports_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_data_imports_v2_data_imports_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataImportFromUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataImportFromUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataImportFromUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataImportFromUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvTimeColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ch10Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDMSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetTimeColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetDataColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetFlatDatasetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataImportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataImportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryDataImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_data_imports_v2_data_imports_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryDataImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_data_imports_v2_data_imports_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_sift_data_imports_v2_data_imports_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_sift_data_imports_v2_data_imports_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_sift_data_imports_v2_data_imports_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_sift_data_imports_v2_data_imports_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ParquetConfig_FlatDataset)(nil),
	}
	file_sift_data_imports_v2_data_imports_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_data_imports_v2_data_imports_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_data_imports_v2_data_imports_proto_goTypes,
		DependencyIndexes: file_sift_data_imports_v2_data_imports_proto_depIdxs,
		EnumInfos:         file_sift_data_imports_v2_data_imports_proto_enumTypes,
		MessageInfos:      file_sift_data_imports_v2_data_imports_proto_msgTypes,
	}.Build()
	File_sift_data_imports_v2_data_imports_proto = out.File
	file_sift_data_imports_v2_data_imports_proto_rawDesc = nil
	file_sift_data_imports_v2_data_imports_proto_goTypes = nil
	file_sift_data_imports_v2_data_imports_proto_depIdxs = nil
}
