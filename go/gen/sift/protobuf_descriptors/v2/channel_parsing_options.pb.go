//*
// These are message and field options that can be used when ingesting protobuf messages. These can be applied to protobuf fields
// and messages before compiling and uploading the descriptor set.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/protobuf_descriptors/v2/channel_parsing_options.proto

package protobuf_descriptorsv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for different types of tag sources
type TagSourceType int32

const (
	TagSourceType_DESCENDANT_SOURCES             TagSourceType = 0 // Tags can be sourced from descendant fields
	TagSourceType_SIBLING_SOURCES                TagSourceType = 1 // Tags can be sourced from sibling fields
	TagSourceType_DESCENDANT_AND_SIBLING_SOURCES TagSourceType = 2 // Tags can be sourced from both descendant and sibling fields
)

// Enum value maps for TagSourceType.
var (
	TagSourceType_name = map[int32]string{
		0: "DESCENDANT_SOURCES",
		1: "SIBLING_SOURCES",
		2: "DESCENDANT_AND_SIBLING_SOURCES",
	}
	TagSourceType_value = map[string]int32{
		"DESCENDANT_SOURCES":             0,
		"SIBLING_SOURCES":                1,
		"DESCENDANT_AND_SIBLING_SOURCES": 2,
	}
)

func (x TagSourceType) Enum() *TagSourceType {
	p := new(TagSourceType)
	*p = x
	return p
}

func (x TagSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[0].Descriptor()
}

func (TagSourceType) Type() protoreflect.EnumType {
	return &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[0]
}

func (x TagSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagSourceType.Descriptor instead.
func (TagSourceType) EnumDescriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{0}
}

// Enum for different types of tag targets
type TagTargetType int32

const (
	TagTargetType_ANCESTOR_TARGETS             TagTargetType = 0 // Tags can be applied to ancestor fields
	TagTargetType_SIBLING_TARGETS              TagTargetType = 1 // Tags can be applied to sibling fields
	TagTargetType_ANCESTOR_AND_SIBLING_TARGETS TagTargetType = 2 // Tags can be applied to both ancestor and sibling fields
)

// Enum value maps for TagTargetType.
var (
	TagTargetType_name = map[int32]string{
		0: "ANCESTOR_TARGETS",
		1: "SIBLING_TARGETS",
		2: "ANCESTOR_AND_SIBLING_TARGETS",
	}
	TagTargetType_value = map[string]int32{
		"ANCESTOR_TARGETS":             0,
		"SIBLING_TARGETS":              1,
		"ANCESTOR_AND_SIBLING_TARGETS": 2,
	}
)

func (x TagTargetType) Enum() *TagTargetType {
	p := new(TagTargetType)
	*p = x
	return p
}

func (x TagTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[1].Descriptor()
}

func (TagTargetType) Type() protoreflect.EnumType {
	return &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[1]
}

func (x TagTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagTargetType.Descriptor instead.
func (TagTargetType) EnumDescriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{1}
}

// Enum for the source and destination of a map key override
type MapKeyOverrideType int32

const (
	MapKeyOverrideType_MAP_KEY_OVERRIDE_UNSPECIFIED MapKeyOverrideType = 0 // Default value, will be ignored
	MapKeyOverrideType_MAP_KEY_OVERRIDE_TARGET      MapKeyOverrideType = 1 // Map key will be replaced on fields with this type specified
	MapKeyOverrideType_MAP_KEY_OVERRIDE_SOURCE      MapKeyOverrideType = 2 // Map key will be sourced from fields with this type specified
	MapKeyOverrideType_MAP_KEY_OVERRIDE_REMOVE_KEY  MapKeyOverrideType = 3 // Map key will be removed from fields with this type specified
	MapKeyOverrideType_MAP_KEY_OVERRIDE_ENUM        MapKeyOverrideType = 4 // Map key will be replaced with the enum name specified by the display_override_enum value on the field
)

// Enum value maps for MapKeyOverrideType.
var (
	MapKeyOverrideType_name = map[int32]string{
		0: "MAP_KEY_OVERRIDE_UNSPECIFIED",
		1: "MAP_KEY_OVERRIDE_TARGET",
		2: "MAP_KEY_OVERRIDE_SOURCE",
		3: "MAP_KEY_OVERRIDE_REMOVE_KEY",
		4: "MAP_KEY_OVERRIDE_ENUM",
	}
	MapKeyOverrideType_value = map[string]int32{
		"MAP_KEY_OVERRIDE_UNSPECIFIED": 0,
		"MAP_KEY_OVERRIDE_TARGET":      1,
		"MAP_KEY_OVERRIDE_SOURCE":      2,
		"MAP_KEY_OVERRIDE_REMOVE_KEY":  3,
		"MAP_KEY_OVERRIDE_ENUM":        4,
	}
)

func (x MapKeyOverrideType) Enum() *MapKeyOverrideType {
	p := new(MapKeyOverrideType)
	*p = x
	return p
}

func (x MapKeyOverrideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapKeyOverrideType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[2].Descriptor()
}

func (MapKeyOverrideType) Type() protoreflect.EnumType {
	return &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[2]
}

func (x MapKeyOverrideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapKeyOverrideType.Descriptor instead.
func (MapKeyOverrideType) EnumDescriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{2}
}

// Enum for the source and destination of an array index override
type ArrayIndexOverrideType int32

const (
	ArrayIndexOverrideType_ARRAY_INDEX_OVERRIDE_UNSPECIFIED  ArrayIndexOverrideType = 0 // Default value, will be ignored
	ArrayIndexOverrideType_ARRAY_INDEX_OVERRIDE_TARGET       ArrayIndexOverrideType = 1 // Array Index will be replaced on fields with this type specified
	ArrayIndexOverrideType_ARRAY_INDEX_OVERRIDE_SOURCE       ArrayIndexOverrideType = 2 // Array Index  will be sourced from fields with this type specified
	ArrayIndexOverrideType_ARRAY_INDEX_OVERRIDE_REMOVE_INDEX ArrayIndexOverrideType = 3 // Array Index will be removed from fields with this type specified
	ArrayIndexOverrideType_ARRAY_INDEX_OVERRIDE_ENUM         ArrayIndexOverrideType = 4 // Array Index will be replaced with the enum name specified by the display_override_enum value on the field
)

// Enum value maps for ArrayIndexOverrideType.
var (
	ArrayIndexOverrideType_name = map[int32]string{
		0: "ARRAY_INDEX_OVERRIDE_UNSPECIFIED",
		1: "ARRAY_INDEX_OVERRIDE_TARGET",
		2: "ARRAY_INDEX_OVERRIDE_SOURCE",
		3: "ARRAY_INDEX_OVERRIDE_REMOVE_INDEX",
		4: "ARRAY_INDEX_OVERRIDE_ENUM",
	}
	ArrayIndexOverrideType_value = map[string]int32{
		"ARRAY_INDEX_OVERRIDE_UNSPECIFIED":  0,
		"ARRAY_INDEX_OVERRIDE_TARGET":       1,
		"ARRAY_INDEX_OVERRIDE_SOURCE":       2,
		"ARRAY_INDEX_OVERRIDE_REMOVE_INDEX": 3,
		"ARRAY_INDEX_OVERRIDE_ENUM":         4,
	}
)

func (x ArrayIndexOverrideType) Enum() *ArrayIndexOverrideType {
	p := new(ArrayIndexOverrideType)
	*p = x
	return p
}

func (x ArrayIndexOverrideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArrayIndexOverrideType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[3].Descriptor()
}

func (ArrayIndexOverrideType) Type() protoreflect.EnumType {
	return &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[3]
}

func (x ArrayIndexOverrideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArrayIndexOverrideType.Descriptor instead.
func (ArrayIndexOverrideType) EnumDescriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{3}
}

// Enum for how to decode bytes fields
type BytesDecodingType int32

const (
	BytesDecodingType_BYTES_DECODING_TYPE_UNSPECIFIED BytesDecodingType = 0 // Default value, will be ignored
	BytesDecodingType_BYTES_DECODING_TYPE_UTF8        BytesDecodingType = 1 // Decode bytes as UTF-8
)

// Enum value maps for BytesDecodingType.
var (
	BytesDecodingType_name = map[int32]string{
		0: "BYTES_DECODING_TYPE_UNSPECIFIED",
		1: "BYTES_DECODING_TYPE_UTF8",
	}
	BytesDecodingType_value = map[string]int32{
		"BYTES_DECODING_TYPE_UNSPECIFIED": 0,
		"BYTES_DECODING_TYPE_UTF8":        1,
	}
)

func (x BytesDecodingType) Enum() *BytesDecodingType {
	p := new(BytesDecodingType)
	*p = x
	return p
}

func (x BytesDecodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BytesDecodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[4].Descriptor()
}

func (BytesDecodingType) Type() protoreflect.EnumType {
	return &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes[4]
}

func (x BytesDecodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BytesDecodingType.Descriptor instead.
func (BytesDecodingType) EnumDescriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{4}
}

// Message representing a tag target
type TagTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting this value indicates the allowed sources for tag values.
	// If set to SIBLING_SOURCES, tag_sources from descendant proto fields will not be applied.
	// If set to DESCENDANT_SOURCES, sibling tag_sources will not be applied.
	AllowedTagSource *TagSourceType `protobuf:"varint,1,opt,name=allowed_tag_source,json=allowedTagSource,proto3,enum=sift.protobuf_descriptors.v2.TagSourceType,oneof" json:"allowed_tag_source,omitempty"`
}

func (x *TagTarget) Reset() {
	*x = TagTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTarget) ProtoMessage() {}

func (x *TagTarget) ProtoReflect() protoreflect.Message {
	mi := &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagTarget.ProtoReflect.Descriptor instead.
func (*TagTarget) Descriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{0}
}

func (x *TagTarget) GetAllowedTagSource() TagSourceType {
	if x != nil && x.AllowedTagSource != nil {
		return *x.AllowedTagSource
	}
	return TagSourceType_DESCENDANT_SOURCES
}

// Message representing a tag source
type TagSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates which tag_target relationships are allowed to have this tag.
	// If set to ANCESTOR_TARGETS, sibling tag_targets will not have this value.
	// If set to SIBLING_TARGETS, it will not apply to tag_targets that are ancestors.
	AllowedTagTarget *TagTargetType `protobuf:"varint,1,opt,name=allowed_tag_target,json=allowedTagTarget,proto3,enum=sift.protobuf_descriptors.v2.TagTargetType,oneof" json:"allowed_tag_target,omitempty"`
	// The name of the tag. It defaults to the field name but can be overridden here.
	TagName *string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3,oneof" json:"tag_name,omitempty"`
}

func (x *TagSource) Reset() {
	*x = TagSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSource) ProtoMessage() {}

func (x *TagSource) ProtoReflect() protoreflect.Message {
	mi := &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSource.ProtoReflect.Descriptor instead.
func (*TagSource) Descriptor() ([]byte, []int) {
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP(), []int{1}
}

func (x *TagSource) GetAllowedTagTarget() TagTargetType {
	if x != nil && x.AllowedTagTarget != nil {
		return *x.AllowedTagTarget
	}
	return TagTargetType_ANCESTOR_TARGETS
}

func (x *TagSource) GetTagName() string {
	if x != nil && x.TagName != nil {
		return *x.TagName
	}
	return ""
}

var file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50001,
		Name:          "sift.protobuf_descriptors.v2.units",
		Tag:           "bytes,50001,opt,name=units",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50002,
		Name:          "sift.protobuf_descriptors.v2.description",
		Tag:           "bytes,50002,opt,name=description",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*TagTarget)(nil),
		Field:         50003,
		Name:          "sift.protobuf_descriptors.v2.tag_target",
		Tag:           "bytes,50003,opt,name=tag_target",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*TagSource)(nil),
		Field:         50004,
		Name:          "sift.protobuf_descriptors.v2.tag_source",
		Tag:           "bytes,50004,opt,name=tag_source",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*MapKeyOverrideType)(nil),
		Field:         50005,
		Name:          "sift.protobuf_descriptors.v2.map_key_override_type",
		Tag:           "varint,50005,opt,name=map_key_override_type,enum=sift.protobuf_descriptors.v2.MapKeyOverrideType",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*BytesDecodingType)(nil),
		Field:         50006,
		Name:          "sift.protobuf_descriptors.v2.bytes_decoding_type",
		Tag:           "varint,50006,opt,name=bytes_decoding_type,enum=sift.protobuf_descriptors.v2.BytesDecodingType",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50007,
		Name:          "sift.protobuf_descriptors.v2.ignore_field",
		Tag:           "varint,50007,opt,name=ignore_field",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50008,
		Name:          "sift.protobuf_descriptors.v2.display_override_enum",
		Tag:           "bytes,50008,opt,name=display_override_enum",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ArrayIndexOverrideType)(nil),
		Field:         50009,
		Name:          "sift.protobuf_descriptors.v2.array_index_override_type",
		Tag:           "varint,50009,opt,name=array_index_override_type,enum=sift.protobuf_descriptors.v2.ArrayIndexOverrideType",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50001,
		Name:          "sift.protobuf_descriptors.v2.message_is_tag_target",
		Tag:           "varint,50001,opt,name=message_is_tag_target",
		Filename:      "sift/protobuf_descriptors/v2/channel_parsing_options.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// Adding the units FieldOption to a field sets the units displayed on the channel when charted
	//
	// optional string units = 50001;
	E_Units = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[0]
	// Adding the description FieldOption to a field sets the description for the channel in the chart
	//
	// optional string description = 50002;
	E_Description = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[1]
	// Adding the tag_target FieldOption indicates that this field can have tag values appended
	// to the field name. The tag values will come from descendant or sibling fields in the proto path
	// that have the tag_source FieldOption applied.
	//
	// optional sift.protobuf_descriptors.v2.TagTarget tag_target = 50003;
	E_TagTarget = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[2]
	// Adding the tag_source FieldOption allows the value of the annotated field to be added to
	// applicable fields that are annotated with tag_target. These fields can be either ancestor fields
	// or sibling fields, depending on their respective fields' allowed_tag_source and allowed_tag_target values.
	//
	// optional sift.protobuf_descriptors.v2.TagSource tag_source = 50004;
	E_TagSource = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[3]
	// Adding the map_key_override_type FieldOption to a map type field with the `MAP_KEY_OVERRIDE_TARGET`
	// type indicates that this field can have the map key replaced in the display name by a descendant field.
	// Adding this to a primitive type field with the `MAP_KEY_OVERRIDE_SOURCE` indicates that this field
	// is the replacement value for an ancestor map's key display. Note that sources within arrays will not apply to
	// ancestor maps that contain those arrays. This tag will be ignored if the field is not a map or if there
	// are no map_key_override_sources that apply. If multiple apply then the first override will be applied and an
	// error will be logged.
	//
	// optional sift.protobuf_descriptors.v2.MapKeyOverrideType map_key_override_type = 50005;
	E_MapKeyOverrideType = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[4]
	// Adding the bytes_decoding_type FieldOption to a bytes field indicates how the bytes should be decoded
	// If not set, the bytes fields will be ignored and an error will be logged.
	//
	// optional sift.protobuf_descriptors.v2.BytesDecodingType bytes_decoding_type = 50006;
	E_BytesDecodingType = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[5]
	// Adding the ignore_field FieldOption with a value of true will cause the field to be ignored when ingesting the proto
	//
	// optional bool ignore_field = 50007;
	E_IgnoreField = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[6]
	// Adding the display_override_enum FieldOption to a field with that has map_key_override_type set to MAP_KEY_OVERRIDE_ENUM
	// will look up the enum value in the enum referenced by this field and use that to look up the enum value by number and replace it
	// with the enum value name.
	//
	// optional string display_override_enum = 50008;
	E_DisplayOverrideEnum = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[7]
	// Adding the array_index_override_type FieldOption to a repeated type field with the `ARRAY_INDEX_OVERRIDE_TARGET`
	// type indicates that this field can have the array index replaced in the display name by a descendant field.
	// Adding this to a primitive type field with the `ARRAY_INDEX_OVERRIDE_SOURCE` type indicates that this field
	// is the replacement value for an ancestor array's index display. Note that sources within nested arrays will not apply to
	// ancestor arrays that contain those arrays. This tag will be ignored if the field is not an array or if there
	// are no `ARRAY_INDEX_OVERRIDE_SOURCE` fields that apply. If multiple apply then the first override will be applied and an
	// error will be logged.
	//
	// optional sift.protobuf_descriptors.v2.ArrayIndexOverrideType array_index_override_type = 50009;
	E_ArrayIndexOverrideType = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[8]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// The message_is_tag_target option indicates that the message will allow its fields to have tags
	// added to them. This option only accepts descendant sources.
	// It can be helpful to annotate top-level messages with tags from deeper in the proto path.
	//
	// optional bool message_is_tag_target = 50001;
	E_MessageIsTagTarget = &file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes[9]
)

var File_sift_protobuf_descriptors_v2_channel_parsing_options_proto protoreflect.FileDescriptor

var file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x5e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x60, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x41,
	0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x5c, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x53, 0x10, 0x02, 0x2a, 0xac, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x41, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x50,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x50, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x50, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x10, 0x04, 0x2a, 0xc6, 0x01, 0x0a, 0x16, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x49, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x2a, 0x56, 0x0a, 0x11, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x44,
	0x45, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x54, 0x46,
	0x38, 0x10, 0x01, 0x3a, 0x38, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x44, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x3a, 0x6a, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xd3, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x09, 0x74, 0x61, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x3a,
	0x6a, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd4, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x87, 0x01, 0x0a, 0x15,
	0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd5, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x83, 0x01, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd6, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x45, 0x0a, 0x0c, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd7, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x3a, 0x56, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd8, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x3a, 0x93, 0x01, 0x0a, 0x19, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd9, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x3a, 0x57, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x73, 0x54, 0x61, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0xa3, 0x02, 0x0a, 0x20, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x1a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x73, 0x69, 0x66, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x1b, 0x53, 0x69, 0x66, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x1b, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x27, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1d, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescOnce sync.Once
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescData = file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDesc
)

func file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescGZIP() []byte {
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescOnce.Do(func() {
		file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescData)
	})
	return file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDescData
}

var file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_goTypes = []interface{}{
	(TagSourceType)(0),                  // 0: sift.protobuf_descriptors.v2.TagSourceType
	(TagTargetType)(0),                  // 1: sift.protobuf_descriptors.v2.TagTargetType
	(MapKeyOverrideType)(0),             // 2: sift.protobuf_descriptors.v2.MapKeyOverrideType
	(ArrayIndexOverrideType)(0),         // 3: sift.protobuf_descriptors.v2.ArrayIndexOverrideType
	(BytesDecodingType)(0),              // 4: sift.protobuf_descriptors.v2.BytesDecodingType
	(*TagTarget)(nil),                   // 5: sift.protobuf_descriptors.v2.TagTarget
	(*TagSource)(nil),                   // 6: sift.protobuf_descriptors.v2.TagSource
	(*descriptorpb.FieldOptions)(nil),   // 7: google.protobuf.FieldOptions
	(*descriptorpb.MessageOptions)(nil), // 8: google.protobuf.MessageOptions
}
var file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_depIdxs = []int32{
	0,  // 0: sift.protobuf_descriptors.v2.TagTarget.allowed_tag_source:type_name -> sift.protobuf_descriptors.v2.TagSourceType
	1,  // 1: sift.protobuf_descriptors.v2.TagSource.allowed_tag_target:type_name -> sift.protobuf_descriptors.v2.TagTargetType
	7,  // 2: sift.protobuf_descriptors.v2.units:extendee -> google.protobuf.FieldOptions
	7,  // 3: sift.protobuf_descriptors.v2.description:extendee -> google.protobuf.FieldOptions
	7,  // 4: sift.protobuf_descriptors.v2.tag_target:extendee -> google.protobuf.FieldOptions
	7,  // 5: sift.protobuf_descriptors.v2.tag_source:extendee -> google.protobuf.FieldOptions
	7,  // 6: sift.protobuf_descriptors.v2.map_key_override_type:extendee -> google.protobuf.FieldOptions
	7,  // 7: sift.protobuf_descriptors.v2.bytes_decoding_type:extendee -> google.protobuf.FieldOptions
	7,  // 8: sift.protobuf_descriptors.v2.ignore_field:extendee -> google.protobuf.FieldOptions
	7,  // 9: sift.protobuf_descriptors.v2.display_override_enum:extendee -> google.protobuf.FieldOptions
	7,  // 10: sift.protobuf_descriptors.v2.array_index_override_type:extendee -> google.protobuf.FieldOptions
	8,  // 11: sift.protobuf_descriptors.v2.message_is_tag_target:extendee -> google.protobuf.MessageOptions
	5,  // 12: sift.protobuf_descriptors.v2.tag_target:type_name -> sift.protobuf_descriptors.v2.TagTarget
	6,  // 13: sift.protobuf_descriptors.v2.tag_source:type_name -> sift.protobuf_descriptors.v2.TagSource
	2,  // 14: sift.protobuf_descriptors.v2.map_key_override_type:type_name -> sift.protobuf_descriptors.v2.MapKeyOverrideType
	4,  // 15: sift.protobuf_descriptors.v2.bytes_decoding_type:type_name -> sift.protobuf_descriptors.v2.BytesDecodingType
	3,  // 16: sift.protobuf_descriptors.v2.array_index_override_type:type_name -> sift.protobuf_descriptors.v2.ArrayIndexOverrideType
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	12, // [12:17] is the sub-list for extension type_name
	2,  // [2:12] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_init() }
func file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_init() {
	if File_sift_protobuf_descriptors_v2_channel_parsing_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   2,
			NumExtensions: 10,
			NumServices:   0,
		},
		GoTypes:           file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_goTypes,
		DependencyIndexes: file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_depIdxs,
		EnumInfos:         file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_enumTypes,
		MessageInfos:      file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_msgTypes,
		ExtensionInfos:    file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_extTypes,
	}.Build()
	File_sift_protobuf_descriptors_v2_channel_parsing_options_proto = out.File
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_rawDesc = nil
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_goTypes = nil
	file_sift_protobuf_descriptors_v2_channel_parsing_options_proto_depIdxs = nil
}
