// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/test_reports/v1/test_reports.proto

package test_reportsv1

import (
	_ "github.com/sift-stack/sift/go/gen/google/api"
	_ "github.com/sift-stack/sift/go/gen/protoc-gen-openapiv2/options"
	v1 "github.com/sift-stack/sift/go/gen/sift/metadata/v1"
	v2 "github.com/sift-stack/sift/go/gen/sift/unit/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestStatus int32

const (
	TestStatus_TEST_STATUS_UNSPECIFIED TestStatus = 0
	TestStatus_TEST_STATUS_DRAFT       TestStatus = 1 // Barebones test report created, waiting for file processing
	TestStatus_TEST_STATUS_PASSED      TestStatus = 2
	TestStatus_TEST_STATUS_FAILED      TestStatus = 3
	TestStatus_TEST_STATUS_ABORTED     TestStatus = 4
	TestStatus_TEST_STATUS_ERROR       TestStatus = 5
	TestStatus_TEST_STATUS_IN_PROGRESS TestStatus = 6
	TestStatus_TEST_STATUS_SKIPPED     TestStatus = 7
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "TEST_STATUS_DRAFT",
		2: "TEST_STATUS_PASSED",
		3: "TEST_STATUS_FAILED",
		4: "TEST_STATUS_ABORTED",
		5: "TEST_STATUS_ERROR",
		6: "TEST_STATUS_IN_PROGRESS",
		7: "TEST_STATUS_SKIPPED",
	}
	TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"TEST_STATUS_DRAFT":       1,
		"TEST_STATUS_PASSED":      2,
		"TEST_STATUS_FAILED":      3,
		"TEST_STATUS_ABORTED":     4,
		"TEST_STATUS_ERROR":       5,
		"TEST_STATUS_IN_PROGRESS": 6,
		"TEST_STATUS_SKIPPED":     7,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_test_reports_v1_test_reports_proto_enumTypes[0].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_sift_test_reports_v1_test_reports_proto_enumTypes[0]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{0}
}

type TestStepType int32

const (
	TestStepType_TEST_STEP_TYPE_UNSPECIFIED  TestStepType = 0
	TestStepType_TEST_STEP_TYPE_SEQUENCE     TestStepType = 1 // ResultSet/MainSequence - top-level test sequence
	TestStepType_TEST_STEP_TYPE_GROUP        TestStepType = 2 // TestGroup - logical grouping of test steps
	TestStepType_TEST_STEP_TYPE_ACTION       TestStepType = 3 // SessionAction - individual executable action
	TestStepType_TEST_STEP_TYPE_FLOW_CONTROL TestStepType = 4 // Flow control elements (While, If, etc.)
)

// Enum value maps for TestStepType.
var (
	TestStepType_name = map[int32]string{
		0: "TEST_STEP_TYPE_UNSPECIFIED",
		1: "TEST_STEP_TYPE_SEQUENCE",
		2: "TEST_STEP_TYPE_GROUP",
		3: "TEST_STEP_TYPE_ACTION",
		4: "TEST_STEP_TYPE_FLOW_CONTROL",
	}
	TestStepType_value = map[string]int32{
		"TEST_STEP_TYPE_UNSPECIFIED":  0,
		"TEST_STEP_TYPE_SEQUENCE":     1,
		"TEST_STEP_TYPE_GROUP":        2,
		"TEST_STEP_TYPE_ACTION":       3,
		"TEST_STEP_TYPE_FLOW_CONTROL": 4,
	}
)

func (x TestStepType) Enum() *TestStepType {
	p := new(TestStepType)
	*p = x
	return p
}

func (x TestStepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStepType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_test_reports_v1_test_reports_proto_enumTypes[1].Descriptor()
}

func (TestStepType) Type() protoreflect.EnumType {
	return &file_sift_test_reports_v1_test_reports_proto_enumTypes[1]
}

func (x TestStepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStepType.Descriptor instead.
func (TestStepType) EnumDescriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{1}
}

type TestMeasurementType int32

const (
	TestMeasurementType_TEST_MEASUREMENT_TYPE_UNSPECIFIED TestMeasurementType = 0
	TestMeasurementType_TEST_MEASUREMENT_TYPE_DOUBLE      TestMeasurementType = 1
	TestMeasurementType_TEST_MEASUREMENT_TYPE_STRING      TestMeasurementType = 3
	TestMeasurementType_TEST_MEASUREMENT_TYPE_BOOLEAN     TestMeasurementType = 4
	TestMeasurementType_TEST_MEASUREMENT_TYPE_LIMIT       TestMeasurementType = 5
)

// Enum value maps for TestMeasurementType.
var (
	TestMeasurementType_name = map[int32]string{
		0: "TEST_MEASUREMENT_TYPE_UNSPECIFIED",
		1: "TEST_MEASUREMENT_TYPE_DOUBLE",
		3: "TEST_MEASUREMENT_TYPE_STRING",
		4: "TEST_MEASUREMENT_TYPE_BOOLEAN",
		5: "TEST_MEASUREMENT_TYPE_LIMIT",
	}
	TestMeasurementType_value = map[string]int32{
		"TEST_MEASUREMENT_TYPE_UNSPECIFIED": 0,
		"TEST_MEASUREMENT_TYPE_DOUBLE":      1,
		"TEST_MEASUREMENT_TYPE_STRING":      3,
		"TEST_MEASUREMENT_TYPE_BOOLEAN":     4,
		"TEST_MEASUREMENT_TYPE_LIMIT":       5,
	}
)

func (x TestMeasurementType) Enum() *TestMeasurementType {
	p := new(TestMeasurementType)
	*p = x
	return p
}

func (x TestMeasurementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestMeasurementType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_test_reports_v1_test_reports_proto_enumTypes[2].Descriptor()
}

func (TestMeasurementType) Type() protoreflect.EnumType {
	return &file_sift_test_reports_v1_test_reports_proto_enumTypes[2]
}

func (x TestMeasurementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestMeasurementType.Descriptor instead.
func (TestMeasurementType) EnumDescriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{2}
}

type TestReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the run
	TestReportId string `protobuf:"bytes,1,opt,name=test_report_id,json=testReportId,proto3" json:"test_report_id,omitempty"`
	// The status of the test run
	Status TestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sift.test_reports.v1.TestStatus" json:"status,omitempty"`
	// The name of the test run
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the test system
	TestSystemName string `protobuf:"bytes,4,opt,name=test_system_name,json=testSystemName,proto3" json:"test_system_name,omitempty"`
	// The test case that was run
	TestCase string `protobuf:"bytes,5,opt,name=test_case,json=testCase,proto3" json:"test_case,omitempty"`
	// The start time of the test run
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the test run
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The metadata values associated with this test run
	Metadata []*v1.MetadataValue `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// The serial number for the DUT
	SerialNumber string `protobuf:"bytes,9,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The part number for the DUT
	PartNumber string `protobuf:"bytes,10,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// Unique identifier for user owner
	SystemOperator string `protobuf:"bytes,11,opt,name=system_operator,json=systemOperator,proto3" json:"system_operator,omitempty"`
	// The date and time the test run was archived (internal)
	ArchivedDate *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=archived_date,json=archivedDate,proto3" json:"archived_date,omitempty"`
	// Whether the test run is archived (externally exposed)
	IsArchived bool `protobuf:"varint,13,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
}

func (x *TestReport) Reset() {
	*x = TestReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReport) ProtoMessage() {}

func (x *TestReport) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReport.ProtoReflect.Descriptor instead.
func (*TestReport) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{0}
}

func (x *TestReport) GetTestReportId() string {
	if x != nil {
		return x.TestReportId
	}
	return ""
}

func (x *TestReport) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *TestReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestReport) GetTestSystemName() string {
	if x != nil {
		return x.TestSystemName
	}
	return ""
}

func (x *TestReport) GetTestCase() string {
	if x != nil {
		return x.TestCase
	}
	return ""
}

func (x *TestReport) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestReport) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TestReport) GetMetadata() []*v1.MetadataValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TestReport) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TestReport) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *TestReport) GetSystemOperator() string {
	if x != nil {
		return x.SystemOperator
	}
	return ""
}

func (x *TestReport) GetArchivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedDate
	}
	return nil
}

func (x *TestReport) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

type TestStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the step
	TestStepId string `protobuf:"bytes,1,opt,name=test_step_id,json=testStepId,proto3" json:"test_step_id,omitempty"`
	// pointer to overall test run
	TestReportId string `protobuf:"bytes,2,opt,name=test_report_id,json=testReportId,proto3" json:"test_report_id,omitempty"`
	// pointer to parent step, if any
	ParentStepId string `protobuf:"bytes,3,opt,name=parent_step_id,json=parentStepId,proto3" json:"parent_step_id,omitempty"`
	// Name of the test step for display
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the test step from test controller
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Semantic type of the test step
	StepType TestStepType `protobuf:"varint,6,opt,name=step_type,json=stepType,proto3,enum=sift.test_reports.v1.TestStepType" json:"step_type,omitempty"`
	// Hierarchical path (e.g., "1", "1.1", "1.2.3")
	StepPath string `protobuf:"bytes,7,opt,name=step_path,json=stepPath,proto3" json:"step_path,omitempty"`
	// Status of the test step
	Status TestStatus `protobuf:"varint,8,opt,name=status,proto3,enum=sift.test_reports.v1.TestStatus" json:"status,omitempty"`
	// Start time of the test step
	StartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time of the test step
	EndTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Error information of the test step
	ErrorInfo *ErrorInfo `protobuf:"bytes,11,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
}

func (x *TestStep) Reset() {
	*x = TestStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStep) ProtoMessage() {}

func (x *TestStep) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStep.ProtoReflect.Descriptor instead.
func (*TestStep) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{1}
}

func (x *TestStep) GetTestStepId() string {
	if x != nil {
		return x.TestStepId
	}
	return ""
}

func (x *TestStep) GetTestReportId() string {
	if x != nil {
		return x.TestReportId
	}
	return ""
}

func (x *TestStep) GetParentStepId() string {
	if x != nil {
		return x.ParentStepId
	}
	return ""
}

func (x *TestStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestStep) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestStep) GetStepType() TestStepType {
	if x != nil {
		return x.StepType
	}
	return TestStepType_TEST_STEP_TYPE_UNSPECIFIED
}

func (x *TestStep) GetStepPath() string {
	if x != nil {
		return x.StepPath
	}
	return ""
}

func (x *TestStep) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *TestStep) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestStep) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TestStep) GetErrorInfo() *ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorInfo) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ErrorInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TestMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementId   string              `protobuf:"bytes,1,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
	MeasurementType TestMeasurementType `protobuf:"varint,2,opt,name=measurement_type,json=measurementType,proto3,enum=sift.test_reports.v1.TestMeasurementType" json:"measurement_type,omitempty"`
	Name            string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TestStepId      string              `protobuf:"bytes,4,opt,name=test_step_id,json=testStepId,proto3" json:"test_step_id,omitempty"`
	TestReportId    string              `protobuf:"bytes,5,opt,name=test_report_id,json=testReportId,proto3" json:"test_report_id,omitempty"`
	// Types that are assignable to Value:
	//
	//	*TestMeasurement_NumericValue
	//	*TestMeasurement_StringValue
	//	*TestMeasurement_BooleanValue
	Value isTestMeasurement_Value `protobuf_oneof:"value"`
	Unit  *v2.Unit                `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
	// Types that are assignable to Bounds:
	//
	//	*TestMeasurement_NumericBounds
	//	*TestMeasurement_StringBounds
	Bounds    isTestMeasurement_Bounds `protobuf_oneof:"bounds"`
	Passed    bool                     `protobuf:"varint,12,opt,name=passed,proto3" json:"passed,omitempty"`
	Timestamp *timestamppb.Timestamp   `protobuf:"bytes,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TestMeasurement) Reset() {
	*x = TestMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMeasurement) ProtoMessage() {}

func (x *TestMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMeasurement.ProtoReflect.Descriptor instead.
func (*TestMeasurement) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{3}
}

func (x *TestMeasurement) GetMeasurementId() string {
	if x != nil {
		return x.MeasurementId
	}
	return ""
}

func (x *TestMeasurement) GetMeasurementType() TestMeasurementType {
	if x != nil {
		return x.MeasurementType
	}
	return TestMeasurementType_TEST_MEASUREMENT_TYPE_UNSPECIFIED
}

func (x *TestMeasurement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestMeasurement) GetTestStepId() string {
	if x != nil {
		return x.TestStepId
	}
	return ""
}

func (x *TestMeasurement) GetTestReportId() string {
	if x != nil {
		return x.TestReportId
	}
	return ""
}

func (m *TestMeasurement) GetValue() isTestMeasurement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TestMeasurement) GetNumericValue() float64 {
	if x, ok := x.GetValue().(*TestMeasurement_NumericValue); ok {
		return x.NumericValue
	}
	return 0
}

func (x *TestMeasurement) GetStringValue() string {
	if x, ok := x.GetValue().(*TestMeasurement_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *TestMeasurement) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*TestMeasurement_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *TestMeasurement) GetUnit() *v2.Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (m *TestMeasurement) GetBounds() isTestMeasurement_Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (x *TestMeasurement) GetNumericBounds() *NumericBounds {
	if x, ok := x.GetBounds().(*TestMeasurement_NumericBounds); ok {
		return x.NumericBounds
	}
	return nil
}

func (x *TestMeasurement) GetStringBounds() *StringBounds {
	if x, ok := x.GetBounds().(*TestMeasurement_StringBounds); ok {
		return x.StringBounds
	}
	return nil
}

func (x *TestMeasurement) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *TestMeasurement) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type isTestMeasurement_Value interface {
	isTestMeasurement_Value()
}

type TestMeasurement_NumericValue struct {
	NumericValue float64 `protobuf:"fixed64,6,opt,name=numeric_value,json=numericValue,proto3,oneof"`
}

type TestMeasurement_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type TestMeasurement_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,8,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*TestMeasurement_NumericValue) isTestMeasurement_Value() {}

func (*TestMeasurement_StringValue) isTestMeasurement_Value() {}

func (*TestMeasurement_BooleanValue) isTestMeasurement_Value() {}

type isTestMeasurement_Bounds interface {
	isTestMeasurement_Bounds()
}

type TestMeasurement_NumericBounds struct {
	NumericBounds *NumericBounds `protobuf:"bytes,10,opt,name=numeric_bounds,json=numericBounds,proto3,oneof"`
}

type TestMeasurement_StringBounds struct {
	StringBounds *StringBounds `protobuf:"bytes,11,opt,name=string_bounds,json=stringBounds,proto3,oneof"`
}

func (*TestMeasurement_NumericBounds) isTestMeasurement_Bounds() {}

func (*TestMeasurement_StringBounds) isTestMeasurement_Bounds() {}

type NumericBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *float64 `protobuf:"fixed64,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max *float64 `protobuf:"fixed64,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
}

func (x *NumericBounds) Reset() {
	*x = NumericBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericBounds) ProtoMessage() {}

func (x *NumericBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericBounds.ProtoReflect.Descriptor instead.
func (*NumericBounds) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{4}
}

func (x *NumericBounds) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *NumericBounds) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type StringBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedValue string `protobuf:"bytes,1,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
}

func (x *StringBounds) Reset() {
	*x = StringBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringBounds) ProtoMessage() {}

func (x *StringBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringBounds.ProtoReflect.Descriptor instead.
func (*StringBounds) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{5}
}

func (x *StringBounds) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

// Request message for ImportTestReport
type ImportTestReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote file ID containing the XML test data
	RemoteFileId string `protobuf:"bytes,1,opt,name=remote_file_id,json=remoteFileId,proto3" json:"remote_file_id,omitempty"`
}

func (x *ImportTestReportRequest) Reset() {
	*x = ImportTestReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTestReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTestReportRequest) ProtoMessage() {}

func (x *ImportTestReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTestReportRequest.ProtoReflect.Descriptor instead.
func (*ImportTestReportRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{6}
}

func (x *ImportTestReportRequest) GetRemoteFileId() string {
	if x != nil {
		return x.RemoteFileId
	}
	return ""
}

// Response message for ImportTestReport
type ImportTestReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The imported test report
	TestReport *TestReport `protobuf:"bytes,1,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
}

func (x *ImportTestReportResponse) Reset() {
	*x = ImportTestReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTestReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTestReportResponse) ProtoMessage() {}

func (x *ImportTestReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTestReportResponse.ProtoReflect.Descriptor instead.
func (*ImportTestReportResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{7}
}

func (x *ImportTestReportResponse) GetTestReport() *TestReport {
	if x != nil {
		return x.TestReport
	}
	return nil
}

// Request message for CreateTestReport
type CreateTestReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the test run
	Status TestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sift.test_reports.v1.TestStatus" json:"status,omitempty"`
	// The name of the test run
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the test system
	TestSystemName string `protobuf:"bytes,3,opt,name=test_system_name,json=testSystemName,proto3" json:"test_system_name,omitempty"`
	// The test case that was run
	TestCase string `protobuf:"bytes,4,opt,name=test_case,json=testCase,proto3" json:"test_case,omitempty"`
	// The start time of the test run
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the test run
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The metadata values associated with this test run
	Metadata []*v1.MetadataValue `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// The serial number for the DUT
	SerialNumber string `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The part number for the DUT
	PartNumber string `protobuf:"bytes,9,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// Unique identifier for user owner
	SystemOperator string `protobuf:"bytes,10,opt,name=system_operator,json=systemOperator,proto3" json:"system_operator,omitempty"`
}

func (x *CreateTestReportRequest) Reset() {
	*x = CreateTestReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestReportRequest) ProtoMessage() {}

func (x *CreateTestReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestReportRequest.ProtoReflect.Descriptor instead.
func (*CreateTestReportRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTestReportRequest) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_TEST_STATUS_UNSPECIFIED
}

func (x *CreateTestReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTestReportRequest) GetTestSystemName() string {
	if x != nil {
		return x.TestSystemName
	}
	return ""
}

func (x *CreateTestReportRequest) GetTestCase() string {
	if x != nil {
		return x.TestCase
	}
	return ""
}

func (x *CreateTestReportRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreateTestReportRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CreateTestReportRequest) GetMetadata() []*v1.MetadataValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateTestReportRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CreateTestReportRequest) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *CreateTestReportRequest) GetSystemOperator() string {
	if x != nil {
		return x.SystemOperator
	}
	return ""
}

// Response message for CreateTestReport
type CreateTestReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created test report
	TestReport *TestReport `protobuf:"bytes,1,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
}

func (x *CreateTestReportResponse) Reset() {
	*x = CreateTestReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestReportResponse) ProtoMessage() {}

func (x *CreateTestReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestReportResponse.ProtoReflect.Descriptor instead.
func (*CreateTestReportResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTestReportResponse) GetTestReport() *TestReport {
	if x != nil {
		return x.TestReport
	}
	return nil
}

// Request message for GetTestReport
type GetTestReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the test report to get
	TestReportId string `protobuf:"bytes,1,opt,name=test_report_id,json=testReportId,proto3" json:"test_report_id,omitempty"`
}

func (x *GetTestReportRequest) Reset() {
	*x = GetTestReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestReportRequest) ProtoMessage() {}

func (x *GetTestReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestReportRequest.ProtoReflect.Descriptor instead.
func (*GetTestReportRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{10}
}

func (x *GetTestReportRequest) GetTestReportId() string {
	if x != nil {
		return x.TestReportId
	}
	return ""
}

// Response message for GetTestReport
type GetTestReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test report
	TestReport *TestReport `protobuf:"bytes,1,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
}

func (x *GetTestReportResponse) Reset() {
	*x = GetTestReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestReportResponse) ProtoMessage() {}

func (x *GetTestReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestReportResponse.ProtoReflect.Descriptor instead.
func (*GetTestReportResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{11}
}

func (x *GetTestReportResponse) GetTestReport() *TestReport {
	if x != nil {
		return x.TestReport
	}
	return nil
}

// Request message for ListTestReports
type ListTestReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of test reports to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 test reports will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListTestReports` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListTestReports` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `test_report_id`, `status`, `name`, `test_system_name`,
	// `test_case`, `start_time`, `end_time`, `serial_number`, `created_by_user_id`, `modified_by_user_id`,
	// `part_number`, `system_operator`, `archived_date`, and `metadata`.
	// Metadata can be used in filters by using `metadata.{metadata_key_name}` as the field name.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/test-results#testreport). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// How to order the retrieved test reports. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `test_report_id`, `name`, `test_system_name`, `test_case`, `start_time`, `end_time`,
	// `created_date`, and `modified_date`.
	// If left empty, items are ordered by `start_time` in descending order (newest-first).
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "start_time desc,name"
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListTestReportsRequest) Reset() {
	*x = ListTestReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestReportsRequest) ProtoMessage() {}

func (x *ListTestReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestReportsRequest.ProtoReflect.Descriptor instead.
func (*ListTestReportsRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{12}
}

func (x *ListTestReportsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestReportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTestReportsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTestReportsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response message for ListTestReports
type ListTestReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of test reports
	TestReports []*TestReport `protobuf:"bytes,1,rep,name=test_reports,json=testReports,proto3" json:"test_reports,omitempty"`
	// The next page token for pagination
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestReportsResponse) Reset() {
	*x = ListTestReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestReportsResponse) ProtoMessage() {}

func (x *ListTestReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestReportsResponse.ProtoReflect.Descriptor instead.
func (*ListTestReportsResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{13}
}

func (x *ListTestReportsResponse) GetTestReports() []*TestReport {
	if x != nil {
		return x.TestReports
	}
	return nil
}

func (x *ListTestReportsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for UpdateTestReport
type UpdateTestReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test report to update
	TestReport *TestReport `protobuf:"bytes,1,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
	// The field mask specifying which fields to update. The fields available to be updated are
	// `status`, `name`, `test_system_name`, `test_case`, `start_time`, `end_time`, `serial_number`,
	// `part_number`, `system_operator`, and `is_archived`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateTestReportRequest) Reset() {
	*x = UpdateTestReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestReportRequest) ProtoMessage() {}

func (x *UpdateTestReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestReportRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateTestReportRequest) GetTestReport() *TestReport {
	if x != nil {
		return x.TestReport
	}
	return nil
}

func (x *UpdateTestReportRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Response message for UpdateTestReport
type UpdateTestReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated test report
	TestReport *TestReport `protobuf:"bytes,1,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
}

func (x *UpdateTestReportResponse) Reset() {
	*x = UpdateTestReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestReportResponse) ProtoMessage() {}

func (x *UpdateTestReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestReportResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestReportResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateTestReportResponse) GetTestReport() *TestReport {
	if x != nil {
		return x.TestReport
	}
	return nil
}

// Request message for DeleteTestReport
type DeleteTestReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the test report to delete
	TestReportId string `protobuf:"bytes,1,opt,name=test_report_id,json=testReportId,proto3" json:"test_report_id,omitempty"`
}

func (x *DeleteTestReportRequest) Reset() {
	*x = DeleteTestReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestReportRequest) ProtoMessage() {}

func (x *DeleteTestReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestReportRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteTestReportRequest) GetTestReportId() string {
	if x != nil {
		return x.TestReportId
	}
	return ""
}

// Response message for DeleteTestReport
type DeleteTestReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestReportResponse) Reset() {
	*x = DeleteTestReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestReportResponse) ProtoMessage() {}

func (x *DeleteTestReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestReportResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestReportResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{17}
}

// Request message for CreateTestStep
type CreateTestStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test step to create
	TestStep *TestStep `protobuf:"bytes,1,opt,name=test_step,json=testStep,proto3" json:"test_step,omitempty"`
}

func (x *CreateTestStepRequest) Reset() {
	*x = CreateTestStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestStepRequest) ProtoMessage() {}

func (x *CreateTestStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestStepRequest.ProtoReflect.Descriptor instead.
func (*CreateTestStepRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTestStepRequest) GetTestStep() *TestStep {
	if x != nil {
		return x.TestStep
	}
	return nil
}

// Response message for CreateTestStep
type CreateTestStepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created test step
	TestStep *TestStep `protobuf:"bytes,1,opt,name=test_step,json=testStep,proto3" json:"test_step,omitempty"`
}

func (x *CreateTestStepResponse) Reset() {
	*x = CreateTestStepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestStepResponse) ProtoMessage() {}

func (x *CreateTestStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestStepResponse.ProtoReflect.Descriptor instead.
func (*CreateTestStepResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTestStepResponse) GetTestStep() *TestStep {
	if x != nil {
		return x.TestStep
	}
	return nil
}

// Request message for ListTestSteps
type ListTestStepsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of test steps to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 test steps will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListTestSteps` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListTestSteps` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `test_step_id`, `test_report_id`, `parent_step_id`, `name`,
	// `description`, `step_type`, `step_path`, `status`, `start_time`, `end_time`,
	// `error_code`, `error_message`, `created_date`, and `modified_date`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/test-results#teststep). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// How to order the retrieved test steps. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `test_step_id`, `name`, `step_type`, `step_path`, `status`,
	// `start_time`, `end_time`, `created_date`, and `modified_date`.
	// If left empty, items are ordered by `step_path` in ascending order.
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "step_path asc,start_time desc"
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListTestStepsRequest) Reset() {
	*x = ListTestStepsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestStepsRequest) ProtoMessage() {}

func (x *ListTestStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestStepsRequest.ProtoReflect.Descriptor instead.
func (*ListTestStepsRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{20}
}

func (x *ListTestStepsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestStepsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTestStepsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTestStepsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response message for ListTestSteps
type ListTestStepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of test steps
	TestSteps []*TestStep `protobuf:"bytes,1,rep,name=test_steps,json=testSteps,proto3" json:"test_steps,omitempty"`
	// The next page token for pagination
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestStepsResponse) Reset() {
	*x = ListTestStepsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestStepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestStepsResponse) ProtoMessage() {}

func (x *ListTestStepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestStepsResponse.ProtoReflect.Descriptor instead.
func (*ListTestStepsResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{21}
}

func (x *ListTestStepsResponse) GetTestSteps() []*TestStep {
	if x != nil {
		return x.TestSteps
	}
	return nil
}

func (x *ListTestStepsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for UpdateTestStep
type UpdateTestStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test step to update
	TestStep *TestStep `protobuf:"bytes,1,opt,name=test_step,json=testStep,proto3" json:"test_step,omitempty"`
	// The field mask specifying which fields to update. The fields available to be updated are
	// `name`, `description`, `step_type`, `step_path`, `test_case`, `status`,
	// `start_time`, `end_time`, and `error_info`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateTestStepRequest) Reset() {
	*x = UpdateTestStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestStepRequest) ProtoMessage() {}

func (x *UpdateTestStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestStepRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestStepRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateTestStepRequest) GetTestStep() *TestStep {
	if x != nil {
		return x.TestStep
	}
	return nil
}

func (x *UpdateTestStepRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Response message for UpdateTestStep
type UpdateTestStepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated test step
	TestStep *TestStep `protobuf:"bytes,1,opt,name=test_step,json=testStep,proto3" json:"test_step,omitempty"`
}

func (x *UpdateTestStepResponse) Reset() {
	*x = UpdateTestStepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestStepResponse) ProtoMessage() {}

func (x *UpdateTestStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestStepResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestStepResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateTestStepResponse) GetTestStep() *TestStep {
	if x != nil {
		return x.TestStep
	}
	return nil
}

// Request message for DeleteTestStep
type DeleteTestStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the test step to delete
	TestStepId string `protobuf:"bytes,1,opt,name=test_step_id,json=testStepId,proto3" json:"test_step_id,omitempty"`
}

func (x *DeleteTestStepRequest) Reset() {
	*x = DeleteTestStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestStepRequest) ProtoMessage() {}

func (x *DeleteTestStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestStepRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestStepRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteTestStepRequest) GetTestStepId() string {
	if x != nil {
		return x.TestStepId
	}
	return ""
}

// Response message for DeleteTestStep
type DeleteTestStepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestStepResponse) Reset() {
	*x = DeleteTestStepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestStepResponse) ProtoMessage() {}

func (x *DeleteTestStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestStepResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestStepResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{25}
}

// Request message for CreateTestMeasurement
type CreateTestMeasurementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test measurement to create
	TestMeasurement *TestMeasurement `protobuf:"bytes,1,opt,name=test_measurement,json=testMeasurement,proto3" json:"test_measurement,omitempty"`
}

func (x *CreateTestMeasurementRequest) Reset() {
	*x = CreateTestMeasurementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestMeasurementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestMeasurementRequest) ProtoMessage() {}

func (x *CreateTestMeasurementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestMeasurementRequest.ProtoReflect.Descriptor instead.
func (*CreateTestMeasurementRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTestMeasurementRequest) GetTestMeasurement() *TestMeasurement {
	if x != nil {
		return x.TestMeasurement
	}
	return nil
}

// Response message for CreateTestMeasurement
type CreateTestMeasurementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created test measurement
	TestMeasurement *TestMeasurement `protobuf:"bytes,1,opt,name=test_measurement,json=testMeasurement,proto3" json:"test_measurement,omitempty"`
}

func (x *CreateTestMeasurementResponse) Reset() {
	*x = CreateTestMeasurementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestMeasurementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestMeasurementResponse) ProtoMessage() {}

func (x *CreateTestMeasurementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestMeasurementResponse.ProtoReflect.Descriptor instead.
func (*CreateTestMeasurementResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{27}
}

func (x *CreateTestMeasurementResponse) GetTestMeasurement() *TestMeasurement {
	if x != nil {
		return x.TestMeasurement
	}
	return nil
}

// Request message for CreateTestMeasurements
type CreateTestMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test measurements to create
	TestMeasurements []*TestMeasurement `protobuf:"bytes,1,rep,name=test_measurements,json=testMeasurements,proto3" json:"test_measurements,omitempty"`
}

func (x *CreateTestMeasurementsRequest) Reset() {
	*x = CreateTestMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestMeasurementsRequest) ProtoMessage() {}

func (x *CreateTestMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*CreateTestMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{28}
}

func (x *CreateTestMeasurementsRequest) GetTestMeasurements() []*TestMeasurement {
	if x != nil {
		return x.TestMeasurements
	}
	return nil
}

// Response message for CreateTestMeasurements
type CreateTestMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of test measurements successfully created
	MeasurementsCreatedCount int32 `protobuf:"varint,1,opt,name=measurements_created_count,json=measurementsCreatedCount,proto3" json:"measurements_created_count,omitempty"`
	// The IDs of the created test measurements
	MeasurementIds []string `protobuf:"bytes,2,rep,name=measurement_ids,json=measurementIds,proto3" json:"measurement_ids,omitempty"`
}

func (x *CreateTestMeasurementsResponse) Reset() {
	*x = CreateTestMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestMeasurementsResponse) ProtoMessage() {}

func (x *CreateTestMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*CreateTestMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{29}
}

func (x *CreateTestMeasurementsResponse) GetMeasurementsCreatedCount() int32 {
	if x != nil {
		return x.MeasurementsCreatedCount
	}
	return 0
}

func (x *CreateTestMeasurementsResponse) GetMeasurementIds() []string {
	if x != nil {
		return x.MeasurementIds
	}
	return nil
}

// Request message for ListTestMeasurements
type ListTestMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of test measurements to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 test measurements will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListTestMeasurements` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListTestMeasurements` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `measurement_id`, `measurement_type`, `name`, `test_step_id`,
	// `test_report_id`, `numeric_value`, `string_value`, `boolean_value`, `passed`, `timestamp`,
	// `created_date`, and `modified_date`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/test-results#testmeasurement). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// How to order the retrieved test measurements. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
	// Available fields to order_by are `measurement_id`, `name`, `measurement_type`, `test_step_id`, `test_report_id`,
	// `passed`, `timestamp`, `created_date`, and `modified_date`.
	// If left empty, items are ordered by `timestamp` in ascending order.
	// For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
	// Example: "timestamp asc,name"
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListTestMeasurementsRequest) Reset() {
	*x = ListTestMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestMeasurementsRequest) ProtoMessage() {}

func (x *ListTestMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*ListTestMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{30}
}

func (x *ListTestMeasurementsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestMeasurementsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTestMeasurementsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTestMeasurementsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response message for ListTestMeasurements
type ListTestMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of test measurements
	TestMeasurements []*TestMeasurement `protobuf:"bytes,1,rep,name=test_measurements,json=testMeasurements,proto3" json:"test_measurements,omitempty"`
	// The next page token for pagination
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestMeasurementsResponse) Reset() {
	*x = ListTestMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestMeasurementsResponse) ProtoMessage() {}

func (x *ListTestMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*ListTestMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{31}
}

func (x *ListTestMeasurementsResponse) GetTestMeasurements() []*TestMeasurement {
	if x != nil {
		return x.TestMeasurements
	}
	return nil
}

func (x *ListTestMeasurementsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for CountTestSteps
type CountTestStepsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `test_step_id`, `test_report_id`, `parent_step_id`, `name`,
	// `description`, `step_type`, `step_path`, `status`, `start_time`, `end_time`,
	// `error_code`, `error_message`, `created_date`, and `modified_date`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/test-results#teststep). Optional.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CountTestStepsRequest) Reset() {
	*x = CountTestStepsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTestStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTestStepsRequest) ProtoMessage() {}

func (x *CountTestStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTestStepsRequest.ProtoReflect.Descriptor instead.
func (*CountTestStepsRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{32}
}

func (x *CountTestStepsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for CountTestSteps
type CountTestStepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total count of test steps matching the filter
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountTestStepsResponse) Reset() {
	*x = CountTestStepsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTestStepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTestStepsResponse) ProtoMessage() {}

func (x *CountTestStepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTestStepsResponse.ProtoReflect.Descriptor instead.
func (*CountTestStepsResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{33}
}

func (x *CountTestStepsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request message for CountTestMeasurements
type CountTestMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `measurement_id`, `measurement_type`, `name`, `test_step_id`,
	// `test_report_id`, `numeric_value`, `string_value`, `boolean_value`, `passed`, `timestamp`,
	// `created_date`, and `modified_date`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/test-results#testmeasurement). Optional.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CountTestMeasurementsRequest) Reset() {
	*x = CountTestMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTestMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTestMeasurementsRequest) ProtoMessage() {}

func (x *CountTestMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTestMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*CountTestMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{34}
}

func (x *CountTestMeasurementsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for CountTestMeasurements
type CountTestMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total count of test measurements matching the filter
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountTestMeasurementsResponse) Reset() {
	*x = CountTestMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTestMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTestMeasurementsResponse) ProtoMessage() {}

func (x *CountTestMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTestMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*CountTestMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{35}
}

func (x *CountTestMeasurementsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request message for UpdateTestMeasurement
type UpdateTestMeasurementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test measurement to update
	TestMeasurement *TestMeasurement `protobuf:"bytes,1,opt,name=test_measurement,json=testMeasurement,proto3" json:"test_measurement,omitempty"`
	// The field mask specifying which fields to update. The fields available to be updated are
	// `name`, `measurement_type`, `numeric_value`, `string_value`, `boolean_value`, `unit`, `numeric_bounds`,
	// `string_bounds`, `passed`, and `timestamp`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateTestMeasurementRequest) Reset() {
	*x = UpdateTestMeasurementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestMeasurementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestMeasurementRequest) ProtoMessage() {}

func (x *UpdateTestMeasurementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestMeasurementRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestMeasurementRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateTestMeasurementRequest) GetTestMeasurement() *TestMeasurement {
	if x != nil {
		return x.TestMeasurement
	}
	return nil
}

func (x *UpdateTestMeasurementRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Response message for UpdateTestMeasurement
type UpdateTestMeasurementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated test measurement
	TestMeasurement *TestMeasurement `protobuf:"bytes,1,opt,name=test_measurement,json=testMeasurement,proto3" json:"test_measurement,omitempty"`
}

func (x *UpdateTestMeasurementResponse) Reset() {
	*x = UpdateTestMeasurementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestMeasurementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestMeasurementResponse) ProtoMessage() {}

func (x *UpdateTestMeasurementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestMeasurementResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestMeasurementResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateTestMeasurementResponse) GetTestMeasurement() *TestMeasurement {
	if x != nil {
		return x.TestMeasurement
	}
	return nil
}

// Request message for DeleteTestMeasurement
type DeleteTestMeasurementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the test measurement to delete
	MeasurementId string `protobuf:"bytes,1,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
}

func (x *DeleteTestMeasurementRequest) Reset() {
	*x = DeleteTestMeasurementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestMeasurementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestMeasurementRequest) ProtoMessage() {}

func (x *DeleteTestMeasurementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestMeasurementRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestMeasurementRequest) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteTestMeasurementRequest) GetMeasurementId() string {
	if x != nil {
		return x.MeasurementId
	}
	return ""
}

// Response message for DeleteTestMeasurement
type DeleteTestMeasurementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestMeasurementResponse) Reset() {
	*x = DeleteTestMeasurementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestMeasurementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestMeasurementResponse) ProtoMessage() {}

func (x *DeleteTestMeasurementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_test_reports_v1_test_reports_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestMeasurementResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestMeasurementResponse) Descriptor() ([]byte, []int) {
	return file_sift_test_reports_v1_test_reports_proto_rawDescGZIP(), []int{39}
}

var File_sift_test_reports_v1_test_reports_proto protoreflect.FileDescriptor

var file_sift_test_reports_v1_test_reports_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2f, 0x76, 0x32,
	0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x05, 0x0a, 0x0a,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x73, 0x74, 0x65, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x22, 0x57, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d,
	0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x18,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xfe, 0x03, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x41, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x5a,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x44, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x22, 0x55, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x55, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x22, 0x3e, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x78, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x1a,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x34, 0x0a,
	0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x35, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x71, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0xd6, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xa1, 0x01, 0x0a, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x04, 0x2a, 0xc4,
	0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x05, 0x32, 0xd7, 0x1c, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x10,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x71, 0x92, 0x41, 0x48, 0x12, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x34, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92, 0x41, 0x29, 0x12, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a,
	0x92, 0x41, 0x2a, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0x19, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x92, 0x41, 0x3d,
	0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x1a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92,
	0x41, 0x29, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x32, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59,
	0x92, 0x41, 0x29, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x92, 0x41, 0x25, 0x12, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x1a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65,
	0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x39, 0x12, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x28, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65, 0x70, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0x92, 0x41, 0x25, 0x12, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x1a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x32, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x92, 0x41, 0x25, 0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x1a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x73, 0x74, 0x65, 0x70, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdc, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x92, 0x41, 0x33, 0x12,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x82, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x92, 0x41,
	0x50, 0x12, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x36, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74,
	0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0xea, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x92, 0x41, 0x47,
	0x12, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x92, 0x41, 0x3b, 0x12, 0x0e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x29, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65, 0x70, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xf5, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x92, 0x41, 0x49, 0x12, 0x15,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xdc,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5a, 0x92, 0x41, 0x33, 0x12, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x32, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xea, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x68, 0x92, 0x41, 0x33, 0x12, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0x23, 0x92, 0x41, 0x20, 0x12,
	0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42,
	0xfc, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x54, 0x58, 0xaa, 0x02, 0x13,
	0x53, 0x69, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x53, 0x69, 0x66, 0x74,
	0x5c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x53, 0x69,
	0x66, 0x74, 0x3a, 0x3a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x92, 0x41, 0x18, 0x12, 0x16, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x20, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_test_reports_v1_test_reports_proto_rawDescOnce sync.Once
	file_sift_test_reports_v1_test_reports_proto_rawDescData = file_sift_test_reports_v1_test_reports_proto_rawDesc
)

func file_sift_test_reports_v1_test_reports_proto_rawDescGZIP() []byte {
	file_sift_test_reports_v1_test_reports_proto_rawDescOnce.Do(func() {
		file_sift_test_reports_v1_test_reports_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_test_reports_v1_test_reports_proto_rawDescData)
	})
	return file_sift_test_reports_v1_test_reports_proto_rawDescData
}

var file_sift_test_reports_v1_test_reports_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sift_test_reports_v1_test_reports_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_sift_test_reports_v1_test_reports_proto_goTypes = []interface{}{
	(TestStatus)(0),                        // 0: sift.test_reports.v1.TestStatus
	(TestStepType)(0),                      // 1: sift.test_reports.v1.TestStepType
	(TestMeasurementType)(0),               // 2: sift.test_reports.v1.TestMeasurementType
	(*TestReport)(nil),                     // 3: sift.test_reports.v1.TestReport
	(*TestStep)(nil),                       // 4: sift.test_reports.v1.TestStep
	(*ErrorInfo)(nil),                      // 5: sift.test_reports.v1.ErrorInfo
	(*TestMeasurement)(nil),                // 6: sift.test_reports.v1.TestMeasurement
	(*NumericBounds)(nil),                  // 7: sift.test_reports.v1.NumericBounds
	(*StringBounds)(nil),                   // 8: sift.test_reports.v1.StringBounds
	(*ImportTestReportRequest)(nil),        // 9: sift.test_reports.v1.ImportTestReportRequest
	(*ImportTestReportResponse)(nil),       // 10: sift.test_reports.v1.ImportTestReportResponse
	(*CreateTestReportRequest)(nil),        // 11: sift.test_reports.v1.CreateTestReportRequest
	(*CreateTestReportResponse)(nil),       // 12: sift.test_reports.v1.CreateTestReportResponse
	(*GetTestReportRequest)(nil),           // 13: sift.test_reports.v1.GetTestReportRequest
	(*GetTestReportResponse)(nil),          // 14: sift.test_reports.v1.GetTestReportResponse
	(*ListTestReportsRequest)(nil),         // 15: sift.test_reports.v1.ListTestReportsRequest
	(*ListTestReportsResponse)(nil),        // 16: sift.test_reports.v1.ListTestReportsResponse
	(*UpdateTestReportRequest)(nil),        // 17: sift.test_reports.v1.UpdateTestReportRequest
	(*UpdateTestReportResponse)(nil),       // 18: sift.test_reports.v1.UpdateTestReportResponse
	(*DeleteTestReportRequest)(nil),        // 19: sift.test_reports.v1.DeleteTestReportRequest
	(*DeleteTestReportResponse)(nil),       // 20: sift.test_reports.v1.DeleteTestReportResponse
	(*CreateTestStepRequest)(nil),          // 21: sift.test_reports.v1.CreateTestStepRequest
	(*CreateTestStepResponse)(nil),         // 22: sift.test_reports.v1.CreateTestStepResponse
	(*ListTestStepsRequest)(nil),           // 23: sift.test_reports.v1.ListTestStepsRequest
	(*ListTestStepsResponse)(nil),          // 24: sift.test_reports.v1.ListTestStepsResponse
	(*UpdateTestStepRequest)(nil),          // 25: sift.test_reports.v1.UpdateTestStepRequest
	(*UpdateTestStepResponse)(nil),         // 26: sift.test_reports.v1.UpdateTestStepResponse
	(*DeleteTestStepRequest)(nil),          // 27: sift.test_reports.v1.DeleteTestStepRequest
	(*DeleteTestStepResponse)(nil),         // 28: sift.test_reports.v1.DeleteTestStepResponse
	(*CreateTestMeasurementRequest)(nil),   // 29: sift.test_reports.v1.CreateTestMeasurementRequest
	(*CreateTestMeasurementResponse)(nil),  // 30: sift.test_reports.v1.CreateTestMeasurementResponse
	(*CreateTestMeasurementsRequest)(nil),  // 31: sift.test_reports.v1.CreateTestMeasurementsRequest
	(*CreateTestMeasurementsResponse)(nil), // 32: sift.test_reports.v1.CreateTestMeasurementsResponse
	(*ListTestMeasurementsRequest)(nil),    // 33: sift.test_reports.v1.ListTestMeasurementsRequest
	(*ListTestMeasurementsResponse)(nil),   // 34: sift.test_reports.v1.ListTestMeasurementsResponse
	(*CountTestStepsRequest)(nil),          // 35: sift.test_reports.v1.CountTestStepsRequest
	(*CountTestStepsResponse)(nil),         // 36: sift.test_reports.v1.CountTestStepsResponse
	(*CountTestMeasurementsRequest)(nil),   // 37: sift.test_reports.v1.CountTestMeasurementsRequest
	(*CountTestMeasurementsResponse)(nil),  // 38: sift.test_reports.v1.CountTestMeasurementsResponse
	(*UpdateTestMeasurementRequest)(nil),   // 39: sift.test_reports.v1.UpdateTestMeasurementRequest
	(*UpdateTestMeasurementResponse)(nil),  // 40: sift.test_reports.v1.UpdateTestMeasurementResponse
	(*DeleteTestMeasurementRequest)(nil),   // 41: sift.test_reports.v1.DeleteTestMeasurementRequest
	(*DeleteTestMeasurementResponse)(nil),  // 42: sift.test_reports.v1.DeleteTestMeasurementResponse
	(*timestamppb.Timestamp)(nil),          // 43: google.protobuf.Timestamp
	(*v1.MetadataValue)(nil),               // 44: sift.metadata.v1.MetadataValue
	(*v2.Unit)(nil),                        // 45: sift.unit.v2.Unit
	(*fieldmaskpb.FieldMask)(nil),          // 46: google.protobuf.FieldMask
}
var file_sift_test_reports_v1_test_reports_proto_depIdxs = []int32{
	0,  // 0: sift.test_reports.v1.TestReport.status:type_name -> sift.test_reports.v1.TestStatus
	43, // 1: sift.test_reports.v1.TestReport.start_time:type_name -> google.protobuf.Timestamp
	43, // 2: sift.test_reports.v1.TestReport.end_time:type_name -> google.protobuf.Timestamp
	44, // 3: sift.test_reports.v1.TestReport.metadata:type_name -> sift.metadata.v1.MetadataValue
	43, // 4: sift.test_reports.v1.TestReport.archived_date:type_name -> google.protobuf.Timestamp
	1,  // 5: sift.test_reports.v1.TestStep.step_type:type_name -> sift.test_reports.v1.TestStepType
	0,  // 6: sift.test_reports.v1.TestStep.status:type_name -> sift.test_reports.v1.TestStatus
	43, // 7: sift.test_reports.v1.TestStep.start_time:type_name -> google.protobuf.Timestamp
	43, // 8: sift.test_reports.v1.TestStep.end_time:type_name -> google.protobuf.Timestamp
	5,  // 9: sift.test_reports.v1.TestStep.error_info:type_name -> sift.test_reports.v1.ErrorInfo
	2,  // 10: sift.test_reports.v1.TestMeasurement.measurement_type:type_name -> sift.test_reports.v1.TestMeasurementType
	45, // 11: sift.test_reports.v1.TestMeasurement.unit:type_name -> sift.unit.v2.Unit
	7,  // 12: sift.test_reports.v1.TestMeasurement.numeric_bounds:type_name -> sift.test_reports.v1.NumericBounds
	8,  // 13: sift.test_reports.v1.TestMeasurement.string_bounds:type_name -> sift.test_reports.v1.StringBounds
	43, // 14: sift.test_reports.v1.TestMeasurement.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 15: sift.test_reports.v1.ImportTestReportResponse.test_report:type_name -> sift.test_reports.v1.TestReport
	0,  // 16: sift.test_reports.v1.CreateTestReportRequest.status:type_name -> sift.test_reports.v1.TestStatus
	43, // 17: sift.test_reports.v1.CreateTestReportRequest.start_time:type_name -> google.protobuf.Timestamp
	43, // 18: sift.test_reports.v1.CreateTestReportRequest.end_time:type_name -> google.protobuf.Timestamp
	44, // 19: sift.test_reports.v1.CreateTestReportRequest.metadata:type_name -> sift.metadata.v1.MetadataValue
	3,  // 20: sift.test_reports.v1.CreateTestReportResponse.test_report:type_name -> sift.test_reports.v1.TestReport
	3,  // 21: sift.test_reports.v1.GetTestReportResponse.test_report:type_name -> sift.test_reports.v1.TestReport
	3,  // 22: sift.test_reports.v1.ListTestReportsResponse.test_reports:type_name -> sift.test_reports.v1.TestReport
	3,  // 23: sift.test_reports.v1.UpdateTestReportRequest.test_report:type_name -> sift.test_reports.v1.TestReport
	46, // 24: sift.test_reports.v1.UpdateTestReportRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 25: sift.test_reports.v1.UpdateTestReportResponse.test_report:type_name -> sift.test_reports.v1.TestReport
	4,  // 26: sift.test_reports.v1.CreateTestStepRequest.test_step:type_name -> sift.test_reports.v1.TestStep
	4,  // 27: sift.test_reports.v1.CreateTestStepResponse.test_step:type_name -> sift.test_reports.v1.TestStep
	4,  // 28: sift.test_reports.v1.ListTestStepsResponse.test_steps:type_name -> sift.test_reports.v1.TestStep
	4,  // 29: sift.test_reports.v1.UpdateTestStepRequest.test_step:type_name -> sift.test_reports.v1.TestStep
	46, // 30: sift.test_reports.v1.UpdateTestStepRequest.update_mask:type_name -> google.protobuf.FieldMask
	4,  // 31: sift.test_reports.v1.UpdateTestStepResponse.test_step:type_name -> sift.test_reports.v1.TestStep
	6,  // 32: sift.test_reports.v1.CreateTestMeasurementRequest.test_measurement:type_name -> sift.test_reports.v1.TestMeasurement
	6,  // 33: sift.test_reports.v1.CreateTestMeasurementResponse.test_measurement:type_name -> sift.test_reports.v1.TestMeasurement
	6,  // 34: sift.test_reports.v1.CreateTestMeasurementsRequest.test_measurements:type_name -> sift.test_reports.v1.TestMeasurement
	6,  // 35: sift.test_reports.v1.ListTestMeasurementsResponse.test_measurements:type_name -> sift.test_reports.v1.TestMeasurement
	6,  // 36: sift.test_reports.v1.UpdateTestMeasurementRequest.test_measurement:type_name -> sift.test_reports.v1.TestMeasurement
	46, // 37: sift.test_reports.v1.UpdateTestMeasurementRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 38: sift.test_reports.v1.UpdateTestMeasurementResponse.test_measurement:type_name -> sift.test_reports.v1.TestMeasurement
	9,  // 39: sift.test_reports.v1.TestReportService.ImportTestReport:input_type -> sift.test_reports.v1.ImportTestReportRequest
	11, // 40: sift.test_reports.v1.TestReportService.CreateTestReport:input_type -> sift.test_reports.v1.CreateTestReportRequest
	13, // 41: sift.test_reports.v1.TestReportService.GetTestReport:input_type -> sift.test_reports.v1.GetTestReportRequest
	15, // 42: sift.test_reports.v1.TestReportService.ListTestReports:input_type -> sift.test_reports.v1.ListTestReportsRequest
	17, // 43: sift.test_reports.v1.TestReportService.UpdateTestReport:input_type -> sift.test_reports.v1.UpdateTestReportRequest
	19, // 44: sift.test_reports.v1.TestReportService.DeleteTestReport:input_type -> sift.test_reports.v1.DeleteTestReportRequest
	21, // 45: sift.test_reports.v1.TestReportService.CreateTestStep:input_type -> sift.test_reports.v1.CreateTestStepRequest
	23, // 46: sift.test_reports.v1.TestReportService.ListTestSteps:input_type -> sift.test_reports.v1.ListTestStepsRequest
	25, // 47: sift.test_reports.v1.TestReportService.UpdateTestStep:input_type -> sift.test_reports.v1.UpdateTestStepRequest
	27, // 48: sift.test_reports.v1.TestReportService.DeleteTestStep:input_type -> sift.test_reports.v1.DeleteTestStepRequest
	29, // 49: sift.test_reports.v1.TestReportService.CreateTestMeasurement:input_type -> sift.test_reports.v1.CreateTestMeasurementRequest
	31, // 50: sift.test_reports.v1.TestReportService.CreateTestMeasurements:input_type -> sift.test_reports.v1.CreateTestMeasurementsRequest
	33, // 51: sift.test_reports.v1.TestReportService.ListTestMeasurements:input_type -> sift.test_reports.v1.ListTestMeasurementsRequest
	35, // 52: sift.test_reports.v1.TestReportService.CountTestSteps:input_type -> sift.test_reports.v1.CountTestStepsRequest
	37, // 53: sift.test_reports.v1.TestReportService.CountTestMeasurements:input_type -> sift.test_reports.v1.CountTestMeasurementsRequest
	39, // 54: sift.test_reports.v1.TestReportService.UpdateTestMeasurement:input_type -> sift.test_reports.v1.UpdateTestMeasurementRequest
	41, // 55: sift.test_reports.v1.TestReportService.DeleteTestMeasurement:input_type -> sift.test_reports.v1.DeleteTestMeasurementRequest
	10, // 56: sift.test_reports.v1.TestReportService.ImportTestReport:output_type -> sift.test_reports.v1.ImportTestReportResponse
	12, // 57: sift.test_reports.v1.TestReportService.CreateTestReport:output_type -> sift.test_reports.v1.CreateTestReportResponse
	14, // 58: sift.test_reports.v1.TestReportService.GetTestReport:output_type -> sift.test_reports.v1.GetTestReportResponse
	16, // 59: sift.test_reports.v1.TestReportService.ListTestReports:output_type -> sift.test_reports.v1.ListTestReportsResponse
	18, // 60: sift.test_reports.v1.TestReportService.UpdateTestReport:output_type -> sift.test_reports.v1.UpdateTestReportResponse
	20, // 61: sift.test_reports.v1.TestReportService.DeleteTestReport:output_type -> sift.test_reports.v1.DeleteTestReportResponse
	22, // 62: sift.test_reports.v1.TestReportService.CreateTestStep:output_type -> sift.test_reports.v1.CreateTestStepResponse
	24, // 63: sift.test_reports.v1.TestReportService.ListTestSteps:output_type -> sift.test_reports.v1.ListTestStepsResponse
	26, // 64: sift.test_reports.v1.TestReportService.UpdateTestStep:output_type -> sift.test_reports.v1.UpdateTestStepResponse
	28, // 65: sift.test_reports.v1.TestReportService.DeleteTestStep:output_type -> sift.test_reports.v1.DeleteTestStepResponse
	30, // 66: sift.test_reports.v1.TestReportService.CreateTestMeasurement:output_type -> sift.test_reports.v1.CreateTestMeasurementResponse
	32, // 67: sift.test_reports.v1.TestReportService.CreateTestMeasurements:output_type -> sift.test_reports.v1.CreateTestMeasurementsResponse
	34, // 68: sift.test_reports.v1.TestReportService.ListTestMeasurements:output_type -> sift.test_reports.v1.ListTestMeasurementsResponse
	36, // 69: sift.test_reports.v1.TestReportService.CountTestSteps:output_type -> sift.test_reports.v1.CountTestStepsResponse
	38, // 70: sift.test_reports.v1.TestReportService.CountTestMeasurements:output_type -> sift.test_reports.v1.CountTestMeasurementsResponse
	40, // 71: sift.test_reports.v1.TestReportService.UpdateTestMeasurement:output_type -> sift.test_reports.v1.UpdateTestMeasurementResponse
	42, // 72: sift.test_reports.v1.TestReportService.DeleteTestMeasurement:output_type -> sift.test_reports.v1.DeleteTestMeasurementResponse
	56, // [56:73] is the sub-list for method output_type
	39, // [39:56] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_sift_test_reports_v1_test_reports_proto_init() }
func file_sift_test_reports_v1_test_reports_proto_init() {
	if File_sift_test_reports_v1_test_reports_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_test_reports_v1_test_reports_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTestReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTestReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestStepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestStepsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestStepsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestStepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestStepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestMeasurementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestMeasurementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTestStepsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTestStepsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTestMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTestMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestMeasurementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestMeasurementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestMeasurementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_test_reports_v1_test_reports_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestMeasurementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_test_reports_v1_test_reports_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TestMeasurement_NumericValue)(nil),
		(*TestMeasurement_StringValue)(nil),
		(*TestMeasurement_BooleanValue)(nil),
		(*TestMeasurement_NumericBounds)(nil),
		(*TestMeasurement_StringBounds)(nil),
	}
	file_sift_test_reports_v1_test_reports_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_test_reports_v1_test_reports_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_test_reports_v1_test_reports_proto_goTypes,
		DependencyIndexes: file_sift_test_reports_v1_test_reports_proto_depIdxs,
		EnumInfos:         file_sift_test_reports_v1_test_reports_proto_enumTypes,
		MessageInfos:      file_sift_test_reports_v1_test_reports_proto_msgTypes,
	}.Build()
	File_sift_test_reports_v1_test_reports_proto = out.File
	file_sift_test_reports_v1_test_reports_proto_rawDesc = nil
	file_sift_test_reports_v1_test_reports_proto_goTypes = nil
	file_sift_test_reports_v1_test_reports_proto_depIdxs = nil
}
