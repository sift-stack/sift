// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/exports/v1/exports.proto

package exportsv1

import (
	_ "github.com/sift-stack/sift/go/gen/google/api"
	_ "github.com/sift-stack/sift/go/gen/protoc-gen-openapiv2/options"
	v2 "github.com/sift-stack/sift/go/gen/sift/calculated_channels/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExportOutputFormat int32

const (
	ExportOutputFormat_EXPORT_OUTPUT_FORMAT_UNSPECIFIED ExportOutputFormat = 0
	ExportOutputFormat_EXPORT_OUTPUT_FORMAT_CSV         ExportOutputFormat = 1
	ExportOutputFormat_EXPORT_OUTPUT_FORMAT_SUN         ExportOutputFormat = 2
)

// Enum value maps for ExportOutputFormat.
var (
	ExportOutputFormat_name = map[int32]string{
		0: "EXPORT_OUTPUT_FORMAT_UNSPECIFIED",
		1: "EXPORT_OUTPUT_FORMAT_CSV",
		2: "EXPORT_OUTPUT_FORMAT_SUN",
	}
	ExportOutputFormat_value = map[string]int32{
		"EXPORT_OUTPUT_FORMAT_UNSPECIFIED": 0,
		"EXPORT_OUTPUT_FORMAT_CSV":         1,
		"EXPORT_OUTPUT_FORMAT_SUN":         2,
	}
)

func (x ExportOutputFormat) Enum() *ExportOutputFormat {
	p := new(ExportOutputFormat)
	*p = x
	return p
}

func (x ExportOutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportOutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_exports_v1_exports_proto_enumTypes[0].Descriptor()
}

func (ExportOutputFormat) Type() protoreflect.EnumType {
	return &file_sift_exports_v1_exports_proto_enumTypes[0]
}

func (x ExportOutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportOutputFormat.Descriptor instead.
func (ExportOutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{0}
}

type ExportDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TimeSelection:
	//
	//	*ExportDataRequest_TimeRange
	//	*ExportDataRequest_RunsAndTimeRange
	//	*ExportDataRequest_AssetsAndTimeRange
	TimeSelection            isExportDataRequest_TimeSelection `protobuf_oneof:"time_selection"`
	ChannelIds               []string                          `protobuf:"bytes,4,rep,name=channel_ids,json=channelIds,proto3" json:"channel_ids,omitempty"`
	CalculatedChannelConfigs []*CalculatedChannelConfig        `protobuf:"bytes,5,rep,name=calculated_channel_configs,json=calculatedChannelConfigs,proto3" json:"calculated_channel_configs,omitempty"`
	OutputFormat             ExportOutputFormat                `protobuf:"varint,6,opt,name=output_format,json=outputFormat,proto3,enum=sift.exports.v1.ExportOutputFormat" json:"output_format,omitempty"`
	ExportOptions            *ExportOptions                    `protobuf:"bytes,7,opt,name=export_options,json=exportOptions,proto3" json:"export_options,omitempty"`
}

func (x *ExportDataRequest) Reset() {
	*x = ExportDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataRequest) ProtoMessage() {}

func (x *ExportDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataRequest.ProtoReflect.Descriptor instead.
func (*ExportDataRequest) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{0}
}

func (m *ExportDataRequest) GetTimeSelection() isExportDataRequest_TimeSelection {
	if m != nil {
		return m.TimeSelection
	}
	return nil
}

func (x *ExportDataRequest) GetTimeRange() *TimeRange {
	if x, ok := x.GetTimeSelection().(*ExportDataRequest_TimeRange); ok {
		return x.TimeRange
	}
	return nil
}

func (x *ExportDataRequest) GetRunsAndTimeRange() *RunsAndTimeRange {
	if x, ok := x.GetTimeSelection().(*ExportDataRequest_RunsAndTimeRange); ok {
		return x.RunsAndTimeRange
	}
	return nil
}

func (x *ExportDataRequest) GetAssetsAndTimeRange() *AssetsAndTimeRange {
	if x, ok := x.GetTimeSelection().(*ExportDataRequest_AssetsAndTimeRange); ok {
		return x.AssetsAndTimeRange
	}
	return nil
}

func (x *ExportDataRequest) GetChannelIds() []string {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ExportDataRequest) GetCalculatedChannelConfigs() []*CalculatedChannelConfig {
	if x != nil {
		return x.CalculatedChannelConfigs
	}
	return nil
}

func (x *ExportDataRequest) GetOutputFormat() ExportOutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return ExportOutputFormat_EXPORT_OUTPUT_FORMAT_UNSPECIFIED
}

func (x *ExportDataRequest) GetExportOptions() *ExportOptions {
	if x != nil {
		return x.ExportOptions
	}
	return nil
}

type isExportDataRequest_TimeSelection interface {
	isExportDataRequest_TimeSelection()
}

type ExportDataRequest_TimeRange struct {
	// If time_range used, channel_ids or calculated_chanel_configs must be provided to scope data.
	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3,oneof"`
}

type ExportDataRequest_RunsAndTimeRange struct {
	// Runs used to perform time selection and scope data. Times can optionally be provided to further scope within runs.
	// If channel_ids or calculated_channel_configs not provided, all channels from Run Assets are added to scope.
	RunsAndTimeRange *RunsAndTimeRange `protobuf:"bytes,2,opt,name=runs_and_time_range,json=runsAndTimeRange,proto3,oneof"`
}

type ExportDataRequest_AssetsAndTimeRange struct {
	// Assets and times provided to scope data.
	// If channel_ids or calculated_channel_configs not provided, all channels from Assets are added to scope.
	AssetsAndTimeRange *AssetsAndTimeRange `protobuf:"bytes,3,opt,name=assets_and_time_range,json=assetsAndTimeRange,proto3,oneof"`
}

func (*ExportDataRequest_TimeRange) isExportDataRequest_TimeSelection() {}

func (*ExportDataRequest_RunsAndTimeRange) isExportDataRequest_TimeSelection() {}

func (*ExportDataRequest_AssetsAndTimeRange) isExportDataRequest_TimeSelection() {}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{1}
}

func (x *TimeRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeRange) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

type RunsAndTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunIds    []string               `protobuf:"bytes,1,rep,name=run_ids,json=runIds,proto3" json:"run_ids,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
}

func (x *RunsAndTimeRange) Reset() {
	*x = RunsAndTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunsAndTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunsAndTimeRange) ProtoMessage() {}

func (x *RunsAndTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunsAndTimeRange.ProtoReflect.Descriptor instead.
func (*RunsAndTimeRange) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{2}
}

func (x *RunsAndTimeRange) GetRunIds() []string {
	if x != nil {
		return x.RunIds
	}
	return nil
}

func (x *RunsAndTimeRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RunsAndTimeRange) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

type AssetsAndTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIds  []string               `protobuf:"bytes,1,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
}

func (x *AssetsAndTimeRange) Reset() {
	*x = AssetsAndTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsAndTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsAndTimeRange) ProtoMessage() {}

func (x *AssetsAndTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsAndTimeRange.ProtoReflect.Descriptor instead.
func (*AssetsAndTimeRange) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{3}
}

func (x *AssetsAndTimeRange) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

func (x *AssetsAndTimeRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AssetsAndTimeRange) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

type CalculatedChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expression        string                                          `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	ChannelReferences []*v2.CalculatedChannelAbstractChannelReference `protobuf:"bytes,3,rep,name=channel_references,json=channelReferences,proto3" json:"channel_references,omitempty"`
	Units             *string                                         `protobuf:"bytes,4,opt,name=units,proto3,oneof" json:"units,omitempty"`
}

func (x *CalculatedChannelConfig) Reset() {
	*x = CalculatedChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedChannelConfig) ProtoMessage() {}

func (x *CalculatedChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedChannelConfig.ProtoReflect.Descriptor instead.
func (*CalculatedChannelConfig) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{4}
}

func (x *CalculatedChannelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CalculatedChannelConfig) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CalculatedChannelConfig) GetChannelReferences() []*v2.CalculatedChannelAbstractChannelReference {
	if x != nil {
		return x.ChannelReferences
	}
	return nil
}

func (x *CalculatedChannelConfig) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

type ExportOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to use legacy format string for channel headers which contains key-value metadata.
	UseLegacyFormat bool `protobuf:"varint,1,opt,name=use_legacy_format,json=useLegacyFormat,proto3" json:"use_legacy_format,omitempty"`
	// Whether to simplify channel names by removing the component part of the name if name is unique in export file
	SimplifyChannelNames bool `protobuf:"varint,2,opt,name=simplify_channel_names,json=simplifyChannelNames,proto3" json:"simplify_channel_names,omitempty"`
	// Whether to combine runs. e.g. channels from the same asset in different runs will be combined into a single column of data.
	CombineRuns bool `protobuf:"varint,3,opt,name=combine_runs,json=combineRuns,proto3" json:"combine_runs,omitempty"`
	// Split each asset into their own export file
	SplitExportByAsset bool `protobuf:"varint,4,opt,name=split_export_by_asset,json=splitExportByAsset,proto3" json:"split_export_by_asset,omitempty"`
	// Split each run into their own export file
	SplitExportByRun bool `protobuf:"varint,5,opt,name=split_export_by_run,json=splitExportByRun,proto3" json:"split_export_by_run,omitempty"`
}

func (x *ExportOptions) Reset() {
	*x = ExportOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportOptions) ProtoMessage() {}

func (x *ExportOptions) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportOptions.ProtoReflect.Descriptor instead.
func (*ExportOptions) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{5}
}

func (x *ExportOptions) GetUseLegacyFormat() bool {
	if x != nil {
		return x.UseLegacyFormat
	}
	return false
}

func (x *ExportOptions) GetSimplifyChannelNames() bool {
	if x != nil {
		return x.SimplifyChannelNames
	}
	return false
}

func (x *ExportOptions) GetCombineRuns() bool {
	if x != nil {
		return x.CombineRuns
	}
	return false
}

func (x *ExportOptions) GetSplitExportByAsset() bool {
	if x != nil {
		return x.SplitExportByAsset
	}
	return false
}

func (x *ExportOptions) GetSplitExportByRun() bool {
	if x != nil {
		return x.SplitExportByRun
	}
	return false
}

type ExportDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pre-signed URL of exported zip containing export files. This will be blank if
	// the job is processed as a background job, in which case `job_id` will be non-empty.
	PresignedUrl string `protobuf:"bytes,1,opt,name=presigned_url,json=presignedUrl,proto3" json:"presigned_url,omitempty"`
	// This will be non-empty if the export is being processed asynchronously in a background job.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *ExportDataResponse) Reset() {
	*x = ExportDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataResponse) ProtoMessage() {}

func (x *ExportDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataResponse.ProtoReflect.Descriptor instead.
func (*ExportDataResponse) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{6}
}

func (x *ExportDataResponse) GetPresignedUrl() string {
	if x != nil {
		return x.PresignedUrl
	}
	return ""
}

func (x *ExportDataResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetDownloadUrlRequest) Reset() {
	*x = GetDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadUrlRequest) ProtoMessage() {}

func (x *GetDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{7}
}

func (x *GetDownloadUrlRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresignedUrl string `protobuf:"bytes,1,opt,name=presigned_url,json=presignedUrl,proto3" json:"presigned_url,omitempty"`
}

func (x *GetDownloadUrlResponse) Reset() {
	*x = GetDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_exports_v1_exports_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadUrlResponse) ProtoMessage() {}

func (x *GetDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_exports_v1_exports_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_sift_exports_v1_exports_proto_rawDescGZIP(), []int{8}
}

func (x *GetDownloadUrlResponse) GetPresignedUrl() string {
	if x != nil {
		return x.PresignedUrl
	}
	return ""
}

var File_sift_exports_v1_exports_proto protoreflect.FileDescriptor

var file_sift_exports_v1_exports_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x35, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x04, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x72, 0x75,
	0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x75,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x58,
	0x0a, 0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x6b,
	0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x18, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x01, 0x0a,
	0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xf6, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52,
	0x75, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x5a, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x2a, 0x76, 0x0a, 0x12, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x43,
	0x53, 0x56, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x55, 0x4e,
	0x10, 0x02, 0x32, 0xf4, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x92, 0x41,
	0x1a, 0x12, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x92, 0x41, 0x40, 0x12, 0x0e, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x1a, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x6a, 0x6f, 0x62, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x75, 0x72, 0x6c, 0x42, 0xd4, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69,
	0x66, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x53, 0x45, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x53, 0x69, 0x66, 0x74, 0x5c,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x92, 0x41, 0x13, 0x12, 0x11, 0x0a,
	0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_exports_v1_exports_proto_rawDescOnce sync.Once
	file_sift_exports_v1_exports_proto_rawDescData = file_sift_exports_v1_exports_proto_rawDesc
)

func file_sift_exports_v1_exports_proto_rawDescGZIP() []byte {
	file_sift_exports_v1_exports_proto_rawDescOnce.Do(func() {
		file_sift_exports_v1_exports_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_exports_v1_exports_proto_rawDescData)
	})
	return file_sift_exports_v1_exports_proto_rawDescData
}

var file_sift_exports_v1_exports_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sift_exports_v1_exports_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_sift_exports_v1_exports_proto_goTypes = []interface{}{
	(ExportOutputFormat)(0),                              // 0: sift.exports.v1.ExportOutputFormat
	(*ExportDataRequest)(nil),                            // 1: sift.exports.v1.ExportDataRequest
	(*TimeRange)(nil),                                    // 2: sift.exports.v1.TimeRange
	(*RunsAndTimeRange)(nil),                             // 3: sift.exports.v1.RunsAndTimeRange
	(*AssetsAndTimeRange)(nil),                           // 4: sift.exports.v1.AssetsAndTimeRange
	(*CalculatedChannelConfig)(nil),                      // 5: sift.exports.v1.CalculatedChannelConfig
	(*ExportOptions)(nil),                                // 6: sift.exports.v1.ExportOptions
	(*ExportDataResponse)(nil),                           // 7: sift.exports.v1.ExportDataResponse
	(*GetDownloadUrlRequest)(nil),                        // 8: sift.exports.v1.GetDownloadUrlRequest
	(*GetDownloadUrlResponse)(nil),                       // 9: sift.exports.v1.GetDownloadUrlResponse
	(*timestamppb.Timestamp)(nil),                        // 10: google.protobuf.Timestamp
	(*v2.CalculatedChannelAbstractChannelReference)(nil), // 11: sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference
}
var file_sift_exports_v1_exports_proto_depIdxs = []int32{
	2,  // 0: sift.exports.v1.ExportDataRequest.time_range:type_name -> sift.exports.v1.TimeRange
	3,  // 1: sift.exports.v1.ExportDataRequest.runs_and_time_range:type_name -> sift.exports.v1.RunsAndTimeRange
	4,  // 2: sift.exports.v1.ExportDataRequest.assets_and_time_range:type_name -> sift.exports.v1.AssetsAndTimeRange
	5,  // 3: sift.exports.v1.ExportDataRequest.calculated_channel_configs:type_name -> sift.exports.v1.CalculatedChannelConfig
	0,  // 4: sift.exports.v1.ExportDataRequest.output_format:type_name -> sift.exports.v1.ExportOutputFormat
	6,  // 5: sift.exports.v1.ExportDataRequest.export_options:type_name -> sift.exports.v1.ExportOptions
	10, // 6: sift.exports.v1.TimeRange.start_time:type_name -> google.protobuf.Timestamp
	10, // 7: sift.exports.v1.TimeRange.stop_time:type_name -> google.protobuf.Timestamp
	10, // 8: sift.exports.v1.RunsAndTimeRange.start_time:type_name -> google.protobuf.Timestamp
	10, // 9: sift.exports.v1.RunsAndTimeRange.stop_time:type_name -> google.protobuf.Timestamp
	10, // 10: sift.exports.v1.AssetsAndTimeRange.start_time:type_name -> google.protobuf.Timestamp
	10, // 11: sift.exports.v1.AssetsAndTimeRange.stop_time:type_name -> google.protobuf.Timestamp
	11, // 12: sift.exports.v1.CalculatedChannelConfig.channel_references:type_name -> sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference
	1,  // 13: sift.exports.v1.ExportService.ExportData:input_type -> sift.exports.v1.ExportDataRequest
	8,  // 14: sift.exports.v1.ExportService.GetDownloadUrl:input_type -> sift.exports.v1.GetDownloadUrlRequest
	7,  // 15: sift.exports.v1.ExportService.ExportData:output_type -> sift.exports.v1.ExportDataResponse
	9,  // 16: sift.exports.v1.ExportService.GetDownloadUrl:output_type -> sift.exports.v1.GetDownloadUrlResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_sift_exports_v1_exports_proto_init() }
func file_sift_exports_v1_exports_proto_init() {
	if File_sift_exports_v1_exports_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_exports_v1_exports_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunsAndTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsAndTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_exports_v1_exports_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_exports_v1_exports_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ExportDataRequest_TimeRange)(nil),
		(*ExportDataRequest_RunsAndTimeRange)(nil),
		(*ExportDataRequest_AssetsAndTimeRange)(nil),
	}
	file_sift_exports_v1_exports_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_exports_v1_exports_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_exports_v1_exports_proto_goTypes,
		DependencyIndexes: file_sift_exports_v1_exports_proto_depIdxs,
		EnumInfos:         file_sift_exports_v1_exports_proto_enumTypes,
		MessageInfos:      file_sift_exports_v1_exports_proto_msgTypes,
	}.Build()
	File_sift_exports_v1_exports_proto = out.File
	file_sift_exports_v1_exports_proto_rawDesc = nil
	file_sift_exports_v1_exports_proto_goTypes = nil
	file_sift_exports_v1_exports_proto_depIdxs = nil
}
