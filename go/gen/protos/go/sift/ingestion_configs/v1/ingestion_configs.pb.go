// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/ingestion_configs/v1/ingestion_configs.proto

package ingestion_configsv1

import (
	_ "github.com/sift-stack/sift/go/gen/protos/go/google/api"
	_ "github.com/sift-stack/sift/go/gen/protos/go/protoc-gen-openapiv2/options"
	v1 "github.com/sift-stack/sift/go/gen/protos/go/sift/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IngestionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfigId string `protobuf:"bytes,1,opt,name=ingestion_config_id,json=ingestionConfigId,proto3" json:"ingestion_config_id,omitempty"`
	AssetId           string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ClientKey         string `protobuf:"bytes,3,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *IngestionConfig) Reset() {
	*x = IngestionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionConfig) ProtoMessage() {}

func (x *IngestionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionConfig.ProtoReflect.Descriptor instead.
func (*IngestionConfig) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{0}
}

func (x *IngestionConfig) GetIngestionConfigId() string {
	if x != nil {
		return x.IngestionConfigId
	}
	return ""
}

func (x *IngestionConfig) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *IngestionConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

type FlowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Channels []*ChannelConfig `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *FlowConfig) Reset() {
	*x = FlowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowConfig) ProtoMessage() {}

func (x *FlowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowConfig.ProtoReflect.Descriptor instead.
func (*FlowConfig) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{1}
}

func (x *FlowConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowConfig) GetChannels() []*ChannelConfig {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Component        string                       `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
	Unit             string                       `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Description      string                       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DataType         v1.ChannelDataType           `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=sift.common.type.v1.ChannelDataType" json:"data_type,omitempty"`
	EnumTypes        []*v1.ChannelEnumType        `protobuf:"bytes,6,rep,name=enum_types,json=enumTypes,proto3" json:"enum_types,omitempty"`
	BitFieldElements []*v1.ChannelBitFieldElement `protobuf:"bytes,7,rep,name=bit_field_elements,json=bitFieldElements,proto3" json:"bit_field_elements,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelConfig) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *ChannelConfig) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ChannelConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelConfig) GetDataType() v1.ChannelDataType {
	if x != nil {
		return x.DataType
	}
	return v1.ChannelDataType(0)
}

func (x *ChannelConfig) GetEnumTypes() []*v1.ChannelEnumType {
	if x != nil {
		return x.EnumTypes
	}
	return nil
}

func (x *ChannelConfig) GetBitFieldElements() []*v1.ChannelBitFieldElement {
	if x != nil {
		return x.BitFieldElements
	}
	return nil
}

// The request for a call to `IngestionConfigService_GetIngestionConfig` to retrieve an ingestion config.
type GetIngestionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfigId string `protobuf:"bytes,1,opt,name=ingestion_config_id,json=ingestionConfigId,proto3" json:"ingestion_config_id,omitempty"`
}

func (x *GetIngestionConfigRequest) Reset() {
	*x = GetIngestionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIngestionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIngestionConfigRequest) ProtoMessage() {}

func (x *GetIngestionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIngestionConfigRequest.ProtoReflect.Descriptor instead.
func (*GetIngestionConfigRequest) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{3}
}

func (x *GetIngestionConfigRequest) GetIngestionConfigId() string {
	if x != nil {
		return x.IngestionConfigId
	}
	return ""
}

// The result of a call to `IngestionConfigService_GetIngestionConfig`.
type GetIngestionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfig *IngestionConfig `protobuf:"bytes,1,opt,name=ingestion_config,json=ingestionConfig,proto3" json:"ingestion_config,omitempty"`
}

func (x *GetIngestionConfigResponse) Reset() {
	*x = GetIngestionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIngestionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIngestionConfigResponse) ProtoMessage() {}

func (x *GetIngestionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIngestionConfigResponse.ProtoReflect.Descriptor instead.
func (*GetIngestionConfigResponse) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{4}
}

func (x *GetIngestionConfigResponse) GetIngestionConfig() *IngestionConfig {
	if x != nil {
		return x.IngestionConfig
	}
	return nil
}

// The request for a call to `IngestionConfigService_ListIngestionConfigs` to retrieve ingestion configs.
type CreateIngestionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName      string        `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	Flows          []*FlowConfig `protobuf:"bytes,2,rep,name=flows,proto3" json:"flows,omitempty"`
	OrganizationId string        `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The `client_key` field is a user-defined string you can supply to uniquely identify
	// an ingestion config (and retrieve it via `GetIngestionConfig`).
	// An error is returned if you try to create an ingestion config with a
	// client_key that already exists.
	ClientKey string `protobuf:"bytes,4,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *CreateIngestionConfigRequest) Reset() {
	*x = CreateIngestionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIngestionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIngestionConfigRequest) ProtoMessage() {}

func (x *CreateIngestionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIngestionConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateIngestionConfigRequest) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{5}
}

func (x *CreateIngestionConfigRequest) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *CreateIngestionConfigRequest) GetFlows() []*FlowConfig {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *CreateIngestionConfigRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateIngestionConfigRequest) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

// The result of a call to `IngestionConfigService_CreateIngestionConfig`.
type CreateIngestionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfig *IngestionConfig `protobuf:"bytes,1,opt,name=ingestion_config,json=ingestionConfig,proto3" json:"ingestion_config,omitempty"`
}

func (x *CreateIngestionConfigResponse) Reset() {
	*x = CreateIngestionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIngestionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIngestionConfigResponse) ProtoMessage() {}

func (x *CreateIngestionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIngestionConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateIngestionConfigResponse) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{6}
}

func (x *CreateIngestionConfigResponse) GetIngestionConfig() *IngestionConfig {
	if x != nil {
		return x.IngestionConfig
	}
	return nil
}

// The request for a call to `IngestionConfigService_ListIngestionConfigs` to retrieve ingestion configs.
type ListIngestionConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of ingestion configs to return. The service may return fewer than this value.
	// If unspecified, at most 50 ingestion configs will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIngestionConfigs` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListIngestionConfigs` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `ingestion_config_id`, `client_key`, `asset_id`, `created_date`, and `modified_date`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/ingestion/api#sift_ingestion_configs_v1-proto). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListIngestionConfigsRequest) Reset() {
	*x = ListIngestionConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionConfigsRequest) ProtoMessage() {}

func (x *ListIngestionConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListIngestionConfigsRequest) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{7}
}

func (x *ListIngestionConfigsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIngestionConfigsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListIngestionConfigsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// The result of a call to `IngestionConfigService_ListIngestionConfigs`.
type ListIngestionConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfigs []*IngestionConfig `protobuf:"bytes,1,rep,name=ingestion_configs,json=ingestionConfigs,proto3" json:"ingestion_configs,omitempty"`
	NextPageToken    string             `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIngestionConfigsResponse) Reset() {
	*x = ListIngestionConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionConfigsResponse) ProtoMessage() {}

func (x *ListIngestionConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListIngestionConfigsResponse) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{8}
}

func (x *ListIngestionConfigsResponse) GetIngestionConfigs() []*IngestionConfig {
	if x != nil {
		return x.IngestionConfigs
	}
	return nil
}

func (x *ListIngestionConfigsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for a call to `IngestionConfigService_CreateIngestionConfigFlows` to create ingestion config flows.
type CreateIngestionConfigFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfigId string `protobuf:"bytes,1,opt,name=ingestion_config_id,json=ingestionConfigId,proto3" json:"ingestion_config_id,omitempty"`
	// These flows must have unique names. If you try to send a flow with a name that already exists for an ingestion config, it will return an error.
	Flows []*FlowConfig `protobuf:"bytes,2,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *CreateIngestionConfigFlowsRequest) Reset() {
	*x = CreateIngestionConfigFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIngestionConfigFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIngestionConfigFlowsRequest) ProtoMessage() {}

func (x *CreateIngestionConfigFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIngestionConfigFlowsRequest.ProtoReflect.Descriptor instead.
func (*CreateIngestionConfigFlowsRequest) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{9}
}

func (x *CreateIngestionConfigFlowsRequest) GetIngestionConfigId() string {
	if x != nil {
		return x.IngestionConfigId
	}
	return ""
}

func (x *CreateIngestionConfigFlowsRequest) GetFlows() []*FlowConfig {
	if x != nil {
		return x.Flows
	}
	return nil
}

// The result of a call to `IngestionConfigService_CreateIngestionConfigFlows`.
type CreateIngestionConfigFlowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateIngestionConfigFlowsResponse) Reset() {
	*x = CreateIngestionConfigFlowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIngestionConfigFlowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIngestionConfigFlowsResponse) ProtoMessage() {}

func (x *CreateIngestionConfigFlowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIngestionConfigFlowsResponse.ProtoReflect.Descriptor instead.
func (*CreateIngestionConfigFlowsResponse) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{10}
}

// The request for a call to `IngestionConfigService_ListIngestionConfigFlows` to retrieve ingestion config flows.
type ListIngestionConfigFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionConfigId string `protobuf:"bytes,1,opt,name=ingestion_config_id,json=ingestionConfigId,proto3" json:"ingestion_config_id,omitempty"`
	// The maximum number of ingestion config flows to return. The service may return fewer than this value.
	// If unspecified, at most 50 ingestion config flows will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIngestionConfigFlows` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListIngestionConfigFlows` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `flow_name`, `flow_id`, `created_date`, and `modified_date`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/ingestion/api#sift_ingestion_configs_v1-proto). Optional.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListIngestionConfigFlowsRequest) Reset() {
	*x = ListIngestionConfigFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionConfigFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionConfigFlowsRequest) ProtoMessage() {}

func (x *ListIngestionConfigFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionConfigFlowsRequest.ProtoReflect.Descriptor instead.
func (*ListIngestionConfigFlowsRequest) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{11}
}

func (x *ListIngestionConfigFlowsRequest) GetIngestionConfigId() string {
	if x != nil {
		return x.IngestionConfigId
	}
	return ""
}

func (x *ListIngestionConfigFlowsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIngestionConfigFlowsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListIngestionConfigFlowsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// The result of a call to `IngestionConfigService_ListIngestionConfigFlows`.
type ListIngestionConfigFlowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows         []*FlowConfig `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIngestionConfigFlowsResponse) Reset() {
	*x = ListIngestionConfigFlowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIngestionConfigFlowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIngestionConfigFlowsResponse) ProtoMessage() {}

func (x *ListIngestionConfigFlowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIngestionConfigFlowsResponse.ProtoReflect.Descriptor instead.
func (*ListIngestionConfigFlowsResponse) Descriptor() ([]byte, []int) {
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP(), []int{12}
}

func (x *ListIngestionConfigFlowsResponse) GetFlows() []*FlowConfig {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *ListIngestionConfigFlowsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_sift_ingestion_configs_v1_ingestion_configs_proto protoreflect.FileDescriptor

var file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x73,
	0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a,
	0x0f, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x33, 0x0a, 0x13, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x11, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x6b, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x59, 0x0a, 0x12, 0x62, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x69, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x62, 0x69, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x78,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x10,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd1, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x10, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9f, 0x01, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x11, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90,
	0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x95, 0x0c,
	0x0a, 0x16, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x92, 0x41,
	0x34, 0x12, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe7, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x92, 0x41, 0x34, 0x12, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xf5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x36, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6c, 0x92, 0x41, 0x48, 0x12, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x30, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xaa,
	0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x3c, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x4e,
	0x12, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x1a, 0x30, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x5b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5d, 0x28, 0x2f, 0x67,
	0x6c, 0x6f, 0x73, 0x73, 0x61, 0x72, 0x79, 0x23, 0x66, 0x6c, 0x6f, 0x77, 0x29, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0xb9, 0x02, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x3a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x63, 0x12, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x1a, 0x47, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x5b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5d,
	0x28, 0x2f, 0x67, 0x6c, 0x6f, 0x73, 0x73, 0x61, 0x72, 0x79, 0x23, 0x66, 0x6c, 0x6f, 0x77, 0x29,
	0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x1a, 0xbb, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x12, 0x5a,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5b, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5d, 0x28, 0x2f, 0x67,
	0x6c, 0x6f, 0x73, 0x73, 0x61, 0x72, 0x79, 0x23, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x2e, 0x1a, 0x59, 0x0a, 0x2b, 0x52, 0x65,
	0x61, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x77, 0x68,
	0x61, 0x74, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x20, 0x61, 0x72, 0x65, 0x2e, 0x12, 0x2a, 0x2f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x61,
	0x6d, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0xb2, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69,
	0x66, 0x74, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x49,
	0x58, 0xaa, 0x02, 0x18, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x53,
	0x69, 0x66, 0x74, 0x5c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1a, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x92, 0x41, 0x1c, 0x12, 0x1a,
	0x0a, 0x18, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescOnce sync.Once
	file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescData = file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDesc
)

func file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescGZIP() []byte {
	file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescOnce.Do(func() {
		file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescData)
	})
	return file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDescData
}

var file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sift_ingestion_configs_v1_ingestion_configs_proto_goTypes = []interface{}{
	(*IngestionConfig)(nil),                    // 0: sift.ingestion_configs.v1.IngestionConfig
	(*FlowConfig)(nil),                         // 1: sift.ingestion_configs.v1.FlowConfig
	(*ChannelConfig)(nil),                      // 2: sift.ingestion_configs.v1.ChannelConfig
	(*GetIngestionConfigRequest)(nil),          // 3: sift.ingestion_configs.v1.GetIngestionConfigRequest
	(*GetIngestionConfigResponse)(nil),         // 4: sift.ingestion_configs.v1.GetIngestionConfigResponse
	(*CreateIngestionConfigRequest)(nil),       // 5: sift.ingestion_configs.v1.CreateIngestionConfigRequest
	(*CreateIngestionConfigResponse)(nil),      // 6: sift.ingestion_configs.v1.CreateIngestionConfigResponse
	(*ListIngestionConfigsRequest)(nil),        // 7: sift.ingestion_configs.v1.ListIngestionConfigsRequest
	(*ListIngestionConfigsResponse)(nil),       // 8: sift.ingestion_configs.v1.ListIngestionConfigsResponse
	(*CreateIngestionConfigFlowsRequest)(nil),  // 9: sift.ingestion_configs.v1.CreateIngestionConfigFlowsRequest
	(*CreateIngestionConfigFlowsResponse)(nil), // 10: sift.ingestion_configs.v1.CreateIngestionConfigFlowsResponse
	(*ListIngestionConfigFlowsRequest)(nil),    // 11: sift.ingestion_configs.v1.ListIngestionConfigFlowsRequest
	(*ListIngestionConfigFlowsResponse)(nil),   // 12: sift.ingestion_configs.v1.ListIngestionConfigFlowsResponse
	(v1.ChannelDataType)(0),                    // 13: sift.common.type.v1.ChannelDataType
	(*v1.ChannelEnumType)(nil),                 // 14: sift.common.type.v1.ChannelEnumType
	(*v1.ChannelBitFieldElement)(nil),          // 15: sift.common.type.v1.ChannelBitFieldElement
}
var file_sift_ingestion_configs_v1_ingestion_configs_proto_depIdxs = []int32{
	2,  // 0: sift.ingestion_configs.v1.FlowConfig.channels:type_name -> sift.ingestion_configs.v1.ChannelConfig
	13, // 1: sift.ingestion_configs.v1.ChannelConfig.data_type:type_name -> sift.common.type.v1.ChannelDataType
	14, // 2: sift.ingestion_configs.v1.ChannelConfig.enum_types:type_name -> sift.common.type.v1.ChannelEnumType
	15, // 3: sift.ingestion_configs.v1.ChannelConfig.bit_field_elements:type_name -> sift.common.type.v1.ChannelBitFieldElement
	0,  // 4: sift.ingestion_configs.v1.GetIngestionConfigResponse.ingestion_config:type_name -> sift.ingestion_configs.v1.IngestionConfig
	1,  // 5: sift.ingestion_configs.v1.CreateIngestionConfigRequest.flows:type_name -> sift.ingestion_configs.v1.FlowConfig
	0,  // 6: sift.ingestion_configs.v1.CreateIngestionConfigResponse.ingestion_config:type_name -> sift.ingestion_configs.v1.IngestionConfig
	0,  // 7: sift.ingestion_configs.v1.ListIngestionConfigsResponse.ingestion_configs:type_name -> sift.ingestion_configs.v1.IngestionConfig
	1,  // 8: sift.ingestion_configs.v1.CreateIngestionConfigFlowsRequest.flows:type_name -> sift.ingestion_configs.v1.FlowConfig
	1,  // 9: sift.ingestion_configs.v1.ListIngestionConfigFlowsResponse.flows:type_name -> sift.ingestion_configs.v1.FlowConfig
	3,  // 10: sift.ingestion_configs.v1.IngestionConfigService.GetIngestionConfig:input_type -> sift.ingestion_configs.v1.GetIngestionConfigRequest
	5,  // 11: sift.ingestion_configs.v1.IngestionConfigService.CreateIngestionConfig:input_type -> sift.ingestion_configs.v1.CreateIngestionConfigRequest
	7,  // 12: sift.ingestion_configs.v1.IngestionConfigService.ListIngestionConfigs:input_type -> sift.ingestion_configs.v1.ListIngestionConfigsRequest
	9,  // 13: sift.ingestion_configs.v1.IngestionConfigService.CreateIngestionConfigFlows:input_type -> sift.ingestion_configs.v1.CreateIngestionConfigFlowsRequest
	11, // 14: sift.ingestion_configs.v1.IngestionConfigService.ListIngestionConfigFlows:input_type -> sift.ingestion_configs.v1.ListIngestionConfigFlowsRequest
	4,  // 15: sift.ingestion_configs.v1.IngestionConfigService.GetIngestionConfig:output_type -> sift.ingestion_configs.v1.GetIngestionConfigResponse
	6,  // 16: sift.ingestion_configs.v1.IngestionConfigService.CreateIngestionConfig:output_type -> sift.ingestion_configs.v1.CreateIngestionConfigResponse
	8,  // 17: sift.ingestion_configs.v1.IngestionConfigService.ListIngestionConfigs:output_type -> sift.ingestion_configs.v1.ListIngestionConfigsResponse
	10, // 18: sift.ingestion_configs.v1.IngestionConfigService.CreateIngestionConfigFlows:output_type -> sift.ingestion_configs.v1.CreateIngestionConfigFlowsResponse
	12, // 19: sift.ingestion_configs.v1.IngestionConfigService.ListIngestionConfigFlows:output_type -> sift.ingestion_configs.v1.ListIngestionConfigFlowsResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sift_ingestion_configs_v1_ingestion_configs_proto_init() }
func file_sift_ingestion_configs_v1_ingestion_configs_proto_init() {
	if File_sift_ingestion_configs_v1_ingestion_configs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIngestionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIngestionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIngestionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIngestionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIngestionConfigFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIngestionConfigFlowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionConfigFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIngestionConfigFlowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_ingestion_configs_v1_ingestion_configs_proto_goTypes,
		DependencyIndexes: file_sift_ingestion_configs_v1_ingestion_configs_proto_depIdxs,
		MessageInfos:      file_sift_ingestion_configs_v1_ingestion_configs_proto_msgTypes,
	}.Build()
	File_sift_ingestion_configs_v1_ingestion_configs_proto = out.File
	file_sift_ingestion_configs_v1_ingestion_configs_proto_rawDesc = nil
	file_sift_ingestion_configs_v1_ingestion_configs_proto_goTypes = nil
	file_sift_ingestion_configs_v1_ingestion_configs_proto_depIdxs = nil
}
