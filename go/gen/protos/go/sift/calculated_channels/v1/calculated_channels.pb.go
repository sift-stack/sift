// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/calculated_channels/v1/calculated_channels.proto

package calculated_channelsv1

import (
	_ "github.com/sift-stack/sift/go/gen/protos/go/google/api"
	_ "github.com/sift-stack/sift/go/gen/protos/go/protoc-gen-openapiv2/options"
	v1 "github.com/sift-stack/sift/go/gen/protos/go/sift/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExpressionIdentifierType int32

const (
	// Deprecated: Do not use.
	ExpressionIdentifierType_EXPRESSION_IDENTIFIER_TYPE_UNSPECIFIED ExpressionIdentifierType = 0
	ExpressionIdentifierType_EXPRESSION_IDENTIFIER_TYPE_FUNCTION    ExpressionIdentifierType = 1
	ExpressionIdentifierType_EXPRESSION_IDENTIFIER_TYPE_CHANNEL     ExpressionIdentifierType = 2
)

// Enum value maps for ExpressionIdentifierType.
var (
	ExpressionIdentifierType_name = map[int32]string{
		0: "EXPRESSION_IDENTIFIER_TYPE_UNSPECIFIED",
		1: "EXPRESSION_IDENTIFIER_TYPE_FUNCTION",
		2: "EXPRESSION_IDENTIFIER_TYPE_CHANNEL",
	}
	ExpressionIdentifierType_value = map[string]int32{
		"EXPRESSION_IDENTIFIER_TYPE_UNSPECIFIED": 0,
		"EXPRESSION_IDENTIFIER_TYPE_FUNCTION":    1,
		"EXPRESSION_IDENTIFIER_TYPE_CHANNEL":     2,
	}
)

func (x ExpressionIdentifierType) Enum() *ExpressionIdentifierType {
	p := new(ExpressionIdentifierType)
	*p = x
	return p
}

func (x ExpressionIdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionIdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes[0].Descriptor()
}

func (ExpressionIdentifierType) Type() protoreflect.EnumType {
	return &file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes[0]
}

func (x ExpressionIdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionIdentifierType.Descriptor instead.
func (ExpressionIdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{0}
}

type ExpressionIdentifierLibrary int32

const (
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_UNSPECIFIED ExpressionIdentifierLibrary = 0
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_MATH        ExpressionIdentifierLibrary = 1
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_STRING      ExpressionIdentifierLibrary = 2
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_LIST        ExpressionIdentifierLibrary = 3
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_ITER        ExpressionIdentifierLibrary = 4
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_STATEFUL    ExpressionIdentifierLibrary = 5
	ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_SUMMARY     ExpressionIdentifierLibrary = 6
)

// Enum value maps for ExpressionIdentifierLibrary.
var (
	ExpressionIdentifierLibrary_name = map[int32]string{
		0: "EXPRESSION_IDENTIFIER_LIBRARY_UNSPECIFIED",
		1: "EXPRESSION_IDENTIFIER_LIBRARY_MATH",
		2: "EXPRESSION_IDENTIFIER_LIBRARY_STRING",
		3: "EXPRESSION_IDENTIFIER_LIBRARY_LIST",
		4: "EXPRESSION_IDENTIFIER_LIBRARY_ITER",
		5: "EXPRESSION_IDENTIFIER_LIBRARY_STATEFUL",
		6: "EXPRESSION_IDENTIFIER_LIBRARY_SUMMARY",
	}
	ExpressionIdentifierLibrary_value = map[string]int32{
		"EXPRESSION_IDENTIFIER_LIBRARY_UNSPECIFIED": 0,
		"EXPRESSION_IDENTIFIER_LIBRARY_MATH":        1,
		"EXPRESSION_IDENTIFIER_LIBRARY_STRING":      2,
		"EXPRESSION_IDENTIFIER_LIBRARY_LIST":        3,
		"EXPRESSION_IDENTIFIER_LIBRARY_ITER":        4,
		"EXPRESSION_IDENTIFIER_LIBRARY_STATEFUL":    5,
		"EXPRESSION_IDENTIFIER_LIBRARY_SUMMARY":     6,
	}
)

func (x ExpressionIdentifierLibrary) Enum() *ExpressionIdentifierLibrary {
	p := new(ExpressionIdentifierLibrary)
	*p = x
	return p
}

func (x ExpressionIdentifierLibrary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionIdentifierLibrary) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes[1].Descriptor()
}

func (ExpressionIdentifierLibrary) Type() protoreflect.EnumType {
	return &file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes[1]
}

func (x ExpressionIdentifierLibrary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionIdentifierLibrary.Descriptor instead.
func (ExpressionIdentifierLibrary) EnumDescriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{1}
}

type ExpressionMode int32

const (
	// Deprecated: Do not use.
	ExpressionMode_EXPRESSION_MODE_UNSPECIFIED         ExpressionMode = 0
	ExpressionMode_EXPRESSION_MODE_RULES               ExpressionMode = 1
	ExpressionMode_EXPRESSION_MODE_CALCULATED_CHANNELS ExpressionMode = 2
	ExpressionMode_EXPRESSION_MODE_RULER               ExpressionMode = 3
)

// Enum value maps for ExpressionMode.
var (
	ExpressionMode_name = map[int32]string{
		0: "EXPRESSION_MODE_UNSPECIFIED",
		1: "EXPRESSION_MODE_RULES",
		2: "EXPRESSION_MODE_CALCULATED_CHANNELS",
		3: "EXPRESSION_MODE_RULER",
	}
	ExpressionMode_value = map[string]int32{
		"EXPRESSION_MODE_UNSPECIFIED":         0,
		"EXPRESSION_MODE_RULES":               1,
		"EXPRESSION_MODE_CALCULATED_CHANNELS": 2,
		"EXPRESSION_MODE_RULER":               3,
	}
)

func (x ExpressionMode) Enum() *ExpressionMode {
	p := new(ExpressionMode)
	*p = x
	return p
}

func (x ExpressionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes[2].Descriptor()
}

func (ExpressionMode) Type() protoreflect.EnumType {
	return &file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes[2]
}

func (x ExpressionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionMode.Descriptor instead.
func (ExpressionMode) EnumDescriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{2}
}

type ExpressionChannelReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelReference string `protobuf:"bytes,1,opt,name=channel_reference,json=channelReference,proto3" json:"channel_reference,omitempty"`
	ChannelId        string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ExpressionChannelReference) Reset() {
	*x = ExpressionChannelReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionChannelReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionChannelReference) ProtoMessage() {}

func (x *ExpressionChannelReference) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionChannelReference.ProtoReflect.Descriptor instead.
func (*ExpressionChannelReference) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{0}
}

func (x *ExpressionChannelReference) GetChannelReference() string {
	if x != nil {
		return x.ChannelReference
	}
	return ""
}

func (x *ExpressionChannelReference) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ExpressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from the channel reference in the expression string (e.g. $1) to the channel id (uuid).
	// This is deprecated and should be passed in expression_channel_references instead.
	//
	// Deprecated: Do not use.
	ChannelReferences           map[string]string             `protobuf:"bytes,1,rep,name=channel_references,json=channelReferences,proto3" json:"channel_references,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Expression                  string                        `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	ExpressionChannelReferences []*ExpressionChannelReference `protobuf:"bytes,3,rep,name=expression_channel_references,json=expressionChannelReferences,proto3" json:"expression_channel_references,omitempty"`
}

func (x *ExpressionRequest) Reset() {
	*x = ExpressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionRequest) ProtoMessage() {}

func (x *ExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionRequest.ProtoReflect.Descriptor instead.
func (*ExpressionRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Do not use.
func (x *ExpressionRequest) GetChannelReferences() map[string]string {
	if x != nil {
		return x.ChannelReferences
	}
	return nil
}

func (x *ExpressionRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ExpressionRequest) GetExpressionChannelReferences() []*ExpressionChannelReference {
	if x != nil {
		return x.ExpressionChannelReferences
	}
	return nil
}

type ListExpressionIdentifiersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defaults to 1000. Max of 10,000.
	PageSize  uint32         `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string         `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Mode      ExpressionMode `protobuf:"varint,3,opt,name=mode,proto3,enum=sift.calculated_channels.v1.ExpressionMode" json:"mode,omitempty"`
}

func (x *ListExpressionIdentifiersRequest) Reset() {
	*x = ListExpressionIdentifiersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExpressionIdentifiersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExpressionIdentifiersRequest) ProtoMessage() {}

func (x *ListExpressionIdentifiersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExpressionIdentifiersRequest.ProtoReflect.Descriptor instead.
func (*ListExpressionIdentifiersRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{2}
}

func (x *ListExpressionIdentifiersRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExpressionIdentifiersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListExpressionIdentifiersRequest) GetMode() ExpressionMode {
	if x != nil {
		return x.Mode
	}
	return ExpressionMode_EXPRESSION_MODE_UNSPECIFIED
}

type ListExpressionIdentifiersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers []*ExpressionIdentifier `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (x *ListExpressionIdentifiersResponse) Reset() {
	*x = ListExpressionIdentifiersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExpressionIdentifiersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExpressionIdentifiersResponse) ProtoMessage() {}

func (x *ListExpressionIdentifiersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExpressionIdentifiersResponse.ProtoReflect.Descriptor instead.
func (*ListExpressionIdentifiersResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{3}
}

func (x *ListExpressionIdentifiersResponse) GetIdentifiers() []*ExpressionIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type ExpressionIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Type        ExpressionIdentifierType    `protobuf:"varint,3,opt,name=type,proto3,enum=sift.calculated_channels.v1.ExpressionIdentifierType" json:"type,omitempty"`
	DisplayName string                      `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Library     ExpressionIdentifierLibrary `protobuf:"varint,5,opt,name=library,proto3,enum=sift.calculated_channels.v1.ExpressionIdentifierLibrary" json:"library,omitempty"`
}

func (x *ExpressionIdentifier) Reset() {
	*x = ExpressionIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionIdentifier) ProtoMessage() {}

func (x *ExpressionIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionIdentifier.ProtoReflect.Descriptor instead.
func (*ExpressionIdentifier) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{4}
}

func (x *ExpressionIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpressionIdentifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExpressionIdentifier) GetType() ExpressionIdentifierType {
	if x != nil {
		return x.Type
	}
	return ExpressionIdentifierType_EXPRESSION_IDENTIFIER_TYPE_UNSPECIFIED
}

func (x *ExpressionIdentifier) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExpressionIdentifier) GetLibrary() ExpressionIdentifierLibrary {
	if x != nil {
		return x.Library
	}
	return ExpressionIdentifierLibrary_EXPRESSION_IDENTIFIER_LIBRARY_UNSPECIFIED
}

type ValidateExpressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *ExpressionRequest `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Mode       ExpressionMode     `protobuf:"varint,2,opt,name=mode,proto3,enum=sift.calculated_channels.v1.ExpressionMode" json:"mode,omitempty"`
}

func (x *ValidateExpressionRequest) Reset() {
	*x = ValidateExpressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateExpressionRequest) ProtoMessage() {}

func (x *ValidateExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateExpressionRequest.ProtoReflect.Descriptor instead.
func (*ValidateExpressionRequest) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateExpressionRequest) GetExpression() *ExpressionRequest {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ValidateExpressionRequest) GetMode() ExpressionMode {
	if x != nil {
		return x.Mode
	}
	return ExpressionMode_EXPRESSION_MODE_UNSPECIFIED
}

type ValidateExpressionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*ValidateExpressionResponse_Error
	//	*ValidateExpressionResponse_Success
	Result isValidateExpressionResponse_Result `protobuf_oneof:"result"`
}

func (x *ValidateExpressionResponse) Reset() {
	*x = ValidateExpressionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateExpressionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateExpressionResponse) ProtoMessage() {}

func (x *ValidateExpressionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateExpressionResponse.ProtoReflect.Descriptor instead.
func (*ValidateExpressionResponse) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{6}
}

func (m *ValidateExpressionResponse) GetResult() isValidateExpressionResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ValidateExpressionResponse) GetError() *ErrorValidatingExpressionResult {
	if x, ok := x.GetResult().(*ValidateExpressionResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ValidateExpressionResponse) GetSuccess() *SuccessValidatingExpressionResult {
	if x, ok := x.GetResult().(*ValidateExpressionResponse_Success); ok {
		return x.Success
	}
	return nil
}

type isValidateExpressionResponse_Result interface {
	isValidateExpressionResponse_Result()
}

type ValidateExpressionResponse_Error struct {
	Error *ErrorValidatingExpressionResult `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ValidateExpressionResponse_Success struct {
	Success *SuccessValidatingExpressionResult `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

func (*ValidateExpressionResponse_Error) isValidateExpressionResponse_Result() {}

func (*ValidateExpressionResponse_Success) isValidateExpressionResponse_Result() {}

type ErrorValidatingExpressionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ErrorValidatingExpressionResult) Reset() {
	*x = ErrorValidatingExpressionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorValidatingExpressionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorValidatingExpressionResult) ProtoMessage() {}

func (x *ErrorValidatingExpressionResult) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorValidatingExpressionResult.ProtoReflect.Descriptor instead.
func (*ErrorValidatingExpressionResult) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{7}
}

func (x *ErrorValidatingExpressionResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SuccessValidatingExpressionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType v1.ChannelDataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=sift.common.type.v1.ChannelDataType" json:"data_type,omitempty"`
}

func (x *SuccessValidatingExpressionResult) Reset() {
	*x = SuccessValidatingExpressionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessValidatingExpressionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessValidatingExpressionResult) ProtoMessage() {}

func (x *SuccessValidatingExpressionResult) ProtoReflect() protoreflect.Message {
	mi := &file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessValidatingExpressionResult.ProtoReflect.Descriptor instead.
func (*SuccessValidatingExpressionResult) Descriptor() ([]byte, []int) {
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP(), []int{8}
}

func (x *SuccessValidatingExpressionResult) GetDataType() v1.ChannelDataType {
	if x != nil {
		return x.DataType
	}
	return v1.ChannelDataType(0)
}

var File_sift_calculated_channels_v1_calculated_channels_proto protoreflect.FileDescriptor

var file_sift_calculated_channels_v1_calculated_channels_proto_rawDesc = []byte{
	0x0a, 0x35, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1d, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x22, 0xb6, 0x01, 0x0a,
	0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x4b, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a,
	0x21, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x9b, 0x01, 0x0a, 0x18, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x26, 0x45, 0x58, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0xc5, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x58, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x46, 0x55, 0x4c, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x06,
	0x2a, 0x94, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x1b, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x32, 0xf1, 0x06, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd9, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x3d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbc, 0x01, 0x92, 0x41, 0x7f, 0x12, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x1a, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0xb0, 0x02, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x92, 0x41, 0x6b, 0x12,
	0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x55, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x20, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x3a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc4, 0x01, 0x92, 0x41, 0xc0, 0x01, 0x12, 0x3e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x1a, 0x7e, 0x0a, 0x24, 0x52,
	0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x12, 0x56, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x65, 0x73, 0x6b, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x32, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x2f, 0x32, 0x36, 0x35, 0x34, 0x32, 0x31, 0x31, 0x35, 0x33, 0x42, 0xc5, 0x02, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x58, 0xaa,
	0x02, 0x1a, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x53,
	0x69, 0x66, 0x74, 0x5c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x26, 0x53, 0x69, 0x66, 0x74,
	0x5c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x1c, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x92, 0x41, 0x1f, 0x12, 0x1d, 0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_calculated_channels_v1_calculated_channels_proto_rawDescOnce sync.Once
	file_sift_calculated_channels_v1_calculated_channels_proto_rawDescData = file_sift_calculated_channels_v1_calculated_channels_proto_rawDesc
)

func file_sift_calculated_channels_v1_calculated_channels_proto_rawDescGZIP() []byte {
	file_sift_calculated_channels_v1_calculated_channels_proto_rawDescOnce.Do(func() {
		file_sift_calculated_channels_v1_calculated_channels_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_calculated_channels_v1_calculated_channels_proto_rawDescData)
	})
	return file_sift_calculated_channels_v1_calculated_channels_proto_rawDescData
}

var file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sift_calculated_channels_v1_calculated_channels_proto_goTypes = []interface{}{
	(ExpressionIdentifierType)(0),             // 0: sift.calculated_channels.v1.ExpressionIdentifierType
	(ExpressionIdentifierLibrary)(0),          // 1: sift.calculated_channels.v1.ExpressionIdentifierLibrary
	(ExpressionMode)(0),                       // 2: sift.calculated_channels.v1.ExpressionMode
	(*ExpressionChannelReference)(nil),        // 3: sift.calculated_channels.v1.ExpressionChannelReference
	(*ExpressionRequest)(nil),                 // 4: sift.calculated_channels.v1.ExpressionRequest
	(*ListExpressionIdentifiersRequest)(nil),  // 5: sift.calculated_channels.v1.ListExpressionIdentifiersRequest
	(*ListExpressionIdentifiersResponse)(nil), // 6: sift.calculated_channels.v1.ListExpressionIdentifiersResponse
	(*ExpressionIdentifier)(nil),              // 7: sift.calculated_channels.v1.ExpressionIdentifier
	(*ValidateExpressionRequest)(nil),         // 8: sift.calculated_channels.v1.ValidateExpressionRequest
	(*ValidateExpressionResponse)(nil),        // 9: sift.calculated_channels.v1.ValidateExpressionResponse
	(*ErrorValidatingExpressionResult)(nil),   // 10: sift.calculated_channels.v1.ErrorValidatingExpressionResult
	(*SuccessValidatingExpressionResult)(nil), // 11: sift.calculated_channels.v1.SuccessValidatingExpressionResult
	nil,                     // 12: sift.calculated_channels.v1.ExpressionRequest.ChannelReferencesEntry
	(v1.ChannelDataType)(0), // 13: sift.common.type.v1.ChannelDataType
}
var file_sift_calculated_channels_v1_calculated_channels_proto_depIdxs = []int32{
	12, // 0: sift.calculated_channels.v1.ExpressionRequest.channel_references:type_name -> sift.calculated_channels.v1.ExpressionRequest.ChannelReferencesEntry
	3,  // 1: sift.calculated_channels.v1.ExpressionRequest.expression_channel_references:type_name -> sift.calculated_channels.v1.ExpressionChannelReference
	2,  // 2: sift.calculated_channels.v1.ListExpressionIdentifiersRequest.mode:type_name -> sift.calculated_channels.v1.ExpressionMode
	7,  // 3: sift.calculated_channels.v1.ListExpressionIdentifiersResponse.identifiers:type_name -> sift.calculated_channels.v1.ExpressionIdentifier
	0,  // 4: sift.calculated_channels.v1.ExpressionIdentifier.type:type_name -> sift.calculated_channels.v1.ExpressionIdentifierType
	1,  // 5: sift.calculated_channels.v1.ExpressionIdentifier.library:type_name -> sift.calculated_channels.v1.ExpressionIdentifierLibrary
	4,  // 6: sift.calculated_channels.v1.ValidateExpressionRequest.expression:type_name -> sift.calculated_channels.v1.ExpressionRequest
	2,  // 7: sift.calculated_channels.v1.ValidateExpressionRequest.mode:type_name -> sift.calculated_channels.v1.ExpressionMode
	10, // 8: sift.calculated_channels.v1.ValidateExpressionResponse.error:type_name -> sift.calculated_channels.v1.ErrorValidatingExpressionResult
	11, // 9: sift.calculated_channels.v1.ValidateExpressionResponse.success:type_name -> sift.calculated_channels.v1.SuccessValidatingExpressionResult
	13, // 10: sift.calculated_channels.v1.SuccessValidatingExpressionResult.data_type:type_name -> sift.common.type.v1.ChannelDataType
	5,  // 11: sift.calculated_channels.v1.CalculatedChannelsService.ListExpressionIdentifiers:input_type -> sift.calculated_channels.v1.ListExpressionIdentifiersRequest
	8,  // 12: sift.calculated_channels.v1.CalculatedChannelsService.ValidateExpression:input_type -> sift.calculated_channels.v1.ValidateExpressionRequest
	6,  // 13: sift.calculated_channels.v1.CalculatedChannelsService.ListExpressionIdentifiers:output_type -> sift.calculated_channels.v1.ListExpressionIdentifiersResponse
	9,  // 14: sift.calculated_channels.v1.CalculatedChannelsService.ValidateExpression:output_type -> sift.calculated_channels.v1.ValidateExpressionResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_sift_calculated_channels_v1_calculated_channels_proto_init() }
func file_sift_calculated_channels_v1_calculated_channels_proto_init() {
	if File_sift_calculated_channels_v1_calculated_channels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionChannelReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExpressionIdentifiersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExpressionIdentifiersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateExpressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateExpressionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorValidatingExpressionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessValidatingExpressionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ValidateExpressionResponse_Error)(nil),
		(*ValidateExpressionResponse_Success)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_calculated_channels_v1_calculated_channels_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_calculated_channels_v1_calculated_channels_proto_goTypes,
		DependencyIndexes: file_sift_calculated_channels_v1_calculated_channels_proto_depIdxs,
		EnumInfos:         file_sift_calculated_channels_v1_calculated_channels_proto_enumTypes,
		MessageInfos:      file_sift_calculated_channels_v1_calculated_channels_proto_msgTypes,
	}.Build()
	File_sift_calculated_channels_v1_calculated_channels_proto = out.File
	file_sift_calculated_channels_v1_calculated_channels_proto_rawDesc = nil
	file_sift_calculated_channels_v1_calculated_channels_proto_goTypes = nil
	file_sift_calculated_channels_v1_calculated_channels_proto_depIdxs = nil
}
