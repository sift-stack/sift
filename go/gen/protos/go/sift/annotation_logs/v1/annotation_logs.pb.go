// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/annotation_logs/v1/annotation_logs.proto

package annotation_logsv1

import (
	_ "github.com/sift-stack/sift/go/gen/protos/go/google/api"
	_ "github.com/sift-stack/sift/go/gen/protos/go/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnnotationLogKind int32

const (
	AnnotationLogKind_ANNOTATION_LOG_KIND_UNSPECIFIED  AnnotationLogKind = 0
	AnnotationLogKind_ANNOTATION_LOG_KIND_COMMENT      AnnotationLogKind = 1
	AnnotationLogKind_ANNOTATION_LOG_KIND_STATE_UPDATE AnnotationLogKind = 2
	AnnotationLogKind_ANNOTATION_LOG_KIND_ASSIGNED     AnnotationLogKind = 3
)

// Enum value maps for AnnotationLogKind.
var (
	AnnotationLogKind_name = map[int32]string{
		0: "ANNOTATION_LOG_KIND_UNSPECIFIED",
		1: "ANNOTATION_LOG_KIND_COMMENT",
		2: "ANNOTATION_LOG_KIND_STATE_UPDATE",
		3: "ANNOTATION_LOG_KIND_ASSIGNED",
	}
	AnnotationLogKind_value = map[string]int32{
		"ANNOTATION_LOG_KIND_UNSPECIFIED":  0,
		"ANNOTATION_LOG_KIND_COMMENT":      1,
		"ANNOTATION_LOG_KIND_STATE_UPDATE": 2,
		"ANNOTATION_LOG_KIND_ASSIGNED":     3,
	}
)

func (x AnnotationLogKind) Enum() *AnnotationLogKind {
	p := new(AnnotationLogKind)
	*p = x
	return p
}

func (x AnnotationLogKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationLogKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes[0].Descriptor()
}

func (AnnotationLogKind) Type() protoreflect.EnumType {
	return &file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes[0]
}

func (x AnnotationLogKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationLogKind.Descriptor instead.
func (AnnotationLogKind) EnumDescriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{0}
}

type AnnotationLogState int32

const (
	AnnotationLogState_ANNOTATION_LOG_STATE_UNSPECIFIED AnnotationLogState = 0
	AnnotationLogState_ANNOTATION_LOG_STATE_CREATED     AnnotationLogState = 1
	AnnotationLogState_ANNOTATION_LOG_STATE_OPEN        AnnotationLogState = 2
	AnnotationLogState_ANNOTATION_LOG_STATE_FLAGGED     AnnotationLogState = 3
	AnnotationLogState_ANNOTATION_LOG_STATE_RESOLVED    AnnotationLogState = 4
)

// Enum value maps for AnnotationLogState.
var (
	AnnotationLogState_name = map[int32]string{
		0: "ANNOTATION_LOG_STATE_UNSPECIFIED",
		1: "ANNOTATION_LOG_STATE_CREATED",
		2: "ANNOTATION_LOG_STATE_OPEN",
		3: "ANNOTATION_LOG_STATE_FLAGGED",
		4: "ANNOTATION_LOG_STATE_RESOLVED",
	}
	AnnotationLogState_value = map[string]int32{
		"ANNOTATION_LOG_STATE_UNSPECIFIED": 0,
		"ANNOTATION_LOG_STATE_CREATED":     1,
		"ANNOTATION_LOG_STATE_OPEN":        2,
		"ANNOTATION_LOG_STATE_FLAGGED":     3,
		"ANNOTATION_LOG_STATE_RESOLVED":    4,
	}
)

func (x AnnotationLogState) Enum() *AnnotationLogState {
	p := new(AnnotationLogState)
	*p = x
	return p
}

func (x AnnotationLogState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationLogState) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes[1].Descriptor()
}

func (AnnotationLogState) Type() protoreflect.EnumType {
	return &file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes[1]
}

func (x AnnotationLogState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationLogState.Descriptor instead.
func (AnnotationLogState) EnumDescriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{1}
}

type AnnotationCommentBodyElementType int32

const (
	AnnotationCommentBodyElementType_ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_UNSPECIFIED  AnnotationCommentBodyElementType = 0
	AnnotationCommentBodyElementType_ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_TEXT         AnnotationCommentBodyElementType = 1
	AnnotationCommentBodyElementType_ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_USER_MENTION AnnotationCommentBodyElementType = 2
)

// Enum value maps for AnnotationCommentBodyElementType.
var (
	AnnotationCommentBodyElementType_name = map[int32]string{
		0: "ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_UNSPECIFIED",
		1: "ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_TEXT",
		2: "ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_USER_MENTION",
	}
	AnnotationCommentBodyElementType_value = map[string]int32{
		"ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_UNSPECIFIED":  0,
		"ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_TEXT":         1,
		"ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_USER_MENTION": 2,
	}
)

func (x AnnotationCommentBodyElementType) Enum() *AnnotationCommentBodyElementType {
	p := new(AnnotationCommentBodyElementType)
	*p = x
	return p
}

func (x AnnotationCommentBodyElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationCommentBodyElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes[2].Descriptor()
}

func (AnnotationCommentBodyElementType) Type() protoreflect.EnumType {
	return &file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes[2]
}

func (x AnnotationCommentBodyElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationCommentBodyElementType.Descriptor instead.
func (AnnotationCommentBodyElementType) EnumDescriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{2}
}

// The request for a call to `AnnotationLogService_CreateAnnotationLog` to create an annotation log.
type CreateAnnotationLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the parent annotation associated to associate with the new annotation log.
	AnnotationId string `protobuf:"bytes,1,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
	// The kind of annotation log to create.
	Kind AnnotationLogKind `protobuf:"varint,2,opt,name=kind,proto3,enum=sift.annotation_logs.v1.AnnotationLogKind" json:"kind,omitempty"`
	// The properties associated with the specific kind of annotation log.
	//
	// Types that are assignable to Properties:
	//
	//	*CreateAnnotationLogRequest_Assigned
	//	*CreateAnnotationLogRequest_StateUpdate
	//	*CreateAnnotationLogRequest_Comment
	Properties isCreateAnnotationLogRequest_Properties `protobuf_oneof:"properties"`
}

func (x *CreateAnnotationLogRequest) Reset() {
	*x = CreateAnnotationLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnnotationLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnnotationLogRequest) ProtoMessage() {}

func (x *CreateAnnotationLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnnotationLogRequest.ProtoReflect.Descriptor instead.
func (*CreateAnnotationLogRequest) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAnnotationLogRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *CreateAnnotationLogRequest) GetKind() AnnotationLogKind {
	if x != nil {
		return x.Kind
	}
	return AnnotationLogKind_ANNOTATION_LOG_KIND_UNSPECIFIED
}

func (m *CreateAnnotationLogRequest) GetProperties() isCreateAnnotationLogRequest_Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (x *CreateAnnotationLogRequest) GetAssigned() *AnnotationLogAssignedProperties {
	if x, ok := x.GetProperties().(*CreateAnnotationLogRequest_Assigned); ok {
		return x.Assigned
	}
	return nil
}

func (x *CreateAnnotationLogRequest) GetStateUpdate() *AnnotationLogStateUpdateProperties {
	if x, ok := x.GetProperties().(*CreateAnnotationLogRequest_StateUpdate); ok {
		return x.StateUpdate
	}
	return nil
}

func (x *CreateAnnotationLogRequest) GetComment() *AnnotationLogCommentProperties {
	if x, ok := x.GetProperties().(*CreateAnnotationLogRequest_Comment); ok {
		return x.Comment
	}
	return nil
}

type isCreateAnnotationLogRequest_Properties interface {
	isCreateAnnotationLogRequest_Properties()
}

type CreateAnnotationLogRequest_Assigned struct {
	Assigned *AnnotationLogAssignedProperties `protobuf:"bytes,3,opt,name=assigned,proto3,oneof"`
}

type CreateAnnotationLogRequest_StateUpdate struct {
	StateUpdate *AnnotationLogStateUpdateProperties `protobuf:"bytes,4,opt,name=state_update,json=stateUpdate,proto3,oneof"`
}

type CreateAnnotationLogRequest_Comment struct {
	Comment *AnnotationLogCommentProperties `protobuf:"bytes,5,opt,name=comment,proto3,oneof"`
}

func (*CreateAnnotationLogRequest_Assigned) isCreateAnnotationLogRequest_Properties() {}

func (*CreateAnnotationLogRequest_StateUpdate) isCreateAnnotationLogRequest_Properties() {}

func (*CreateAnnotationLogRequest_Comment) isCreateAnnotationLogRequest_Properties() {}

// The response of a call to `AnnotationLogService_CreateAnnotationLog`.
type CreateAnnotationLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationLog *AnnotationLogSearchResult `protobuf:"bytes,1,opt,name=annotation_log,json=annotationLog,proto3" json:"annotation_log,omitempty"`
}

func (x *CreateAnnotationLogResponse) Reset() {
	*x = CreateAnnotationLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnnotationLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnnotationLogResponse) ProtoMessage() {}

func (x *CreateAnnotationLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnnotationLogResponse.ProtoReflect.Descriptor instead.
func (*CreateAnnotationLogResponse) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAnnotationLogResponse) GetAnnotationLog() *AnnotationLogSearchResult {
	if x != nil {
		return x.AnnotationLog
	}
	return nil
}

// The request for a call to `AnnotationLogService_ListAnnotationLogs` to retrieve annotation logs.
type ListAnnotationLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the parent annotation associated with the annotation logs.
	AnnotationId string `protobuf:"bytes,1,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
	// The maximum number of annotation logs to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 annotation logs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListAnnotationLogs` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListAnnotationLogs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `annotation_log_id`, `annotation_id`, `created_by_user_id`,
	// `created_date`, `modified_date`, and `kind`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#annotationlogsearchresult). Optional.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListAnnotationLogsRequest) Reset() {
	*x = ListAnnotationLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationLogsRequest) ProtoMessage() {}

func (x *ListAnnotationLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationLogsRequest.ProtoReflect.Descriptor instead.
func (*ListAnnotationLogsRequest) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{2}
}

func (x *ListAnnotationLogsRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *ListAnnotationLogsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAnnotationLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAnnotationLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// The response of a call to `AnnotationLogService_ListAnnotationLogs`.
type ListAnnotationLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationLogs []*AnnotationLogSearchResult `protobuf:"bytes,1,rep,name=annotation_logs,json=annotationLogs,proto3" json:"annotation_logs,omitempty"`
	NextPageToken  string                       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAnnotationLogsResponse) Reset() {
	*x = ListAnnotationLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnnotationLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnnotationLogsResponse) ProtoMessage() {}

func (x *ListAnnotationLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnnotationLogsResponse.ProtoReflect.Descriptor instead.
func (*ListAnnotationLogsResponse) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{3}
}

func (x *ListAnnotationLogsResponse) GetAnnotationLogs() []*AnnotationLogSearchResult {
	if x != nil {
		return x.AnnotationLogs
	}
	return nil
}

func (x *ListAnnotationLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for a call to `AnnotationLogService_DeleteAnnotationLog` to delete an annotation log.
type DeleteAnnotationLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the parent annotation associated with the annotation log to be deleted.
	AnnotationId string `protobuf:"bytes,1,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
	// ID of the annotation log to be deleted.
	AnnotationLogId string `protobuf:"bytes,2,opt,name=annotation_log_id,json=annotationLogId,proto3" json:"annotation_log_id,omitempty"`
}

func (x *DeleteAnnotationLogRequest) Reset() {
	*x = DeleteAnnotationLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationLogRequest) ProtoMessage() {}

func (x *DeleteAnnotationLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationLogRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationLogRequest) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAnnotationLogRequest) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *DeleteAnnotationLogRequest) GetAnnotationLogId() string {
	if x != nil {
		return x.AnnotationLogId
	}
	return ""
}

// The Response of a call to `AnnotationLogService_DeleteAnnotationLog`.
type DeleteAnnotationLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAnnotationLogResponse) Reset() {
	*x = DeleteAnnotationLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationLogResponse) ProtoMessage() {}

func (x *DeleteAnnotationLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationLogResponse.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationLogResponse) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{5}
}

type AnnotationLogSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationLogId   string                 `protobuf:"bytes,1,opt,name=annotation_log_id,json=annotationLogId,proto3" json:"annotation_log_id,omitempty"`
	CreatedDate       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	AnnotationId      string                 `protobuf:"bytes,4,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"`
	Kind              AnnotationLogKind      `protobuf:"varint,5,opt,name=kind,proto3,enum=sift.annotation_logs.v1.AnnotationLogKind" json:"kind,omitempty"`
	CreatedByUserId   string                 `protobuf:"bytes,6,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	CreatedByUserName string                 `protobuf:"bytes,7,opt,name=created_by_user_name,json=createdByUserName,proto3" json:"created_by_user_name,omitempty"`
	// Types that are assignable to Properties:
	//
	//	*AnnotationLogSearchResult_Assigned
	//	*AnnotationLogSearchResult_StateUpdate
	//	*AnnotationLogSearchResult_Comment
	Properties isAnnotationLogSearchResult_Properties `protobuf_oneof:"properties"`
}

func (x *AnnotationLogSearchResult) Reset() {
	*x = AnnotationLogSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationLogSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationLogSearchResult) ProtoMessage() {}

func (x *AnnotationLogSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationLogSearchResult.ProtoReflect.Descriptor instead.
func (*AnnotationLogSearchResult) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{6}
}

func (x *AnnotationLogSearchResult) GetAnnotationLogId() string {
	if x != nil {
		return x.AnnotationLogId
	}
	return ""
}

func (x *AnnotationLogSearchResult) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AnnotationLogSearchResult) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *AnnotationLogSearchResult) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *AnnotationLogSearchResult) GetKind() AnnotationLogKind {
	if x != nil {
		return x.Kind
	}
	return AnnotationLogKind_ANNOTATION_LOG_KIND_UNSPECIFIED
}

func (x *AnnotationLogSearchResult) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *AnnotationLogSearchResult) GetCreatedByUserName() string {
	if x != nil {
		return x.CreatedByUserName
	}
	return ""
}

func (m *AnnotationLogSearchResult) GetProperties() isAnnotationLogSearchResult_Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (x *AnnotationLogSearchResult) GetAssigned() *AnnotationLogAssignedProperties {
	if x, ok := x.GetProperties().(*AnnotationLogSearchResult_Assigned); ok {
		return x.Assigned
	}
	return nil
}

func (x *AnnotationLogSearchResult) GetStateUpdate() *AnnotationLogStateUpdateProperties {
	if x, ok := x.GetProperties().(*AnnotationLogSearchResult_StateUpdate); ok {
		return x.StateUpdate
	}
	return nil
}

func (x *AnnotationLogSearchResult) GetComment() *AnnotationLogCommentProperties {
	if x, ok := x.GetProperties().(*AnnotationLogSearchResult_Comment); ok {
		return x.Comment
	}
	return nil
}

type isAnnotationLogSearchResult_Properties interface {
	isAnnotationLogSearchResult_Properties()
}

type AnnotationLogSearchResult_Assigned struct {
	Assigned *AnnotationLogAssignedProperties `protobuf:"bytes,8,opt,name=assigned,proto3,oneof"`
}

type AnnotationLogSearchResult_StateUpdate struct {
	StateUpdate *AnnotationLogStateUpdateProperties `protobuf:"bytes,9,opt,name=state_update,json=stateUpdate,proto3,oneof"`
}

type AnnotationLogSearchResult_Comment struct {
	Comment *AnnotationLogCommentProperties `protobuf:"bytes,10,opt,name=comment,proto3,oneof"`
}

func (*AnnotationLogSearchResult_Assigned) isAnnotationLogSearchResult_Properties() {}

func (*AnnotationLogSearchResult_StateUpdate) isAnnotationLogSearchResult_Properties() {}

func (*AnnotationLogSearchResult_Comment) isAnnotationLogSearchResult_Properties() {}

type AnnotationLogAssignedProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedToUserId    string `protobuf:"bytes,1,opt,name=assigned_to_user_id,json=assignedToUserId,proto3" json:"assigned_to_user_id,omitempty"`
	AssignedToUserEmail string `protobuf:"bytes,2,opt,name=assigned_to_user_email,json=assignedToUserEmail,proto3" json:"assigned_to_user_email,omitempty"`
}

func (x *AnnotationLogAssignedProperties) Reset() {
	*x = AnnotationLogAssignedProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationLogAssignedProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationLogAssignedProperties) ProtoMessage() {}

func (x *AnnotationLogAssignedProperties) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationLogAssignedProperties.ProtoReflect.Descriptor instead.
func (*AnnotationLogAssignedProperties) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{7}
}

func (x *AnnotationLogAssignedProperties) GetAssignedToUserId() string {
	if x != nil {
		return x.AssignedToUserId
	}
	return ""
}

func (x *AnnotationLogAssignedProperties) GetAssignedToUserEmail() string {
	if x != nil {
		return x.AssignedToUserEmail
	}
	return ""
}

type AnnotationLogStateUpdateProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State AnnotationLogState `protobuf:"varint,1,opt,name=state,proto3,enum=sift.annotation_logs.v1.AnnotationLogState" json:"state,omitempty"`
}

func (x *AnnotationLogStateUpdateProperties) Reset() {
	*x = AnnotationLogStateUpdateProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationLogStateUpdateProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationLogStateUpdateProperties) ProtoMessage() {}

func (x *AnnotationLogStateUpdateProperties) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationLogStateUpdateProperties.ProtoReflect.Descriptor instead.
func (*AnnotationLogStateUpdateProperties) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{8}
}

func (x *AnnotationLogStateUpdateProperties) GetState() AnnotationLogState {
	if x != nil {
		return x.State
	}
	return AnnotationLogState_ANNOTATION_LOG_STATE_UNSPECIFIED
}

type AnnotationLogCommentProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []*AnnotationCommentBodyElement `protobuf:"bytes,1,rep,name=body,proto3" json:"body,omitempty"`
}

func (x *AnnotationLogCommentProperties) Reset() {
	*x = AnnotationLogCommentProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationLogCommentProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationLogCommentProperties) ProtoMessage() {}

func (x *AnnotationLogCommentProperties) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationLogCommentProperties.ProtoReflect.Descriptor instead.
func (*AnnotationLogCommentProperties) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{9}
}

func (x *AnnotationLogCommentProperties) GetBody() []*AnnotationCommentBodyElement {
	if x != nil {
		return x.Body
	}
	return nil
}

type AnnotationCommentBodyElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        AnnotationCommentBodyElementType `protobuf:"varint,1,opt,name=type,proto3,enum=sift.annotation_logs.v1.AnnotationCommentBodyElementType" json:"type,omitempty"`
	Text        string                           `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	UserMention *AnnotationCommentUserMention    `protobuf:"bytes,3,opt,name=user_mention,json=userMention,proto3" json:"user_mention,omitempty"`
}

func (x *AnnotationCommentBodyElement) Reset() {
	*x = AnnotationCommentBodyElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationCommentBodyElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationCommentBodyElement) ProtoMessage() {}

func (x *AnnotationCommentBodyElement) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationCommentBodyElement.ProtoReflect.Descriptor instead.
func (*AnnotationCommentBodyElement) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{10}
}

func (x *AnnotationCommentBodyElement) GetType() AnnotationCommentBodyElementType {
	if x != nil {
		return x.Type
	}
	return AnnotationCommentBodyElementType_ANNOTATION_COMMENT_BODY_ELEMENT_TYPE_UNSPECIFIED
}

func (x *AnnotationCommentBodyElement) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AnnotationCommentBodyElement) GetUserMention() *AnnotationCommentUserMention {
	if x != nil {
		return x.UserMention
	}
	return nil
}

type AnnotationCommentUserMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
}

func (x *AnnotationCommentUserMention) Reset() {
	*x = AnnotationCommentUserMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationCommentUserMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationCommentUserMention) ProtoMessage() {}

func (x *AnnotationCommentUserMention) ProtoReflect() protoreflect.Message {
	mi := &file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationCommentUserMention.ProtoReflect.Descriptor instead.
func (*AnnotationCommentUserMention) Descriptor() ([]byte, []int) {
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP(), []int{11}
}

func (x *AnnotationCommentUserMention) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnnotationCommentUserMention) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

var File_sift_annotation_logs_v1_annotation_logs_proto protoreflect.FileDescriptor

var file_sift_annotation_logs_v1_annotation_logs_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x60,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x22, 0xa8, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x77, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x05, 0x0a, 0x19, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x53,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x6c, 0x0a, 0x22, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x6b, 0x0a, 0x1e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xea,
	0x01, 0x0a, 0x1c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x1c, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2a, 0xa1, 0x01,
	0x0a, 0x11, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xc0, 0x01, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0xbe, 0x01, 0x0a, 0x20, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x4f, 0x44, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x29, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x35,
	0x0a, 0x31, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4e, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x32, 0xe1, 0x07, 0x0a, 0x14, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xfa,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x78, 0x92, 0x41, 0x42, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x2b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0xfb, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x32, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x49,
	0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0xfa, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x33, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41,
	0x31, 0x12, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x6e, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f,
	0x67, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x2f, 0x7b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01, 0x12, 0x52, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x5d, 0x28, 0x2f, 0x67, 0x6c, 0x6f, 0x73,
	0x73, 0x61, 0x72, 0x79, 0x23, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29,
	0x2e, 0x1a, 0x76, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x12, 0x56, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x65, 0x73, 0x6b, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x32, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2f,
	0x32, 0x36, 0x35, 0x34, 0x38, 0x36, 0x36, 0x38, 0x35, 0x42, 0x83, 0x02, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69,
	0x66, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x41, 0x58, 0xaa, 0x02, 0x16,
	0x53, 0x69, 0x66, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x22, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_annotation_logs_v1_annotation_logs_proto_rawDescOnce sync.Once
	file_sift_annotation_logs_v1_annotation_logs_proto_rawDescData = file_sift_annotation_logs_v1_annotation_logs_proto_rawDesc
)

func file_sift_annotation_logs_v1_annotation_logs_proto_rawDescGZIP() []byte {
	file_sift_annotation_logs_v1_annotation_logs_proto_rawDescOnce.Do(func() {
		file_sift_annotation_logs_v1_annotation_logs_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_annotation_logs_v1_annotation_logs_proto_rawDescData)
	})
	return file_sift_annotation_logs_v1_annotation_logs_proto_rawDescData
}

var file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_sift_annotation_logs_v1_annotation_logs_proto_goTypes = []interface{}{
	(AnnotationLogKind)(0),                     // 0: sift.annotation_logs.v1.AnnotationLogKind
	(AnnotationLogState)(0),                    // 1: sift.annotation_logs.v1.AnnotationLogState
	(AnnotationCommentBodyElementType)(0),      // 2: sift.annotation_logs.v1.AnnotationCommentBodyElementType
	(*CreateAnnotationLogRequest)(nil),         // 3: sift.annotation_logs.v1.CreateAnnotationLogRequest
	(*CreateAnnotationLogResponse)(nil),        // 4: sift.annotation_logs.v1.CreateAnnotationLogResponse
	(*ListAnnotationLogsRequest)(nil),          // 5: sift.annotation_logs.v1.ListAnnotationLogsRequest
	(*ListAnnotationLogsResponse)(nil),         // 6: sift.annotation_logs.v1.ListAnnotationLogsResponse
	(*DeleteAnnotationLogRequest)(nil),         // 7: sift.annotation_logs.v1.DeleteAnnotationLogRequest
	(*DeleteAnnotationLogResponse)(nil),        // 8: sift.annotation_logs.v1.DeleteAnnotationLogResponse
	(*AnnotationLogSearchResult)(nil),          // 9: sift.annotation_logs.v1.AnnotationLogSearchResult
	(*AnnotationLogAssignedProperties)(nil),    // 10: sift.annotation_logs.v1.AnnotationLogAssignedProperties
	(*AnnotationLogStateUpdateProperties)(nil), // 11: sift.annotation_logs.v1.AnnotationLogStateUpdateProperties
	(*AnnotationLogCommentProperties)(nil),     // 12: sift.annotation_logs.v1.AnnotationLogCommentProperties
	(*AnnotationCommentBodyElement)(nil),       // 13: sift.annotation_logs.v1.AnnotationCommentBodyElement
	(*AnnotationCommentUserMention)(nil),       // 14: sift.annotation_logs.v1.AnnotationCommentUserMention
	(*timestamppb.Timestamp)(nil),              // 15: google.protobuf.Timestamp
}
var file_sift_annotation_logs_v1_annotation_logs_proto_depIdxs = []int32{
	0,  // 0: sift.annotation_logs.v1.CreateAnnotationLogRequest.kind:type_name -> sift.annotation_logs.v1.AnnotationLogKind
	10, // 1: sift.annotation_logs.v1.CreateAnnotationLogRequest.assigned:type_name -> sift.annotation_logs.v1.AnnotationLogAssignedProperties
	11, // 2: sift.annotation_logs.v1.CreateAnnotationLogRequest.state_update:type_name -> sift.annotation_logs.v1.AnnotationLogStateUpdateProperties
	12, // 3: sift.annotation_logs.v1.CreateAnnotationLogRequest.comment:type_name -> sift.annotation_logs.v1.AnnotationLogCommentProperties
	9,  // 4: sift.annotation_logs.v1.CreateAnnotationLogResponse.annotation_log:type_name -> sift.annotation_logs.v1.AnnotationLogSearchResult
	9,  // 5: sift.annotation_logs.v1.ListAnnotationLogsResponse.annotation_logs:type_name -> sift.annotation_logs.v1.AnnotationLogSearchResult
	15, // 6: sift.annotation_logs.v1.AnnotationLogSearchResult.created_date:type_name -> google.protobuf.Timestamp
	15, // 7: sift.annotation_logs.v1.AnnotationLogSearchResult.modified_date:type_name -> google.protobuf.Timestamp
	0,  // 8: sift.annotation_logs.v1.AnnotationLogSearchResult.kind:type_name -> sift.annotation_logs.v1.AnnotationLogKind
	10, // 9: sift.annotation_logs.v1.AnnotationLogSearchResult.assigned:type_name -> sift.annotation_logs.v1.AnnotationLogAssignedProperties
	11, // 10: sift.annotation_logs.v1.AnnotationLogSearchResult.state_update:type_name -> sift.annotation_logs.v1.AnnotationLogStateUpdateProperties
	12, // 11: sift.annotation_logs.v1.AnnotationLogSearchResult.comment:type_name -> sift.annotation_logs.v1.AnnotationLogCommentProperties
	1,  // 12: sift.annotation_logs.v1.AnnotationLogStateUpdateProperties.state:type_name -> sift.annotation_logs.v1.AnnotationLogState
	13, // 13: sift.annotation_logs.v1.AnnotationLogCommentProperties.body:type_name -> sift.annotation_logs.v1.AnnotationCommentBodyElement
	2,  // 14: sift.annotation_logs.v1.AnnotationCommentBodyElement.type:type_name -> sift.annotation_logs.v1.AnnotationCommentBodyElementType
	14, // 15: sift.annotation_logs.v1.AnnotationCommentBodyElement.user_mention:type_name -> sift.annotation_logs.v1.AnnotationCommentUserMention
	3,  // 16: sift.annotation_logs.v1.AnnotationLogService.CreateAnnotationLog:input_type -> sift.annotation_logs.v1.CreateAnnotationLogRequest
	5,  // 17: sift.annotation_logs.v1.AnnotationLogService.ListAnnotationLogs:input_type -> sift.annotation_logs.v1.ListAnnotationLogsRequest
	7,  // 18: sift.annotation_logs.v1.AnnotationLogService.DeleteAnnotationLog:input_type -> sift.annotation_logs.v1.DeleteAnnotationLogRequest
	4,  // 19: sift.annotation_logs.v1.AnnotationLogService.CreateAnnotationLog:output_type -> sift.annotation_logs.v1.CreateAnnotationLogResponse
	6,  // 20: sift.annotation_logs.v1.AnnotationLogService.ListAnnotationLogs:output_type -> sift.annotation_logs.v1.ListAnnotationLogsResponse
	8,  // 21: sift.annotation_logs.v1.AnnotationLogService.DeleteAnnotationLog:output_type -> sift.annotation_logs.v1.DeleteAnnotationLogResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_sift_annotation_logs_v1_annotation_logs_proto_init() }
func file_sift_annotation_logs_v1_annotation_logs_proto_init() {
	if File_sift_annotation_logs_v1_annotation_logs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAnnotationLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAnnotationLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnnotationLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationLogSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationLogAssignedProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationLogStateUpdateProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationLogCommentProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationCommentBodyElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationCommentUserMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateAnnotationLogRequest_Assigned)(nil),
		(*CreateAnnotationLogRequest_StateUpdate)(nil),
		(*CreateAnnotationLogRequest_Comment)(nil),
	}
	file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AnnotationLogSearchResult_Assigned)(nil),
		(*AnnotationLogSearchResult_StateUpdate)(nil),
		(*AnnotationLogSearchResult_Comment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_annotation_logs_v1_annotation_logs_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_annotation_logs_v1_annotation_logs_proto_goTypes,
		DependencyIndexes: file_sift_annotation_logs_v1_annotation_logs_proto_depIdxs,
		EnumInfos:         file_sift_annotation_logs_v1_annotation_logs_proto_enumTypes,
		MessageInfos:      file_sift_annotation_logs_v1_annotation_logs_proto_msgTypes,
	}.Build()
	File_sift_annotation_logs_v1_annotation_logs_proto = out.File
	file_sift_annotation_logs_v1_annotation_logs_proto_rawDesc = nil
	file_sift_annotation_logs_v1_annotation_logs_proto_goTypes = nil
	file_sift_annotation_logs_v1_annotation_logs_proto_depIdxs = nil
}
