// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/saved_searches/v1/saved_searches.proto

package saved_searchesv1

import (
	_ "github.com/sift-stack/sift/go/gen/protos/go/google/api"
	_ "github.com/sift-stack/sift/go/gen/protos/go/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SavedSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearchId    string                 `protobuf:"bytes,1,opt,name=saved_search_id,json=savedSearchId,proto3" json:"saved_search_id,omitempty"`
	OrganizationId   string                 `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Properties       *SavedSearchProperties `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	CreatedByUserId  string                 `protobuf:"bytes,5,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	ModifiedByUserId string                 `protobuf:"bytes,6,opt,name=modified_by_user_id,json=modifiedByUserId,proto3" json:"modified_by_user_id,omitempty"`
	CreatedDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
}

func (x *SavedSearch) Reset() {
	*x = SavedSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedSearch) ProtoMessage() {}

func (x *SavedSearch) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedSearch.ProtoReflect.Descriptor instead.
func (*SavedSearch) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{0}
}

func (x *SavedSearch) GetSavedSearchId() string {
	if x != nil {
		return x.SavedSearchId
	}
	return ""
}

func (x *SavedSearch) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SavedSearch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SavedSearch) GetProperties() *SavedSearchProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SavedSearch) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *SavedSearch) GetModifiedByUserId() string {
	if x != nil {
		return x.ModifiedByUserId
	}
	return ""
}

func (x *SavedSearch) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *SavedSearch) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

type SavedSearchProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverviewMode        string                   `protobuf:"bytes,1,opt,name=overview_mode,json=overviewMode,proto3" json:"overview_mode,omitempty"`
	SearchTerm          *string                  `protobuf:"bytes,2,opt,name=search_term,json=searchTerm,proto3,oneof" json:"search_term,omitempty"`
	FromDateTime        *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=from_date_time,json=fromDateTime,proto3,oneof" json:"from_date_time,omitempty"`
	ToDateTime          *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=to_date_time,json=toDateTime,proto3,oneof" json:"to_date_time,omitempty"`
	AssetItems          []*SavedSearchFilterItem `protobuf:"bytes,5,rep,name=asset_items,json=assetItems,proto3" json:"asset_items,omitempty"`
	UserItems           []*SavedSearchFilterItem `protobuf:"bytes,6,rep,name=user_items,json=userItems,proto3" json:"user_items,omitempty"`
	TagItems            []*SavedSearchFilterItem `protobuf:"bytes,7,rep,name=tag_items,json=tagItems,proto3" json:"tag_items,omitempty"`
	AnnotationItems     []*SavedSearchFilterItem `protobuf:"bytes,8,rep,name=annotation_items,json=annotationItems,proto3" json:"annotation_items,omitempty"`
	RunItems            []*SavedSearchFilterItem `protobuf:"bytes,9,rep,name=run_items,json=runItems,proto3" json:"run_items,omitempty"`
	ReportTemplateItems []*SavedSearchFilterItem `protobuf:"bytes,10,rep,name=report_template_items,json=reportTemplateItems,proto3" json:"report_template_items,omitempty"`
	ShowAdvancedFilters *bool                    `protobuf:"varint,11,opt,name=show_advanced_filters,json=showAdvancedFilters,proto3,oneof" json:"show_advanced_filters,omitempty"`
}

func (x *SavedSearchProperties) Reset() {
	*x = SavedSearchProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedSearchProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedSearchProperties) ProtoMessage() {}

func (x *SavedSearchProperties) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedSearchProperties.ProtoReflect.Descriptor instead.
func (*SavedSearchProperties) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{1}
}

func (x *SavedSearchProperties) GetOverviewMode() string {
	if x != nil {
		return x.OverviewMode
	}
	return ""
}

func (x *SavedSearchProperties) GetSearchTerm() string {
	if x != nil && x.SearchTerm != nil {
		return *x.SearchTerm
	}
	return ""
}

func (x *SavedSearchProperties) GetFromDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDateTime
	}
	return nil
}

func (x *SavedSearchProperties) GetToDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDateTime
	}
	return nil
}

func (x *SavedSearchProperties) GetAssetItems() []*SavedSearchFilterItem {
	if x != nil {
		return x.AssetItems
	}
	return nil
}

func (x *SavedSearchProperties) GetUserItems() []*SavedSearchFilterItem {
	if x != nil {
		return x.UserItems
	}
	return nil
}

func (x *SavedSearchProperties) GetTagItems() []*SavedSearchFilterItem {
	if x != nil {
		return x.TagItems
	}
	return nil
}

func (x *SavedSearchProperties) GetAnnotationItems() []*SavedSearchFilterItem {
	if x != nil {
		return x.AnnotationItems
	}
	return nil
}

func (x *SavedSearchProperties) GetRunItems() []*SavedSearchFilterItem {
	if x != nil {
		return x.RunItems
	}
	return nil
}

func (x *SavedSearchProperties) GetReportTemplateItems() []*SavedSearchFilterItem {
	if x != nil {
		return x.ReportTemplateItems
	}
	return nil
}

func (x *SavedSearchProperties) GetShowAdvancedFilters() bool {
	if x != nil && x.ShowAdvancedFilters != nil {
		return *x.ShowAdvancedFilters
	}
	return false
}

type SavedSearchFilterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SavedSearchFilterItem) Reset() {
	*x = SavedSearchFilterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedSearchFilterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedSearchFilterItem) ProtoMessage() {}

func (x *SavedSearchFilterItem) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedSearchFilterItem.ProtoReflect.Descriptor instead.
func (*SavedSearchFilterItem) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{2}
}

func (x *SavedSearchFilterItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SavedSearchFilterItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request for a call to `SavedSearchService_GetSavedSearch` to retrieve a saved search;
type GetSavedSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearchId string `protobuf:"bytes,1,opt,name=saved_search_id,json=savedSearchId,proto3" json:"saved_search_id,omitempty"`
}

func (x *GetSavedSearchRequest) Reset() {
	*x = GetSavedSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSavedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSavedSearchRequest) ProtoMessage() {}

func (x *GetSavedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSavedSearchRequest.ProtoReflect.Descriptor instead.
func (*GetSavedSearchRequest) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{3}
}

func (x *GetSavedSearchRequest) GetSavedSearchId() string {
	if x != nil {
		return x.SavedSearchId
	}
	return ""
}

// The response of a call to `SavedSearchService_GetSavedSearch`.
type GetSavedSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearch *SavedSearch `protobuf:"bytes,1,opt,name=saved_search,json=savedSearch,proto3" json:"saved_search,omitempty"`
}

func (x *GetSavedSearchResponse) Reset() {
	*x = GetSavedSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSavedSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSavedSearchResponse) ProtoMessage() {}

func (x *GetSavedSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSavedSearchResponse.ProtoReflect.Descriptor instead.
func (*GetSavedSearchResponse) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{4}
}

func (x *GetSavedSearchResponse) GetSavedSearch() *SavedSearch {
	if x != nil {
		return x.SavedSearch
	}
	return nil
}

// The request for a call to `SavedSearchService_ListSavedSearches` to retrieve saved searches.
type ListSavedSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of saved searches to return. The service may return fewer than this value.
	// If unspecified, at most 50 saved searches will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSavedSearches` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListSavedSearches` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are 'name' and 'saved_search_id'.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#saved_searches). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ListSavedSearchesRequest) Reset() {
	*x = ListSavedSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSavedSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSavedSearchesRequest) ProtoMessage() {}

func (x *ListSavedSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSavedSearchesRequest.ProtoReflect.Descriptor instead.
func (*ListSavedSearchesRequest) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{5}
}

func (x *ListSavedSearchesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSavedSearchesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSavedSearchesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSavedSearchesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// The response of a call to `SavedSearchService_ListSavedSearchesResponse`.
type ListSavedSearchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearches []*SavedSearch `protobuf:"bytes,1,rep,name=saved_searches,json=savedSearches,proto3" json:"saved_searches,omitempty"`
	NextPageToken string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSavedSearchesResponse) Reset() {
	*x = ListSavedSearchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSavedSearchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSavedSearchesResponse) ProtoMessage() {}

func (x *ListSavedSearchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSavedSearchesResponse.ProtoReflect.Descriptor instead.
func (*ListSavedSearchesResponse) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{6}
}

func (x *ListSavedSearchesResponse) GetSavedSearches() []*SavedSearch {
	if x != nil {
		return x.SavedSearches
	}
	return nil
}

func (x *ListSavedSearchesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for a call to `SavedSearchService_CreateSavedSearch` to create a saved search.
type CreateSavedSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties *SavedSearchProperties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *CreateSavedSearchRequest) Reset() {
	*x = CreateSavedSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSavedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSavedSearchRequest) ProtoMessage() {}

func (x *CreateSavedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSavedSearchRequest.ProtoReflect.Descriptor instead.
func (*CreateSavedSearchRequest) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{7}
}

func (x *CreateSavedSearchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSavedSearchRequest) GetProperties() *SavedSearchProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *CreateSavedSearchRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// The response for a call to `SavedSearchService_CreateSavedResponse`.
type CreateSavedSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearch *SavedSearch `protobuf:"bytes,1,opt,name=saved_search,json=savedSearch,proto3" json:"saved_search,omitempty"`
}

func (x *CreateSavedSearchResponse) Reset() {
	*x = CreateSavedSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSavedSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSavedSearchResponse) ProtoMessage() {}

func (x *CreateSavedSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSavedSearchResponse.ProtoReflect.Descriptor instead.
func (*CreateSavedSearchResponse) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSavedSearchResponse) GetSavedSearch() *SavedSearch {
	if x != nil {
		return x.SavedSearch
	}
	return nil
}

// The request for a call to `SavedSearchService_DeleteSavedSearch` to delete a saved search.
type DeleteSavedSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearchId string `protobuf:"bytes,1,opt,name=saved_search_id,json=savedSearchId,proto3" json:"saved_search_id,omitempty"`
}

func (x *DeleteSavedSearchRequest) Reset() {
	*x = DeleteSavedSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSavedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSavedSearchRequest) ProtoMessage() {}

func (x *DeleteSavedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSavedSearchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSavedSearchRequest) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSavedSearchRequest) GetSavedSearchId() string {
	if x != nil {
		return x.SavedSearchId
	}
	return ""
}

// The response of a call to `SavedSearchService_DeleteSavedSearch`.
type DeleteSavedSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSavedSearchResponse) Reset() {
	*x = DeleteSavedSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSavedSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSavedSearchResponse) ProtoMessage() {}

func (x *DeleteSavedSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSavedSearchResponse.ProtoReflect.Descriptor instead.
func (*DeleteSavedSearchResponse) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{10}
}

// The request for a call to `SavedSearchService_BatchDeleteSavedSearches` to delete saved searches.
type BatchDeleteSavedSearchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit of 1000 searches per batch
	SavedSearchIds []string `protobuf:"bytes,1,rep,name=saved_search_ids,json=savedSearchIds,proto3" json:"saved_search_ids,omitempty"`
}

func (x *BatchDeleteSavedSearchesRequest) Reset() {
	*x = BatchDeleteSavedSearchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteSavedSearchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteSavedSearchesRequest) ProtoMessage() {}

func (x *BatchDeleteSavedSearchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteSavedSearchesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteSavedSearchesRequest) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{11}
}

func (x *BatchDeleteSavedSearchesRequest) GetSavedSearchIds() []string {
	if x != nil {
		return x.SavedSearchIds
	}
	return nil
}

// The response of a call to `SavedSearchService_BatchDeleteSavedSearches`.
type BatchDeleteSavedSearchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchDeleteSavedSearchesResponse) Reset() {
	*x = BatchDeleteSavedSearchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteSavedSearchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteSavedSearchesResponse) ProtoMessage() {}

func (x *BatchDeleteSavedSearchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteSavedSearchesResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteSavedSearchesResponse) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{12}
}

// The request for a call to `SavedSearchService_UpdateSavedSearch` to update a saved search.
type UpdateSavedSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The saved search to update.
	SavedSearch *SavedSearch `protobuf:"bytes,1,opt,name=saved_search,json=savedSearch,proto3" json:"saved_search,omitempty"`
	// The list of fields to be updated. The fields available to be updated are `name` and `properties`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSavedSearchRequest) Reset() {
	*x = UpdateSavedSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSavedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSavedSearchRequest) ProtoMessage() {}

func (x *UpdateSavedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSavedSearchRequest.ProtoReflect.Descriptor instead.
func (*UpdateSavedSearchRequest) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSavedSearchRequest) GetSavedSearch() *SavedSearch {
	if x != nil {
		return x.SavedSearch
	}
	return nil
}

func (x *UpdateSavedSearchRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// The response of a call to `SavedSearchService_UpdateSavedSearch`.
type UpdateSavedSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedSearch *SavedSearch `protobuf:"bytes,1,opt,name=saved_search,json=savedSearch,proto3" json:"saved_search,omitempty"`
}

func (x *UpdateSavedSearchResponse) Reset() {
	*x = UpdateSavedSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSavedSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSavedSearchResponse) ProtoMessage() {}

func (x *UpdateSavedSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_saved_searches_v1_saved_searches_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSavedSearchResponse.ProtoReflect.Descriptor instead.
func (*UpdateSavedSearchResponse) Descriptor() ([]byte, []int) {
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSavedSearchResponse) GetSavedSearch() *SavedSearch {
	if x != nil {
		return x.SavedSearch
	}
	return nil
}

var File_sift_saved_searches_v1_saved_searches_proto protoreflect.FileDescriptor

var file_sift_saved_searches_v1_saved_searches_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x9d, 0x07, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x74, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x45, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0d, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x47, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x22, 0x1b,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x1f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x68, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x32, 0xdf, 0x0a, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2d, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x92, 0x41, 0x2a,
	0x12, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x1a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x30, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x92, 0x41, 0x2b, 0x12, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x92, 0x41, 0x29, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x8f, 0x02,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x30, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x92, 0x41, 0x70, 0x12, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x5b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x60, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x32, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12,
	0xd8, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x30, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x92, 0x41, 0x2b, 0x12,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x1a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x2a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf7, 0x01, 0x0a, 0x18, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x92, 0x41, 0x38, 0x12,
	0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x95, 0x02, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x12, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x15, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x53,
	0x69, 0x66, 0x74, 0x5c, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x53, 0x69, 0x66, 0x74, 0x3a,
	0x3a, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x92, 0x41, 0x17, 0x12, 0x15, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_saved_searches_v1_saved_searches_proto_rawDescOnce sync.Once
	file_sift_saved_searches_v1_saved_searches_proto_rawDescData = file_sift_saved_searches_v1_saved_searches_proto_rawDesc
)

func file_sift_saved_searches_v1_saved_searches_proto_rawDescGZIP() []byte {
	file_sift_saved_searches_v1_saved_searches_proto_rawDescOnce.Do(func() {
		file_sift_saved_searches_v1_saved_searches_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_saved_searches_v1_saved_searches_proto_rawDescData)
	})
	return file_sift_saved_searches_v1_saved_searches_proto_rawDescData
}

var file_sift_saved_searches_v1_saved_searches_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_sift_saved_searches_v1_saved_searches_proto_goTypes = []interface{}{
	(*SavedSearch)(nil),                      // 0: sift.saved_searches.v1.SavedSearch
	(*SavedSearchProperties)(nil),            // 1: sift.saved_searches.v1.SavedSearchProperties
	(*SavedSearchFilterItem)(nil),            // 2: sift.saved_searches.v1.SavedSearchFilterItem
	(*GetSavedSearchRequest)(nil),            // 3: sift.saved_searches.v1.GetSavedSearchRequest
	(*GetSavedSearchResponse)(nil),           // 4: sift.saved_searches.v1.GetSavedSearchResponse
	(*ListSavedSearchesRequest)(nil),         // 5: sift.saved_searches.v1.ListSavedSearchesRequest
	(*ListSavedSearchesResponse)(nil),        // 6: sift.saved_searches.v1.ListSavedSearchesResponse
	(*CreateSavedSearchRequest)(nil),         // 7: sift.saved_searches.v1.CreateSavedSearchRequest
	(*CreateSavedSearchResponse)(nil),        // 8: sift.saved_searches.v1.CreateSavedSearchResponse
	(*DeleteSavedSearchRequest)(nil),         // 9: sift.saved_searches.v1.DeleteSavedSearchRequest
	(*DeleteSavedSearchResponse)(nil),        // 10: sift.saved_searches.v1.DeleteSavedSearchResponse
	(*BatchDeleteSavedSearchesRequest)(nil),  // 11: sift.saved_searches.v1.BatchDeleteSavedSearchesRequest
	(*BatchDeleteSavedSearchesResponse)(nil), // 12: sift.saved_searches.v1.BatchDeleteSavedSearchesResponse
	(*UpdateSavedSearchRequest)(nil),         // 13: sift.saved_searches.v1.UpdateSavedSearchRequest
	(*UpdateSavedSearchResponse)(nil),        // 14: sift.saved_searches.v1.UpdateSavedSearchResponse
	(*timestamppb.Timestamp)(nil),            // 15: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),            // 16: google.protobuf.FieldMask
}
var file_sift_saved_searches_v1_saved_searches_proto_depIdxs = []int32{
	1,  // 0: sift.saved_searches.v1.SavedSearch.properties:type_name -> sift.saved_searches.v1.SavedSearchProperties
	15, // 1: sift.saved_searches.v1.SavedSearch.created_date:type_name -> google.protobuf.Timestamp
	15, // 2: sift.saved_searches.v1.SavedSearch.modified_date:type_name -> google.protobuf.Timestamp
	15, // 3: sift.saved_searches.v1.SavedSearchProperties.from_date_time:type_name -> google.protobuf.Timestamp
	15, // 4: sift.saved_searches.v1.SavedSearchProperties.to_date_time:type_name -> google.protobuf.Timestamp
	2,  // 5: sift.saved_searches.v1.SavedSearchProperties.asset_items:type_name -> sift.saved_searches.v1.SavedSearchFilterItem
	2,  // 6: sift.saved_searches.v1.SavedSearchProperties.user_items:type_name -> sift.saved_searches.v1.SavedSearchFilterItem
	2,  // 7: sift.saved_searches.v1.SavedSearchProperties.tag_items:type_name -> sift.saved_searches.v1.SavedSearchFilterItem
	2,  // 8: sift.saved_searches.v1.SavedSearchProperties.annotation_items:type_name -> sift.saved_searches.v1.SavedSearchFilterItem
	2,  // 9: sift.saved_searches.v1.SavedSearchProperties.run_items:type_name -> sift.saved_searches.v1.SavedSearchFilterItem
	2,  // 10: sift.saved_searches.v1.SavedSearchProperties.report_template_items:type_name -> sift.saved_searches.v1.SavedSearchFilterItem
	0,  // 11: sift.saved_searches.v1.GetSavedSearchResponse.saved_search:type_name -> sift.saved_searches.v1.SavedSearch
	0,  // 12: sift.saved_searches.v1.ListSavedSearchesResponse.saved_searches:type_name -> sift.saved_searches.v1.SavedSearch
	1,  // 13: sift.saved_searches.v1.CreateSavedSearchRequest.properties:type_name -> sift.saved_searches.v1.SavedSearchProperties
	0,  // 14: sift.saved_searches.v1.CreateSavedSearchResponse.saved_search:type_name -> sift.saved_searches.v1.SavedSearch
	0,  // 15: sift.saved_searches.v1.UpdateSavedSearchRequest.saved_search:type_name -> sift.saved_searches.v1.SavedSearch
	16, // 16: sift.saved_searches.v1.UpdateSavedSearchRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 17: sift.saved_searches.v1.UpdateSavedSearchResponse.saved_search:type_name -> sift.saved_searches.v1.SavedSearch
	3,  // 18: sift.saved_searches.v1.SavedSearchService.GetSavedSearch:input_type -> sift.saved_searches.v1.GetSavedSearchRequest
	7,  // 19: sift.saved_searches.v1.SavedSearchService.CreateSavedSearch:input_type -> sift.saved_searches.v1.CreateSavedSearchRequest
	5,  // 20: sift.saved_searches.v1.SavedSearchService.ListSavedSearches:input_type -> sift.saved_searches.v1.ListSavedSearchesRequest
	13, // 21: sift.saved_searches.v1.SavedSearchService.UpdateSavedSearch:input_type -> sift.saved_searches.v1.UpdateSavedSearchRequest
	9,  // 22: sift.saved_searches.v1.SavedSearchService.DeleteSavedSearch:input_type -> sift.saved_searches.v1.DeleteSavedSearchRequest
	11, // 23: sift.saved_searches.v1.SavedSearchService.BatchDeleteSavedSearches:input_type -> sift.saved_searches.v1.BatchDeleteSavedSearchesRequest
	4,  // 24: sift.saved_searches.v1.SavedSearchService.GetSavedSearch:output_type -> sift.saved_searches.v1.GetSavedSearchResponse
	8,  // 25: sift.saved_searches.v1.SavedSearchService.CreateSavedSearch:output_type -> sift.saved_searches.v1.CreateSavedSearchResponse
	6,  // 26: sift.saved_searches.v1.SavedSearchService.ListSavedSearches:output_type -> sift.saved_searches.v1.ListSavedSearchesResponse
	14, // 27: sift.saved_searches.v1.SavedSearchService.UpdateSavedSearch:output_type -> sift.saved_searches.v1.UpdateSavedSearchResponse
	10, // 28: sift.saved_searches.v1.SavedSearchService.DeleteSavedSearch:output_type -> sift.saved_searches.v1.DeleteSavedSearchResponse
	12, // 29: sift.saved_searches.v1.SavedSearchService.BatchDeleteSavedSearches:output_type -> sift.saved_searches.v1.BatchDeleteSavedSearchesResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_sift_saved_searches_v1_saved_searches_proto_init() }
func file_sift_saved_searches_v1_saved_searches_proto_init() {
	if File_sift_saved_searches_v1_saved_searches_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedSearchProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedSearchFilterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSavedSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSavedSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSavedSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSavedSearchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSavedSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSavedSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSavedSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSavedSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteSavedSearchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteSavedSearchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSavedSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_saved_searches_v1_saved_searches_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSavedSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_saved_searches_v1_saved_searches_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_saved_searches_v1_saved_searches_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_saved_searches_v1_saved_searches_proto_goTypes,
		DependencyIndexes: file_sift_saved_searches_v1_saved_searches_proto_depIdxs,
		MessageInfos:      file_sift_saved_searches_v1_saved_searches_proto_msgTypes,
	}.Build()
	File_sift_saved_searches_v1_saved_searches_proto = out.File
	file_sift_saved_searches_v1_saved_searches_proto_rawDesc = nil
	file_sift_saved_searches_v1_saved_searches_proto_goTypes = nil
	file_sift_saved_searches_v1_saved_searches_proto_depIdxs = nil
}
