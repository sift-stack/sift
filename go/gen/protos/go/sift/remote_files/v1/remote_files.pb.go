// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/remote_files/v1/remote_files.proto

package remote_filesv1

import (
	_ "github.com/sift-stack/sift/go/gen/protos/go/google/api"
	_ "github.com/sift-stack/sift/go/gen/protos/go/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityType int32

const (
	EntityType_ENTITY_TYPE_UNSPECIFIED    EntityType = 0
	EntityType_ENTITY_TYPE_RUN            EntityType = 1
	EntityType_ENTITY_TYPE_ANNOTATION     EntityType = 2
	EntityType_ENTITY_TYPE_ASSET          EntityType = 3
	EntityType_ENTITY_TYPE_ANNOTATION_LOG EntityType = 4
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "ENTITY_TYPE_RUN",
		2: "ENTITY_TYPE_ANNOTATION",
		3: "ENTITY_TYPE_ASSET",
		4: "ENTITY_TYPE_ANNOTATION_LOG",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED":    0,
		"ENTITY_TYPE_RUN":            1,
		"ENTITY_TYPE_ANNOTATION":     2,
		"ENTITY_TYPE_ASSET":          3,
		"ENTITY_TYPE_ANNOTATION_LOG": 4,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_sift_remote_files_v1_remote_files_proto_enumTypes[0].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_sift_remote_files_v1_remote_files_proto_enumTypes[0]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{0}
}

type RemoteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFileId        string     `protobuf:"bytes,1,opt,name=remote_file_id,json=remoteFileId,proto3" json:"remote_file_id,omitempty"`
	OrganizationId      string     `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	EntityId            string     `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityType          EntityType `protobuf:"varint,4,opt,name=entity_type,json=entityType,proto3,enum=sift.remote_files.v1.EntityType" json:"entity_type,omitempty"`
	FileName            string     `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileMimeType        string     `protobuf:"bytes,6,opt,name=file_mime_type,json=fileMimeType,proto3" json:"file_mime_type,omitempty"`
	FileContentEncoding string     `protobuf:"bytes,7,opt,name=file_content_encoding,json=fileContentEncoding,proto3" json:"file_content_encoding,omitempty"`
	StorageKey          string     `protobuf:"bytes,8,opt,name=storage_key,json=storageKey,proto3" json:"storage_key,omitempty"`
	FileSize            uint64     `protobuf:"varint,9,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Description         *string    `protobuf:"bytes,10,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are assignable to Metadata:
	//
	//	*RemoteFile_VideoMetadata
	//	*RemoteFile_ImageMetadata
	Metadata         isRemoteFile_Metadata  `protobuf_oneof:"metadata"`
	CreatedByUserId  string                 `protobuf:"bytes,13,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	ModifiedByUserId string                 `protobuf:"bytes,14,opt,name=modified_by_user_id,json=modifiedByUserId,proto3" json:"modified_by_user_id,omitempty"`
	CreatedDate      *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
}

func (x *RemoteFile) Reset() {
	*x = RemoteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteFile) ProtoMessage() {}

func (x *RemoteFile) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteFile.ProtoReflect.Descriptor instead.
func (*RemoteFile) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{0}
}

func (x *RemoteFile) GetRemoteFileId() string {
	if x != nil {
		return x.RemoteFileId
	}
	return ""
}

func (x *RemoteFile) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *RemoteFile) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RemoteFile) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *RemoteFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *RemoteFile) GetFileMimeType() string {
	if x != nil {
		return x.FileMimeType
	}
	return ""
}

func (x *RemoteFile) GetFileContentEncoding() string {
	if x != nil {
		return x.FileContentEncoding
	}
	return ""
}

func (x *RemoteFile) GetStorageKey() string {
	if x != nil {
		return x.StorageKey
	}
	return ""
}

func (x *RemoteFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *RemoteFile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (m *RemoteFile) GetMetadata() isRemoteFile_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *RemoteFile) GetVideoMetadata() *VideoMetadata {
	if x, ok := x.GetMetadata().(*RemoteFile_VideoMetadata); ok {
		return x.VideoMetadata
	}
	return nil
}

func (x *RemoteFile) GetImageMetadata() *ImageMetadata {
	if x, ok := x.GetMetadata().(*RemoteFile_ImageMetadata); ok {
		return x.ImageMetadata
	}
	return nil
}

func (x *RemoteFile) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *RemoteFile) GetModifiedByUserId() string {
	if x != nil {
		return x.ModifiedByUserId
	}
	return ""
}

func (x *RemoteFile) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *RemoteFile) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

type isRemoteFile_Metadata interface {
	isRemoteFile_Metadata()
}

type RemoteFile_VideoMetadata struct {
	VideoMetadata *VideoMetadata `protobuf:"bytes,11,opt,name=video_metadata,json=videoMetadata,proto3,oneof"`
}

type RemoteFile_ImageMetadata struct {
	ImageMetadata *ImageMetadata `protobuf:"bytes,12,opt,name=image_metadata,json=imageMetadata,proto3,oneof"`
}

func (*RemoteFile_VideoMetadata) isRemoteFile_Metadata() {}

func (*RemoteFile_ImageMetadata) isRemoteFile_Metadata() {}

type VideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height          uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width           uint32                 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	DurationSeconds float32                `protobuf:"fixed32,3,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *VideoMetadata) Reset() {
	*x = VideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMetadata) ProtoMessage() {}

func (x *VideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMetadata.ProtoReflect.Descriptor instead.
func (*VideoMetadata) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{1}
}

func (x *VideoMetadata) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoMetadata) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoMetadata) GetDurationSeconds() float32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *VideoMetadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *ImageMetadata) Reset() {
	*x = ImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadata) ProtoMessage() {}

func (x *ImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetadata.ProtoReflect.Descriptor instead.
func (*ImageMetadata) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{2}
}

func (x *ImageMetadata) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageMetadata) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

// The request for a call to `RemoteFileService_GetRemoteFile` to retrieve a remote file;
type GetRemoteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFileId string `protobuf:"bytes,1,opt,name=remote_file_id,json=remoteFileId,proto3" json:"remote_file_id,omitempty"`
}

func (x *GetRemoteFileRequest) Reset() {
	*x = GetRemoteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteFileRequest) ProtoMessage() {}

func (x *GetRemoteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteFileRequest.ProtoReflect.Descriptor instead.
func (*GetRemoteFileRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{3}
}

func (x *GetRemoteFileRequest) GetRemoteFileId() string {
	if x != nil {
		return x.RemoteFileId
	}
	return ""
}

// The response of a call to `RemoteFileService_GetRemoteFile`.
type GetRemoteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFile *RemoteFile `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
}

func (x *GetRemoteFileResponse) Reset() {
	*x = GetRemoteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteFileResponse) ProtoMessage() {}

func (x *GetRemoteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteFileResponse.ProtoReflect.Descriptor instead.
func (*GetRemoteFileResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{4}
}

func (x *GetRemoteFileResponse) GetRemoteFile() *RemoteFile {
	if x != nil {
		return x.RemoteFile
	}
	return nil
}

// The request for a call to `RemoteFileService_ListRemoteFiles` to retrieve remote files.
type ListRemoteFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of remote files to return. The service may return fewer than this value.
	// If unspecified, at most 50 remote files will be returned. The maximum value is 1000; values above
	// 1000 will be coerced to 1000. Optional.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRemoteFiles` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListRemoteFiles` must match
	// the call that provided the page token. Optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
	// Available fields to filter by are `remote_file_id`, `entity_id`, `entity_type`, and `file_name`.
	// For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
	// For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#remote_files). Optional.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ListRemoteFilesRequest) Reset() {
	*x = ListRemoteFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteFilesRequest) ProtoMessage() {}

func (x *ListRemoteFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteFilesRequest.ProtoReflect.Descriptor instead.
func (*ListRemoteFilesRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{5}
}

func (x *ListRemoteFilesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRemoteFilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRemoteFilesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRemoteFilesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// The response of a call to `RemoteFileService_ListRemoteFilesResponse`.
type ListRemoteFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFiles   []*RemoteFile `protobuf:"bytes,1,rep,name=remote_files,json=remoteFiles,proto3" json:"remote_files,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRemoteFilesResponse) Reset() {
	*x = ListRemoteFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteFilesResponse) ProtoMessage() {}

func (x *ListRemoteFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteFilesResponse.ProtoReflect.Descriptor instead.
func (*ListRemoteFilesResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{6}
}

func (x *ListRemoteFilesResponse) GetRemoteFiles() []*RemoteFile {
	if x != nil {
		return x.RemoteFiles
	}
	return nil
}

func (x *ListRemoteFilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for a call to `RemoteFileService_CreateRemoteFile` to create a remote file.
type CreateRemoteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName            string     `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	EntityId            string     `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityType          EntityType `protobuf:"varint,3,opt,name=entity_type,json=entityType,proto3,enum=sift.remote_files.v1.EntityType" json:"entity_type,omitempty"`
	FileMimeType        string     `protobuf:"bytes,4,opt,name=file_mime_type,json=fileMimeType,proto3" json:"file_mime_type,omitempty"`
	FileContentEncoding string     `protobuf:"bytes,5,opt,name=file_content_encoding,json=fileContentEncoding,proto3" json:"file_content_encoding,omitempty"`
	FileSize            uint64     `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Description         *string    `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// This field is only required if your user belongs to multiple organizations.
	OrganizationId string `protobuf:"bytes,8,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Types that are assignable to Metadata:
	//
	//	*CreateRemoteFileRequest_VideoMetadata
	//	*CreateRemoteFileRequest_ImageMetadata
	Metadata isCreateRemoteFileRequest_Metadata `protobuf_oneof:"metadata"`
	// A custom UUID used to generate the object key. Recommended to be left unset.
	CustomUuid *string `protobuf:"bytes,11,opt,name=custom_uuid,json=customUuid,proto3,oneof" json:"custom_uuid,omitempty"`
}

func (x *CreateRemoteFileRequest) Reset() {
	*x = CreateRemoteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteFileRequest) ProtoMessage() {}

func (x *CreateRemoteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteFileRequest.ProtoReflect.Descriptor instead.
func (*CreateRemoteFileRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRemoteFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CreateRemoteFileRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *CreateRemoteFileRequest) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *CreateRemoteFileRequest) GetFileMimeType() string {
	if x != nil {
		return x.FileMimeType
	}
	return ""
}

func (x *CreateRemoteFileRequest) GetFileContentEncoding() string {
	if x != nil {
		return x.FileContentEncoding
	}
	return ""
}

func (x *CreateRemoteFileRequest) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *CreateRemoteFileRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateRemoteFileRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (m *CreateRemoteFileRequest) GetMetadata() isCreateRemoteFileRequest_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *CreateRemoteFileRequest) GetVideoMetadata() *VideoMetadata {
	if x, ok := x.GetMetadata().(*CreateRemoteFileRequest_VideoMetadata); ok {
		return x.VideoMetadata
	}
	return nil
}

func (x *CreateRemoteFileRequest) GetImageMetadata() *ImageMetadata {
	if x, ok := x.GetMetadata().(*CreateRemoteFileRequest_ImageMetadata); ok {
		return x.ImageMetadata
	}
	return nil
}

func (x *CreateRemoteFileRequest) GetCustomUuid() string {
	if x != nil && x.CustomUuid != nil {
		return *x.CustomUuid
	}
	return ""
}

type isCreateRemoteFileRequest_Metadata interface {
	isCreateRemoteFileRequest_Metadata()
}

type CreateRemoteFileRequest_VideoMetadata struct {
	VideoMetadata *VideoMetadata `protobuf:"bytes,9,opt,name=video_metadata,json=videoMetadata,proto3,oneof"`
}

type CreateRemoteFileRequest_ImageMetadata struct {
	ImageMetadata *ImageMetadata `protobuf:"bytes,10,opt,name=image_metadata,json=imageMetadata,proto3,oneof"`
}

func (*CreateRemoteFileRequest_VideoMetadata) isCreateRemoteFileRequest_Metadata() {}

func (*CreateRemoteFileRequest_ImageMetadata) isCreateRemoteFileRequest_Metadata() {}

// The response for a call to `RemoteFileService_CreateRemoteFile`.
type CreateRemoteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFile *RemoteFile `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
}

func (x *CreateRemoteFileResponse) Reset() {
	*x = CreateRemoteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteFileResponse) ProtoMessage() {}

func (x *CreateRemoteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteFileResponse.ProtoReflect.Descriptor instead.
func (*CreateRemoteFileResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRemoteFileResponse) GetRemoteFile() *RemoteFile {
	if x != nil {
		return x.RemoteFile
	}
	return nil
}

// The request for a call to `RemoteFileService_DeleteRemoteFile` to delete a remote file.
type DeleteRemoteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFileId string `protobuf:"bytes,1,opt,name=remote_file_id,json=remoteFileId,proto3" json:"remote_file_id,omitempty"`
}

func (x *DeleteRemoteFileRequest) Reset() {
	*x = DeleteRemoteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemoteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteFileRequest) ProtoMessage() {}

func (x *DeleteRemoteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteRemoteFileRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteRemoteFileRequest) GetRemoteFileId() string {
	if x != nil {
		return x.RemoteFileId
	}
	return ""
}

// The response of a call to `RemoteFileService_DeleteRemoteFile`.
type DeleteRemoteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRemoteFileResponse) Reset() {
	*x = DeleteRemoteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemoteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteFileResponse) ProtoMessage() {}

func (x *DeleteRemoteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteRemoteFileResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{10}
}

// The request for a call to `RemoteFileService_BatchDeleteRemoteFiles` to delete remote files.
type BatchDeleteRemoteFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Up to 1000 remote file IDs can be provided per request.
	RemoteFileIds []string `protobuf:"bytes,1,rep,name=remote_file_ids,json=remoteFileIds,proto3" json:"remote_file_ids,omitempty"`
}

func (x *BatchDeleteRemoteFilesRequest) Reset() {
	*x = BatchDeleteRemoteFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRemoteFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRemoteFilesRequest) ProtoMessage() {}

func (x *BatchDeleteRemoteFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRemoteFilesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteRemoteFilesRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{11}
}

func (x *BatchDeleteRemoteFilesRequest) GetRemoteFileIds() []string {
	if x != nil {
		return x.RemoteFileIds
	}
	return nil
}

// The response of a call to `RemoteFileService_BatchDeleteRemoteFiles`.
type BatchDeleteRemoteFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchDeleteRemoteFilesResponse) Reset() {
	*x = BatchDeleteRemoteFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteRemoteFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRemoteFilesResponse) ProtoMessage() {}

func (x *BatchDeleteRemoteFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRemoteFilesResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteRemoteFilesResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{12}
}

// The request for a call to `RemoteFileService_UpdateRemoteFile` to update a remote file.
type UpdateRemoteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote file to update.
	RemoteFile *RemoteFile `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
	// The list of fields to be updated. The fields available to be updated are `description` and `metadata`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRemoteFileRequest) Reset() {
	*x = UpdateRemoteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemoteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteFileRequest) ProtoMessage() {}

func (x *UpdateRemoteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteFileRequest.ProtoReflect.Descriptor instead.
func (*UpdateRemoteFileRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRemoteFileRequest) GetRemoteFile() *RemoteFile {
	if x != nil {
		return x.RemoteFile
	}
	return nil
}

func (x *UpdateRemoteFileRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// The response of a call to `RemoteFileService_UpdateRemoteFile`.
type UpdateRemoteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFile *RemoteFile `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
}

func (x *UpdateRemoteFileResponse) Reset() {
	*x = UpdateRemoteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemoteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteFileResponse) ProtoMessage() {}

func (x *UpdateRemoteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteFileResponse.ProtoReflect.Descriptor instead.
func (*UpdateRemoteFileResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateRemoteFileResponse) GetRemoteFile() *RemoteFile {
	if x != nil {
		return x.RemoteFile
	}
	return nil
}

// The request for a call to `RemoteFileService_GetRemoteFileDownloadUrl`.
type GetRemoteFileDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFileId string `protobuf:"bytes,1,opt,name=remote_file_id,json=remoteFileId,proto3" json:"remote_file_id,omitempty"`
}

func (x *GetRemoteFileDownloadUrlRequest) Reset() {
	*x = GetRemoteFileDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteFileDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteFileDownloadUrlRequest) ProtoMessage() {}

func (x *GetRemoteFileDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteFileDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetRemoteFileDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{15}
}

func (x *GetRemoteFileDownloadUrlRequest) GetRemoteFileId() string {
	if x != nil {
		return x.RemoteFileId
	}
	return ""
}

// The response of a call to `RemoteFileService_GetRemoteFileDownloadUrl`.
type GetRemoteFileDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *GetRemoteFileDownloadUrlResponse) Reset() {
	*x = GetRemoteFileDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemoteFileDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemoteFileDownloadUrlResponse) ProtoMessage() {}

func (x *GetRemoteFileDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_remote_files_v1_remote_files_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemoteFileDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetRemoteFileDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_sift_remote_files_v1_remote_files_proto_rawDescGZIP(), []int{16}
}

func (x *GetRemoteFileDownloadUrlResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

var File_sift_remote_files_v1_remote_files_proto protoreflect.FileDescriptor

var file_sift_remote_files_v1_remote_files_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfb, 0x06, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a,
	0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x51, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb6, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x47, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x41, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x05, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x15, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x62, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x20,
	0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x62, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x2a, 0x91, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x04, 0x32, 0xbf, 0x0c, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc2,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x2a, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x92, 0x41, 0x28, 0x12, 0x0d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x17, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92, 0x41, 0x29, 0x12, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x92, 0x41, 0x25, 0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x84, 0x02, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x90, 0x01, 0x92, 0x41, 0x6e, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x5a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x60, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x32, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x92, 0x41, 0x29, 0x12, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x8f, 0x02, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x92, 0x41, 0x5b, 0x12, 0x16, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x41, 0x42, 0x61, 0x74, 0x63, 0x68, 0x20, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x30, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x84, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x12, 0x35, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x79, 0x92, 0x41, 0x3c, 0x12, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0x28, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x75, 0x72, 0x6c, 0x42, 0x84, 0x02, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53,
	0x52, 0x58, 0xaa, 0x02, 0x13, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x53, 0x69, 0x66, 0x74, 0x5c,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1f, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x15, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x92, 0x41, 0x16, 0x12, 0x14, 0x0a, 0x12, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_remote_files_v1_remote_files_proto_rawDescOnce sync.Once
	file_sift_remote_files_v1_remote_files_proto_rawDescData = file_sift_remote_files_v1_remote_files_proto_rawDesc
)

func file_sift_remote_files_v1_remote_files_proto_rawDescGZIP() []byte {
	file_sift_remote_files_v1_remote_files_proto_rawDescOnce.Do(func() {
		file_sift_remote_files_v1_remote_files_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_remote_files_v1_remote_files_proto_rawDescData)
	})
	return file_sift_remote_files_v1_remote_files_proto_rawDescData
}

var file_sift_remote_files_v1_remote_files_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sift_remote_files_v1_remote_files_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_sift_remote_files_v1_remote_files_proto_goTypes = []interface{}{
	(EntityType)(0),                          // 0: sift.remote_files.v1.EntityType
	(*RemoteFile)(nil),                       // 1: sift.remote_files.v1.RemoteFile
	(*VideoMetadata)(nil),                    // 2: sift.remote_files.v1.VideoMetadata
	(*ImageMetadata)(nil),                    // 3: sift.remote_files.v1.ImageMetadata
	(*GetRemoteFileRequest)(nil),             // 4: sift.remote_files.v1.GetRemoteFileRequest
	(*GetRemoteFileResponse)(nil),            // 5: sift.remote_files.v1.GetRemoteFileResponse
	(*ListRemoteFilesRequest)(nil),           // 6: sift.remote_files.v1.ListRemoteFilesRequest
	(*ListRemoteFilesResponse)(nil),          // 7: sift.remote_files.v1.ListRemoteFilesResponse
	(*CreateRemoteFileRequest)(nil),          // 8: sift.remote_files.v1.CreateRemoteFileRequest
	(*CreateRemoteFileResponse)(nil),         // 9: sift.remote_files.v1.CreateRemoteFileResponse
	(*DeleteRemoteFileRequest)(nil),          // 10: sift.remote_files.v1.DeleteRemoteFileRequest
	(*DeleteRemoteFileResponse)(nil),         // 11: sift.remote_files.v1.DeleteRemoteFileResponse
	(*BatchDeleteRemoteFilesRequest)(nil),    // 12: sift.remote_files.v1.BatchDeleteRemoteFilesRequest
	(*BatchDeleteRemoteFilesResponse)(nil),   // 13: sift.remote_files.v1.BatchDeleteRemoteFilesResponse
	(*UpdateRemoteFileRequest)(nil),          // 14: sift.remote_files.v1.UpdateRemoteFileRequest
	(*UpdateRemoteFileResponse)(nil),         // 15: sift.remote_files.v1.UpdateRemoteFileResponse
	(*GetRemoteFileDownloadUrlRequest)(nil),  // 16: sift.remote_files.v1.GetRemoteFileDownloadUrlRequest
	(*GetRemoteFileDownloadUrlResponse)(nil), // 17: sift.remote_files.v1.GetRemoteFileDownloadUrlResponse
	(*timestamppb.Timestamp)(nil),            // 18: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),            // 19: google.protobuf.FieldMask
}
var file_sift_remote_files_v1_remote_files_proto_depIdxs = []int32{
	0,  // 0: sift.remote_files.v1.RemoteFile.entity_type:type_name -> sift.remote_files.v1.EntityType
	2,  // 1: sift.remote_files.v1.RemoteFile.video_metadata:type_name -> sift.remote_files.v1.VideoMetadata
	3,  // 2: sift.remote_files.v1.RemoteFile.image_metadata:type_name -> sift.remote_files.v1.ImageMetadata
	18, // 3: sift.remote_files.v1.RemoteFile.created_date:type_name -> google.protobuf.Timestamp
	18, // 4: sift.remote_files.v1.RemoteFile.modified_date:type_name -> google.protobuf.Timestamp
	18, // 5: sift.remote_files.v1.VideoMetadata.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 6: sift.remote_files.v1.GetRemoteFileResponse.remote_file:type_name -> sift.remote_files.v1.RemoteFile
	1,  // 7: sift.remote_files.v1.ListRemoteFilesResponse.remote_files:type_name -> sift.remote_files.v1.RemoteFile
	0,  // 8: sift.remote_files.v1.CreateRemoteFileRequest.entity_type:type_name -> sift.remote_files.v1.EntityType
	2,  // 9: sift.remote_files.v1.CreateRemoteFileRequest.video_metadata:type_name -> sift.remote_files.v1.VideoMetadata
	3,  // 10: sift.remote_files.v1.CreateRemoteFileRequest.image_metadata:type_name -> sift.remote_files.v1.ImageMetadata
	1,  // 11: sift.remote_files.v1.CreateRemoteFileResponse.remote_file:type_name -> sift.remote_files.v1.RemoteFile
	1,  // 12: sift.remote_files.v1.UpdateRemoteFileRequest.remote_file:type_name -> sift.remote_files.v1.RemoteFile
	19, // 13: sift.remote_files.v1.UpdateRemoteFileRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 14: sift.remote_files.v1.UpdateRemoteFileResponse.remote_file:type_name -> sift.remote_files.v1.RemoteFile
	4,  // 15: sift.remote_files.v1.RemoteFileService.GetRemoteFile:input_type -> sift.remote_files.v1.GetRemoteFileRequest
	8,  // 16: sift.remote_files.v1.RemoteFileService.CreateRemoteFile:input_type -> sift.remote_files.v1.CreateRemoteFileRequest
	6,  // 17: sift.remote_files.v1.RemoteFileService.ListRemoteFiles:input_type -> sift.remote_files.v1.ListRemoteFilesRequest
	14, // 18: sift.remote_files.v1.RemoteFileService.UpdateRemoteFile:input_type -> sift.remote_files.v1.UpdateRemoteFileRequest
	10, // 19: sift.remote_files.v1.RemoteFileService.DeleteRemoteFile:input_type -> sift.remote_files.v1.DeleteRemoteFileRequest
	12, // 20: sift.remote_files.v1.RemoteFileService.BatchDeleteRemoteFiles:input_type -> sift.remote_files.v1.BatchDeleteRemoteFilesRequest
	16, // 21: sift.remote_files.v1.RemoteFileService.GetRemoteFileDownloadUrl:input_type -> sift.remote_files.v1.GetRemoteFileDownloadUrlRequest
	5,  // 22: sift.remote_files.v1.RemoteFileService.GetRemoteFile:output_type -> sift.remote_files.v1.GetRemoteFileResponse
	9,  // 23: sift.remote_files.v1.RemoteFileService.CreateRemoteFile:output_type -> sift.remote_files.v1.CreateRemoteFileResponse
	7,  // 24: sift.remote_files.v1.RemoteFileService.ListRemoteFiles:output_type -> sift.remote_files.v1.ListRemoteFilesResponse
	15, // 25: sift.remote_files.v1.RemoteFileService.UpdateRemoteFile:output_type -> sift.remote_files.v1.UpdateRemoteFileResponse
	11, // 26: sift.remote_files.v1.RemoteFileService.DeleteRemoteFile:output_type -> sift.remote_files.v1.DeleteRemoteFileResponse
	13, // 27: sift.remote_files.v1.RemoteFileService.BatchDeleteRemoteFiles:output_type -> sift.remote_files.v1.BatchDeleteRemoteFilesResponse
	17, // 28: sift.remote_files.v1.RemoteFileService.GetRemoteFileDownloadUrl:output_type -> sift.remote_files.v1.GetRemoteFileDownloadUrlResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_sift_remote_files_v1_remote_files_proto_init() }
func file_sift_remote_files_v1_remote_files_proto_init() {
	if File_sift_remote_files_v1_remote_files_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_remote_files_v1_remote_files_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemoteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemoteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteRemoteFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteRemoteFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemoteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemoteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteFileDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_remote_files_v1_remote_files_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemoteFileDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_remote_files_v1_remote_files_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RemoteFile_VideoMetadata)(nil),
		(*RemoteFile_ImageMetadata)(nil),
	}
	file_sift_remote_files_v1_remote_files_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CreateRemoteFileRequest_VideoMetadata)(nil),
		(*CreateRemoteFileRequest_ImageMetadata)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_remote_files_v1_remote_files_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_remote_files_v1_remote_files_proto_goTypes,
		DependencyIndexes: file_sift_remote_files_v1_remote_files_proto_depIdxs,
		EnumInfos:         file_sift_remote_files_v1_remote_files_proto_enumTypes,
		MessageInfos:      file_sift_remote_files_v1_remote_files_proto_msgTypes,
	}.Build()
	File_sift_remote_files_v1_remote_files_proto = out.File
	file_sift_remote_files_v1_remote_files_proto_rawDesc = nil
	file_sift_remote_files_v1_remote_files_proto_goTypes = nil
	file_sift_remote_files_v1_remote_files_proto_depIdxs = nil
}
