// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sift/rule_evaluation/v1/rule_evaluation.proto

package rule_evaluationv1

import (
	_ "github.com/sift-stack/sift/go/gen/protos/go/google/api"
	_ "github.com/sift-stack/sift/go/gen/protos/go/protoc-gen-openapiv2/options"
	v1 "github.com/sift-stack/sift/go/gen/protos/go/sift/common/type/v1"
	v11 "github.com/sift-stack/sift/go/gen/protos/go/sift/rules/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EvaluateRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Time:
	//
	//	*EvaluateRulesRequest_Run
	//	*EvaluateRulesRequest_Assets
	Time isEvaluateRulesRequest_Time `protobuf_oneof:"time"`
	// Types that are assignable to Mode:
	//
	//	*EvaluateRulesRequest_Rules
	//	*EvaluateRulesRequest_RuleVersions
	//	*EvaluateRulesRequest_ReportTemplate
	Mode              isEvaluateRulesRequest_Mode     `protobuf_oneof:"mode"`
	AnnotationOptions *EvaluateRulesAnnotationOptions `protobuf:"bytes,6,opt,name=annotation_options,json=annotationOptions,proto3" json:"annotation_options,omitempty"`
	// Only required if your user belongs to multiple organizations
	OrganizationId string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// If this request creates a report, this field will be used as the report name.
	ReportName *string `protobuf:"bytes,8,opt,name=report_name,json=reportName,proto3,oneof" json:"report_name,omitempty"`
}

func (x *EvaluateRulesRequest) Reset() {
	*x = EvaluateRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesRequest) ProtoMessage() {}

func (x *EvaluateRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesRequest.ProtoReflect.Descriptor instead.
func (*EvaluateRulesRequest) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{0}
}

func (m *EvaluateRulesRequest) GetTime() isEvaluateRulesRequest_Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (x *EvaluateRulesRequest) GetRun() *v1.ResourceIdentifier {
	if x, ok := x.GetTime().(*EvaluateRulesRequest_Run); ok {
		return x.Run
	}
	return nil
}

func (x *EvaluateRulesRequest) GetAssets() *AssetsTimeRange {
	if x, ok := x.GetTime().(*EvaluateRulesRequest_Assets); ok {
		return x.Assets
	}
	return nil
}

func (m *EvaluateRulesRequest) GetMode() isEvaluateRulesRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *EvaluateRulesRequest) GetRules() *EvaluateRulesFromCurrentRuleVersions {
	if x, ok := x.GetMode().(*EvaluateRulesRequest_Rules); ok {
		return x.Rules
	}
	return nil
}

func (x *EvaluateRulesRequest) GetRuleVersions() *EvaluateRulesFromRuleVersions {
	if x, ok := x.GetMode().(*EvaluateRulesRequest_RuleVersions); ok {
		return x.RuleVersions
	}
	return nil
}

func (x *EvaluateRulesRequest) GetReportTemplate() *EvaluateRulesFromReportTemplate {
	if x, ok := x.GetMode().(*EvaluateRulesRequest_ReportTemplate); ok {
		return x.ReportTemplate
	}
	return nil
}

func (x *EvaluateRulesRequest) GetAnnotationOptions() *EvaluateRulesAnnotationOptions {
	if x != nil {
		return x.AnnotationOptions
	}
	return nil
}

func (x *EvaluateRulesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *EvaluateRulesRequest) GetReportName() string {
	if x != nil && x.ReportName != nil {
		return *x.ReportName
	}
	return ""
}

type isEvaluateRulesRequest_Time interface {
	isEvaluateRulesRequest_Time()
}

type EvaluateRulesRequest_Run struct {
	Run *v1.ResourceIdentifier `protobuf:"bytes,1,opt,name=run,proto3,oneof"`
}

type EvaluateRulesRequest_Assets struct {
	Assets *AssetsTimeRange `protobuf:"bytes,2,opt,name=assets,proto3,oneof"`
}

func (*EvaluateRulesRequest_Run) isEvaluateRulesRequest_Time() {}

func (*EvaluateRulesRequest_Assets) isEvaluateRulesRequest_Time() {}

type isEvaluateRulesRequest_Mode interface {
	isEvaluateRulesRequest_Mode()
}

type EvaluateRulesRequest_Rules struct {
	Rules *EvaluateRulesFromCurrentRuleVersions `protobuf:"bytes,3,opt,name=rules,proto3,oneof"`
}

type EvaluateRulesRequest_RuleVersions struct {
	RuleVersions *EvaluateRulesFromRuleVersions `protobuf:"bytes,4,opt,name=rule_versions,json=ruleVersions,proto3,oneof"`
}

type EvaluateRulesRequest_ReportTemplate struct {
	ReportTemplate *EvaluateRulesFromReportTemplate `protobuf:"bytes,5,opt,name=report_template,json=reportTemplate,proto3,oneof"`
}

func (*EvaluateRulesRequest_Rules) isEvaluateRulesRequest_Mode() {}

func (*EvaluateRulesRequest_RuleVersions) isEvaluateRulesRequest_Mode() {}

func (*EvaluateRulesRequest_ReportTemplate) isEvaluateRulesRequest_Mode() {}

type AssetsTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets    *v1.NamedResources     `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *AssetsTimeRange) Reset() {
	*x = AssetsTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsTimeRange) ProtoMessage() {}

func (x *AssetsTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsTimeRange.ProtoReflect.Descriptor instead.
func (*AssetsTimeRange) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{1}
}

func (x *AssetsTimeRange) GetAssets() *v1.NamedResources {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *AssetsTimeRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AssetsTimeRange) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type EvaluateRulesFromCurrentRuleVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules *v1.ResourceIdentifiers `protobuf:"bytes,1,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *EvaluateRulesFromCurrentRuleVersions) Reset() {
	*x = EvaluateRulesFromCurrentRuleVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesFromCurrentRuleVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesFromCurrentRuleVersions) ProtoMessage() {}

func (x *EvaluateRulesFromCurrentRuleVersions) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesFromCurrentRuleVersions.ProtoReflect.Descriptor instead.
func (*EvaluateRulesFromCurrentRuleVersions) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{2}
}

func (x *EvaluateRulesFromCurrentRuleVersions) GetRules() *v1.ResourceIdentifiers {
	if x != nil {
		return x.Rules
	}
	return nil
}

type EvaluateRulesFromReportTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportTemplate *v1.ResourceIdentifier `protobuf:"bytes,1,opt,name=report_template,json=reportTemplate,proto3" json:"report_template,omitempty"`
}

func (x *EvaluateRulesFromReportTemplate) Reset() {
	*x = EvaluateRulesFromReportTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesFromReportTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesFromReportTemplate) ProtoMessage() {}

func (x *EvaluateRulesFromReportTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesFromReportTemplate.ProtoReflect.Descriptor instead.
func (*EvaluateRulesFromReportTemplate) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{3}
}

func (x *EvaluateRulesFromReportTemplate) GetReportTemplate() *v1.ResourceIdentifier {
	if x != nil {
		return x.ReportTemplate
	}
	return nil
}

type EvaluateRulesFromRuleVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleVersionIds []string `protobuf:"bytes,1,rep,name=rule_version_ids,json=ruleVersionIds,proto3" json:"rule_version_ids,omitempty"`
}

func (x *EvaluateRulesFromRuleVersions) Reset() {
	*x = EvaluateRulesFromRuleVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesFromRuleVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesFromRuleVersions) ProtoMessage() {}

func (x *EvaluateRulesFromRuleVersions) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesFromRuleVersions.ProtoReflect.Descriptor instead.
func (*EvaluateRulesFromRuleVersions) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{4}
}

func (x *EvaluateRulesFromRuleVersions) GetRuleVersionIds() []string {
	if x != nil {
		return x.RuleVersionIds
	}
	return nil
}

type EvaluateRulesAnnotationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags *v1.NamedResources `protobuf:"bytes,1,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *EvaluateRulesAnnotationOptions) Reset() {
	*x = EvaluateRulesAnnotationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesAnnotationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesAnnotationOptions) ProtoMessage() {}

func (x *EvaluateRulesAnnotationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesAnnotationOptions.ProtoReflect.Descriptor instead.
func (*EvaluateRulesAnnotationOptions) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{5}
}

func (x *EvaluateRulesAnnotationOptions) GetTags() *v1.NamedResources {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EvaluateRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAnnotationCount int32 `protobuf:"varint,1,opt,name=created_annotation_count,json=createdAnnotationCount,proto3" json:"created_annotation_count,omitempty"`
	// A report will be generated if rules were evaluated against a run.
	ReportId *string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3,oneof" json:"report_id,omitempty"`
	// This will be set if the job has an extended run time and is being processed asynchronously.
	JobId *string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3,oneof" json:"job_id,omitempty"`
}

func (x *EvaluateRulesResponse) Reset() {
	*x = EvaluateRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesResponse) ProtoMessage() {}

func (x *EvaluateRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesResponse.ProtoReflect.Descriptor instead.
func (*EvaluateRulesResponse) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{6}
}

func (x *EvaluateRulesResponse) GetCreatedAnnotationCount() int32 {
	if x != nil {
		return x.CreatedAnnotationCount
	}
	return 0
}

func (x *EvaluateRulesResponse) GetReportId() string {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return ""
}

func (x *EvaluateRulesResponse) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

type EvaluateRulesPreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Time:
	//
	//	*EvaluateRulesPreviewRequest_Run
	Time isEvaluateRulesPreviewRequest_Time `protobuf_oneof:"time"`
	// Types that are assignable to Mode:
	//
	//	*EvaluateRulesPreviewRequest_Rules
	//	*EvaluateRulesPreviewRequest_RuleVersions
	//	*EvaluateRulesPreviewRequest_ReportTemplate
	//	*EvaluateRulesPreviewRequest_RuleConfigs
	Mode isEvaluateRulesPreviewRequest_Mode `protobuf_oneof:"mode"`
	// Only required if your user belongs to multiple organizations
	OrganizationId string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *EvaluateRulesPreviewRequest) Reset() {
	*x = EvaluateRulesPreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesPreviewRequest) ProtoMessage() {}

func (x *EvaluateRulesPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesPreviewRequest.ProtoReflect.Descriptor instead.
func (*EvaluateRulesPreviewRequest) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{7}
}

func (m *EvaluateRulesPreviewRequest) GetTime() isEvaluateRulesPreviewRequest_Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (x *EvaluateRulesPreviewRequest) GetRun() *v1.ResourceIdentifier {
	if x, ok := x.GetTime().(*EvaluateRulesPreviewRequest_Run); ok {
		return x.Run
	}
	return nil
}

func (m *EvaluateRulesPreviewRequest) GetMode() isEvaluateRulesPreviewRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *EvaluateRulesPreviewRequest) GetRules() *EvaluateRulesFromCurrentRuleVersions {
	if x, ok := x.GetMode().(*EvaluateRulesPreviewRequest_Rules); ok {
		return x.Rules
	}
	return nil
}

func (x *EvaluateRulesPreviewRequest) GetRuleVersions() *EvaluateRulesFromRuleVersions {
	if x, ok := x.GetMode().(*EvaluateRulesPreviewRequest_RuleVersions); ok {
		return x.RuleVersions
	}
	return nil
}

func (x *EvaluateRulesPreviewRequest) GetReportTemplate() *EvaluateRulesFromReportTemplate {
	if x, ok := x.GetMode().(*EvaluateRulesPreviewRequest_ReportTemplate); ok {
		return x.ReportTemplate
	}
	return nil
}

func (x *EvaluateRulesPreviewRequest) GetRuleConfigs() *EvaluateRulesFromRuleConfigs {
	if x, ok := x.GetMode().(*EvaluateRulesPreviewRequest_RuleConfigs); ok {
		return x.RuleConfigs
	}
	return nil
}

func (x *EvaluateRulesPreviewRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type isEvaluateRulesPreviewRequest_Time interface {
	isEvaluateRulesPreviewRequest_Time()
}

type EvaluateRulesPreviewRequest_Run struct {
	Run *v1.ResourceIdentifier `protobuf:"bytes,1,opt,name=run,proto3,oneof"`
}

func (*EvaluateRulesPreviewRequest_Run) isEvaluateRulesPreviewRequest_Time() {}

type isEvaluateRulesPreviewRequest_Mode interface {
	isEvaluateRulesPreviewRequest_Mode()
}

type EvaluateRulesPreviewRequest_Rules struct {
	Rules *EvaluateRulesFromCurrentRuleVersions `protobuf:"bytes,3,opt,name=rules,proto3,oneof"`
}

type EvaluateRulesPreviewRequest_RuleVersions struct {
	RuleVersions *EvaluateRulesFromRuleVersions `protobuf:"bytes,4,opt,name=rule_versions,json=ruleVersions,proto3,oneof"`
}

type EvaluateRulesPreviewRequest_ReportTemplate struct {
	ReportTemplate *EvaluateRulesFromReportTemplate `protobuf:"bytes,5,opt,name=report_template,json=reportTemplate,proto3,oneof"`
}

type EvaluateRulesPreviewRequest_RuleConfigs struct {
	RuleConfigs *EvaluateRulesFromRuleConfigs `protobuf:"bytes,6,opt,name=rule_configs,json=ruleConfigs,proto3,oneof"`
}

func (*EvaluateRulesPreviewRequest_Rules) isEvaluateRulesPreviewRequest_Mode() {}

func (*EvaluateRulesPreviewRequest_RuleVersions) isEvaluateRulesPreviewRequest_Mode() {}

func (*EvaluateRulesPreviewRequest_ReportTemplate) isEvaluateRulesPreviewRequest_Mode() {}

func (*EvaluateRulesPreviewRequest_RuleConfigs) isEvaluateRulesPreviewRequest_Mode() {}

type EvaluateRulesFromRuleConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*v11.UpdateRuleRequest `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *EvaluateRulesFromRuleConfigs) Reset() {
	*x = EvaluateRulesFromRuleConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesFromRuleConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesFromRuleConfigs) ProtoMessage() {}

func (x *EvaluateRulesFromRuleConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesFromRuleConfigs.ProtoReflect.Descriptor instead.
func (*EvaluateRulesFromRuleConfigs) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{8}
}

func (x *EvaluateRulesFromRuleConfigs) GetConfigs() []*v11.UpdateRuleRequest {
	if x != nil {
		return x.Configs
	}
	return nil
}

type EvaluateRulesPreviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAnnotationCount int32                   `protobuf:"varint,1,opt,name=created_annotation_count,json=createdAnnotationCount,proto3" json:"created_annotation_count,omitempty"`
	DryRunAnnotations      []*v11.DryRunAnnotation `protobuf:"bytes,2,rep,name=dry_run_annotations,json=dryRunAnnotations,proto3" json:"dry_run_annotations,omitempty"`
}

func (x *EvaluateRulesPreviewResponse) Reset() {
	*x = EvaluateRulesPreviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateRulesPreviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateRulesPreviewResponse) ProtoMessage() {}

func (x *EvaluateRulesPreviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateRulesPreviewResponse.ProtoReflect.Descriptor instead.
func (*EvaluateRulesPreviewResponse) Descriptor() ([]byte, []int) {
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP(), []int{9}
}

func (x *EvaluateRulesPreviewResponse) GetCreatedAnnotationCount() int32 {
	if x != nil {
		return x.CreatedAnnotationCount
	}
	return 0
}

func (x *EvaluateRulesPreviewResponse) GetDryRunAnnotations() []*v11.DryRunAnnotation {
	if x != nil {
		return x.DryRunAnnotations
	}
	return nil
}

var File_sift_rule_evaluation_v1_rule_evaluation_proto protoreflect.FileDescriptor

var file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x93, 0x05, 0x0a, 0x14, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x03, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x24, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x1f, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0x4e, 0x0a, 0x1d, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0x5e, 0x0a, 0x1e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x22, 0x8f, 0x04, 0x0a, 0x1b,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x03, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x55, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01,
	0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63,
	0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x69, 0x66, 0x74,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x48, 0x01, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a,
	0x1c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3f, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x1c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x13, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0xd8, 0x06, 0x0a, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc3, 0x02, 0x0a, 0x0d, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x69,
	0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x92, 0x41, 0xa7,
	0x01, 0x12, 0x0d, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x1a, 0x95, 0x01, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x20, 0x61, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01,
	0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0xda, 0x02, 0x0a, 0x14, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x34, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x01, 0x92, 0x41, 0xa1, 0x01, 0x12, 0x14, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x1a, 0x88, 0x01, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x20, 0x64,
	0x72, 0x79, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x20, 0x61, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	0x62, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x2d, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x3a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x9b, 0x01, 0x92,
	0x41, 0x97, 0x01, 0x12, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x1a,
	0x79, 0x0a, 0x1f, 0x52, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x2e, 0x12, 0x56, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x69, 0x66,
	0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x65, 0x73, 0x6b, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x32, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x2f, 0x32, 0x36, 0x35, 0x34, 0x32, 0x31, 0x31, 0x30, 0x32, 0x42, 0xa1, 0x02, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x66, 0x74, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69,
	0x66, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x69, 0x66, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x69, 0x66, 0x74, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x52, 0x58, 0xaa, 0x02,
	0x16, 0x53, 0x69, 0x66, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x22, 0x53, 0x69, 0x66, 0x74, 0x5c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x53, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x92, 0x41, 0x1b, 0x12, 0x19, 0x0a, 0x17, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescOnce sync.Once
	file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescData = file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDesc
)

func file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescGZIP() []byte {
	file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescOnce.Do(func() {
		file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescData = protoimpl.X.CompressGZIP(file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescData)
	})
	return file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDescData
}

var file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sift_rule_evaluation_v1_rule_evaluation_proto_goTypes = []interface{}{
	(*EvaluateRulesRequest)(nil),                 // 0: sift.rule_evaluation.v1.EvaluateRulesRequest
	(*AssetsTimeRange)(nil),                      // 1: sift.rule_evaluation.v1.AssetsTimeRange
	(*EvaluateRulesFromCurrentRuleVersions)(nil), // 2: sift.rule_evaluation.v1.EvaluateRulesFromCurrentRuleVersions
	(*EvaluateRulesFromReportTemplate)(nil),      // 3: sift.rule_evaluation.v1.EvaluateRulesFromReportTemplate
	(*EvaluateRulesFromRuleVersions)(nil),        // 4: sift.rule_evaluation.v1.EvaluateRulesFromRuleVersions
	(*EvaluateRulesAnnotationOptions)(nil),       // 5: sift.rule_evaluation.v1.EvaluateRulesAnnotationOptions
	(*EvaluateRulesResponse)(nil),                // 6: sift.rule_evaluation.v1.EvaluateRulesResponse
	(*EvaluateRulesPreviewRequest)(nil),          // 7: sift.rule_evaluation.v1.EvaluateRulesPreviewRequest
	(*EvaluateRulesFromRuleConfigs)(nil),         // 8: sift.rule_evaluation.v1.EvaluateRulesFromRuleConfigs
	(*EvaluateRulesPreviewResponse)(nil),         // 9: sift.rule_evaluation.v1.EvaluateRulesPreviewResponse
	(*v1.ResourceIdentifier)(nil),                // 10: sift.common.type.v1.ResourceIdentifier
	(*v1.NamedResources)(nil),                    // 11: sift.common.type.v1.NamedResources
	(*timestamppb.Timestamp)(nil),                // 12: google.protobuf.Timestamp
	(*v1.ResourceIdentifiers)(nil),               // 13: sift.common.type.v1.ResourceIdentifiers
	(*v11.UpdateRuleRequest)(nil),                // 14: sift.rules.v1.UpdateRuleRequest
	(*v11.DryRunAnnotation)(nil),                 // 15: sift.rules.v1.DryRunAnnotation
}
var file_sift_rule_evaluation_v1_rule_evaluation_proto_depIdxs = []int32{
	10, // 0: sift.rule_evaluation.v1.EvaluateRulesRequest.run:type_name -> sift.common.type.v1.ResourceIdentifier
	1,  // 1: sift.rule_evaluation.v1.EvaluateRulesRequest.assets:type_name -> sift.rule_evaluation.v1.AssetsTimeRange
	2,  // 2: sift.rule_evaluation.v1.EvaluateRulesRequest.rules:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromCurrentRuleVersions
	4,  // 3: sift.rule_evaluation.v1.EvaluateRulesRequest.rule_versions:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromRuleVersions
	3,  // 4: sift.rule_evaluation.v1.EvaluateRulesRequest.report_template:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromReportTemplate
	5,  // 5: sift.rule_evaluation.v1.EvaluateRulesRequest.annotation_options:type_name -> sift.rule_evaluation.v1.EvaluateRulesAnnotationOptions
	11, // 6: sift.rule_evaluation.v1.AssetsTimeRange.assets:type_name -> sift.common.type.v1.NamedResources
	12, // 7: sift.rule_evaluation.v1.AssetsTimeRange.start_time:type_name -> google.protobuf.Timestamp
	12, // 8: sift.rule_evaluation.v1.AssetsTimeRange.end_time:type_name -> google.protobuf.Timestamp
	13, // 9: sift.rule_evaluation.v1.EvaluateRulesFromCurrentRuleVersions.rules:type_name -> sift.common.type.v1.ResourceIdentifiers
	10, // 10: sift.rule_evaluation.v1.EvaluateRulesFromReportTemplate.report_template:type_name -> sift.common.type.v1.ResourceIdentifier
	11, // 11: sift.rule_evaluation.v1.EvaluateRulesAnnotationOptions.tags:type_name -> sift.common.type.v1.NamedResources
	10, // 12: sift.rule_evaluation.v1.EvaluateRulesPreviewRequest.run:type_name -> sift.common.type.v1.ResourceIdentifier
	2,  // 13: sift.rule_evaluation.v1.EvaluateRulesPreviewRequest.rules:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromCurrentRuleVersions
	4,  // 14: sift.rule_evaluation.v1.EvaluateRulesPreviewRequest.rule_versions:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromRuleVersions
	3,  // 15: sift.rule_evaluation.v1.EvaluateRulesPreviewRequest.report_template:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromReportTemplate
	8,  // 16: sift.rule_evaluation.v1.EvaluateRulesPreviewRequest.rule_configs:type_name -> sift.rule_evaluation.v1.EvaluateRulesFromRuleConfigs
	14, // 17: sift.rule_evaluation.v1.EvaluateRulesFromRuleConfigs.configs:type_name -> sift.rules.v1.UpdateRuleRequest
	15, // 18: sift.rule_evaluation.v1.EvaluateRulesPreviewResponse.dry_run_annotations:type_name -> sift.rules.v1.DryRunAnnotation
	0,  // 19: sift.rule_evaluation.v1.RuleEvaluationService.EvaluateRules:input_type -> sift.rule_evaluation.v1.EvaluateRulesRequest
	7,  // 20: sift.rule_evaluation.v1.RuleEvaluationService.EvaluateRulesPreview:input_type -> sift.rule_evaluation.v1.EvaluateRulesPreviewRequest
	6,  // 21: sift.rule_evaluation.v1.RuleEvaluationService.EvaluateRules:output_type -> sift.rule_evaluation.v1.EvaluateRulesResponse
	9,  // 22: sift.rule_evaluation.v1.RuleEvaluationService.EvaluateRulesPreview:output_type -> sift.rule_evaluation.v1.EvaluateRulesPreviewResponse
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_sift_rule_evaluation_v1_rule_evaluation_proto_init() }
func file_sift_rule_evaluation_v1_rule_evaluation_proto_init() {
	if File_sift_rule_evaluation_v1_rule_evaluation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesFromCurrentRuleVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesFromReportTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesFromRuleVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesAnnotationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesPreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesFromRuleConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateRulesPreviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EvaluateRulesRequest_Run)(nil),
		(*EvaluateRulesRequest_Assets)(nil),
		(*EvaluateRulesRequest_Rules)(nil),
		(*EvaluateRulesRequest_RuleVersions)(nil),
		(*EvaluateRulesRequest_ReportTemplate)(nil),
	}
	file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*EvaluateRulesPreviewRequest_Run)(nil),
		(*EvaluateRulesPreviewRequest_Rules)(nil),
		(*EvaluateRulesPreviewRequest_RuleVersions)(nil),
		(*EvaluateRulesPreviewRequest_ReportTemplate)(nil),
		(*EvaluateRulesPreviewRequest_RuleConfigs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sift_rule_evaluation_v1_rule_evaluation_proto_goTypes,
		DependencyIndexes: file_sift_rule_evaluation_v1_rule_evaluation_proto_depIdxs,
		MessageInfos:      file_sift_rule_evaluation_v1_rule_evaluation_proto_msgTypes,
	}.Build()
	File_sift_rule_evaluation_v1_rule_evaluation_proto = out.File
	file_sift_rule_evaluation_v1_rule_evaluation_proto_rawDesc = nil
	file_sift_rule_evaluation_v1_rule_evaluation_proto_goTypes = nil
	file_sift_rule_evaluation_v1_rule_evaluation_proto_depIdxs = nil
}
