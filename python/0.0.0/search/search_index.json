{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/sift_client/","title":"sift_client","text":""},{"location":"reference/sift_client/#sift_client","title":"sift_client","text":"MODULE DESCRIPTION <code>client</code> <code>errors</code> <code>resources</code> <code>tests</code> <code>transport</code> <code>types</code> <code>util</code> <p>Utility modules for the sift_client package.</p>"},{"location":"reference/sift_client/client/","title":"sift_client.client","text":""},{"location":"reference/sift_client/client/#sift_client.client","title":"sift_client.client","text":"CLASS DESCRIPTION <code>SiftClient</code> <p>SiftClient is a high-level client for interacting with Sift's APIs.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient","title":"SiftClient","text":"<pre><code>SiftClient(\n    api_key: str | None = None,\n    grpc_url: str | None = None,\n    rest_url: str | None = None,\n    connection_config: SiftConnectionConfig | None = None,\n)\n</code></pre> <p>               Bases: <code>WithGrpcClient</code>, <code>WithRestClient</code></p> <p>SiftClient is a high-level client for interacting with Sift's APIs.</p> <p>It provides both synchronous and asynchronous interfaces, strong type checking, and a Pythonic API design.</p> <p>Initialize the SiftClient with specific connection parameters or a connection_config.</p> PARAMETER DESCRIPTION <code>api_key</code> <p>The Sift API key for authentication.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>grpc_url</code> <p>The Sift gRPC API URL.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>rest_url</code> <p>The Sift REST API URL.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>connection_config</code> <p>A SiftConnectionConfig object to configure the connection behavior of the SiftClient.</p> <p> TYPE: <code>SiftConnectionConfig | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>assets</code> <p>Instance of the Assets API for making synchronous requests.</p> <p> TYPE: <code>AssetsAPI</code> </p> <code>async_</code> <p>Accessor for the asynchronous APIs. All asynchronous APIs are available as attributes on this accessor.</p> <p> TYPE: <code>AsyncAPIs</code> </p> <code>calculated_channels</code> <p>Instance of the Calculated Channels API for making synchronous requests.</p> <p> TYPE: <code>CalculatedChannelsAPI</code> </p> <code>grpc_client</code> <p>The gRPC client used by the SiftClient for making gRPC API calls.</p> <p> TYPE: <code>GrpcClient</code> </p> <code>ping</code> <p>Instance of the Ping API for making synchronous requests.</p> <p> TYPE: <code>PingAPI</code> </p> <code>rest_client</code> <p>The REST client used by the SiftClient for making REST API calls.</p> <p> TYPE: <code>RestClient</code> </p> <code>runs</code> <p>Instance of the Runs API for making synchronous requests.</p> <p> TYPE: <code>RunsAPI</code> </p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.assets","title":"assets  <code>instance-attribute</code>","text":"<pre><code>assets: AssetsAPI = AssetsAPI(self)\n</code></pre> <p>Instance of the Assets API for making synchronous requests.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.async_","title":"async_  <code>instance-attribute</code>","text":"<pre><code>async_: AsyncAPIs = AsyncAPIs(\n    ping=PingAPIAsync(self),\n    assets=AssetsAPIAsync(self),\n    calculated_channels=CalculatedChannelsAPIAsync(self),\n    runs=RunsAPIAsync(self),\n)\n</code></pre> <p>Accessor for the asynchronous APIs. All asynchronous APIs are available as attributes on this accessor.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.calculated_channels","title":"calculated_channels  <code>instance-attribute</code>","text":"<pre><code>calculated_channels: CalculatedChannelsAPI = (\n    CalculatedChannelsAPI(self)\n)\n</code></pre> <p>Instance of the Calculated Channels API for making synchronous requests.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.grpc_client","title":"grpc_client  <code>property</code>","text":"<pre><code>grpc_client: GrpcClient\n</code></pre> <p>The gRPC client used by the SiftClient for making gRPC API calls.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.ping","title":"ping  <code>instance-attribute</code>","text":"<pre><code>ping: PingAPI = PingAPI(self)\n</code></pre> <p>Instance of the Ping API for making synchronous requests.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.rest_client","title":"rest_client  <code>property</code>","text":"<pre><code>rest_client: RestClient\n</code></pre> <p>The REST client used by the SiftClient for making REST API calls.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.runs","title":"runs  <code>instance-attribute</code>","text":"<pre><code>runs: RunsAPI = RunsAPI(self)\n</code></pre> <p>Instance of the Runs API for making synchronous requests.</p>"},{"location":"reference/sift_client/errors/","title":"sift_client.errors","text":""},{"location":"reference/sift_client/errors/#sift_client.errors","title":"sift_client.errors","text":"CLASS DESCRIPTION <code>SiftExperimentalWarning</code> <p>Warning for experimental features.</p> <code>SiftWarning</code> <p>Base warning for Sift generated warnings.</p>"},{"location":"reference/sift_client/errors/#sift_client.errors.SiftExperimentalWarning","title":"SiftExperimentalWarning","text":"<p>               Bases: <code>SiftWarning</code></p> <p>Warning for experimental features.</p>"},{"location":"reference/sift_client/errors/#sift_client.errors.SiftWarning","title":"SiftWarning","text":"<p>               Bases: <code>UserWarning</code></p> <p>Base warning for Sift generated warnings.</p>"},{"location":"reference/sift_client/resources/","title":"sift_client.resources","text":""},{"location":"reference/sift_client/resources/#sift_client.resources","title":"sift_client.resources","text":"MODULE DESCRIPTION <code>assets</code> <code>calculated_channels</code> <code>ping</code> <code>runs</code> <code>sync_stubs</code> CLASS DESCRIPTION <code>AssetsAPI</code> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <code>AssetsAPIAsync</code> <p>High-level API for interacting with assets.</p> <code>CalculatedChannelsAPI</code> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <code>CalculatedChannelsAPIAsync</code> <p>High-level API for interacting with calculated channels.</p> <code>PingAPI</code> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <code>PingAPIAsync</code> <p>High-level API for performing health checks.</p> <code>RunsAPI</code> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p> <code>RunsAPIAsync</code> <p>High-level API for interacting with runs.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"AssetsAPIAsync\",\n    \"CalculatedChannelsAPIAsync\",\n    \"PingAPIAsync\",\n    \"RunsAPIAsync\",\n    \"AssetsAPI\",\n    \"CalculatedChannelsAPI\",\n    \"PingAPI\",\n    \"RunsAPI\",\n]\n</code></pre>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI","title":"AssetsAPI","text":"<pre><code>AssetsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.archive","title":"archive","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.get","title":"get","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.list_","title":"list_","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.update","title":"update","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync","title":"AssetsAPIAsync","text":"<pre><code>AssetsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.list_","title":"list_  <code>async</code>","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI","title":"CalculatedChannelsAPI","text":"<pre><code>CalculatedChannelsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.archive","title":"archive","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.create","title":"create","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\"\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.get","title":"get","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.list_versions","title":"list_versions","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.update","title":"update","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync","title":"CalculatedChannelsAPIAsync","text":"<pre><code>CalculatedChannelsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\"\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.list_versions","title":"list_versions  <code>async</code>","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPI","title":"PingAPI","text":"<pre><code>PingAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPI.ping","title":"ping","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPIAsync","title":"PingAPIAsync","text":"<pre><code>PingAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPIAsync.ping","title":"ping  <code>async</code>","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI","title":"RunsAPI","text":"<pre><code>RunsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.create","title":"create","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.create_automatic_association_for_assets","title":"create_automatic_association_for_assets","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.delete","title":"delete","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.get","title":"get","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.stop","title":"stop","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.stop_run","title":"stop_run","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.update","title":"update","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync","title":"RunsAPIAsync","text":"<pre><code>RunsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.create_automatic_association_for_assets","title":"create_automatic_association_for_assets  <code>async</code>","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.stop","title":"stop  <code>async</code>","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.stop_run","title":"stop_run  <code>async</code>","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/resources/assets/","title":"sift_client.resources.assets","text":""},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets","title":"sift_client.resources.assets","text":"CLASS DESCRIPTION <code>AssetsAPIAsync</code> <p>High-level API for interacting with assets.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync","title":"AssetsAPIAsync","text":"<pre><code>AssetsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.list_","title":"list_  <code>async</code>","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/calculated_channels/","title":"sift_client.resources.calculated_channels","text":""},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels","title":"sift_client.resources.calculated_channels","text":"CLASS DESCRIPTION <code>CalculatedChannelsAPIAsync</code> <p>High-level API for interacting with calculated channels.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync","title":"CalculatedChannelsAPIAsync","text":"<pre><code>CalculatedChannelsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\"\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.list_versions","title":"list_versions  <code>async</code>","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/ping/","title":"sift_client.resources.ping","text":""},{"location":"reference/sift_client/resources/ping/#sift_client.resources.ping","title":"sift_client.resources.ping","text":"CLASS DESCRIPTION <code>PingAPIAsync</code> <p>High-level API for performing health checks.</p>"},{"location":"reference/sift_client/resources/ping/#sift_client.resources.ping.PingAPIAsync","title":"PingAPIAsync","text":"<pre><code>PingAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/ping/#sift_client.resources.ping.PingAPIAsync.ping","title":"ping  <code>async</code>","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/runs/","title":"sift_client.resources.runs","text":""},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs","title":"sift_client.resources.runs","text":"CLASS DESCRIPTION <code>RunsAPIAsync</code> <p>High-level API for interacting with runs.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync","title":"RunsAPIAsync","text":"<pre><code>RunsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.create_automatic_association_for_assets","title":"create_automatic_association_for_assets  <code>async</code>","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.stop","title":"stop  <code>async</code>","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.stop_run","title":"stop_run  <code>async</code>","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/","title":"sift_client.resources.sync_stubs","text":""},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs","title":"sift_client.resources.sync_stubs","text":"CLASS DESCRIPTION <code>AssetsAPI</code> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <code>CalculatedChannelsAPI</code> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <code>PingAPI</code> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <code>RunsAPI</code> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI","title":"AssetsAPI","text":"<pre><code>AssetsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.archive","title":"archive","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.get","title":"get","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.list_","title":"list_","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.update","title":"update","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI","title":"CalculatedChannelsAPI","text":"<pre><code>CalculatedChannelsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.archive","title":"archive","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.create","title":"create","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\"\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.get","title":"get","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.list_versions","title":"list_versions","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.update","title":"update","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.PingAPI","title":"PingAPI","text":"<pre><code>PingAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.PingAPI.ping","title":"ping","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI","title":"RunsAPI","text":"<pre><code>RunsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.create","title":"create","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.create_automatic_association_for_assets","title":"create_automatic_association_for_assets","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.delete","title":"delete","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.get","title":"get","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.stop","title":"stop","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.stop_run","title":"stop_run","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.update","title":"update","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/tests/","title":"sift_client.tests","text":""},{"location":"reference/sift_client/tests/#sift_client.tests","title":"sift_client.tests","text":"MODULE DESCRIPTION <code>util</code>"},{"location":"reference/sift_client/tests/util/","title":"sift_client.tests.util","text":""},{"location":"reference/sift_client/tests/util/#sift_client.tests.util","title":"sift_client.tests.util","text":"MODULE DESCRIPTION <code>test_cel_utils</code>"},{"location":"reference/sift_client/tests/util/test_cel_utils/","title":"sift_client.tests.util.test_cel_utils","text":""},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils","title":"sift_client.tests.util.test_cel_utils","text":"CLASS DESCRIPTION <code>TestCelUtils</code>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils","title":"TestCelUtils","text":"METHOD DESCRIPTION <code>test_and_empty</code> <p>Test and_ function with no clauses.</p> <code>test_and_multiple</code> <p>Test and_ function with multiple clauses.</p> <code>test_and_single</code> <p>Test and_ function with a single clause.</p> <code>test_contains</code> <p>Test contains function.</p> <code>test_equals_all_empty</code> <p>Test equals_all function with empty dict.</p> <code>test_equals_all_multiple</code> <p>Test equals_all function with multiple key-value pairs.</p> <code>test_equals_all_single</code> <p>Test equals_all function with single key-value pair.</p> <code>test_equals_any_empty</code> <p>Test equals_any function with empty dict.</p> <code>test_equals_any_multiple</code> <p>Test equals_any function with multiple key-value pairs.</p> <code>test_equals_any_single</code> <p>Test equals_any function with single key-value pair.</p> <code>test_equals_boolean</code> <p>Test equals function with boolean value.</p> <code>test_equals_double_none</code> <p>Test equals_double function with None value.</p> <code>test_equals_double_number</code> <p>Test equals_double function with numeric value.</p> <code>test_equals_none</code> <p>Test equals function with None value.</p> <code>test_equals_null</code> <p>Test equals_null function.</p> <code>test_equals_number</code> <p>Test equals function with numeric value.</p> <code>test_equals_string</code> <p>Test equals function with string value.</p> <code>test_greater_than_datetime</code> <p>Test greater_than function with datetime value.</p> <code>test_greater_than_number</code> <p>Test greater_than function with numeric value.</p> <code>test_in_empty_list</code> <p>Test in_ function with an empty list.</p> <code>test_in_multiple_values</code> <p>Test in_ function with multiple values.</p> <code>test_in_single_value</code> <p>Test in_ function with a single value.</p> <code>test_less_than_datetime</code> <p>Test less_than function with datetime value.</p> <code>test_less_than_number</code> <p>Test less_than function with numeric value.</p> <code>test_match_pattern</code> <p>Test match function with regex pattern.</p> <code>test_match_string</code> <p>Test match function with string pattern.</p> <code>test_match_with_backslashes</code> <p>Test match function with pattern containing backslashes.</p> <code>test_not</code> <p>Test not_ function.</p> <code>test_or_empty</code> <p>Test or_ function with no clauses.</p> <code>test_or_multiple</code> <p>Test or_ function with multiple clauses.</p> <code>test_or_single</code> <p>Test or_ function with a single clause.</p> <code>test_parens</code> <p>Test parens function.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_and_empty","title":"test_and_empty","text":"<pre><code>test_and_empty()\n</code></pre> <p>Test and_ function with no clauses.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_and_multiple","title":"test_and_multiple","text":"<pre><code>test_and_multiple()\n</code></pre> <p>Test and_ function with multiple clauses.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_and_single","title":"test_and_single","text":"<pre><code>test_and_single()\n</code></pre> <p>Test and_ function with a single clause.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_contains","title":"test_contains","text":"<pre><code>test_contains()\n</code></pre> <p>Test contains function.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_all_empty","title":"test_equals_all_empty","text":"<pre><code>test_equals_all_empty()\n</code></pre> <p>Test equals_all function with empty dict.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_all_multiple","title":"test_equals_all_multiple","text":"<pre><code>test_equals_all_multiple()\n</code></pre> <p>Test equals_all function with multiple key-value pairs.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_all_single","title":"test_equals_all_single","text":"<pre><code>test_equals_all_single()\n</code></pre> <p>Test equals_all function with single key-value pair.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_any_empty","title":"test_equals_any_empty","text":"<pre><code>test_equals_any_empty()\n</code></pre> <p>Test equals_any function with empty dict.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_any_multiple","title":"test_equals_any_multiple","text":"<pre><code>test_equals_any_multiple()\n</code></pre> <p>Test equals_any function with multiple key-value pairs.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_any_single","title":"test_equals_any_single","text":"<pre><code>test_equals_any_single()\n</code></pre> <p>Test equals_any function with single key-value pair.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_boolean","title":"test_equals_boolean","text":"<pre><code>test_equals_boolean()\n</code></pre> <p>Test equals function with boolean value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_double_none","title":"test_equals_double_none","text":"<pre><code>test_equals_double_none()\n</code></pre> <p>Test equals_double function with None value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_double_number","title":"test_equals_double_number","text":"<pre><code>test_equals_double_number()\n</code></pre> <p>Test equals_double function with numeric value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_none","title":"test_equals_none","text":"<pre><code>test_equals_none()\n</code></pre> <p>Test equals function with None value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_null","title":"test_equals_null","text":"<pre><code>test_equals_null()\n</code></pre> <p>Test equals_null function.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_number","title":"test_equals_number","text":"<pre><code>test_equals_number()\n</code></pre> <p>Test equals function with numeric value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_equals_string","title":"test_equals_string","text":"<pre><code>test_equals_string()\n</code></pre> <p>Test equals function with string value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_greater_than_datetime","title":"test_greater_than_datetime","text":"<pre><code>test_greater_than_datetime()\n</code></pre> <p>Test greater_than function with datetime value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_greater_than_number","title":"test_greater_than_number","text":"<pre><code>test_greater_than_number()\n</code></pre> <p>Test greater_than function with numeric value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_in_empty_list","title":"test_in_empty_list","text":"<pre><code>test_in_empty_list()\n</code></pre> <p>Test in_ function with an empty list.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_in_multiple_values","title":"test_in_multiple_values","text":"<pre><code>test_in_multiple_values()\n</code></pre> <p>Test in_ function with multiple values.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_in_single_value","title":"test_in_single_value","text":"<pre><code>test_in_single_value()\n</code></pre> <p>Test in_ function with a single value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_less_than_datetime","title":"test_less_than_datetime","text":"<pre><code>test_less_than_datetime()\n</code></pre> <p>Test less_than function with datetime value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_less_than_number","title":"test_less_than_number","text":"<pre><code>test_less_than_number()\n</code></pre> <p>Test less_than function with numeric value.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_match_pattern","title":"test_match_pattern","text":"<pre><code>test_match_pattern()\n</code></pre> <p>Test match function with regex pattern.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_match_string","title":"test_match_string","text":"<pre><code>test_match_string()\n</code></pre> <p>Test match function with string pattern.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_match_with_backslashes","title":"test_match_with_backslashes","text":"<pre><code>test_match_with_backslashes()\n</code></pre> <p>Test match function with pattern containing backslashes.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_not","title":"test_not","text":"<pre><code>test_not()\n</code></pre> <p>Test not_ function.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_or_empty","title":"test_or_empty","text":"<pre><code>test_or_empty()\n</code></pre> <p>Test or_ function with no clauses.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_or_multiple","title":"test_or_multiple","text":"<pre><code>test_or_multiple()\n</code></pre> <p>Test or_ function with multiple clauses.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_or_single","title":"test_or_single","text":"<pre><code>test_or_single()\n</code></pre> <p>Test or_ function with a single clause.</p>"},{"location":"reference/sift_client/tests/util/test_cel_utils/#sift_client.tests.util.test_cel_utils.TestCelUtils.test_parens","title":"test_parens","text":"<pre><code>test_parens()\n</code></pre> <p>Test parens function.</p>"},{"location":"reference/sift_client/transport/","title":"sift_client.transport","text":""},{"location":"reference/sift_client/transport/#sift_client.transport","title":"sift_client.transport","text":"MODULE DESCRIPTION <code>base_connection</code> <code>grpc_transport</code> <p>Transport layer for gRPC communication.</p> <code>rest_transport</code> <p>Transport layer for REST communication.</p> CLASS DESCRIPTION <code>GrpcClient</code> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <code>GrpcConfig</code> <p>Configuration for gRPC API clients.</p> <code>RestClient</code> <p>A client wrapper for REST APIs.</p> <code>RestConfig</code> <p>Configuration for REST API clients.</p> <code>SiftConnectionConfig</code> <p>Configuration for Grpc and Rest cnnections.</p> <code>WithGrpcClient</code> <code>WithRestClient</code>"},{"location":"reference/sift_client/transport/#sift_client.transport.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"SiftConnectionConfig\",\n    \"WithGrpcClient\",\n    \"WithRestClient\",\n    \"GrpcClient\",\n    \"GrpcConfig\",\n    \"RestClient\",\n    \"RestConfig\",\n]\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient","title":"GrpcClient","text":"<pre><code>GrpcClient(config: GrpcConfig)\n</code></pre> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <p>This class just stores the channel and the stubs, without any additional functionality.</p> <p>Initialize the gRPC client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The gRPC client configuration.</p> <p> TYPE: <code>GrpcConfig</code> </p> METHOD DESCRIPTION <code>__aenter__</code> <code>__aexit__</code> <code>__enter__</code> <code>__exit__</code> <code>close</code> <p>Close sync and async channels and stop the default loop.</p> <code>close_sync</code> <p>Close the sync channel and all async channels.</p> <code>get_stub</code> <p>Get an async stub bound to the current event loop.</p> ATTRIBUTE DESCRIPTION <code>default_loop</code> <p> TYPE: <code>AbstractEventLoop</code> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.default_loop","title":"default_loop  <code>property</code>","text":"<pre><code>default_loop: AbstractEventLoop\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__aexit__","title":"__aexit__  <code>async</code>","text":"<pre><code>__aexit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close sync and async channels and stop the default loop.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.close_sync","title":"close_sync","text":"<pre><code>close_sync()\n</code></pre> <p>Close the sync channel and all async channels.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.get_stub","title":"get_stub","text":"<pre><code>get_stub(stub_class: Type[Any]) -&gt; Any\n</code></pre> <p>Get an async stub bound to the current event loop. Creates a channel and stub for this loop if needed.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig","title":"GrpcConfig","text":"<pre><code>GrpcConfig(\n    url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    metadata: Dict[str, str] | None = None,\n)\n</code></pre> <p>Configuration for gRPC API clients.</p> <p>Initialize the gRPC configuration.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URI of the gRPC server.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_async</code> <p>Whether to use async gRPC client.</p> <p> </p> <code>metadata</code> <p>Additional metadata to include in all requests.</p> <p> TYPE: <code>Dict[str, str] | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>metadata</code> <p> </p> <code>uri</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata = metadata or {}\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri = url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient","title":"RestClient","text":"<pre><code>RestClient(config: RestConfig)\n</code></pre> <p>A client wrapper for REST APIs.</p> <p>This class provides a wrapper around sift_py/rest.py for making REST API calls. It handles authentication, retries, and error mapping.</p> <p>Initialize the REST client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The REST client configuration.</p> <p> TYPE: <code>RestConfig</code> </p> METHOD DESCRIPTION <code>close</code> <code>delete</code> <code>get</code> <code>patch</code> <code>post</code> <code>put</code> ATTRIBUTE DESCRIPTION <code>base_url</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url: str\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.delete","title":"delete","text":"<pre><code>delete(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.get","title":"get","text":"<pre><code>get(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.patch","title":"patch","text":"<pre><code>patch(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.post","title":"post","text":"<pre><code>post(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.put","title":"put","text":"<pre><code>put(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig","title":"RestConfig","text":"<pre><code>RestConfig(\n    base_url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    retry: Retry = _DEFAULT_REST_RETRY,\n)\n</code></pre> <p>Configuration for REST API clients.</p> <p>Initialize the REST configuration.</p> PARAMETER DESCRIPTION <code>base_url</code> <p>The base URL of the API.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use HTTPS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>base_url</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>retry</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = base_url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.retry","title":"retry  <code>instance-attribute</code>","text":"<pre><code>retry = retry\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig","title":"SiftConnectionConfig","text":"<pre><code>SiftConnectionConfig(\n    grpc_url: str,\n    rest_url: str,\n    api_key: str,\n    use_ssl: bool = False,\n    cert_via_openssl: bool = False,\n)\n</code></pre> <p>Configuration for Grpc and Rest cnnections.</p> METHOD DESCRIPTION <code>get_grpc_config</code> <code>get_rest_config</code> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>grpc_url</code> <p> </p> <code>rest_url</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.grpc_url","title":"grpc_url  <code>instance-attribute</code>","text":"<pre><code>grpc_url = grpc_url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.rest_url","title":"rest_url  <code>instance-attribute</code>","text":"<pre><code>rest_url = rest_url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.get_grpc_config","title":"get_grpc_config","text":"<pre><code>get_grpc_config()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.get_rest_config","title":"get_rest_config","text":"<pre><code>get_rest_config()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.WithGrpcClient","title":"WithGrpcClient","text":"<pre><code>WithGrpcClient(grpc_client: GrpcClient)\n</code></pre> <p>               Bases: <code>ABC</code></p> METHOD DESCRIPTION <code>get_asyncio_loop</code> <p>Gets the default asyncio loop used by the gRPC client.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.WithGrpcClient.get_asyncio_loop","title":"get_asyncio_loop","text":"<pre><code>get_asyncio_loop() -&gt; AbstractEventLoop\n</code></pre> <p>Gets the default asyncio loop used by the gRPC client.</p> RETURNS DESCRIPTION <code>AbstractEventLoop</code> <p>The default asyncio loop.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.WithRestClient","title":"WithRestClient","text":"<pre><code>WithRestClient(rest_client: RestClient)\n</code></pre> <p>               Bases: <code>ABC</code></p>"},{"location":"reference/sift_client/transport/base_connection/","title":"sift_client.transport.base_connection","text":""},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection","title":"sift_client.transport.base_connection","text":"CLASS DESCRIPTION <code>SiftConnectionConfig</code> <p>Configuration for Grpc and Rest cnnections.</p> <code>WithGrpcClient</code> <code>WithRestClient</code>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig","title":"SiftConnectionConfig","text":"<pre><code>SiftConnectionConfig(\n    grpc_url: str,\n    rest_url: str,\n    api_key: str,\n    use_ssl: bool = False,\n    cert_via_openssl: bool = False,\n)\n</code></pre> <p>Configuration for Grpc and Rest cnnections.</p> METHOD DESCRIPTION <code>get_grpc_config</code> <code>get_rest_config</code> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>grpc_url</code> <p> </p> <code>rest_url</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.grpc_url","title":"grpc_url  <code>instance-attribute</code>","text":"<pre><code>grpc_url = grpc_url\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.rest_url","title":"rest_url  <code>instance-attribute</code>","text":"<pre><code>rest_url = rest_url\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.get_grpc_config","title":"get_grpc_config","text":"<pre><code>get_grpc_config()\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.get_rest_config","title":"get_rest_config","text":"<pre><code>get_rest_config()\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.WithGrpcClient","title":"WithGrpcClient","text":"<pre><code>WithGrpcClient(grpc_client: GrpcClient)\n</code></pre> <p>               Bases: <code>ABC</code></p> METHOD DESCRIPTION <code>get_asyncio_loop</code> <p>Gets the default asyncio loop used by the gRPC client.</p>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.WithGrpcClient.get_asyncio_loop","title":"get_asyncio_loop","text":"<pre><code>get_asyncio_loop() -&gt; AbstractEventLoop\n</code></pre> <p>Gets the default asyncio loop used by the gRPC client.</p> RETURNS DESCRIPTION <code>AbstractEventLoop</code> <p>The default asyncio loop.</p>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.WithRestClient","title":"WithRestClient","text":"<pre><code>WithRestClient(rest_client: RestClient)\n</code></pre> <p>               Bases: <code>ABC</code></p>"},{"location":"reference/sift_client/transport/grpc_transport/","title":"sift_client.transport.grpc_transport","text":""},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport","title":"sift_client.transport.grpc_transport","text":"<p>Transport layer for gRPC communication.</p> <p>This module provides a simple wrapper around sift_py/grpc/transport.py for making gRPC API calls. It just stores the channel and the stubs, without any additional functionality.</p> CLASS DESCRIPTION <code>GrpcClient</code> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <code>GrpcConfig</code> <p>Configuration for gRPC API clients.</p> ATTRIBUTE DESCRIPTION <code>logger</code> <p> </p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient","title":"GrpcClient","text":"<pre><code>GrpcClient(config: GrpcConfig)\n</code></pre> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <p>This class just stores the channel and the stubs, without any additional functionality.</p> <p>Initialize the gRPC client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The gRPC client configuration.</p> <p> TYPE: <code>GrpcConfig</code> </p> METHOD DESCRIPTION <code>__aenter__</code> <code>__aexit__</code> <code>__enter__</code> <code>__exit__</code> <code>close</code> <p>Close sync and async channels and stop the default loop.</p> <code>close_sync</code> <p>Close the sync channel and all async channels.</p> <code>get_stub</code> <p>Get an async stub bound to the current event loop.</p> ATTRIBUTE DESCRIPTION <code>default_loop</code> <p> TYPE: <code>AbstractEventLoop</code> </p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.default_loop","title":"default_loop  <code>property</code>","text":"<pre><code>default_loop: AbstractEventLoop\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__()\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__aexit__","title":"__aexit__  <code>async</code>","text":"<pre><code>__aexit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close sync and async channels and stop the default loop.</p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.close_sync","title":"close_sync","text":"<pre><code>close_sync()\n</code></pre> <p>Close the sync channel and all async channels.</p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.get_stub","title":"get_stub","text":"<pre><code>get_stub(stub_class: Type[Any]) -&gt; Any\n</code></pre> <p>Get an async stub bound to the current event loop. Creates a channel and stub for this loop if needed.</p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig","title":"GrpcConfig","text":"<pre><code>GrpcConfig(\n    url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    metadata: Dict[str, str] | None = None,\n)\n</code></pre> <p>Configuration for gRPC API clients.</p> <p>Initialize the gRPC configuration.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URI of the gRPC server.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_async</code> <p>Whether to use async gRPC client.</p> <p> </p> <code>metadata</code> <p>Additional metadata to include in all requests.</p> <p> TYPE: <code>Dict[str, str] | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>metadata</code> <p> </p> <code>uri</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata = metadata or {}\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri = url\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/","title":"sift_client.transport.rest_transport","text":""},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport","title":"sift_client.transport.rest_transport","text":"<p>Transport layer for REST communication.</p> <p>This module provides a simple wrapper around sift_py/rest.py for making REST API calls.</p> CLASS DESCRIPTION <code>RestClient</code> <p>A client wrapper for REST APIs.</p> <code>RestConfig</code> <p>Configuration for REST API clients.</p> ATTRIBUTE DESCRIPTION <code>logger</code> <p> </p>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient","title":"RestClient","text":"<pre><code>RestClient(config: RestConfig)\n</code></pre> <p>A client wrapper for REST APIs.</p> <p>This class provides a wrapper around sift_py/rest.py for making REST API calls. It handles authentication, retries, and error mapping.</p> <p>Initialize the REST client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The REST client configuration.</p> <p> TYPE: <code>RestConfig</code> </p> METHOD DESCRIPTION <code>close</code> <code>delete</code> <code>get</code> <code>patch</code> <code>post</code> <code>put</code> ATTRIBUTE DESCRIPTION <code>base_url</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url: str\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.delete","title":"delete","text":"<pre><code>delete(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.get","title":"get","text":"<pre><code>get(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.patch","title":"patch","text":"<pre><code>patch(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.post","title":"post","text":"<pre><code>post(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.put","title":"put","text":"<pre><code>put(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig","title":"RestConfig","text":"<pre><code>RestConfig(\n    base_url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    retry: Retry = _DEFAULT_REST_RETRY,\n)\n</code></pre> <p>Configuration for REST API clients.</p> <p>Initialize the REST configuration.</p> PARAMETER DESCRIPTION <code>base_url</code> <p>The base URL of the API.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use HTTPS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>base_url</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>retry</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = base_url\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.retry","title":"retry  <code>instance-attribute</code>","text":"<pre><code>retry = retry\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/types/","title":"sift_client.types","text":""},{"location":"reference/sift_client/types/#sift_client.types","title":"sift_client.types","text":"MODULE DESCRIPTION <code>asset</code> <code>calculated_channel</code> <code>channel</code> <code>run</code> CLASS DESCRIPTION <code>Asset</code> <p>Model of the Sift Asset.</p> <code>AssetUpdate</code> <p>Model of the Asset Fields that can be updated.</p> <code>CalculatedChannel</code> <p>Model of the Sift Calculated Channel.</p> <code>CalculatedChannelUpdate</code> <p>Model of the Calculated Channel Fields that can be updated.</p> <code>ChannelReference</code> <p>Channel reference for calculated channel or rule.</p>"},{"location":"reference/sift_client/types/#sift_client.types.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"Asset\",\n    \"AssetUpdate\",\n    \"CalculatedChannel\",\n    \"CalculatedChannelUpdate\",\n    \"ChannelReference\",\n]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset","title":"Asset","text":"<p>               Bases: <code>BaseType[Asset, 'Asset']</code></p> <p>Model of the Sift Asset.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the asset.</p> <code>runs</code> <code>update</code> <p>Update the Asset.</p> ATTRIBUTE DESCRIPTION <code>annotations</code> <p> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the asset is archived.</p> <p> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>rules</code> <p> </p> <code>tags</code> <p> TYPE: <code>list[str]</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.annotations","title":"annotations  <code>property</code>","text":"<pre><code>annotations\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the asset is archived.</p>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.rules","title":"rules  <code>property</code>","text":"<pre><code>rules\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: list[str]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.archive","title":"archive","text":"<pre><code>archive(*, archive_runs: bool = False) -&gt; Asset\n</code></pre> <p>Archive the asset.</p> PARAMETER DESCRIPTION <code>archive_runs</code> <p>If True, archive all Runs associated with the Asset.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.runs","title":"runs","text":"<pre><code>runs(limit: int | None = None)\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.update","title":"update","text":"<pre><code>update(update: AssetUpdate | dict) -&gt; Asset\n</code></pre> <p>Update the Asset.</p> PARAMETER DESCRIPTION <code>update</code> <p>Either an AssetUpdate instance or a dictionary of key-value pairs to update.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate","title":"AssetUpdate","text":"<pre><code>AssetUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[Asset]</code></p> <p>Model of the Asset Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | str | None</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool] | None</code> </p> <code>tags</code> <p> TYPE: <code>list[str] | None</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel","title":"CalculatedChannel","text":"<p>               Bases: <code>BaseType[CalculatedChannel, 'CalculatedChannel']</code></p> <p>Model of the Sift Calculated Channel.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the calculated channel.</p> <code>update</code> <p>Update the Calculated Channel.</p> ATTRIBUTE DESCRIPTION <code>all_assets</code> <p> TYPE: <code>bool | None</code> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>asset_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>change_message</code> <p> TYPE: <code>str | None</code> </p> <code>channel_references</code> <p> TYPE: <code>list[ChannelReference]</code> </p> <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>created_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the calculated channel is archived.</p> <p> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p> <code>user_notes</code> <p> TYPE: <code>str | None</code> </p> <code>version</code> <p> TYPE: <code>int | None</code> </p> <code>version_id</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.all_assets","title":"all_assets  <code>instance-attribute</code>","text":"<pre><code>all_assets: bool | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.asset_ids","title":"asset_ids  <code>instance-attribute</code>","text":"<pre><code>asset_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.change_message","title":"change_message  <code>instance-attribute</code>","text":"<pre><code>change_message: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: list[ChannelReference]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.client_key","title":"client_key  <code>instance-attribute</code>","text":"<pre><code>client_key: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the calculated channel is archived.</p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.tag_ids","title":"tag_ids  <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.units","title":"units  <code>instance-attribute</code>","text":"<pre><code>units: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.user_notes","title":"user_notes  <code>instance-attribute</code>","text":"<pre><code>user_notes: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: int | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.version_id","title":"version_id  <code>instance-attribute</code>","text":"<pre><code>version_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.archive","title":"archive","text":"<pre><code>archive() -&gt; CalculatedChannel\n</code></pre> <p>Archive the calculated channel.</p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.update","title":"update","text":"<pre><code>update(\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update the Calculated Channel.</p> PARAMETER DESCRIPTION <code>update</code> <p>The update to apply to the calculated channel. See CalculatedChannelUpdate for more updatable fields.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>The user notes to apply to the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated calculated channel.</p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate","title":"CalculatedChannelUpdate","text":"<pre><code>CalculatedChannelUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[CalculatedChannel]</code></p> <p>Model of the Calculated Channel Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str | None</code> </p> <code>expression</code> <p> TYPE: <code>str | None</code> </p> <code>expression_channel_references</code> <p> TYPE: <code>list[ChannelReference] | None</code> </p> <code>name</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.expression","title":"expression  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.expression_channel_references","title":"expression_channel_references  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_channel_references: (\n    list[ChannelReference] | None\n) = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.tag_ids","title":"tag_ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.units","title":"units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>units: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.ChannelReference","title":"ChannelReference","text":"<p>               Bases: <code>BaseModel</code></p> <p>Channel reference for calculated channel or rule.</p> ATTRIBUTE DESCRIPTION <code>channel_identifier</code> <p> TYPE: <code>str</code> </p> <code>channel_reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.ChannelReference.channel_identifier","title":"channel_identifier  <code>instance-attribute</code>","text":"<pre><code>channel_identifier: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.ChannelReference.channel_reference","title":"channel_reference  <code>instance-attribute</code>","text":"<pre><code>channel_reference: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/","title":"sift_client.types.asset","text":""},{"location":"reference/sift_client/types/asset/#sift_client.types.asset","title":"sift_client.types.asset","text":"CLASS DESCRIPTION <code>Asset</code> <p>Model of the Sift Asset.</p> <code>AssetUpdate</code> <p>Model of the Asset Fields that can be updated.</p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset","title":"Asset","text":"<p>               Bases: <code>BaseType[Asset, 'Asset']</code></p> <p>Model of the Sift Asset.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the asset.</p> <code>runs</code> <code>update</code> <p>Update the Asset.</p> ATTRIBUTE DESCRIPTION <code>annotations</code> <p> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the asset is archived.</p> <p> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>rules</code> <p> </p> <code>tags</code> <p> TYPE: <code>list[str]</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.annotations","title":"annotations  <code>property</code>","text":"<pre><code>annotations\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the asset is archived.</p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool]\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.rules","title":"rules  <code>property</code>","text":"<pre><code>rules\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: list[str]\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.archive","title":"archive","text":"<pre><code>archive(*, archive_runs: bool = False) -&gt; Asset\n</code></pre> <p>Archive the asset.</p> PARAMETER DESCRIPTION <code>archive_runs</code> <p>If True, archive all Runs associated with the Asset.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.runs","title":"runs","text":"<pre><code>runs(limit: int | None = None)\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.update","title":"update","text":"<pre><code>update(update: AssetUpdate | dict) -&gt; Asset\n</code></pre> <p>Update the Asset.</p> PARAMETER DESCRIPTION <code>update</code> <p>Either an AssetUpdate instance or a dictionary of key-value pairs to update.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate","title":"AssetUpdate","text":"<pre><code>AssetUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[Asset]</code></p> <p>Model of the Asset Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | str | None</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool] | None</code> </p> <code>tags</code> <p> TYPE: <code>list[str] | None</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/","title":"sift_client.types.calculated_channel","text":""},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel","title":"sift_client.types.calculated_channel","text":"CLASS DESCRIPTION <code>CalculatedChannel</code> <p>Model of the Sift Calculated Channel.</p> <code>CalculatedChannelUpdate</code> <p>Model of the Calculated Channel Fields that can be updated.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel","title":"CalculatedChannel","text":"<p>               Bases: <code>BaseType[CalculatedChannel, 'CalculatedChannel']</code></p> <p>Model of the Sift Calculated Channel.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the calculated channel.</p> <code>update</code> <p>Update the Calculated Channel.</p> ATTRIBUTE DESCRIPTION <code>all_assets</code> <p> TYPE: <code>bool | None</code> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>asset_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>change_message</code> <p> TYPE: <code>str | None</code> </p> <code>channel_references</code> <p> TYPE: <code>list[ChannelReference]</code> </p> <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>created_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the calculated channel is archived.</p> <p> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p> <code>user_notes</code> <p> TYPE: <code>str | None</code> </p> <code>version</code> <p> TYPE: <code>int | None</code> </p> <code>version_id</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.all_assets","title":"all_assets  <code>instance-attribute</code>","text":"<pre><code>all_assets: bool | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.asset_ids","title":"asset_ids  <code>instance-attribute</code>","text":"<pre><code>asset_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.change_message","title":"change_message  <code>instance-attribute</code>","text":"<pre><code>change_message: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: list[ChannelReference]\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.client_key","title":"client_key  <code>instance-attribute</code>","text":"<pre><code>client_key: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the calculated channel is archived.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.tag_ids","title":"tag_ids  <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.units","title":"units  <code>instance-attribute</code>","text":"<pre><code>units: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.user_notes","title":"user_notes  <code>instance-attribute</code>","text":"<pre><code>user_notes: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: int | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.version_id","title":"version_id  <code>instance-attribute</code>","text":"<pre><code>version_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.archive","title":"archive","text":"<pre><code>archive() -&gt; CalculatedChannel\n</code></pre> <p>Archive the calculated channel.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.update","title":"update","text":"<pre><code>update(\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update the Calculated Channel.</p> PARAMETER DESCRIPTION <code>update</code> <p>The update to apply to the calculated channel. See CalculatedChannelUpdate for more updatable fields.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>The user notes to apply to the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated calculated channel.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate","title":"CalculatedChannelUpdate","text":"<pre><code>CalculatedChannelUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[CalculatedChannel]</code></p> <p>Model of the Calculated Channel Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str | None</code> </p> <code>expression</code> <p> TYPE: <code>str | None</code> </p> <code>expression_channel_references</code> <p> TYPE: <code>list[ChannelReference] | None</code> </p> <code>name</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.expression","title":"expression  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.expression_channel_references","title":"expression_channel_references  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_channel_references: (\n    list[ChannelReference] | None\n) = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.tag_ids","title":"tag_ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.units","title":"units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>units: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/channel/","title":"sift_client.types.channel","text":""},{"location":"reference/sift_client/types/channel/#sift_client.types.channel","title":"sift_client.types.channel","text":"CLASS DESCRIPTION <code>ChannelReference</code> <p>Channel reference for calculated channel or rule.</p>"},{"location":"reference/sift_client/types/channel/#sift_client.types.channel.ChannelReference","title":"ChannelReference","text":"<p>               Bases: <code>BaseModel</code></p> <p>Channel reference for calculated channel or rule.</p> ATTRIBUTE DESCRIPTION <code>channel_identifier</code> <p> TYPE: <code>str</code> </p> <code>channel_reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/types/channel/#sift_client.types.channel.ChannelReference.channel_identifier","title":"channel_identifier  <code>instance-attribute</code>","text":"<pre><code>channel_identifier: str\n</code></pre>"},{"location":"reference/sift_client/types/channel/#sift_client.types.channel.ChannelReference.channel_reference","title":"channel_reference  <code>instance-attribute</code>","text":"<pre><code>channel_reference: str\n</code></pre>"},{"location":"reference/sift_client/types/run/","title":"sift_client.types.run","text":""},{"location":"reference/sift_client/types/run/#sift_client.types.run","title":"sift_client.types.run","text":"CLASS DESCRIPTION <code>Run</code> <p>Run model representing a data collection run.</p> <code>RunUpdate</code> <p>Update model for Run.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run","title":"Run","text":"<p>               Bases: <code>BaseType[Run, 'Run']</code></p> <p>Run model representing a data collection run.</p> METHOD DESCRIPTION <code>assets</code> <p>Return all assets associated with this run.</p> <code>stop</code> <p>Stop the run.</p> <code>to_proto</code> <p>Convert to protobuf message.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>asset_ids</code> <p> TYPE: <code>List[str] | None</code> </p> <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>default_report_id</code> <p> TYPE: <code>str | None</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> <code>model_config</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>stop_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>tags</code> <p> TYPE: <code>List[str] | None</code> </p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.asset_ids","title":"asset_ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asset_ids: List[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.client_key","title":"client_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_key: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.default_report_id","title":"default_report_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_report_id: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool]\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.start_time","title":"start_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.stop_time","title":"stop_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: List[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.assets","title":"assets","text":"<pre><code>assets()\n</code></pre> <p>Return all assets associated with this run.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the run.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.to_proto","title":"to_proto","text":"<pre><code>to_proto() -&gt; Run\n</code></pre> <p>Convert to protobuf message.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate","title":"RunUpdate","text":"<pre><code>RunUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[Run]</code></p> <p>Update model for Run.</p> ATTRIBUTE DESCRIPTION <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>description</code> <p> TYPE: <code>str | None</code> </p> <code>is_pinned</code> <p> TYPE: <code>bool | None</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool] | None</code> </p> <code>model_config</code> <p> </p> <code>name</code> <p> TYPE: <code>str | None</code> </p> <code>start_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>stop_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>tags</code> <p> TYPE: <code>List[str] | None</code> </p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.client_key","title":"client_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_key: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.is_pinned","title":"is_pinned  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_pinned: bool | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.start_time","title":"start_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.stop_time","title":"stop_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: List[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/util/","title":"sift_client.util","text":""},{"location":"reference/sift_client/util/#sift_client.util","title":"sift_client.util","text":"<p>Utility modules for the sift_client package.</p> MODULE DESCRIPTION <code>cel_utils</code> <p>CEL (Common Expression Language) utilities for generating CEL expressions.</p> <code>metadata</code> <code>timestamp</code> <code>util</code>"},{"location":"reference/sift_client/util/cel_utils/","title":"sift_client.util.cel_utils","text":""},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils","title":"sift_client.util.cel_utils","text":"<p>CEL (Common Expression Language) utilities for generating CEL expressions.</p> <p>This module provides helper functions to generate CEL expressions for building filters commonly used in Sift.</p> FUNCTION DESCRIPTION <code>and_</code> <p>Generates a CEL expression that joins all clauses with an AND operator.</p> <code>contains</code> <p>Generates a CEL expression that checks whether a string field contains a given value.</p> <code>equals</code> <p>Generates a CEL expression that checks for equality.</p> <code>equals_all</code> <p>Generates a CEL expression that checks for equality of all key-value pairs.</p> <code>equals_any</code> <p>Generates a CEL expression that checks for equality of any key-value pairs.</p> <code>equals_double</code> <p>Generates a CEL expression that checks for equality with a double value.</p> <code>equals_null</code> <p>Generates a CEL expression that checks for equality with null.</p> <code>greater_than</code> <p>Generates a CEL expression that checks whether a numeric or datetime field is greater than a given value.</p> <code>in_</code> <p>Generates a CEL expression that checks for <code>field</code> membership in <code>vals</code>.</p> <code>less_than</code> <p>Generates a CEL expression that checks whether a numeric or datetime field is less than a given value.</p> <code>match</code> <p>Generates a CEL expression that checks for a match on the specified field.</p> <code>not_</code> <p>Generates a CEL expression that negates the given clause.</p> <code>or_</code> <p>Generates a CEL expression that joins all clauses with an OR operator.</p> <code>parens</code> <p>Wraps the given expression in parentheses.</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.and_","title":"and_","text":"<pre><code>and_(*clauses: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that joins all clauses with an AND operator.</p> PARAMETER DESCRIPTION <code>*clauses</code> <p>Variable number of CEL expression strings</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all clauses joined by AND</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.contains","title":"contains","text":"<pre><code>contains(field: str, value: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks whether a string field contains a given value.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The substring to check for</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals","title":"equals","text":"<pre><code>equals(key: str, value: Any) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality.</p> PARAMETER DESCRIPTION <code>key</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_all","title":"equals_all","text":"<pre><code>equals_all(values: dict[str, Any]) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality of all key-value pairs.</p> PARAMETER DESCRIPTION <code>values</code> <p>Dictionary of field names and values to check for equality</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all equality checks joined by AND</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_any","title":"equals_any","text":"<pre><code>equals_any(values: dict[str, Any]) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality of any key-value pairs.</p> PARAMETER DESCRIPTION <code>values</code> <p>Dictionary of field names and values to check for equality</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all equality checks joined by OR</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_double","title":"equals_double","text":"<pre><code>equals_double(key: str, value: Any) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality with a double value.</p> PARAMETER DESCRIPTION <code>key</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against as a double</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_null","title":"equals_null","text":"<pre><code>equals_null(key: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality with null.</p> PARAMETER DESCRIPTION <code>key</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.greater_than","title":"greater_than","text":"<pre><code>greater_than(\n    field: str, value: int | float | datetime\n) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks whether a numeric or datetime field is greater than a given value.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against</p> <p> TYPE: <code>int | float | datetime</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.in_","title":"in_","text":"<pre><code>in_(field: str, vals: list[str]) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for <code>field</code> membership in <code>vals</code>.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name to check</p> <p> TYPE: <code>str</code> </p> <code>vals</code> <p>List of string values to check membership against</p> <p> TYPE: <code>list[str]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string or empty string if vals is empty</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.less_than","title":"less_than","text":"<pre><code>less_than(field: str, value: int | float | datetime) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks whether a numeric or datetime field is less than a given value.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against</p> <p> TYPE: <code>int | float | datetime</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.match","title":"match","text":"<pre><code>match(field: str, query: str | Pattern) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for a match on the specified field.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>query</code> <p>The regex pattern to match against</p> <p> TYPE: <code>str | Pattern</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.not_","title":"not_","text":"<pre><code>not_(clause: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that negates the given clause.</p> PARAMETER DESCRIPTION <code>clause</code> <p>The CEL expression to negate</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A negated CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.or_","title":"or_","text":"<pre><code>or_(*clauses: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that joins all clauses with an OR operator.</p> PARAMETER DESCRIPTION <code>*clauses</code> <p>Variable number of CEL expression strings</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all clauses joined by OR</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.parens","title":"parens","text":"<pre><code>parens(expr: str) -&gt; str\n</code></pre> <p>Wraps the given expression in parentheses.</p> PARAMETER DESCRIPTION <code>expr</code> <p>The expression to wrap in parentheses</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with parentheses</p>"},{"location":"reference/sift_client/util/metadata/","title":"sift_client.util.metadata","text":""},{"location":"reference/sift_client/util/metadata/#sift_client.util.metadata","title":"sift_client.util.metadata","text":"FUNCTION DESCRIPTION <code>metadata_dict_to_proto</code> <p>Converts metadata dictionary into a list of MetadataValue objects.</p> <code>metadata_proto_to_dict</code> <p>Converts a list of MetadataValue objects into a dictionary.</p>"},{"location":"reference/sift_client/util/metadata/#sift_client.util.metadata.metadata_dict_to_proto","title":"metadata_dict_to_proto","text":"<pre><code>metadata_dict_to_proto(\n    _metadata: dict[str, str | float | bool],\n) -&gt; list[MetadataValue]\n</code></pre> <p>Converts metadata dictionary into a list of MetadataValue objects.</p> PARAMETER DESCRIPTION <code>_metadata</code> <p>Dictionary of metadata key-value pairs.</p> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> RETURNS DESCRIPTION <code>list[MetadataValue]</code> <p>List of MetadataValue objects.</p>"},{"location":"reference/sift_client/util/metadata/#sift_client.util.metadata.metadata_proto_to_dict","title":"metadata_proto_to_dict","text":"<pre><code>metadata_proto_to_dict(\n    metadata: list[MetadataValue],\n) -&gt; dict[str, str | float | bool]\n</code></pre> <p>Converts a list of MetadataValue objects into a dictionary.</p> PARAMETER DESCRIPTION <code>metadata</code> <p>List of MetadataValue objects.</p> <p> TYPE: <code>list[MetadataValue]</code> </p> RETURNS DESCRIPTION <code>dict[str, str | float | bool]</code> <p>Dictionary of metadata key-value pairs.</p>"},{"location":"reference/sift_client/util/timestamp/","title":"sift_client.util.timestamp","text":""},{"location":"reference/sift_client/util/timestamp/#sift_client.util.timestamp","title":"sift_client.util.timestamp","text":"FUNCTION DESCRIPTION <code>to_pb_timestamp</code>"},{"location":"reference/sift_client/util/timestamp/#sift_client.util.timestamp.to_pb_timestamp","title":"to_pb_timestamp","text":"<pre><code>to_pb_timestamp(timestamp: datetime) -&gt; Timestamp\n</code></pre>"},{"location":"reference/sift_client/util/util/","title":"sift_client.util.util","text":""},{"location":"reference/sift_client/util/util/#sift_client.util.util","title":"sift_client.util.util","text":"CLASS DESCRIPTION <code>AsyncAPIs</code> <p>Simple accessor for the asynchronous APIs, still uses the SiftClient instance.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs","title":"AsyncAPIs","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Simple accessor for the asynchronous APIs, still uses the SiftClient instance.</p> ATTRIBUTE DESCRIPTION <code>assets</code> <p>Instance of the Assets API for making asynchronous requests.</p> <p> TYPE: <code>AssetsAPIAsync</code> </p> <code>calculated_channels</code> <p>Instance of the Calculated Channels API for making asynchronous requests.</p> <p> TYPE: <code>CalculatedChannelsAPIAsync</code> </p> <code>ping</code> <p>Instance of the Ping API for making asynchronous requests.</p> <p> TYPE: <code>PingAPIAsync</code> </p> <code>runs</code> <p>Instance of the Runs API for making asynchronous requests.</p> <p> TYPE: <code>RunsAPIAsync</code> </p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.assets","title":"assets  <code>instance-attribute</code>","text":"<pre><code>assets: AssetsAPIAsync\n</code></pre> <p>Instance of the Assets API for making asynchronous requests.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.calculated_channels","title":"calculated_channels  <code>instance-attribute</code>","text":"<pre><code>calculated_channels: CalculatedChannelsAPIAsync\n</code></pre> <p>Instance of the Calculated Channels API for making asynchronous requests.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.ping","title":"ping  <code>instance-attribute</code>","text":"<pre><code>ping: PingAPIAsync\n</code></pre> <p>Instance of the Ping API for making asynchronous requests.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.runs","title":"runs  <code>instance-attribute</code>","text":"<pre><code>runs: RunsAPIAsync\n</code></pre> <p>Instance of the Runs API for making asynchronous requests.</p>"}]}