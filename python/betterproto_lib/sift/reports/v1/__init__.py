# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/reports/v1/reports.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ReportRuleStatus(betterproto.Enum):
    UNSPECIFIED = 0
    CREATED = 1
    LIVE = 2
    FINISHED = 3
    FAILED = 4
    CANCELED = 5
    ERROR = 6


@dataclass(eq=False, repr=False)
class Report(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    report_template_id: str = betterproto.string_field(2)
    run_id: str = betterproto.string_field(3)
    organization_id: str = betterproto.string_field(4)
    name: str = betterproto.string_field(5)
    description: Optional[str] = betterproto.string_field(6, optional=True)
    created_by_user_id: str = betterproto.string_field(7)
    modified_by_user_id: str = betterproto.string_field(8)
    created_date: datetime = betterproto.message_field(9)
    modified_date: datetime = betterproto.message_field(10)
    summaries: List["ReportRuleSummary"] = betterproto.message_field(11)
    tags: List["ReportTag"] = betterproto.message_field(12)
    rerun_from_report_id: Optional[str] = betterproto.string_field(13, optional=True)


@dataclass(eq=False, repr=False)
class ReportRuleSummary(betterproto.Message):
    rule_id: str = betterproto.string_field(1)
    rule_client_key: str = betterproto.string_field(2)
    rule_version_id: str = betterproto.string_field(3)
    rule_version_number: int = betterproto.uint32_field(4)
    report_rule_version_id: str = betterproto.string_field(5)
    num_open: int = betterproto.uint32_field(6)
    num_failed: int = betterproto.uint32_field(7)
    num_passed: int = betterproto.uint32_field(8)
    status: "ReportRuleStatus" = betterproto.enum_field(9)
    status_details: "ReportRuleStatusDetails" = betterproto.message_field(10)
    created_date: datetime = betterproto.message_field(11)
    modified_date: datetime = betterproto.message_field(12)
    asset_id: str = betterproto.string_field(13)
    deleted_date: datetime = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ReportTag(betterproto.Message):
    tag_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetails(betterproto.Message):
    created: "ReportRuleStatusDetailsCreated" = betterproto.message_field(
        1, group="details"
    )
    live: "ReportRuleStatusDetailsLive" = betterproto.message_field(2, group="details")
    finished: "ReportRuleStatusDetailsFinished" = betterproto.message_field(
        3, group="details"
    )
    failed: "ReportRuleStatusDetailsFailed" = betterproto.message_field(
        4, group="details"
    )
    canceled: "ReportRuleStatusDetailsCanceled" = betterproto.message_field(
        5, group="details"
    )
    error: "ReportRuleStatusDetailsError" = betterproto.message_field(
        6, group="details"
    )


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsCreated(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsLive(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsFinished(betterproto.Message):
    stdout: Optional[str] = betterproto.string_field(1, optional=True)
    stderr: Optional[str] = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsFailed(betterproto.Message):
    error_message: str = betterproto.string_field(1)
    exit_code: Optional[int] = betterproto.int32_field(2, optional=True)
    stdout: Optional[str] = betterproto.string_field(3, optional=True)
    stderr: Optional[str] = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsCanceled(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsError(betterproto.Message):
    error_message: str = betterproto.string_field(1)
    exit_code: Optional[int] = betterproto.int32_field(2, optional=True)
    stdout: Optional[str] = betterproto.string_field(3, optional=True)
    stderr: Optional[str] = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class CreateReportRequest(betterproto.Message):
    """
    The request of a call to `ReportService_CreateReport` to create a report. A report can be created either via a report template
     or an arbitrary report can be constructed depending on the variant of the `request` field.
    """

    report_from_report_template_request: "CreateReportFromReportTemplateRequest" = (
        betterproto.message_field(1, group="request")
    )
    report_from_rules_request: "CreateReportFromRulesRequest" = (
        betterproto.message_field(2, group="request")
    )
    organization_id: str = betterproto.string_field(3)
    run_id: str = betterproto.string_field(4)
    name: Optional[str] = betterproto.string_field(5, optional=True)
    """
    Override the name of the report. If not provided, the name will be generated based on the report template or run.
    """


@dataclass(eq=False, repr=False)
class CreateReportResponse(betterproto.Message):
    """
    The response of a call to `ReportService_CreateReport` to create a report.
    """

    report: "Report" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateReportFromReportTemplateRequest(betterproto.Message):
    """Used to create a report from a report template."""

    report_template_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateReportFromRulesRequest(betterproto.Message):
    """
    Used to construct an arbitrary report for an arbitrary set of rules. Rules can be specified either by rule ID
     or client key based on the variant used in the `rule_identifiers` field.
    """

    name: str = betterproto.string_field(1)
    description: Optional[str] = betterproto.string_field(2, optional=True)
    tag_names: List[str] = betterproto.string_field(3)
    rule_ids: "CreateReportRequestRuleIds" = betterproto.message_field(
        4, group="rule_identifiers"
    )
    rule_client_keys: "CreateReportRequestClientKeys" = betterproto.message_field(
        5, group="rule_identifiers"
    )


@dataclass(eq=False, repr=False)
class CreateReportRequestRuleIds(betterproto.Message):
    rule_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateReportRequestClientKeys(betterproto.Message):
    rule_client_keys: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetReportRequest(betterproto.Message):
    """
    The request for a call to `ReportService_GetReport` to retrieve a report template.
    """

    report_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetReportResponse(betterproto.Message):
    """
    The request of a call to `ReportService_GetReport` to retrieve a report template.
    """

    report: "Report" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListReportsRequest(betterproto.Message):
    """
    The request for a call to `ReportService_ListReports` to retrieve report.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of reports to return. The service may return fewer than this value.
     If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListReports` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListReports` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `report_id`, `report_template_id`, `tag_name`, `name`, and `run_id`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/reports#report). Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    order_by: str = betterproto.string_field(5)
    """
    How to order the retrieved reports. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
     Available fields to order_by are `created_date` and `modified_date`.
     If left empty, items are ordered by `created_date` in ascending order (oldest-first).
     For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
     Example: "created_date desc,modified_date"
    """


@dataclass(eq=False, repr=False)
class ListReportsResponse(betterproto.Message):
    """The response of a call to `ReportService_ListReportsResponse`."""

    reports: List["Report"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RerunReportRequest(betterproto.Message):
    report_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RerunReportResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    report_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CancelReportRequest(betterproto.Message):
    report_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CancelReportResponse(betterproto.Message):
    pass


class ReportServiceStub(betterproto.ServiceStub):
    async def get_report(
        self,
        get_report_request: "GetReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReportResponse":
        return await self._unary_unary(
            "/sift.reports.v1.ReportService/GetReport",
            get_report_request,
            GetReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_report(
        self,
        create_report_request: "CreateReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateReportResponse":
        return await self._unary_unary(
            "/sift.reports.v1.ReportService/CreateReport",
            create_report_request,
            CreateReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_reports(
        self,
        list_reports_request: "ListReportsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListReportsResponse":
        return await self._unary_unary(
            "/sift.reports.v1.ReportService/ListReports",
            list_reports_request,
            ListReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rerun_report(
        self,
        rerun_report_request: "RerunReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RerunReportResponse":
        return await self._unary_unary(
            "/sift.reports.v1.ReportService/RerunReport",
            rerun_report_request,
            RerunReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_report(
        self,
        cancel_report_request: "CancelReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CancelReportResponse":
        return await self._unary_unary(
            "/sift.reports.v1.ReportService/CancelReport",
            cancel_report_request,
            CancelReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ReportServiceBase(ServiceBase):

    async def get_report(
        self, get_report_request: "GetReportRequest"
    ) -> "GetReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_report(
        self, create_report_request: "CreateReportRequest"
    ) -> "CreateReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_reports(
        self, list_reports_request: "ListReportsRequest"
    ) -> "ListReportsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rerun_report(
        self, rerun_report_request: "RerunReportRequest"
    ) -> "RerunReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_report(
        self, cancel_report_request: "CancelReportRequest"
    ) -> "CancelReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_report(
        self, stream: "grpclib.server.Stream[GetReportRequest, GetReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_report(request)
        await stream.send_message(response)

    async def __rpc_create_report(
        self, stream: "grpclib.server.Stream[CreateReportRequest, CreateReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_report(request)
        await stream.send_message(response)

    async def __rpc_list_reports(
        self, stream: "grpclib.server.Stream[ListReportsRequest, ListReportsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_reports(request)
        await stream.send_message(response)

    async def __rpc_rerun_report(
        self, stream: "grpclib.server.Stream[RerunReportRequest, RerunReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.rerun_report(request)
        await stream.send_message(response)

    async def __rpc_cancel_report(
        self, stream: "grpclib.server.Stream[CancelReportRequest, CancelReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.reports.v1.ReportService/GetReport": grpclib.const.Handler(
                self.__rpc_get_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReportRequest,
                GetReportResponse,
            ),
            "/sift.reports.v1.ReportService/CreateReport": grpclib.const.Handler(
                self.__rpc_create_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateReportRequest,
                CreateReportResponse,
            ),
            "/sift.reports.v1.ReportService/ListReports": grpclib.const.Handler(
                self.__rpc_list_reports,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListReportsRequest,
                ListReportsResponse,
            ),
            "/sift.reports.v1.ReportService/RerunReport": grpclib.const.Handler(
                self.__rpc_rerun_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                RerunReportRequest,
                RerunReportResponse,
            ),
            "/sift.reports.v1.ReportService/CancelReport": grpclib.const.Handler(
                self.__rpc_cancel_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelReportRequest,
                CancelReportResponse,
            ),
        }
