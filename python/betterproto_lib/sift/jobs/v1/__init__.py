# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/jobs/v1/jobs.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class JobType(betterproto.Enum):
    UNSPECIFIED = 0
    RULE_EVALUATION = 1
    DATA_IMPORT = 2


class JobStatus(betterproto.Enum):
    UNSPECIFIED = 0
    CREATED = 1
    RUNNING = 2
    FINISHED = 3
    FAILED = 4
    CANCELLED = 5
    CANCEL_REQUESTED = 6


@dataclass(eq=False, repr=False)
class Job(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    organization_id: str = betterproto.string_field(2)
    created_by_user_id: str = betterproto.string_field(4)
    modified_by_user_id: str = betterproto.string_field(5)
    created_date: datetime = betterproto.message_field(6)
    modified_date: datetime = betterproto.message_field(7)
    started_date: datetime = betterproto.message_field(8)
    completed_date: datetime = betterproto.message_field(9)
    job_type: "JobType" = betterproto.enum_field(10)
    job_status: "JobStatus" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class ListJobsRequest(betterproto.Message):
    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of jobs to return. The service may return fewer than this value.
     If unspecified, at most 50 jobs will be returned.
     The maximum value is 1000; values above 1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListJobs` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListJobs` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are:
     `job_id`, `created_by_user_id`, `modified_by_user_id`, `created_date`, `modified_date`, `started_date`, `completed_date`
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to this definition. Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    order_by: str = betterproto.string_field(6)
    """
    How to order the retrieved jobs. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
     Available fields to order_by are `created_date`, `modified_date`, `started_date`, `completed_date`, `job_status`.
     If left empty, items are ordered by `created_date` in descending order (newest-first).
     For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
     Example: "created_date desc,modified_date"
    """


@dataclass(eq=False, repr=False)
class ListJobsResponse(betterproto.Message):
    jobs: List["Job"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CancelJobRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CancelJobResponse(betterproto.Message):
    pass


class JobServiceStub(betterproto.ServiceStub):
    async def list_jobs(
        self,
        list_jobs_request: "ListJobsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListJobsResponse":
        return await self._unary_unary(
            "/sift.jobs.v1.JobService/ListJobs",
            list_jobs_request,
            ListJobsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_job(
        self,
        cancel_job_request: "CancelJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CancelJobResponse":
        return await self._unary_unary(
            "/sift.jobs.v1.JobService/CancelJob",
            cancel_job_request,
            CancelJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class JobServiceBase(ServiceBase):

    async def list_jobs(
        self, list_jobs_request: "ListJobsRequest"
    ) -> "ListJobsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_job(
        self, cancel_job_request: "CancelJobRequest"
    ) -> "CancelJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_jobs(
        self, stream: "grpclib.server.Stream[ListJobsRequest, ListJobsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_jobs(request)
        await stream.send_message(response)

    async def __rpc_cancel_job(
        self, stream: "grpclib.server.Stream[CancelJobRequest, CancelJobResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_job(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.jobs.v1.JobService/ListJobs": grpclib.const.Handler(
                self.__rpc_list_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListJobsRequest,
                ListJobsResponse,
            ),
            "/sift.jobs.v1.JobService/CancelJob": grpclib.const.Handler(
                self.__rpc_cancel_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelJobRequest,
                CancelJobResponse,
            ),
        }
