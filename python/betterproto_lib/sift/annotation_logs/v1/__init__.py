# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/annotation_logs/v1/annotation_logs.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class AnnotationLogKind(betterproto.Enum):
    UNSPECIFIED = 0
    COMMENT = 1
    STATE_UPDATE = 2
    ASSIGNED = 3


class AnnotationLogState(betterproto.Enum):
    UNSPECIFIED = 0
    CREATED = 1
    OPEN = 2
    FLAGGED = 3
    RESOLVED = 4


class AnnotationCommentBodyElementType(betterproto.Enum):
    UNSPECIFIED = 0
    TEXT = 1
    USER_MENTION = 2


@dataclass(eq=False, repr=False)
class CreateAnnotationLogRequest(betterproto.Message):
    """
    The request for a call to `AnnotationLogService_CreateAnnotationLog` to create an annotation log.
    """

    annotation_id: str = betterproto.string_field(1)
    """
    The ID of the parent annotation associated to associate with the new annotation log.
    """

    kind: "AnnotationLogKind" = betterproto.enum_field(2)
    """The kind of annotation log to create."""

    assigned: "AnnotationLogAssignedProperties" = betterproto.message_field(
        3, group="properties"
    )
    state_update: "AnnotationLogStateUpdateProperties" = betterproto.message_field(
        4, group="properties"
    )
    comment: "AnnotationLogCommentProperties" = betterproto.message_field(
        5, group="properties"
    )


@dataclass(eq=False, repr=False)
class CreateAnnotationLogResponse(betterproto.Message):
    """
    The response of a call to `AnnotationLogService_CreateAnnotationLog`.
    """

    annotation_log: "AnnotationLogSearchResult" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListAnnotationLogsRequest(betterproto.Message):
    """
    The request for a call to `AnnotationLogService_ListAnnotationLogs` to retrieve annotation logs.
    """

    annotation_id: str = betterproto.string_field(1)
    """The ID of the parent annotation associated with the annotation logs."""

    page_size: int = betterproto.uint32_field(2)
    """
    The maximum number of annotation logs to return.
     The service may return fewer than this value.
     If unspecified, at most 50 annotation logs will be returned.
     The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: str = betterproto.string_field(3)
    """
    A page token, received from a previous `ListAnnotationLogs` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListAnnotationLogs` must match
     the call that provided the page token.
    """

    filter: str = betterproto.string_field(4)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `annotation_log_id`, `annotation_id`, `created_by_user_id`,
     `created_date`, `modified_date`, and `kind`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/annotation_logs#annotationlogsearchresult). Optional.
    """


@dataclass(eq=False, repr=False)
class ListAnnotationLogsResponse(betterproto.Message):
    """The response of a call to `AnnotationLogService_ListAnnotationLogs`."""

    annotation_logs: List["AnnotationLogSearchResult"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeleteAnnotationLogRequest(betterproto.Message):
    """
    The request for a call to `AnnotationLogService_DeleteAnnotationLog` to delete an annotation log.
    """

    annotation_id: str = betterproto.string_field(1)
    """
    The ID of the parent annotation associated with the annotation log to be deleted.
    """

    annotation_log_id: str = betterproto.string_field(2)
    """ID of the annotation log to be deleted."""


@dataclass(eq=False, repr=False)
class DeleteAnnotationLogResponse(betterproto.Message):
    """
    The Response of a call to `AnnotationLogService_DeleteAnnotationLog`.
    """

    pass


@dataclass(eq=False, repr=False)
class AnnotationLogSearchResult(betterproto.Message):
    annotation_log_id: str = betterproto.string_field(1)
    created_date: datetime = betterproto.message_field(2)
    modified_date: datetime = betterproto.message_field(3)
    annotation_id: str = betterproto.string_field(4)
    kind: "AnnotationLogKind" = betterproto.enum_field(5)
    created_by_user_id: str = betterproto.string_field(6)
    created_by_user_name: str = betterproto.string_field(7)
    assigned: "AnnotationLogAssignedProperties" = betterproto.message_field(
        8, group="properties"
    )
    state_update: "AnnotationLogStateUpdateProperties" = betterproto.message_field(
        9, group="properties"
    )
    comment: "AnnotationLogCommentProperties" = betterproto.message_field(
        10, group="properties"
    )


@dataclass(eq=False, repr=False)
class AnnotationLogAssignedProperties(betterproto.Message):
    assigned_to_user_id: str = betterproto.string_field(1)
    assigned_to_user_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AnnotationLogStateUpdateProperties(betterproto.Message):
    state: "AnnotationLogState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class AnnotationLogCommentProperties(betterproto.Message):
    body: List["AnnotationCommentBodyElement"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AnnotationCommentBodyElement(betterproto.Message):
    type: "AnnotationCommentBodyElementType" = betterproto.enum_field(1)
    text: str = betterproto.string_field(2)
    user_mention: "AnnotationCommentUserMention" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AnnotationCommentUserMention(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    user_email: str = betterproto.string_field(2)


class AnnotationLogServiceStub(betterproto.ServiceStub):
    async def create_annotation_log(
        self,
        create_annotation_log_request: "CreateAnnotationLogRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateAnnotationLogResponse":
        return await self._unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/CreateAnnotationLog",
            create_annotation_log_request,
            CreateAnnotationLogResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_annotation_logs(
        self,
        list_annotation_logs_request: "ListAnnotationLogsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListAnnotationLogsResponse":
        return await self._unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/ListAnnotationLogs",
            list_annotation_logs_request,
            ListAnnotationLogsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_annotation_log(
        self,
        delete_annotation_log_request: "DeleteAnnotationLogRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteAnnotationLogResponse":
        return await self._unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/DeleteAnnotationLog",
            delete_annotation_log_request,
            DeleteAnnotationLogResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AnnotationLogServiceBase(ServiceBase):

    async def create_annotation_log(
        self, create_annotation_log_request: "CreateAnnotationLogRequest"
    ) -> "CreateAnnotationLogResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_annotation_logs(
        self, list_annotation_logs_request: "ListAnnotationLogsRequest"
    ) -> "ListAnnotationLogsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_annotation_log(
        self, delete_annotation_log_request: "DeleteAnnotationLogRequest"
    ) -> "DeleteAnnotationLogResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_annotation_log(
        self,
        stream: "grpclib.server.Stream[CreateAnnotationLogRequest, CreateAnnotationLogResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_annotation_log(request)
        await stream.send_message(response)

    async def __rpc_list_annotation_logs(
        self,
        stream: "grpclib.server.Stream[ListAnnotationLogsRequest, ListAnnotationLogsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_annotation_logs(request)
        await stream.send_message(response)

    async def __rpc_delete_annotation_log(
        self,
        stream: "grpclib.server.Stream[DeleteAnnotationLogRequest, DeleteAnnotationLogResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_annotation_log(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.annotation_logs.v1.AnnotationLogService/CreateAnnotationLog": grpclib.const.Handler(
                self.__rpc_create_annotation_log,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateAnnotationLogRequest,
                CreateAnnotationLogResponse,
            ),
            "/sift.annotation_logs.v1.AnnotationLogService/ListAnnotationLogs": grpclib.const.Handler(
                self.__rpc_list_annotation_logs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAnnotationLogsRequest,
                ListAnnotationLogsResponse,
            ),
            "/sift.annotation_logs.v1.AnnotationLogService/DeleteAnnotationLog": grpclib.const.Handler(
                self.__rpc_delete_annotation_log,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteAnnotationLogRequest,
                DeleteAnnotationLogResponse,
            ),
        }
