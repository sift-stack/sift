# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/ping/v1/ping.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class PingRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PingResponse(betterproto.Message):
    response: str = betterproto.string_field(1)


class PingServiceStub(betterproto.ServiceStub):
    async def ping(
        self,
        ping_request: "PingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PingResponse":
        return await self._unary_unary(
            "/sift.ping.v1.PingService/Ping",
            ping_request,
            PingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PingServiceBase(ServiceBase):

    async def ping(self, ping_request: "PingRequest") -> "PingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_ping(
        self, stream: "grpclib.server.Stream[PingRequest, PingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ping(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.ping.v1.PingService/Ping": grpclib.const.Handler(
                self.__rpc_ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                PingRequest,
                PingResponse,
            ),
        }
