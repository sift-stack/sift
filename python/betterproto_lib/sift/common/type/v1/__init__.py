# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/common/type/v1/channel_bit_field_element.proto, sift/common/type/v1/channel_config.proto, sift/common/type/v1/channel_data_type.proto, sift/common/type/v1/channel_enum_type.proto, sift/common/type/v1/organization.proto, sift/common/type/v1/resource_identifier.proto, sift/common/type/v1/resource_ref.proto, sift/common/type/v1/user.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    List,
    Optional,
)

import betterproto


class ChannelDataType(betterproto.Enum):
    UNSPECIFIED = 0
    DOUBLE = 1
    STRING = 2
    ENUM = 3
    BIT_FIELD = 4
    BOOL = 5
    FLOAT = 6
    INT_32 = 7
    UINT_32 = 8
    INT_64 = 9
    UINT_64 = 10


@dataclass(eq=False, repr=False)
class ResourceIdentifier(betterproto.Message):
    id: str = betterproto.string_field(1, group="identifier")
    client_key: str = betterproto.string_field(2, group="identifier")


@dataclass(eq=False, repr=False)
class NamedResource(betterproto.Message):
    id: str = betterproto.string_field(1, group="resource")
    name: str = betterproto.string_field(2, group="resource")


@dataclass(eq=False, repr=False)
class ResourceIdentifiers(betterproto.Message):
    ids: "Ids" = betterproto.message_field(1, group="identifiers")
    client_keys: "ClientKeys" = betterproto.message_field(2, group="identifiers")


@dataclass(eq=False, repr=False)
class NamedResources(betterproto.Message):
    ids: "Ids" = betterproto.message_field(1, group="resources")
    names: "Names" = betterproto.message_field(2, group="resources")


@dataclass(eq=False, repr=False)
class Ids(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ClientKeys(betterproto.Message):
    client_keys: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Names(betterproto.Message):
    names: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ChannelBitFieldElement(betterproto.Message):
    name: str = betterproto.string_field(1)
    index: int = betterproto.int32_field(2)
    """
    The index of this element's first bit in the logical bit field array.
    """

    bit_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannelEnumType(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChannelConfig(betterproto.Message):
    name: str = betterproto.string_field(1)
    units: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    data_type: "ChannelDataType" = betterproto.enum_field(4)
    enum_types: List["ChannelEnumType"] = betterproto.message_field(5)
    bit_field_elements: List["ChannelBitFieldElement"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class Organization(betterproto.Message):
    organization_id: str = betterproto.string_field(1)
    organization_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResourceRef(betterproto.Message):
    """
    ResourceRef is meant to be embedded as a field in other resources. It's used by one resource to point to another resource.
     In a request, use the `find_by` field to select a resource to point to.
     In a response, the fields marked `google.api.field_behavior = OUTPUT_ONLY` will be populated by the backend.
    """

    id: str = betterproto.string_field(1)
    """
    The global unique id of the resource, e.g. the asset_id, run_id, or report_id.
    """

    client_key: Optional[str] = betterproto.string_field(2, optional=True)
    """
    If a resource has a client_key associated with it, it will be included.
    """

    name: str = betterproto.string_field(3)
    """The name of the resource."""

    find_by: "FindResourceBy" = betterproto.message_field(4)
    """
    Use this field to 'construct' a ResourceRef.
     You can give just the name, id, or client_key and the backend will find the resource you're referring to.
    """


@dataclass(eq=False, repr=False)
class FindResourceBy(betterproto.Message):
    id: str = betterproto.string_field(1, group="identifier")
    """Find by the resource's global id, e.g. asset_id, run_id, report_id."""

    client_key: str = betterproto.string_field(2, group="identifier")
    """Find by the resource's client_key, if available."""

    name: str = betterproto.string_field(3, group="identifier")
    """
    Find by the resource's name. If multiple resources are found with the same name, an error will be returned.
    """

    organization_id: str = betterproto.string_field(4)
    """
    When finding by `client_key` or `name`, the `organization_id` should also be specified.
     Only required if the user belongs to more than one organization.
    """


@dataclass(eq=False, repr=False)
class User(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    user_name: str = betterproto.string_field(2)
    organizations: List["Organization"] = betterproto.message_field(3)
