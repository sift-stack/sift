# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/channels/v2/channels.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...common.type import v1 as __common_type_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Channel(betterproto.Message):
    channel_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    component: str = betterproto.string_field(3)
    asset_id: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    unit_id: str = betterproto.string_field(6)
    created_date: datetime = betterproto.message_field(7)
    modified_date: datetime = betterproto.message_field(8)
    created_by_user_id: str = betterproto.string_field(9)
    modified_by_user_id: str = betterproto.string_field(10)
    organization_id: str = betterproto.string_field(11)
    data_type: "__common_type_v1__.ChannelDataType" = betterproto.enum_field(12)
    enum_types: List["__common_type_v1__.ChannelEnumType"] = betterproto.message_field(
        13
    )
    bit_field_elements: List["__common_type_v1__.ChannelBitFieldElement"] = (
        betterproto.message_field(14)
    )


@dataclass(eq=False, repr=False)
class GetChannelRequest(betterproto.Message):
    """The request for a call to `ChannelService_GetChannel`."""

    channel_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetChannelResponse(betterproto.Message):
    """The response of a call to `ChannelService_GetChannel`."""

    channel: "Channel" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListChannelsRequest(betterproto.Message):
    """
    The request for a call to `ChannelService_ListChannels` to retrieve channels.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of channels to return. The service may return fewer than this value.
     If unspecified, at most 50 channels will be returned. The maximum value is 10,000; values above
     10,000 will be coerced to 10,000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListChannels` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListChannels` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `channel_id`, `asset_id`, `name`, `component`, `description`, `active`,
     `run_id`, `run_name`, `run_client_key`, `created_date`, and `modified_date`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/channels#channel). Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    order_by: str = betterproto.string_field(5)
    """
    How to order the retrieved channels. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
     Available fields to order_by are `created_date` and `modified_date`.
     If left empty, items are ordered by `created_date` in ascending order (oldest-first).
     For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
     Example: "created_date desc,modified_date"
    """


@dataclass(eq=False, repr=False)
class ListChannelsResponse(betterproto.Message):
    """The result of a call to `ChannelService_ListChannels`."""

    channels: List["Channel"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


class ChannelServiceStub(betterproto.ServiceStub):
    async def get_channel(
        self,
        get_channel_request: "GetChannelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetChannelResponse":
        return await self._unary_unary(
            "/sift.channels.v2.ChannelService/GetChannel",
            get_channel_request,
            GetChannelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_channels(
        self,
        list_channels_request: "ListChannelsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListChannelsResponse":
        return await self._unary_unary(
            "/sift.channels.v2.ChannelService/ListChannels",
            list_channels_request,
            ListChannelsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChannelServiceBase(ServiceBase):

    async def get_channel(
        self, get_channel_request: "GetChannelRequest"
    ) -> "GetChannelResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_channels(
        self, list_channels_request: "ListChannelsRequest"
    ) -> "ListChannelsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_channel(
        self, stream: "grpclib.server.Stream[GetChannelRequest, GetChannelResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_channel(request)
        await stream.send_message(response)

    async def __rpc_list_channels(
        self, stream: "grpclib.server.Stream[ListChannelsRequest, ListChannelsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_channels(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.channels.v2.ChannelService/GetChannel": grpclib.const.Handler(
                self.__rpc_get_channel,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetChannelRequest,
                GetChannelResponse,
            ),
            "/sift.channels.v2.ChannelService/ListChannels": grpclib.const.Handler(
                self.__rpc_list_channels,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListChannelsRequest,
                ListChannelsResponse,
            ),
        }
