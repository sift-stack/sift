# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/channel_schemas/v2/channel_schemas.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...common.type import v1 as __common_type_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class CreateChannelSchemaRequest(betterproto.Message):
    """
    The request for a call to `ChannelSchemaService_CreateChannelSchema`.
    """

    channel: str = betterproto.string_field(1)
    unit: str = betterproto.string_field(2)
    data_type: "__common_type_v1__.ChannelDataType" = betterproto.enum_field(3)
    enum_types: List["__common_type_v1__.ChannelEnumType"] = betterproto.message_field(
        4
    )
    bit_field_elements: List["__common_type_v1__.ChannelBitFieldElement"] = (
        betterproto.message_field(5)
    )
    asset_name: str = betterproto.string_field(6)
    """The name of the asset (case-insensitive)."""


@dataclass(eq=False, repr=False)
class CreateChannelSchemaResponse(betterproto.Message):
    """
    The response of a call to `ChannelSchemaService_CreateChannelSchema`.
    """

    pass


@dataclass(eq=False, repr=False)
class BatchCreateChannelSchemasRequest(betterproto.Message):
    """
    The request for a call to `ChannelSchemaService_BatchCreateChannelSchemas`.
    """

    requests: List["CreateChannelSchemaRequest"] = betterproto.message_field(1)
    """Limit of 1000 channels schemas per batch"""

    asset_name: str = betterproto.string_field(2)
    """
    The asset to which the channel schemas belong (case-insensitive).
     If this field, and any of the child requests specify an asset, the assets must match.
    """


@dataclass(eq=False, repr=False)
class BatchCreateChannelSchemasResponse(betterproto.Message):
    """
    The response of a call to `ChannelSchemaService_BatchCreateChannelSchemas`.
    """

    pass


class ChannelSchemaServiceStub(betterproto.ServiceStub):
    async def create_channel_schema(
        self,
        create_channel_schema_request: "CreateChannelSchemaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateChannelSchemaResponse":
        return await self._unary_unary(
            "/sift.channel_schemas.v2.ChannelSchemaService/CreateChannelSchema",
            create_channel_schema_request,
            CreateChannelSchemaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_create_channel_schemas(
        self,
        batch_create_channel_schemas_request: "BatchCreateChannelSchemasRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BatchCreateChannelSchemasResponse":
        return await self._unary_unary(
            "/sift.channel_schemas.v2.ChannelSchemaService/BatchCreateChannelSchemas",
            batch_create_channel_schemas_request,
            BatchCreateChannelSchemasResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChannelSchemaServiceBase(ServiceBase):

    async def create_channel_schema(
        self, create_channel_schema_request: "CreateChannelSchemaRequest"
    ) -> "CreateChannelSchemaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_create_channel_schemas(
        self, batch_create_channel_schemas_request: "BatchCreateChannelSchemasRequest"
    ) -> "BatchCreateChannelSchemasResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_channel_schema(
        self,
        stream: "grpclib.server.Stream[CreateChannelSchemaRequest, CreateChannelSchemaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_channel_schema(request)
        await stream.send_message(response)

    async def __rpc_batch_create_channel_schemas(
        self,
        stream: "grpclib.server.Stream[BatchCreateChannelSchemasRequest, BatchCreateChannelSchemasResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_create_channel_schemas(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.channel_schemas.v2.ChannelSchemaService/CreateChannelSchema": grpclib.const.Handler(
                self.__rpc_create_channel_schema,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateChannelSchemaRequest,
                CreateChannelSchemaResponse,
            ),
            "/sift.channel_schemas.v2.ChannelSchemaService/BatchCreateChannelSchemas": grpclib.const.Handler(
                self.__rpc_batch_create_channel_schemas,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchCreateChannelSchemasRequest,
                BatchCreateChannelSchemasResponse,
            ),
        }
