# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/calculated_channels/v1/calculated_channels.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...common.type import v1 as __common_type_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ExpressionIdentifierType(betterproto.Enum):
    UNSPECIFIED = 0
    FUNCTION = 1
    CHANNEL = 2


class ExpressionIdentifierLibrary(betterproto.Enum):
    UNSPECIFIED = 0
    MATH = 1
    STRING = 2
    LIST = 3
    ITER = 4
    STATEFUL = 5
    SUMMARY = 6


class ExpressionMode(betterproto.Enum):
    UNSPECIFIED = 0
    RULES = 1
    CALCULATED_CHANNELS = 2
    RULER = 3
    STRUCTURED_DATA = 4


@dataclass(eq=False, repr=False)
class ExpressionChannelReference(betterproto.Message):
    channel_reference: str = betterproto.string_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ExpressionRequest(betterproto.Message):
    channel_references: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """
    A map from the channel reference in the expression string (e.g. $1) to the channel id (uuid).
     This is deprecated and should be passed in expression_channel_references instead.
    """

    expression: str = betterproto.string_field(2)
    expression_channel_references: List["ExpressionChannelReference"] = (
        betterproto.message_field(3)
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("channel_references"):
            warnings.warn(
                "ExpressionRequest.channel_references is deprecated", DeprecationWarning
            )


@dataclass(eq=False, repr=False)
class ListExpressionIdentifiersRequest(betterproto.Message):
    page_size: int = betterproto.uint32_field(1)
    """Defaults to 1000. Max of 10,000."""

    page_token: str = betterproto.string_field(2)
    mode: "ExpressionMode" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class ListExpressionIdentifiersResponse(betterproto.Message):
    identifiers: List["ExpressionIdentifier"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExpressionIdentifier(betterproto.Message):
    name: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    type: "ExpressionIdentifierType" = betterproto.enum_field(3)
    display_name: str = betterproto.string_field(4)
    library: "ExpressionIdentifierLibrary" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class ValidateExpressionRequest(betterproto.Message):
    expression: "ExpressionRequest" = betterproto.message_field(1)
    mode: "ExpressionMode" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ValidateExpressionResponse(betterproto.Message):
    error: "ErrorValidatingExpressionResult" = betterproto.message_field(
        1, group="result"
    )
    success: "SuccessValidatingExpressionResult" = betterproto.message_field(
        2, group="result"
    )


@dataclass(eq=False, repr=False)
class ErrorValidatingExpressionResult(betterproto.Message):
    error_message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SuccessValidatingExpressionResult(betterproto.Message):
    data_type: "__common_type_v1__.ChannelDataType" = betterproto.enum_field(1)


class CalculatedChannelsServiceStub(betterproto.ServiceStub):
    async def list_expression_identifiers(
        self,
        list_expression_identifiers_request: "ListExpressionIdentifiersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListExpressionIdentifiersResponse":
        return await self._unary_unary(
            "/sift.calculated_channels.v1.CalculatedChannelsService/ListExpressionIdentifiers",
            list_expression_identifiers_request,
            ListExpressionIdentifiersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validate_expression(
        self,
        validate_expression_request: "ValidateExpressionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ValidateExpressionResponse":
        return await self._unary_unary(
            "/sift.calculated_channels.v1.CalculatedChannelsService/ValidateExpression",
            validate_expression_request,
            ValidateExpressionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CalculatedChannelsServiceBase(ServiceBase):

    async def list_expression_identifiers(
        self, list_expression_identifiers_request: "ListExpressionIdentifiersRequest"
    ) -> "ListExpressionIdentifiersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validate_expression(
        self, validate_expression_request: "ValidateExpressionRequest"
    ) -> "ValidateExpressionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_expression_identifiers(
        self,
        stream: "grpclib.server.Stream[ListExpressionIdentifiersRequest, ListExpressionIdentifiersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_expression_identifiers(request)
        await stream.send_message(response)

    async def __rpc_validate_expression(
        self,
        stream: "grpclib.server.Stream[ValidateExpressionRequest, ValidateExpressionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.validate_expression(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.calculated_channels.v1.CalculatedChannelsService/ListExpressionIdentifiers": grpclib.const.Handler(
                self.__rpc_list_expression_identifiers,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListExpressionIdentifiersRequest,
                ListExpressionIdentifiersResponse,
            ),
            "/sift.calculated_channels.v1.CalculatedChannelsService/ValidateExpression": grpclib.const.Handler(
                self.__rpc_validate_expression,
                grpclib.const.Cardinality.UNARY_UNARY,
                ValidateExpressionRequest,
                ValidateExpressionResponse,
            ),
        }
