# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/report_templates/v1/report_templates.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class ReportTemplate(betterproto.Message):
    report_template_id: str = betterproto.string_field(1)
    organization_id: str = betterproto.string_field(2)
    client_key: Optional[str] = betterproto.string_field(3, optional=True)
    name: str = betterproto.string_field(4)
    description: Optional[str] = betterproto.string_field(5, optional=True)
    archived_date: Optional[datetime] = betterproto.message_field(6, optional=True)
    created_by_user_id: str = betterproto.string_field(7)
    modified_by_user_id: str = betterproto.string_field(8)
    created_date: datetime = betterproto.message_field(9)
    modified_date: datetime = betterproto.message_field(10)
    rules: List["ReportTemplateRule"] = betterproto.message_field(11)
    tags: List["ReportTemplateTag"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ReportTemplateRule(betterproto.Message):
    rule_id: str = betterproto.string_field(1)
    rule_version_id: str = betterproto.string_field(2)
    rule_version_number: int = betterproto.uint32_field(3)
    client_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ReportTemplateTag(betterproto.Message):
    tag_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetReportTemplateRequest(betterproto.Message):
    """
    The request for a call to `ReportTemplateService_GetReportTemplate` to retrieve a report template.
     If `report_template_id` is provided then all other arguments will be ignored. The argument `report_template_id`
     should not be used together with `client_key`. The `organization_id` argument is only required
     if using `client_key` and the user belongs to multiple organizations.
    """

    report_template_id: str = betterproto.string_field(1)
    client_key: str = betterproto.string_field(2)
    organization_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetReportTemplateResponse(betterproto.Message):
    """
    The request of a call to `ReportTemplateService_GetReportTemplate` to retrieve a report template.
    """

    report_template: "ReportTemplate" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateReportTemplateRequest(betterproto.Message):
    """
    The request of a call to `ReportTemplateService_CreateReportTemplate` to create a report template.
    """

    name: str = betterproto.string_field(1)
    client_key: Optional[str] = betterproto.string_field(2, optional=True)
    description: Optional[str] = betterproto.string_field(3, optional=True)
    tag_names: List[str] = betterproto.string_field(4)
    organization_id: str = betterproto.string_field(6)
    """
    `organization_id` is only required if your user belongs to multiple organizations
    """

    rule_ids: "CreateReportTemplateRequestRuleIds" = betterproto.message_field(
        7, group="rule_identifiers"
    )
    rule_client_keys: "CreateReportTemplateRequestClientKeys" = (
        betterproto.message_field(8, group="rule_identifiers")
    )


@dataclass(eq=False, repr=False)
class CreateReportTemplateRequestRuleIds(betterproto.Message):
    rule_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateReportTemplateRequestClientKeys(betterproto.Message):
    rule_client_keys: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateReportTemplateResponse(betterproto.Message):
    """
    The response of a call to `ReportTemplateService_CreateReportTemplate` to create a report template.
    """

    report_template: "ReportTemplate" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListReportTemplatesRequest(betterproto.Message):
    """
    The request for a call to `ReportTemplateService_ListReportTemplates` to retrieve report templates.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of report templates to return. The service may return fewer than this value.
     If unspecified, at most 50 report templates will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListReportTemplates` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListReportTemplates` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `report_template_id`, `tag_id`, `tag_name`, `client_key`, and `name`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/report_templates#report_template). Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    include_archived: bool = betterproto.bool_field(5)
    """
    If `true` then archived report templates will be included in the query. Defaults to `false`.
    """

    order_by: str = betterproto.string_field(6)
    """
    How to order the retrieved report templates. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
     Available fields to order_by are `created_date` and `modified_date`.
     If left empty, items are ordered by `created_date` in ascending order (oldest-first).
     For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
     Example: "created_date desc,modified_date"
    """


@dataclass(eq=False, repr=False)
class ListReportTemplatesResponse(betterproto.Message):
    """
    The response of a call to `ReportTemplateService_ListReportTemplatesResponse`.
    """

    report_templates: List["ReportTemplate"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateReportTemplateRequest(betterproto.Message):
    """
    The request for a call to `ReportTemplateService_UpdateReportTemplate` to update a report template. When updating
     tags or rules, the update will perform a full replace. Additionally, when updating rules, only the rule ID or the rule client key
     is required, but it is okay to provide both. If some rules contain only client keys and others only rule IDs, they will be consolidated.
    """

    report_template: "ReportTemplate" = betterproto.message_field(1)
    """The report template to update."""

    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )
    """
    The list of fields to be updated. The fields available to be updated are `name`, `archived_date`, `description`, `tags`, and `rules`.
    """


@dataclass(eq=False, repr=False)
class UpdateReportTemplateResponse(betterproto.Message):
    """
    The response of a call to `ReportTemplateService_UpdateReportTemplate`.
    """

    report_template: "ReportTemplate" = betterproto.message_field(1)


class ReportTemplateServiceStub(betterproto.ServiceStub):
    async def get_report_template(
        self,
        get_report_template_request: "GetReportTemplateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReportTemplateResponse":
        return await self._unary_unary(
            "/sift.report_templates.v1.ReportTemplateService/GetReportTemplate",
            get_report_template_request,
            GetReportTemplateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_report_template(
        self,
        create_report_template_request: "CreateReportTemplateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateReportTemplateResponse":
        return await self._unary_unary(
            "/sift.report_templates.v1.ReportTemplateService/CreateReportTemplate",
            create_report_template_request,
            CreateReportTemplateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_report_templates(
        self,
        list_report_templates_request: "ListReportTemplatesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListReportTemplatesResponse":
        return await self._unary_unary(
            "/sift.report_templates.v1.ReportTemplateService/ListReportTemplates",
            list_report_templates_request,
            ListReportTemplatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_report_template(
        self,
        update_report_template_request: "UpdateReportTemplateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateReportTemplateResponse":
        return await self._unary_unary(
            "/sift.report_templates.v1.ReportTemplateService/UpdateReportTemplate",
            update_report_template_request,
            UpdateReportTemplateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ReportTemplateServiceBase(ServiceBase):

    async def get_report_template(
        self, get_report_template_request: "GetReportTemplateRequest"
    ) -> "GetReportTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_report_template(
        self, create_report_template_request: "CreateReportTemplateRequest"
    ) -> "CreateReportTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_report_templates(
        self, list_report_templates_request: "ListReportTemplatesRequest"
    ) -> "ListReportTemplatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_report_template(
        self, update_report_template_request: "UpdateReportTemplateRequest"
    ) -> "UpdateReportTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_report_template(
        self,
        stream: "grpclib.server.Stream[GetReportTemplateRequest, GetReportTemplateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_report_template(request)
        await stream.send_message(response)

    async def __rpc_create_report_template(
        self,
        stream: "grpclib.server.Stream[CreateReportTemplateRequest, CreateReportTemplateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_report_template(request)
        await stream.send_message(response)

    async def __rpc_list_report_templates(
        self,
        stream: "grpclib.server.Stream[ListReportTemplatesRequest, ListReportTemplatesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_report_templates(request)
        await stream.send_message(response)

    async def __rpc_update_report_template(
        self,
        stream: "grpclib.server.Stream[UpdateReportTemplateRequest, UpdateReportTemplateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_report_template(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.report_templates.v1.ReportTemplateService/GetReportTemplate": grpclib.const.Handler(
                self.__rpc_get_report_template,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReportTemplateRequest,
                GetReportTemplateResponse,
            ),
            "/sift.report_templates.v1.ReportTemplateService/CreateReportTemplate": grpclib.const.Handler(
                self.__rpc_create_report_template,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateReportTemplateRequest,
                CreateReportTemplateResponse,
            ),
            "/sift.report_templates.v1.ReportTemplateService/ListReportTemplates": grpclib.const.Handler(
                self.__rpc_list_report_templates,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListReportTemplatesRequest,
                ListReportTemplatesResponse,
            ),
            "/sift.report_templates.v1.ReportTemplateService/UpdateReportTemplate": grpclib.const.Handler(
                self.__rpc_update_report_template,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateReportTemplateRequest,
                UpdateReportTemplateResponse,
            ),
        }
