# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/saved_searches/v1/saved_searches.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class SavedSearch(betterproto.Message):
    saved_search_id: str = betterproto.string_field(1)
    organization_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    properties: "SavedSearchProperties" = betterproto.message_field(4)
    created_by_user_id: str = betterproto.string_field(5)
    modified_by_user_id: str = betterproto.string_field(6)
    created_date: datetime = betterproto.message_field(7)
    modified_date: datetime = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class SavedSearchProperties(betterproto.Message):
    overview_mode: str = betterproto.string_field(1)
    search_term: Optional[str] = betterproto.string_field(2, optional=True)
    from_date_time: Optional[datetime] = betterproto.message_field(3, optional=True)
    to_date_time: Optional[datetime] = betterproto.message_field(4, optional=True)
    asset_items: List["SavedSearchFilterItem"] = betterproto.message_field(5)
    user_items: List["SavedSearchFilterItem"] = betterproto.message_field(6)
    tag_items: List["SavedSearchFilterItem"] = betterproto.message_field(7)
    annotation_items: List["SavedSearchFilterItem"] = betterproto.message_field(8)
    run_items: List["SavedSearchFilterItem"] = betterproto.message_field(9)
    report_template_items: List["SavedSearchFilterItem"] = betterproto.message_field(10)
    show_advanced_filters: Optional[bool] = betterproto.bool_field(11, optional=True)


@dataclass(eq=False, repr=False)
class SavedSearchFilterItem(betterproto.Message):
    id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetSavedSearchRequest(betterproto.Message):
    """
    The request for a call to `SavedSearchService_GetSavedSearch` to retrieve a saved search;
    """

    saved_search_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetSavedSearchResponse(betterproto.Message):
    """The response of a call to `SavedSearchService_GetSavedSearch`."""

    saved_search: "SavedSearch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListSavedSearchesRequest(betterproto.Message):
    """
    The request for a call to `SavedSearchService_ListSavedSearches` to retrieve saved searches.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of saved searches to return. The service may return fewer than this value.
     If unspecified, at most 50 saved searches will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListSavedSearches` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListSavedSearches` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are 'name' and 'saved_search_id'.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/saved_searches#savedsearch). Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    This field is only required if your user belongs to multiple organizations.
    """


@dataclass(eq=False, repr=False)
class ListSavedSearchesResponse(betterproto.Message):
    """
    The response of a call to `SavedSearchService_ListSavedSearchesResponse`.
    """

    saved_searches: List["SavedSearch"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateSavedSearchRequest(betterproto.Message):
    """
    The request for a call to `SavedSearchService_CreateSavedSearch` to create a saved search.
    """

    name: str = betterproto.string_field(1)
    properties: "SavedSearchProperties" = betterproto.message_field(2)
    organization_id: str = betterproto.string_field(3)
    """
    This field is only required if your user belongs to multiple organizations.
    """


@dataclass(eq=False, repr=False)
class CreateSavedSearchResponse(betterproto.Message):
    """The response for a call to `SavedSearchService_CreateSavedResponse`."""

    saved_search: "SavedSearch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteSavedSearchRequest(betterproto.Message):
    """
    The request for a call to `SavedSearchService_DeleteSavedSearch` to delete a saved search.
    """

    saved_search_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteSavedSearchResponse(betterproto.Message):
    """The response of a call to `SavedSearchService_DeleteSavedSearch`."""

    pass


@dataclass(eq=False, repr=False)
class BatchDeleteSavedSearchesRequest(betterproto.Message):
    """
    The request for a call to `SavedSearchService_BatchDeleteSavedSearches` to delete saved searches.
    """

    saved_search_ids: List[str] = betterproto.string_field(1)
    """Limit of 1000 searches per batch"""


@dataclass(eq=False, repr=False)
class BatchDeleteSavedSearchesResponse(betterproto.Message):
    """
    The response of a call to `SavedSearchService_BatchDeleteSavedSearches`.
    """

    pass


@dataclass(eq=False, repr=False)
class UpdateSavedSearchRequest(betterproto.Message):
    """
    The request for a call to `SavedSearchService_UpdateSavedSearch` to update a saved search.
    """

    saved_search: "SavedSearch" = betterproto.message_field(1)
    """The saved search to update."""

    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )
    """
    The list of fields to be updated. The fields available to be updated are `name` and `properties`.
    """


@dataclass(eq=False, repr=False)
class UpdateSavedSearchResponse(betterproto.Message):
    """The response of a call to `SavedSearchService_UpdateSavedSearch`."""

    saved_search: "SavedSearch" = betterproto.message_field(1)


class SavedSearchServiceStub(betterproto.ServiceStub):
    async def get_saved_search(
        self,
        get_saved_search_request: "GetSavedSearchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetSavedSearchResponse":
        return await self._unary_unary(
            "/sift.saved_searches.v1.SavedSearchService/GetSavedSearch",
            get_saved_search_request,
            GetSavedSearchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_saved_search(
        self,
        create_saved_search_request: "CreateSavedSearchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateSavedSearchResponse":
        return await self._unary_unary(
            "/sift.saved_searches.v1.SavedSearchService/CreateSavedSearch",
            create_saved_search_request,
            CreateSavedSearchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_saved_searches(
        self,
        list_saved_searches_request: "ListSavedSearchesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListSavedSearchesResponse":
        return await self._unary_unary(
            "/sift.saved_searches.v1.SavedSearchService/ListSavedSearches",
            list_saved_searches_request,
            ListSavedSearchesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_saved_search(
        self,
        update_saved_search_request: "UpdateSavedSearchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateSavedSearchResponse":
        return await self._unary_unary(
            "/sift.saved_searches.v1.SavedSearchService/UpdateSavedSearch",
            update_saved_search_request,
            UpdateSavedSearchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_saved_search(
        self,
        delete_saved_search_request: "DeleteSavedSearchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteSavedSearchResponse":
        return await self._unary_unary(
            "/sift.saved_searches.v1.SavedSearchService/DeleteSavedSearch",
            delete_saved_search_request,
            DeleteSavedSearchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_delete_saved_searches(
        self,
        batch_delete_saved_searches_request: "BatchDeleteSavedSearchesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BatchDeleteSavedSearchesResponse":
        return await self._unary_unary(
            "/sift.saved_searches.v1.SavedSearchService/BatchDeleteSavedSearches",
            batch_delete_saved_searches_request,
            BatchDeleteSavedSearchesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SavedSearchServiceBase(ServiceBase):

    async def get_saved_search(
        self, get_saved_search_request: "GetSavedSearchRequest"
    ) -> "GetSavedSearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_saved_search(
        self, create_saved_search_request: "CreateSavedSearchRequest"
    ) -> "CreateSavedSearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_saved_searches(
        self, list_saved_searches_request: "ListSavedSearchesRequest"
    ) -> "ListSavedSearchesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_saved_search(
        self, update_saved_search_request: "UpdateSavedSearchRequest"
    ) -> "UpdateSavedSearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_saved_search(
        self, delete_saved_search_request: "DeleteSavedSearchRequest"
    ) -> "DeleteSavedSearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_delete_saved_searches(
        self, batch_delete_saved_searches_request: "BatchDeleteSavedSearchesRequest"
    ) -> "BatchDeleteSavedSearchesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_saved_search(
        self,
        stream: "grpclib.server.Stream[GetSavedSearchRequest, GetSavedSearchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_saved_search(request)
        await stream.send_message(response)

    async def __rpc_create_saved_search(
        self,
        stream: "grpclib.server.Stream[CreateSavedSearchRequest, CreateSavedSearchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_saved_search(request)
        await stream.send_message(response)

    async def __rpc_list_saved_searches(
        self,
        stream: "grpclib.server.Stream[ListSavedSearchesRequest, ListSavedSearchesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_saved_searches(request)
        await stream.send_message(response)

    async def __rpc_update_saved_search(
        self,
        stream: "grpclib.server.Stream[UpdateSavedSearchRequest, UpdateSavedSearchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_saved_search(request)
        await stream.send_message(response)

    async def __rpc_delete_saved_search(
        self,
        stream: "grpclib.server.Stream[DeleteSavedSearchRequest, DeleteSavedSearchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_saved_search(request)
        await stream.send_message(response)

    async def __rpc_batch_delete_saved_searches(
        self,
        stream: "grpclib.server.Stream[BatchDeleteSavedSearchesRequest, BatchDeleteSavedSearchesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_delete_saved_searches(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.saved_searches.v1.SavedSearchService/GetSavedSearch": grpclib.const.Handler(
                self.__rpc_get_saved_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSavedSearchRequest,
                GetSavedSearchResponse,
            ),
            "/sift.saved_searches.v1.SavedSearchService/CreateSavedSearch": grpclib.const.Handler(
                self.__rpc_create_saved_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateSavedSearchRequest,
                CreateSavedSearchResponse,
            ),
            "/sift.saved_searches.v1.SavedSearchService/ListSavedSearches": grpclib.const.Handler(
                self.__rpc_list_saved_searches,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListSavedSearchesRequest,
                ListSavedSearchesResponse,
            ),
            "/sift.saved_searches.v1.SavedSearchService/UpdateSavedSearch": grpclib.const.Handler(
                self.__rpc_update_saved_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateSavedSearchRequest,
                UpdateSavedSearchResponse,
            ),
            "/sift.saved_searches.v1.SavedSearchService/DeleteSavedSearch": grpclib.const.Handler(
                self.__rpc_delete_saved_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteSavedSearchRequest,
                DeleteSavedSearchResponse,
            ),
            "/sift.saved_searches.v1.SavedSearchService/BatchDeleteSavedSearches": grpclib.const.Handler(
                self.__rpc_batch_delete_saved_searches,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchDeleteSavedSearchesRequest,
                BatchDeleteSavedSearchesResponse,
            ),
        }
