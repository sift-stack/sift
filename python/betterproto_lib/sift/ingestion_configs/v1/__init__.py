# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/ingestion_configs/v1/ingestion_configs.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...common.type import v1 as __common_type_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class IngestionConfig(betterproto.Message):
    ingestion_config_id: str = betterproto.string_field(1)
    asset_id: str = betterproto.string_field(2)
    client_key: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FlowConfig(betterproto.Message):
    name: str = betterproto.string_field(1)
    channels: List["ChannelConfig"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChannelConfig(betterproto.Message):
    name: str = betterproto.string_field(1)
    component: str = betterproto.string_field(2)
    unit: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    data_type: "__common_type_v1__.ChannelDataType" = betterproto.enum_field(5)
    enum_types: List["__common_type_v1__.ChannelEnumType"] = betterproto.message_field(
        6
    )
    bit_field_elements: List["__common_type_v1__.ChannelBitFieldElement"] = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class GetIngestionConfigRequest(betterproto.Message):
    """
    The request for a call to `IngestionConfigService_GetIngestionConfig` to retrieve an ingestion config.
    """

    ingestion_config_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetIngestionConfigResponse(betterproto.Message):
    """The result of a call to `IngestionConfigService_GetIngestionConfig`."""

    ingestion_config: "IngestionConfig" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateIngestionConfigRequest(betterproto.Message):
    """
    The request for a call to `IngestionConfigService_ListIngestionConfigs` to retrieve ingestion configs.
    """

    asset_name: str = betterproto.string_field(1)
    flows: List["FlowConfig"] = betterproto.message_field(2)
    organization_id: str = betterproto.string_field(3)
    client_key: str = betterproto.string_field(4)
    """
    The `client_key` field is a user-defined string you can supply to uniquely identify
     an ingestion config (and retrieve it via `GetIngestionConfig`).
     An error is returned if you try to create an ingestion config with a
     client_key that already exists.
    """


@dataclass(eq=False, repr=False)
class CreateIngestionConfigResponse(betterproto.Message):
    """
    The result of a call to `IngestionConfigService_CreateIngestionConfig`.
    """

    ingestion_config: "IngestionConfig" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListIngestionConfigsRequest(betterproto.Message):
    """
    The request for a call to `IngestionConfigService_ListIngestionConfigs` to retrieve ingestion configs.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of ingestion configs to return. The service may return fewer than this value.
     If unspecified, at most 50 ingestion configs will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListIngestionConfigs` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListIngestionConfigs` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `ingestion_config_id`, `client_key`, `asset_id`, `created_date`, and `modified_date`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/ingestion_configs#ingestionconfigservice). Optional.
    """


@dataclass(eq=False, repr=False)
class ListIngestionConfigsResponse(betterproto.Message):
    """
    The result of a call to `IngestionConfigService_ListIngestionConfigs`.
    """

    ingestion_configs: List["IngestionConfig"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateIngestionConfigFlowsRequest(betterproto.Message):
    """
    The request for a call to `IngestionConfigService_CreateIngestionConfigFlows` to create ingestion config flows.
    """

    ingestion_config_id: str = betterproto.string_field(1)
    flows: List["FlowConfig"] = betterproto.message_field(2)
    """
    These flows must have unique names. If you try to send a flow with a name that already exists for an ingestion config, it will return an error.
    """


@dataclass(eq=False, repr=False)
class CreateIngestionConfigFlowsResponse(betterproto.Message):
    """
    The result of a call to `IngestionConfigService_CreateIngestionConfigFlows`.
    """

    pass


@dataclass(eq=False, repr=False)
class ListIngestionConfigFlowsRequest(betterproto.Message):
    """
    The request for a call to `IngestionConfigService_ListIngestionConfigFlows` to retrieve ingestion config flows.
    """

    ingestion_config_id: str = betterproto.string_field(1)
    page_size: int = betterproto.uint32_field(2)
    """
    The maximum number of ingestion config flows to return. The service may return fewer than this value.
     If unspecified, at most 50 ingestion config flows will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(3)
    """
    A page token, received from a previous `ListIngestionConfigFlows` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListIngestionConfigFlows` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(4)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `flow_name`, `flow_id`, `created_date`, and `modified_date`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/ingestion_configs#ingestionconfig). Optional.
    """


@dataclass(eq=False, repr=False)
class ListIngestionConfigFlowsResponse(betterproto.Message):
    """
    The result of a call to `IngestionConfigService_ListIngestionConfigFlows`.
    """

    flows: List["FlowConfig"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


class IngestionConfigServiceStub(betterproto.ServiceStub):
    async def get_ingestion_config(
        self,
        get_ingestion_config_request: "GetIngestionConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetIngestionConfigResponse":
        return await self._unary_unary(
            "/sift.ingestion_configs.v1.IngestionConfigService/GetIngestionConfig",
            get_ingestion_config_request,
            GetIngestionConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_ingestion_config(
        self,
        create_ingestion_config_request: "CreateIngestionConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateIngestionConfigResponse":
        return await self._unary_unary(
            "/sift.ingestion_configs.v1.IngestionConfigService/CreateIngestionConfig",
            create_ingestion_config_request,
            CreateIngestionConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_ingestion_configs(
        self,
        list_ingestion_configs_request: "ListIngestionConfigsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListIngestionConfigsResponse":
        return await self._unary_unary(
            "/sift.ingestion_configs.v1.IngestionConfigService/ListIngestionConfigs",
            list_ingestion_configs_request,
            ListIngestionConfigsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_ingestion_config_flows(
        self,
        create_ingestion_config_flows_request: "CreateIngestionConfigFlowsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateIngestionConfigFlowsResponse":
        return await self._unary_unary(
            "/sift.ingestion_configs.v1.IngestionConfigService/CreateIngestionConfigFlows",
            create_ingestion_config_flows_request,
            CreateIngestionConfigFlowsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_ingestion_config_flows(
        self,
        list_ingestion_config_flows_request: "ListIngestionConfigFlowsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListIngestionConfigFlowsResponse":
        return await self._unary_unary(
            "/sift.ingestion_configs.v1.IngestionConfigService/ListIngestionConfigFlows",
            list_ingestion_config_flows_request,
            ListIngestionConfigFlowsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class IngestionConfigServiceBase(ServiceBase):

    async def get_ingestion_config(
        self, get_ingestion_config_request: "GetIngestionConfigRequest"
    ) -> "GetIngestionConfigResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_ingestion_config(
        self, create_ingestion_config_request: "CreateIngestionConfigRequest"
    ) -> "CreateIngestionConfigResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_ingestion_configs(
        self, list_ingestion_configs_request: "ListIngestionConfigsRequest"
    ) -> "ListIngestionConfigsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_ingestion_config_flows(
        self, create_ingestion_config_flows_request: "CreateIngestionConfigFlowsRequest"
    ) -> "CreateIngestionConfigFlowsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_ingestion_config_flows(
        self, list_ingestion_config_flows_request: "ListIngestionConfigFlowsRequest"
    ) -> "ListIngestionConfigFlowsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ingestion_config(
        self,
        stream: "grpclib.server.Stream[GetIngestionConfigRequest, GetIngestionConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ingestion_config(request)
        await stream.send_message(response)

    async def __rpc_create_ingestion_config(
        self,
        stream: "grpclib.server.Stream[CreateIngestionConfigRequest, CreateIngestionConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_ingestion_config(request)
        await stream.send_message(response)

    async def __rpc_list_ingestion_configs(
        self,
        stream: "grpclib.server.Stream[ListIngestionConfigsRequest, ListIngestionConfigsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_ingestion_configs(request)
        await stream.send_message(response)

    async def __rpc_create_ingestion_config_flows(
        self,
        stream: "grpclib.server.Stream[CreateIngestionConfigFlowsRequest, CreateIngestionConfigFlowsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_ingestion_config_flows(request)
        await stream.send_message(response)

    async def __rpc_list_ingestion_config_flows(
        self,
        stream: "grpclib.server.Stream[ListIngestionConfigFlowsRequest, ListIngestionConfigFlowsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_ingestion_config_flows(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.ingestion_configs.v1.IngestionConfigService/GetIngestionConfig": grpclib.const.Handler(
                self.__rpc_get_ingestion_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetIngestionConfigRequest,
                GetIngestionConfigResponse,
            ),
            "/sift.ingestion_configs.v1.IngestionConfigService/CreateIngestionConfig": grpclib.const.Handler(
                self.__rpc_create_ingestion_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateIngestionConfigRequest,
                CreateIngestionConfigResponse,
            ),
            "/sift.ingestion_configs.v1.IngestionConfigService/ListIngestionConfigs": grpclib.const.Handler(
                self.__rpc_list_ingestion_configs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListIngestionConfigsRequest,
                ListIngestionConfigsResponse,
            ),
            "/sift.ingestion_configs.v1.IngestionConfigService/CreateIngestionConfigFlows": grpclib.const.Handler(
                self.__rpc_create_ingestion_config_flows,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateIngestionConfigFlowsRequest,
                CreateIngestionConfigFlowsResponse,
            ),
            "/sift.ingestion_configs.v1.IngestionConfigService/ListIngestionConfigFlows": grpclib.const.Handler(
                self.__rpc_list_ingestion_config_flows,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListIngestionConfigFlowsRequest,
                ListIngestionConfigFlowsResponse,
            ),
        }
