# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/remote_files/v1/remote_files.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class EntityType(betterproto.Enum):
    UNSPECIFIED = 0
    RUN = 1
    ANNOTATION = 2
    ASSET = 3
    ANNOTATION_LOG = 4


@dataclass(eq=False, repr=False)
class RemoteFile(betterproto.Message):
    remote_file_id: str = betterproto.string_field(1)
    organization_id: str = betterproto.string_field(2)
    entity_id: str = betterproto.string_field(3)
    entity_type: "EntityType" = betterproto.enum_field(4)
    file_name: str = betterproto.string_field(5)
    file_mime_type: str = betterproto.string_field(6)
    file_content_encoding: str = betterproto.string_field(7)
    storage_key: str = betterproto.string_field(8)
    file_size: int = betterproto.uint64_field(9)
    description: Optional[str] = betterproto.string_field(10, optional=True)
    video_metadata: "VideoMetadata" = betterproto.message_field(11, group="metadata")
    image_metadata: "ImageMetadata" = betterproto.message_field(12, group="metadata")
    audio_metadata: "AudioMetadata" = betterproto.message_field(17, group="metadata")
    created_by_user_id: str = betterproto.string_field(13)
    modified_by_user_id: str = betterproto.string_field(14)
    created_date: datetime = betterproto.message_field(15)
    modified_date: datetime = betterproto.message_field(16)


@dataclass(eq=False, repr=False)
class VideoMetadata(betterproto.Message):
    height: int = betterproto.uint32_field(1)
    width: int = betterproto.uint32_field(2)
    duration_seconds: float = betterproto.float_field(3)
    timestamp: datetime = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ImageMetadata(betterproto.Message):
    height: int = betterproto.uint32_field(1)
    width: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AudioMetadata(betterproto.Message):
    duration_seconds: float = betterproto.float_field(1)
    timestamp: datetime = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetRemoteFileRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_GetRemoteFile` to retrieve a remote file;
    """

    remote_file_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetRemoteFileResponse(betterproto.Message):
    """The response of a call to `RemoteFileService_GetRemoteFile`."""

    remote_file: "RemoteFile" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListRemoteFilesRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_ListRemoteFiles` to retrieve remote files.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of remote files to return. The service may return fewer than this value.
     If unspecified, at most 50 remote files will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListRemoteFiles` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListRemoteFiles` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `remote_file_id`, `entity_id`, `entity_type`, and `file_name`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/remote_files#remotefile). Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    This field is only required if your user belongs to multiple organizations.
    """


@dataclass(eq=False, repr=False)
class ListRemoteFilesResponse(betterproto.Message):
    """
    The response of a call to `RemoteFileService_ListRemoteFilesResponse`.
    """

    remote_files: List["RemoteFile"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateRemoteFileRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_CreateRemoteFile` to create a remote file.
    """

    file_name: str = betterproto.string_field(1)
    entity_id: str = betterproto.string_field(2)
    entity_type: "EntityType" = betterproto.enum_field(3)
    file_mime_type: str = betterproto.string_field(4)
    file_content_encoding: str = betterproto.string_field(5)
    file_size: int = betterproto.uint64_field(6)
    description: Optional[str] = betterproto.string_field(7, optional=True)
    organization_id: str = betterproto.string_field(8)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    video_metadata: "VideoMetadata" = betterproto.message_field(9, group="metadata")
    image_metadata: "ImageMetadata" = betterproto.message_field(10, group="metadata")
    audio_metadata: "AudioMetadata" = betterproto.message_field(12, group="metadata")
    custom_uuid: Optional[str] = betterproto.string_field(11, optional=True)
    """
    A custom UUID used to generate the object key. Recommended to be left unset.
    """


@dataclass(eq=False, repr=False)
class CreateRemoteFileResponse(betterproto.Message):
    """The response for a call to `RemoteFileService_CreateRemoteFile`."""

    remote_file: "RemoteFile" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteRemoteFileRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_DeleteRemoteFile` to delete a remote file.
    """

    remote_file_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteRemoteFileResponse(betterproto.Message):
    """The response of a call to `RemoteFileService_DeleteRemoteFile`."""

    pass


@dataclass(eq=False, repr=False)
class BatchDeleteRemoteFilesRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_BatchDeleteRemoteFiles` to delete remote files.
    """

    remote_file_ids: List[str] = betterproto.string_field(1)
    """Up to 1000 remote file IDs can be provided per request."""


@dataclass(eq=False, repr=False)
class BatchDeleteRemoteFilesResponse(betterproto.Message):
    """
    The response of a call to `RemoteFileService_BatchDeleteRemoteFiles`.
    """

    pass


@dataclass(eq=False, repr=False)
class UpdateRemoteFileRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_UpdateRemoteFile` to update a remote file.
    """

    remote_file: "RemoteFile" = betterproto.message_field(1)
    """The remote file to update."""

    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )
    """
    The list of fields to be updated. The fields available to be updated are `description` and `metadata`.
    """


@dataclass(eq=False, repr=False)
class UpdateRemoteFileResponse(betterproto.Message):
    """The response of a call to `RemoteFileService_UpdateRemoteFile`."""

    remote_file: "RemoteFile" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRemoteFileDownloadUrlRequest(betterproto.Message):
    """
    The request for a call to `RemoteFileService_GetRemoteFileDownloadUrl`.
    """

    remote_file_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetRemoteFileDownloadUrlResponse(betterproto.Message):
    """
    The response of a call to `RemoteFileService_GetRemoteFileDownloadUrl`.
    """

    download_url: str = betterproto.string_field(1)


class RemoteFileServiceStub(betterproto.ServiceStub):
    async def get_remote_file(
        self,
        get_remote_file_request: "GetRemoteFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRemoteFileResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFile",
            get_remote_file_request,
            GetRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_remote_file(
        self,
        create_remote_file_request: "CreateRemoteFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateRemoteFileResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/CreateRemoteFile",
            create_remote_file_request,
            CreateRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_remote_files(
        self,
        list_remote_files_request: "ListRemoteFilesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListRemoteFilesResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/ListRemoteFiles",
            list_remote_files_request,
            ListRemoteFilesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_remote_file(
        self,
        update_remote_file_request: "UpdateRemoteFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateRemoteFileResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/UpdateRemoteFile",
            update_remote_file_request,
            UpdateRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_remote_file(
        self,
        delete_remote_file_request: "DeleteRemoteFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteRemoteFileResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/DeleteRemoteFile",
            delete_remote_file_request,
            DeleteRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_delete_remote_files(
        self,
        batch_delete_remote_files_request: "BatchDeleteRemoteFilesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BatchDeleteRemoteFilesResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/BatchDeleteRemoteFiles",
            batch_delete_remote_files_request,
            BatchDeleteRemoteFilesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_remote_file_download_url(
        self,
        get_remote_file_download_url_request: "GetRemoteFileDownloadUrlRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRemoteFileDownloadUrlResponse":
        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFileDownloadUrl",
            get_remote_file_download_url_request,
            GetRemoteFileDownloadUrlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class RemoteFileServiceBase(ServiceBase):

    async def get_remote_file(
        self, get_remote_file_request: "GetRemoteFileRequest"
    ) -> "GetRemoteFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_remote_file(
        self, create_remote_file_request: "CreateRemoteFileRequest"
    ) -> "CreateRemoteFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_remote_files(
        self, list_remote_files_request: "ListRemoteFilesRequest"
    ) -> "ListRemoteFilesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_remote_file(
        self, update_remote_file_request: "UpdateRemoteFileRequest"
    ) -> "UpdateRemoteFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_remote_file(
        self, delete_remote_file_request: "DeleteRemoteFileRequest"
    ) -> "DeleteRemoteFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_delete_remote_files(
        self, batch_delete_remote_files_request: "BatchDeleteRemoteFilesRequest"
    ) -> "BatchDeleteRemoteFilesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_remote_file_download_url(
        self, get_remote_file_download_url_request: "GetRemoteFileDownloadUrlRequest"
    ) -> "GetRemoteFileDownloadUrlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_remote_file(
        self,
        stream: "grpclib.server.Stream[GetRemoteFileRequest, GetRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_remote_file(request)
        await stream.send_message(response)

    async def __rpc_create_remote_file(
        self,
        stream: "grpclib.server.Stream[CreateRemoteFileRequest, CreateRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_remote_file(request)
        await stream.send_message(response)

    async def __rpc_list_remote_files(
        self,
        stream: "grpclib.server.Stream[ListRemoteFilesRequest, ListRemoteFilesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_remote_files(request)
        await stream.send_message(response)

    async def __rpc_update_remote_file(
        self,
        stream: "grpclib.server.Stream[UpdateRemoteFileRequest, UpdateRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_remote_file(request)
        await stream.send_message(response)

    async def __rpc_delete_remote_file(
        self,
        stream: "grpclib.server.Stream[DeleteRemoteFileRequest, DeleteRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_remote_file(request)
        await stream.send_message(response)

    async def __rpc_batch_delete_remote_files(
        self,
        stream: "grpclib.server.Stream[BatchDeleteRemoteFilesRequest, BatchDeleteRemoteFilesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_delete_remote_files(request)
        await stream.send_message(response)

    async def __rpc_get_remote_file_download_url(
        self,
        stream: "grpclib.server.Stream[GetRemoteFileDownloadUrlRequest, GetRemoteFileDownloadUrlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_remote_file_download_url(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFile": grpclib.const.Handler(
                self.__rpc_get_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRemoteFileRequest,
                GetRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/CreateRemoteFile": grpclib.const.Handler(
                self.__rpc_create_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRemoteFileRequest,
                CreateRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/ListRemoteFiles": grpclib.const.Handler(
                self.__rpc_list_remote_files,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRemoteFilesRequest,
                ListRemoteFilesResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/UpdateRemoteFile": grpclib.const.Handler(
                self.__rpc_update_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRemoteFileRequest,
                UpdateRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/DeleteRemoteFile": grpclib.const.Handler(
                self.__rpc_delete_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRemoteFileRequest,
                DeleteRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/BatchDeleteRemoteFiles": grpclib.const.Handler(
                self.__rpc_batch_delete_remote_files,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchDeleteRemoteFilesRequest,
                BatchDeleteRemoteFilesResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFileDownloadUrl": grpclib.const.Handler(
                self.__rpc_get_remote_file_download_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRemoteFileDownloadUrlRequest,
                GetRemoteFileDownloadUrlResponse,
            ),
        }
