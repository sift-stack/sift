# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/users/v2/users.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...common.type import v1 as __common_type_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class UpdateUserOrganizationActiveRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    organization_id: str = betterproto.string_field(2)
    active: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class UpdateUserOrganizationActiveResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto.Message):
    """
    The request for a call to retrieve a single existing user by its user_id.
    """

    user_id: str = betterproto.string_field(1)
    """The id of the asset to be retrieved. Required."""


@dataclass(eq=False, repr=False)
class GetUserResponse(betterproto.Message):
    user: "__common_type_v1__.User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListActiveUsersRequest(betterproto.Message):
    """
    The request for a call to `UserService_ListActiveUsers` to retrieve users.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of users to return. The service may return fewer than this value.
     If unspecified, at most 50 users will be returned. The maximum value is 1000; values above
     1000 will be coerced to 1000. Optional.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListActiveUsers` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListActiveUsers` must match
     the call that provided the page token. Optional.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `user_id` and `name`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/users#user). Optional.
    """

    organization_id: str = betterproto.string_field(4)
    """
    Optional. If provided, this will scope down the user search to just those in the organization ID provided.
    """

    order_by: str = betterproto.string_field(5)
    """
    How to order the retrieved users. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
     Available fields to order_by are:
     - created_date
     - modified_date
    """


@dataclass(eq=False, repr=False)
class ListActiveUsersResponse(betterproto.Message):
    """The response of a call to `UserService_ListActiveUsersResponse`."""

    users: List["__common_type_v1__.User"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


class UserServiceStub(betterproto.ServiceStub):
    async def update_user_organization_active(
        self,
        update_user_organization_active_request: "UpdateUserOrganizationActiveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateUserOrganizationActiveResponse":
        return await self._unary_unary(
            "/sift.users.v2.UserService/UpdateUserOrganizationActive",
            update_user_organization_active_request,
            UpdateUserOrganizationActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user(
        self,
        get_user_request: "GetUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUserResponse":
        return await self._unary_unary(
            "/sift.users.v2.UserService/GetUser",
            get_user_request,
            GetUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_active_users(
        self,
        list_active_users_request: "ListActiveUsersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListActiveUsersResponse":
        return await self._unary_unary(
            "/sift.users.v2.UserService/ListActiveUsers",
            list_active_users_request,
            ListActiveUsersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class UserServiceBase(ServiceBase):

    async def update_user_organization_active(
        self,
        update_user_organization_active_request: "UpdateUserOrganizationActiveRequest",
    ) -> "UpdateUserOrganizationActiveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user(self, get_user_request: "GetUserRequest") -> "GetUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_active_users(
        self, list_active_users_request: "ListActiveUsersRequest"
    ) -> "ListActiveUsersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_user_organization_active(
        self,
        stream: "grpclib.server.Stream[UpdateUserOrganizationActiveRequest, UpdateUserOrganizationActiveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_user_organization_active(request)
        await stream.send_message(response)

    async def __rpc_get_user(
        self, stream: "grpclib.server.Stream[GetUserRequest, GetUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_list_active_users(
        self,
        stream: "grpclib.server.Stream[ListActiveUsersRequest, ListActiveUsersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_active_users(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.users.v2.UserService/UpdateUserOrganizationActive": grpclib.const.Handler(
                self.__rpc_update_user_organization_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserOrganizationActiveRequest,
                UpdateUserOrganizationActiveResponse,
            ),
            "/sift.users.v2.UserService/GetUser": grpclib.const.Handler(
                self.__rpc_get_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserRequest,
                GetUserResponse,
            ),
            "/sift.users.v2.UserService/ListActiveUsers": grpclib.const.Handler(
                self.__rpc_list_active_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListActiveUsersRequest,
                ListActiveUsersResponse,
            ),
        }
