# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/tags/v2/tags.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Tag(betterproto.Message):
    tag_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    created_by_user_id: str = betterproto.string_field(3)
    created_date: datetime = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CreateTagRequest(betterproto.Message):
    """The request for a call to TagService.CreateTag."""

    name: str = betterproto.string_field(1)
    """
    The name for the new tag.
     If the tag already exists, an error is returned.
    """


@dataclass(eq=False, repr=False)
class CreateTagResponse(betterproto.Message):
    """The result of a call to TagService.CreateTag."""

    tag: "Tag" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListTagsRequest(betterproto.Message):
    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of tags to return.
     The service may return fewer than this value.
     If unspecified, at most 50 tags will be returned.
     The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListTags` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListTags` must match
     the call that provided the page token.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
     Available fields to filter by are 'name' and 'tag_id'.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#tag). Optional.
    """

    order_by: str = betterproto.string_field(4)
    """
    How to order the retrieved campaigns. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
     Available fields to order_by are `created_date` and `name`.
     If left empty, items are ordered by `created_date` in ascending order (oldest-first).
     For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
     Example: "created_date desc,name"
    """


@dataclass(eq=False, repr=False)
class ListTagsResponse(betterproto.Message):
    tags: List["Tag"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)
    """
    A token, which can be sent as `page_token` to retrieve the next page.
     If this field is empty, there are no subsequent pages.
    """


class TagServiceStub(betterproto.ServiceStub):
    async def create_tag(
        self,
        create_tag_request: "CreateTagRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateTagResponse":
        return await self._unary_unary(
            "/sift.tags.v2.TagService/CreateTag",
            create_tag_request,
            CreateTagResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_tags(
        self,
        list_tags_request: "ListTagsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListTagsResponse":
        return await self._unary_unary(
            "/sift.tags.v2.TagService/ListTags",
            list_tags_request,
            ListTagsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TagServiceBase(ServiceBase):

    async def create_tag(
        self, create_tag_request: "CreateTagRequest"
    ) -> "CreateTagResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_tags(
        self, list_tags_request: "ListTagsRequest"
    ) -> "ListTagsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_tag(
        self, stream: "grpclib.server.Stream[CreateTagRequest, CreateTagResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_tag(request)
        await stream.send_message(response)

    async def __rpc_list_tags(
        self, stream: "grpclib.server.Stream[ListTagsRequest, ListTagsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_tags(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.tags.v2.TagService/CreateTag": grpclib.const.Handler(
                self.__rpc_create_tag,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTagRequest,
                CreateTagResponse,
            ),
            "/sift.tags.v2.TagService/ListTags": grpclib.const.Handler(
                self.__rpc_list_tags,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListTagsRequest,
                ListTagsResponse,
            ),
        }
