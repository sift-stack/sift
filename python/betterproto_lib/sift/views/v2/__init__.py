# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/views/v2/views.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class View(betterproto.Message):
    view_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    axis_groups: "ViewAxisGroups" = betterproto.message_field(3)
    channels: List["ViewChannel"] = betterproto.message_field(4)
    created_date: datetime = betterproto.message_field(5)
    modified_date: datetime = betterproto.message_field(6)
    created_by_user_id: str = betterproto.string_field(7)
    modified_by_user_id: str = betterproto.string_field(8)
    is_pinned: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class ViewAxisGroups(betterproto.Message):
    left: List[str] = betterproto.string_field(1)
    right: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ViewChannel(betterproto.Message):
    name: str = betterproto.string_field(1)
    data_type: str = betterproto.string_field(2)
    axis_group: str = betterproto.string_field(3)
    bit_field_names: List[str] = betterproto.string_field(4)
    calculated_channel_config: Optional["ViewChannelCalculatedChannelConfig"] = (
        betterproto.message_field(5, optional=True)
    )


@dataclass(eq=False, repr=False)
class ViewChannelCalculatedChannelConfig(betterproto.Message):
    channel_key: str = betterproto.string_field(1)
    channel_references: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    expression: str = betterproto.string_field(3)
    unit: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetViewRequest(betterproto.Message):
    view_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetViewResponse(betterproto.Message):
    view: "View" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateViewRequest(betterproto.Message):
    view: "View" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateViewResponse(betterproto.Message):
    view: "View" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateViewRequest(betterproto.Message):
    view: "View" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )
    """The list of fields to update."""


@dataclass(eq=False, repr=False)
class UpdateViewResponse(betterproto.Message):
    view: "View" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListViewsRequest(betterproto.Message):
    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of views to return.
     The service may return fewer than this value.
     If unspecified, at most 50 views will be returned.
     The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListViews` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListViews` must match
     the call that provided the page token.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
     Available fields to filter by are 'name', 'createdDate', and 'modifiedDate'.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/views#view). Optional.
    """


@dataclass(eq=False, repr=False)
class ListViewsResponse(betterproto.Message):
    views: List["View"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)
    """
    A token, which can be sent as `page_token` to retrieve the next page.
     If this field is omitted, there are no subsequent pages.
    """


@dataclass(eq=False, repr=False)
class ListApplicableViewsRequest(betterproto.Message):
    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of views to return.
     The service may return fewer than this value.
     If unspecified, at most 50 views will be returned.
     The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListApplicableViews` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListApplicableViews` must match
     the call that provided the page token.
    """

    asset_ids: List[str] = betterproto.string_field(3)
    run_ids: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ListApplicableViewsResponse(betterproto.Message):
    views: List["View"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)
    """
    A token, which can be sent as `page_token` to retrieve the next page.
     If this field is omitted, there are no subsequent pages.
    """


@dataclass(eq=False, repr=False)
class DeleteViewRequest(betterproto.Message):
    view_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteViewResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PinViewRequest(betterproto.Message):
    view_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PinViewResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UnpinViewRequest(betterproto.Message):
    view_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UnpinViewResponse(betterproto.Message):
    pass


class ViewServiceStub(betterproto.ServiceStub):
    async def get_view(
        self,
        get_view_request: "GetViewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetViewResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/GetView",
            get_view_request,
            GetViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_view(
        self,
        create_view_request: "CreateViewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateViewResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/CreateView",
            create_view_request,
            CreateViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_view(
        self,
        update_view_request: "UpdateViewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateViewResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/UpdateView",
            update_view_request,
            UpdateViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_views(
        self,
        list_views_request: "ListViewsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListViewsResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/ListViews",
            list_views_request,
            ListViewsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_applicable_views(
        self,
        list_applicable_views_request: "ListApplicableViewsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListApplicableViewsResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/ListApplicableViews",
            list_applicable_views_request,
            ListApplicableViewsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_view(
        self,
        delete_view_request: "DeleteViewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteViewResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/DeleteView",
            delete_view_request,
            DeleteViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pin_view(
        self,
        pin_view_request: "PinViewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PinViewResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/PinView",
            pin_view_request,
            PinViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unpin_view(
        self,
        unpin_view_request: "UnpinViewRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UnpinViewResponse":
        return await self._unary_unary(
            "/sift.views.v2.ViewService/UnpinView",
            unpin_view_request,
            UnpinViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ViewServiceBase(ServiceBase):

    async def get_view(self, get_view_request: "GetViewRequest") -> "GetViewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_view(
        self, create_view_request: "CreateViewRequest"
    ) -> "CreateViewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_view(
        self, update_view_request: "UpdateViewRequest"
    ) -> "UpdateViewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_views(
        self, list_views_request: "ListViewsRequest"
    ) -> "ListViewsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_applicable_views(
        self, list_applicable_views_request: "ListApplicableViewsRequest"
    ) -> "ListApplicableViewsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_view(
        self, delete_view_request: "DeleteViewRequest"
    ) -> "DeleteViewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pin_view(self, pin_view_request: "PinViewRequest") -> "PinViewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unpin_view(
        self, unpin_view_request: "UnpinViewRequest"
    ) -> "UnpinViewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_view(
        self, stream: "grpclib.server.Stream[GetViewRequest, GetViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_view(request)
        await stream.send_message(response)

    async def __rpc_create_view(
        self, stream: "grpclib.server.Stream[CreateViewRequest, CreateViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_view(request)
        await stream.send_message(response)

    async def __rpc_update_view(
        self, stream: "grpclib.server.Stream[UpdateViewRequest, UpdateViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_view(request)
        await stream.send_message(response)

    async def __rpc_list_views(
        self, stream: "grpclib.server.Stream[ListViewsRequest, ListViewsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_views(request)
        await stream.send_message(response)

    async def __rpc_list_applicable_views(
        self,
        stream: "grpclib.server.Stream[ListApplicableViewsRequest, ListApplicableViewsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_applicable_views(request)
        await stream.send_message(response)

    async def __rpc_delete_view(
        self, stream: "grpclib.server.Stream[DeleteViewRequest, DeleteViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_view(request)
        await stream.send_message(response)

    async def __rpc_pin_view(
        self, stream: "grpclib.server.Stream[PinViewRequest, PinViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pin_view(request)
        await stream.send_message(response)

    async def __rpc_unpin_view(
        self, stream: "grpclib.server.Stream[UnpinViewRequest, UnpinViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unpin_view(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.views.v2.ViewService/GetView": grpclib.const.Handler(
                self.__rpc_get_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetViewRequest,
                GetViewResponse,
            ),
            "/sift.views.v2.ViewService/CreateView": grpclib.const.Handler(
                self.__rpc_create_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateViewRequest,
                CreateViewResponse,
            ),
            "/sift.views.v2.ViewService/UpdateView": grpclib.const.Handler(
                self.__rpc_update_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateViewRequest,
                UpdateViewResponse,
            ),
            "/sift.views.v2.ViewService/ListViews": grpclib.const.Handler(
                self.__rpc_list_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListViewsRequest,
                ListViewsResponse,
            ),
            "/sift.views.v2.ViewService/ListApplicableViews": grpclib.const.Handler(
                self.__rpc_list_applicable_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListApplicableViewsRequest,
                ListApplicableViewsResponse,
            ),
            "/sift.views.v2.ViewService/DeleteView": grpclib.const.Handler(
                self.__rpc_delete_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteViewRequest,
                DeleteViewResponse,
            ),
            "/sift.views.v2.ViewService/PinView": grpclib.const.Handler(
                self.__rpc_pin_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                PinViewRequest,
                PinViewResponse,
            ),
            "/sift.views.v2.ViewService/UnpinView": grpclib.const.Handler(
                self.__rpc_unpin_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnpinViewRequest,
                UnpinViewResponse,
            ),
        }
