# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/notifications/v1/notifications.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class NotificationKind(betterproto.Enum):
    UNSPECIFIED = 0
    TEXT = 1
    ANNOTATION_ASSIGNED = 2
    MENTIONED_IN_ANNOTATION_COMMENT = 3
    CONDITION_TRIGGERED = 4
    ANNOTATION_STATE_CHANGED = 5
    REPORT_READY = 6


@dataclass(eq=False, repr=False)
class Notification(betterproto.Message):
    notification_id: str = betterproto.string_field(1)
    created_date: datetime = betterproto.message_field(2)
    modified_date: datetime = betterproto.message_field(3)
    created_by_user_id: str = betterproto.string_field(4)
    modified_by_user_id: str = betterproto.string_field(5)
    organization_id: str = betterproto.string_field(6)
    recipient_user_id: str = betterproto.string_field(7)
    is_read: bool = betterproto.bool_field(8)
    full_link: str = betterproto.string_field(9)
    notification_type: "NotificationKind" = betterproto.enum_field(10)
    contents: str = betterproto.string_field(11)
    entity_id: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class ListNotificationsRequest(betterproto.Message):
    """
    The request for a call to `NotificationService_ListNotifications` to retrieve notifications.
    """

    page_size: int = betterproto.uint32_field(1)
    """
    The maximum number of notifications to return.
     The service may return fewer than this value.
     If unspecified, at most 50 notifications will be returned.
     The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: str = betterproto.string_field(2)
    """
    A page token, received from a previous `ListNotifications` call.
     Provide this to retrieve the subsequent page.
     When paginating, all other parameters provided to `ListNotifications` must match
     the call that provided the page token.
    """

    filter: str = betterproto.string_field(3)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
     Available fields to filter by are `notification_id`, `created_by_user_id`, `recipient_user_id`,
     `created_date`, `notification_type`, and `is_read`.
     For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
     For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/notifications#notification). Optional.
    """


@dataclass(eq=False, repr=False)
class ListNotificationsResponse(betterproto.Message):
    """The response of a call to `NotificationService_ListNotifications`."""

    notifications: List["Notification"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BatchUpdateNotificationsRequest(betterproto.Message):
    """
    The request for a call to `NotificationService_BatchUpdateNotifications` to update notifications.
     A maximum of 1000 notifications can be modified in a batch.
    """

    requests: List["UpdateNotificationRequest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateNotificationRequest(betterproto.Message):
    notification: "Notification" = betterproto.message_field(1)
    """
    The notification to update. The notification's `notification_id` field is used to identify the notification to update
     and must be provided.
    """

    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )
    """
    The list of fields to be updated. Currently, the only field that can be updated is `is_read`.
    """


@dataclass(eq=False, repr=False)
class BatchUpdateNotificationsResponse(betterproto.Message):
    """
    The response of a call to `NotificationService_BatchUpdateNotifications` containing the updated notifications.
    """

    notifications: List["Notification"] = betterproto.message_field(1)
    """The updated notifications."""


class NotificationServiceStub(betterproto.ServiceStub):
    async def list_notifications(
        self,
        list_notifications_request: "ListNotificationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListNotificationsResponse":
        return await self._unary_unary(
            "/sift.notifications.v1.NotificationService/ListNotifications",
            list_notifications_request,
            ListNotificationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_update_notifications(
        self,
        batch_update_notifications_request: "BatchUpdateNotificationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BatchUpdateNotificationsResponse":
        return await self._unary_unary(
            "/sift.notifications.v1.NotificationService/BatchUpdateNotifications",
            batch_update_notifications_request,
            BatchUpdateNotificationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class NotificationServiceBase(ServiceBase):

    async def list_notifications(
        self, list_notifications_request: "ListNotificationsRequest"
    ) -> "ListNotificationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_update_notifications(
        self, batch_update_notifications_request: "BatchUpdateNotificationsRequest"
    ) -> "BatchUpdateNotificationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_notifications(
        self,
        stream: "grpclib.server.Stream[ListNotificationsRequest, ListNotificationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_notifications(request)
        await stream.send_message(response)

    async def __rpc_batch_update_notifications(
        self,
        stream: "grpclib.server.Stream[BatchUpdateNotificationsRequest, BatchUpdateNotificationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_update_notifications(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/sift.notifications.v1.NotificationService/ListNotifications": grpclib.const.Handler(
                self.__rpc_list_notifications,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListNotificationsRequest,
                ListNotificationsResponse,
            ),
            "/sift.notifications.v1.NotificationService/BatchUpdateNotifications": grpclib.const.Handler(
                self.__rpc_batch_update_notifications,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchUpdateNotificationsRequest,
                BatchUpdateNotificationsResponse,
            ),
        }
