# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/runs/v2/runs.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CreateAutomaticRunAssociationForAssetsRequest",
    "CreateAutomaticRunAssociationForAssetsResponse",
    "CreateRunRequest",
    "CreateRunResponse",
    "DeleteRunRequest",
    "DeleteRunResponse",
    "GetRunRequest",
    "GetRunResponse",
    "ListRunsRequest",
    "ListRunsResponse",
    "Run",
    "StopRunRequest",
    "StopRunResponse",
    "UpdateRunRequest",
    "UpdateRunResponse",
    "RunServiceStub",
    "RunServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class CreateAutomaticRunAssociationForAssetsRequest(betterproto2.Message):
    run_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the run to associate the asset with.
    """

    asset_names: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of asset names to automatically associate with the run.
    Any data that is received for these assets will automatically added to the run.
    This applies even if the run has concluded, so long as the new data contains
    timestamps that are between the `start_time` and `stop_time`.
    If any of the assets are already associated with a different run whose run
    period (the period between `start_time` and `end_time`) overlaps with the
    requested run period, an error will be returned.
    """


default_message_pool.register_message(
    "sift.runs.v2",
    "CreateAutomaticRunAssociationForAssetsRequest",
    CreateAutomaticRunAssociationForAssetsRequest,
)


@dataclass(eq=False, repr=False)
class CreateAutomaticRunAssociationForAssetsResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.runs.v2",
    "CreateAutomaticRunAssociationForAssetsResponse",
    CreateAutomaticRunAssociationForAssetsResponse,
)


@dataclass(eq=False, repr=False)
class CreateRunRequest(betterproto2.Message):
    """
    The request of a call to `RunService_CreateRuns` to create a new run.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name that will be assigned to the new run.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A description about the new run.
    """

    tags: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    Tags to associate with the new run.
    """

    start_time: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The time at which data ingestion begins for this new run. It must be before the `stop_time`, and it must
    be provided if a `stop_time` is provided.
    Important note: `start_time` will be automatically computed during data ingestion and will be set
    based on the timestamp of the data for this run.
    """

    stop_time: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The time at which data ingestion for this new run concludes.
    Important note: `stop_time` will be automatically computed during data ingestion and will be
    set based on the timestamp of the data for this run.
    """

    organization_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    An organization ID is only required if the user belongs to multiple organizations.
    """

    client_key: "str | None" = betterproto2.field(
        8, betterproto2.TYPE_STRING, optional=True
    )
    """
    An arbitrary user-chosen key that uniquely identifies this run. Optional, though it is recommended to provide.
    """


default_message_pool.register_message(
    "sift.runs.v2", "CreateRunRequest", CreateRunRequest
)


@dataclass(eq=False, repr=False)
class CreateRunResponse(betterproto2.Message):
    """
    The response of a call to `RunService_CreateRuns` containing the newly created run.
    """

    run: "Run | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message(
    "sift.runs.v2", "CreateRunResponse", CreateRunResponse
)


@dataclass(eq=False, repr=False)
class DeleteRunRequest(betterproto2.Message):
    """
    The request for a call to `RunService_DeleteRun`.
    """

    run_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.runs.v2", "DeleteRunRequest", DeleteRunRequest
)


@dataclass(eq=False, repr=False)
class DeleteRunResponse(betterproto2.Message):
    """
    The response of a call to `RunService_DeleteRun`.
    """

    pass


default_message_pool.register_message(
    "sift.runs.v2", "DeleteRunResponse", DeleteRunResponse
)


@dataclass(eq=False, repr=False)
class GetRunRequest(betterproto2.Message):
    """
    The request for a call to `RunService_GetRun` to retrieve run.
    """

    run_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the run to retrieve.
    """


default_message_pool.register_message("sift.runs.v2", "GetRunRequest", GetRunRequest)


@dataclass(eq=False, repr=False)
class GetRunResponse(betterproto2.Message):
    """
    The response of a call to `RunService_GetRun` containing the requested run.
    """

    run: "Run | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("sift.runs.v2", "GetRunResponse", GetRunResponse)


@dataclass(eq=False, repr=False)
class ListRunsRequest(betterproto2.Message):
    """
    The request for a call to `RunService_ListRuns` to retrieve runs.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of runs to return.
    The service may return fewer than this value.
    If unspecified, at most 50 runs will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListRuns` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListRuns` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `run_id`, `organization_id`, `name`, `description`, `created_by_user_id`, `modified_by_user_id`,
    `created_date`, `modified_date`, `start_time`, `stop_time`, `client_key`, `is_pinned`, `asset_id`, `client_key`, and `asset_name`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/runs#run). Optional.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    How to order the retrieved runs. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date`, `modified_date`, `start_time`, and `stop_time`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.runs.v2", "ListRunsRequest", ListRunsRequest
)


@dataclass(eq=False, repr=False)
class ListRunsResponse(betterproto2.Message):
    """
    The response of a call to `RunService_ListRuns` containing requested runs.
    """

    runs: "list[Run]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.runs.v2", "ListRunsResponse", ListRunsResponse
)


@dataclass(eq=False, repr=False)
class Run(betterproto2.Message):
    run_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    start_time: "datetime.datetime | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    stop_time: "datetime.datetime | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )

    is_pinned: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)

    name: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    tags: "list[str]" = betterproto2.field(12, betterproto2.TYPE_STRING, repeated=True)

    default_report_id: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    client_key: "str | None" = betterproto2.field(
        14, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message("sift.runs.v2", "Run", Run)


@dataclass(eq=False, repr=False)
class StopRunRequest(betterproto2.Message):
    """
    The request for a call to `RunService_StopRun` to stop a run.
    """

    run_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.runs.v2", "StopRunRequest", StopRunRequest)


@dataclass(eq=False, repr=False)
class StopRunResponse(betterproto2.Message):
    """
    The response of a call to `RunService_StopRun` to stop a run.
    """

    pass


default_message_pool.register_message(
    "sift.runs.v2", "StopRunResponse", StopRunResponse
)


@dataclass(eq=False, repr=False)
class UpdateRunRequest(betterproto2.Message):
    """
    The request for a call to `RunService_UpdateRun` to update an existing run.
    """

    run: "Run | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The run to update. The run's `run_id` field is used to identify the run to update
    and is required.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to be updated. The fields available to be updated are `name`, `description`,
    `start_time`, `stop_time`, `is_pinned`, `client_key`  and `tags`.
    Important Note: When updating the `start_time`, please be aware that if a subsequent data ingestion
    commences for this run, the `start_time` will be automatically overwritten and set to the timestamp
    corresponding to the beginning of the latest run. Additionally, `client_key` can only be set once either in run creation or in update.
    Any subsequent attempt to update `client_key` will result in an error.
    """


default_message_pool.register_message(
    "sift.runs.v2", "UpdateRunRequest", UpdateRunRequest
)


@dataclass(eq=False, repr=False)
class UpdateRunResponse(betterproto2.Message):
    """
    The response of a call to `RunService_UpdateRun` containing the updated run.
    """

    run: "Run | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message(
    "sift.runs.v2", "UpdateRunResponse", UpdateRunResponse
)


class RunServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_run(self, message: "GetRunRequest") -> "GetRunResponse":
        """
        Retrieve a run.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/GetRun",
            GetRunRequest.SerializeToString,
            GetRunResponse.FromString,
        )(message)

    def list_runs(self, message: "ListRunsRequest") -> "ListRunsResponse":
        """
        Retrieve runs using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/ListRuns",
            ListRunsRequest.SerializeToString,
            ListRunsResponse.FromString,
        )(message)

    def create_run(self, message: "CreateRunRequest") -> "CreateRunResponse":
        """
        Create a run.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/CreateRun",
            CreateRunRequest.SerializeToString,
            CreateRunResponse.FromString,
        )(message)

    def update_run(self, message: "UpdateRunRequest") -> "UpdateRunResponse":
        """
        Updates an existing run using using the list of fields specified in `update_mask`.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/UpdateRun",
            UpdateRunRequest.SerializeToString,
            UpdateRunResponse.FromString,
        )(message)

    def delete_run(self, message: "DeleteRunRequest") -> "DeleteRunResponse":
        """
        Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/DeleteRun",
            DeleteRunRequest.SerializeToString,
            DeleteRunResponse.FromString,
        )(message)

    def stop_run(self, message: "StopRunRequest") -> "StopRunResponse":
        """
        Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/StopRun",
            StopRunRequest.SerializeToString,
            StopRunResponse.FromString,
        )(message)

    def create_automatic_run_association_for_assets(
        self, message: "CreateAutomaticRunAssociationForAssetsRequest"
    ) -> "CreateAutomaticRunAssociationForAssetsResponse":
        """
        Associates a list of assets with a given run.
        """

        return self._channel.unary_unary(
            "/sift.runs.v2.RunService/CreateAutomaticRunAssociationForAssets",
            CreateAutomaticRunAssociationForAssetsRequest.SerializeToString,
            CreateAutomaticRunAssociationForAssetsResponse.FromString,
        )(message)


class RunServiceAsyncStub(betterproto2.ServiceStub):
    async def get_run(
        self,
        message: "GetRunRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetRunResponse":
        """
        Retrieve a run.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/GetRun",
            message,
            GetRunResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_runs(
        self,
        message: "ListRunsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListRunsResponse":
        """
        Retrieve runs using an optional filter.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/ListRuns",
            message,
            ListRunsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_run(
        self,
        message: "CreateRunRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateRunResponse":
        """
        Create a run.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/CreateRun",
            message,
            CreateRunResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_run(
        self,
        message: "UpdateRunRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateRunResponse":
        """
        Updates an existing run using using the list of fields specified in `update_mask`.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/UpdateRun",
            message,
            UpdateRunResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_run(
        self,
        message: "DeleteRunRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteRunResponse":
        """
        Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/DeleteRun",
            message,
            DeleteRunResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_run(
        self,
        message: "StopRunRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "StopRunResponse":
        """
        Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/StopRun",
            message,
            StopRunResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_automatic_run_association_for_assets(
        self,
        message: "CreateAutomaticRunAssociationForAssetsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateAutomaticRunAssociationForAssetsResponse":
        """
        Associates a list of assets with a given run.
        """

        return await self._unary_unary(
            "/sift.runs.v2.RunService/CreateAutomaticRunAssociationForAssets",
            message,
            CreateAutomaticRunAssociationForAssetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__


class RunServiceBase(ServiceBase):
    async def get_run(self, message: "GetRunRequest") -> "GetRunResponse":
        """
        Retrieve a run.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_runs(self, message: "ListRunsRequest") -> "ListRunsResponse":
        """
        Retrieve runs using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_run(self, message: "CreateRunRequest") -> "CreateRunResponse":
        """
        Create a run.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_run(self, message: "UpdateRunRequest") -> "UpdateRunResponse":
        """
        Updates an existing run using using the list of fields specified in `update_mask`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_run(self, message: "DeleteRunRequest") -> "DeleteRunResponse":
        """
        Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_run(self, message: "StopRunRequest") -> "StopRunResponse":
        """
        Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_automatic_run_association_for_assets(
        self, message: "CreateAutomaticRunAssociationForAssetsRequest"
    ) -> "CreateAutomaticRunAssociationForAssetsResponse":
        """
        Associates a list of assets with a given run.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_run(
        self, stream: "grpclib.server.Stream[GetRunRequest, GetRunResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_run(request)
        await stream.send_message(response)

    async def __rpc_list_runs(
        self, stream: "grpclib.server.Stream[ListRunsRequest, ListRunsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_runs(request)
        await stream.send_message(response)

    async def __rpc_create_run(
        self, stream: "grpclib.server.Stream[CreateRunRequest, CreateRunResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_run(request)
        await stream.send_message(response)

    async def __rpc_update_run(
        self, stream: "grpclib.server.Stream[UpdateRunRequest, UpdateRunResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_run(request)
        await stream.send_message(response)

    async def __rpc_delete_run(
        self, stream: "grpclib.server.Stream[DeleteRunRequest, DeleteRunResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_run(request)
        await stream.send_message(response)

    async def __rpc_stop_run(
        self, stream: "grpclib.server.Stream[StopRunRequest, StopRunResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_run(request)
        await stream.send_message(response)

    async def __rpc_create_automatic_run_association_for_assets(
        self,
        stream: "grpclib.server.Stream[CreateAutomaticRunAssociationForAssetsRequest, CreateAutomaticRunAssociationForAssetsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_automatic_run_association_for_assets(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.runs.v2.RunService/GetRun": grpclib.const.Handler(
                self.__rpc_get_run,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRunRequest,
                GetRunResponse,
            ),
            "/sift.runs.v2.RunService/ListRuns": grpclib.const.Handler(
                self.__rpc_list_runs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRunsRequest,
                ListRunsResponse,
            ),
            "/sift.runs.v2.RunService/CreateRun": grpclib.const.Handler(
                self.__rpc_create_run,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRunRequest,
                CreateRunResponse,
            ),
            "/sift.runs.v2.RunService/UpdateRun": grpclib.const.Handler(
                self.__rpc_update_run,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRunRequest,
                UpdateRunResponse,
            ),
            "/sift.runs.v2.RunService/DeleteRun": grpclib.const.Handler(
                self.__rpc_delete_run,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRunRequest,
                DeleteRunResponse,
            ),
            "/sift.runs.v2.RunService/StopRun": grpclib.const.Handler(
                self.__rpc_stop_run,
                grpclib.const.Cardinality.UNARY_UNARY,
                StopRunRequest,
                StopRunResponse,
            ),
            "/sift.runs.v2.RunService/CreateAutomaticRunAssociationForAssets": grpclib.const.Handler(
                self.__rpc_create_automatic_run_association_for_assets,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateAutomaticRunAssociationForAssetsRequest,
                CreateAutomaticRunAssociationForAssetsResponse,
            ),
        }
