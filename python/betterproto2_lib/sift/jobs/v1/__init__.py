# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/jobs/v1/jobs.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "JobStatus",
    "JobType",
    "CancelJobRequest",
    "CancelJobResponse",
    "Job",
    "ListJobsRequest",
    "ListJobsResponse",
    "JobServiceStub",
    "JobServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class JobStatus(betterproto2.Enum):
    UNSPECIFIED = 0

    CREATED = 1

    RUNNING = 2

    FINISHED = 3

    FAILED = 4

    CANCELLED = 5

    CANCEL_REQUESTED = 6


class JobType(betterproto2.Enum):
    UNSPECIFIED = 0

    RULE_EVALUATION = 1

    DATA_IMPORT = 2


@dataclass(eq=False, repr=False)
class CancelJobRequest(betterproto2.Message):
    job_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.jobs.v1", "CancelJobRequest", CancelJobRequest
)


@dataclass(eq=False, repr=False)
class CancelJobResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.jobs.v1", "CancelJobResponse", CancelJobResponse
)


@dataclass(eq=False, repr=False)
class Job(betterproto2.Message):
    job_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    created_by_user_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    started_date: "datetime.datetime | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )

    completed_date: "datetime.datetime | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )

    job_type: "JobType" = betterproto2.field(
        10, betterproto2.TYPE_ENUM, default_factory=lambda: JobType(0)
    )

    job_status: "JobStatus" = betterproto2.field(
        11, betterproto2.TYPE_ENUM, default_factory=lambda: JobStatus(0)
    )


default_message_pool.register_message("sift.jobs.v1", "Job", Job)


@dataclass(eq=False, repr=False)
class ListJobsRequest(betterproto2.Message):
    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of jobs to return. The service may return fewer than this value.
    If unspecified, at most 50 jobs will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListJobs` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListJobs` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are:
    `job_id`, `created_by_user_id`, `modified_by_user_id`, `created_date`, `modified_date`, `started_date`, `completed_date`
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to this definition. Optional.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    order_by: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    How to order the retrieved jobs. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date`, `modified_date`, `started_date`, `completed_date`, `job_status`.
    If left empty, items are ordered by `created_date` in descending order (newest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.jobs.v1", "ListJobsRequest", ListJobsRequest
)


@dataclass(eq=False, repr=False)
class ListJobsResponse(betterproto2.Message):
    jobs: "list[Job]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.jobs.v1", "ListJobsResponse", ListJobsResponse
)


class JobServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def list_jobs(self, message: "ListJobsRequest") -> "ListJobsResponse":
        """
        List jobs.
        """

        return self._channel.unary_unary(
            "/sift.jobs.v1.JobService/ListJobs",
            ListJobsRequest.SerializeToString,
            ListJobsResponse.FromString,
        )(message)

    def cancel_job(self, message: "CancelJobRequest") -> "CancelJobResponse":
        """
        Requests cancellation of an active job. If the job hasn't started yet, it will be cancelled immediately.
        Jobs that are already finished, failed, or cancelled are not affected.
        Cancelled jobs have implementation-based behavior, but in every case it's valid to cancel a job at any time.
        """

        return self._channel.unary_unary(
            "/sift.jobs.v1.JobService/CancelJob",
            CancelJobRequest.SerializeToString,
            CancelJobResponse.FromString,
        )(message)


class JobServiceAsyncStub(betterproto2.ServiceStub):
    async def list_jobs(
        self,
        message: "ListJobsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListJobsResponse":
        """
        List jobs.
        """

        return await self._unary_unary(
            "/sift.jobs.v1.JobService/ListJobs",
            message,
            ListJobsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_job(
        self,
        message: "CancelJobRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CancelJobResponse":
        """
        Requests cancellation of an active job. If the job hasn't started yet, it will be cancelled immediately.
        Jobs that are already finished, failed, or cancelled are not affected.
        Cancelled jobs have implementation-based behavior, but in every case it's valid to cancel a job at any time.
        """

        return await self._unary_unary(
            "/sift.jobs.v1.JobService/CancelJob",
            message,
            CancelJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class JobServiceBase(ServiceBase):
    async def list_jobs(self, message: "ListJobsRequest") -> "ListJobsResponse":
        """
        List jobs.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_job(self, message: "CancelJobRequest") -> "CancelJobResponse":
        """
        Requests cancellation of an active job. If the job hasn't started yet, it will be cancelled immediately.
        Jobs that are already finished, failed, or cancelled are not affected.
        Cancelled jobs have implementation-based behavior, but in every case it's valid to cancel a job at any time.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_jobs(
        self, stream: "grpclib.server.Stream[ListJobsRequest, ListJobsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_jobs(request)
        await stream.send_message(response)

    async def __rpc_cancel_job(
        self, stream: "grpclib.server.Stream[CancelJobRequest, CancelJobResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_job(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.jobs.v1.JobService/ListJobs": grpclib.const.Handler(
                self.__rpc_list_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListJobsRequest,
                ListJobsResponse,
            ),
            "/sift.jobs.v1.JobService/CancelJob": grpclib.const.Handler(
                self.__rpc_cancel_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelJobRequest,
                CancelJobResponse,
            ),
        }
