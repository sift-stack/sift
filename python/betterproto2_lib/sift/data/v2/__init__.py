# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/data/v2/data.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BitFieldElementValues",
    "BitFieldValue",
    "BitFieldValues",
    "BoolValue",
    "BoolValues",
    "CalculatedChannelQuery",
    "ChannelQuery",
    "DoubleValue",
    "DoubleValues",
    "EnumValue",
    "EnumValues",
    "FloatValue",
    "FloatValues",
    "GetDataRequest",
    "GetDataResponse",
    "Int32Value",
    "Int32Values",
    "Int64Value",
    "Int64Values",
    "Metadata",
    "MetadataAsset",
    "MetadataChannel",
    "MetadataChannelUnit",
    "MetadataRun",
    "Query",
    "StringValue",
    "StringValues",
    "Uint32Value",
    "Uint32Values",
    "Uint64Value",
    "Uint64Values",
    "DataServiceStub",
    "DataServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class BitFieldElementValues(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    values: "list[BitFieldValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.data.v2", "BitFieldElementValues", BitFieldElementValues
)


@dataclass(eq=False, repr=False)
class BitFieldValue(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)


default_message_pool.register_message("sift.data.v2", "BitFieldValue", BitFieldValue)


@dataclass(eq=False, repr=False)
class BitFieldValues(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[BitFieldElementValues]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "BitFieldValues", BitFieldValues)


@dataclass(eq=False, repr=False)
class BoolValue(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)


default_message_pool.register_message("sift.data.v2", "BoolValue", BoolValue)


@dataclass(eq=False, repr=False)
class BoolValues(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[BoolValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "BoolValues", BoolValues)


@dataclass(eq=False, repr=False)
class CalculatedChannelQuery(betterproto2.Message):
    channel_key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    expression: "__calculated_channels__v1__.ExpressionRequest | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )

    run_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    Optional.
    If set, only data for the specified run is returned
    If set to the empty string, only non-run data is returned.
    If unset, all run / non-run data is returned.
    """

    mode: "__calculated_channels__v1__.ExpressionMode | None" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Optional. If unset, will default to EXPRESSION_MODE_CALCULATED_CHANNELS.
    """


default_message_pool.register_message(
    "sift.data.v2", "CalculatedChannelQuery", CalculatedChannelQuery
)


@dataclass(eq=False, repr=False)
class ChannelQuery(betterproto2.Message):
    channel_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    channel_id is the uuid of the channel.
    """

    run_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Optional.
    If set, only data associated with the specified run is returned.
    If set to the empty string, only non-run data is returned.
    If unset, all run / non-run data is returned.
    """


default_message_pool.register_message("sift.data.v2", "ChannelQuery", ChannelQuery)


@dataclass(eq=False, repr=False)
class DoubleValue(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "float" = betterproto2.field(2, betterproto2.TYPE_DOUBLE)


default_message_pool.register_message("sift.data.v2", "DoubleValue", DoubleValue)


@dataclass(eq=False, repr=False)
class DoubleValues(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[DoubleValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "DoubleValues", DoubleValues)


@dataclass(eq=False, repr=False)
class EnumValue(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)


default_message_pool.register_message("sift.data.v2", "EnumValue", EnumValue)


@dataclass(eq=False, repr=False)
class EnumValues(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[EnumValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "EnumValues", EnumValues)


@dataclass(eq=False, repr=False)
class FloatValue(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "float" = betterproto2.field(2, betterproto2.TYPE_FLOAT)


default_message_pool.register_message("sift.data.v2", "FloatValue", FloatValue)


@dataclass(eq=False, repr=False)
class FloatValues(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[FloatValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "FloatValues", FloatValues)


@dataclass(eq=False, repr=False)
class GetDataRequest(betterproto2.Message):
    queries: "list[Query]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    start_time: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Required. The starting timestamp of the data to retrieve. This is an inclusive bound.
    """

    end_time: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Required. The end timestamp of the data to retrieve. This is an exclusive bound.
    """

    sample_ms: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    The rate to sample the returned data at. The data is sampled using [LTTB](https://github.com/sveinn-steinarsson/flot-downsample)
    which will return one point approximately every sample_ms milliseconds that retains the shape of the raw data.
    Sampling is only supported for numeric data types, if sample_ms is provided for non-numeric data, it will be
    ignored and the full-fidelity data will be returned.
    """

    page_size: "int" = betterproto2.field(5, betterproto2.TYPE_UINT32)
    """
    The maximum number of channel values to return.
    The service may return fewer than this value.
    If unspecified, at most 10,000 values will be returned.
    The maximum value is 100,000; values above 100,000 will be coerced to 100,000.
    For variable data types (i.e. string channels), at most page_size elements
    will be read, or 1MB, whichever occurs first.
    """

    page_token: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `GetData` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `GetData` must match
    the call that provided the page token.
    """


default_message_pool.register_message("sift.data.v2", "GetDataRequest", GetDataRequest)


@dataclass(eq=False, repr=False)
class GetDataResponse(betterproto2.Message):
    next_page_token: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    data: "list[___google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    data contains the result of the supplied queries.
    Be aware that each query can generate multiple data responses.
    For example, if run_id is omitted from a ChannelQuery, the query returns
    data for all runs containing that channel. Channel data for each run is
    returned in a separate data object.
    Possible message types:
      sift.data.v2.DoubleValues
      sift.data.v2.FloatValues
      sift.data.v2.StringValues
      sift.data.v2.EnumValues
      sift.data.v2.BitFieldValues
      sift.data.v2.BoolValues
      sift.data.v2.Int32Values
      sift.data.v2.Int64Values
      sift.data.v2.Uint32Values
      sift.data.v2.Uint64Values
    """


default_message_pool.register_message(
    "sift.data.v2", "GetDataResponse", GetDataResponse
)


@dataclass(eq=False, repr=False)
class Int32Value(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)


default_message_pool.register_message("sift.data.v2", "Int32Value", Int32Value)


@dataclass(eq=False, repr=False)
class Int32Values(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[Int32Value]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "Int32Values", Int32Values)


@dataclass(eq=False, repr=False)
class Int64Value(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message("sift.data.v2", "Int64Value", Int64Value)


@dataclass(eq=False, repr=False)
class Int64Values(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[Int64Value]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "Int64Values", Int64Values)


@dataclass(eq=False, repr=False)
class Metadata(betterproto2.Message):
    data_type: "__common__type__v1__.ChannelDataType" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __common__type__v1__.ChannelDataType(0),
    )

    sampled_ms: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)

    asset: "MetadataAsset | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    run: "MetadataRun | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    channel: "MetadataChannel | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sift.data.v2", "Metadata", Metadata)


@dataclass(eq=False, repr=False)
class MetadataAsset(betterproto2.Message):
    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.data.v2", "Metadata.Asset", MetadataAsset)


@dataclass(eq=False, repr=False)
class MetadataChannel(betterproto2.Message):
    channel_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    For channel queries, this will contain the requested backing channel id.
    For calculated channel queries, this will contain the requested channel key.
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    unit: "MetadataChannelUnit | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    enum_types: "list[__common__type__v1__.ChannelEnumType]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    bit_field_elements: "list[__common__type__v1__.ChannelBitFieldElement]" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    )


default_message_pool.register_message(
    "sift.data.v2", "Metadata.Channel", MetadataChannel
)


@dataclass(eq=False, repr=False)
class MetadataChannelUnit(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    abbreviated_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.data.v2", "Metadata.Channel.Unit", MetadataChannelUnit
)


@dataclass(eq=False, repr=False)
class MetadataRun(betterproto2.Message):
    run_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The run_id that was sent with the data during ingestion (if any).
    Note that this may be different from the run_id that was requested in the query.
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.data.v2", "Metadata.Run", MetadataRun)


@dataclass(eq=False, repr=False)
class Query(betterproto2.Message):
    """


    Oneofs:
        - query:
    """

    channel: "ChannelQuery | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="query"
    )

    calculated_channel: "CalculatedChannelQuery | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="query"
    )


default_message_pool.register_message("sift.data.v2", "Query", Query)


@dataclass(eq=False, repr=False)
class StringValue(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.data.v2", "StringValue", StringValue)


@dataclass(eq=False, repr=False)
class StringValues(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[StringValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "StringValues", StringValues)


@dataclass(eq=False, repr=False)
class Uint32Value(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)


default_message_pool.register_message("sift.data.v2", "Uint32Value", Uint32Value)


@dataclass(eq=False, repr=False)
class Uint32Values(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[Uint32Value]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "Uint32Values", Uint32Values)


@dataclass(eq=False, repr=False)
class Uint64Value(betterproto2.Message):
    timestamp: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)


default_message_pool.register_message("sift.data.v2", "Uint64Value", Uint64Value)


@dataclass(eq=False, repr=False)
class Uint64Values(betterproto2.Message):
    metadata: "Metadata | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    values: "list[Uint64Value]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.data.v2", "Uint64Values", Uint64Values)


class DataServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_data(self, message: "GetDataRequest") -> "GetDataResponse":
        """
        Query data
        """

        return self._channel.unary_unary(
            "/sift.data.v2.DataService/GetData",
            GetDataRequest.SerializeToString,
            GetDataResponse.FromString,
        )(message)


class DataServiceAsyncStub(betterproto2.ServiceStub):
    async def get_data(
        self,
        message: "GetDataRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDataResponse":
        """
        Query data
        """

        return await self._unary_unary(
            "/sift.data.v2.DataService/GetData",
            message,
            GetDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...calculated_channels import v1 as __calculated_channels__v1__
from ...common.type import v1 as __common__type__v1__


class DataServiceBase(ServiceBase):
    async def get_data(self, message: "GetDataRequest") -> "GetDataResponse":
        """
        Query data
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_data(
        self, stream: "grpclib.server.Stream[GetDataRequest, GetDataResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.data.v2.DataService/GetData": grpclib.const.Handler(
                self.__rpc_get_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDataRequest,
                GetDataResponse,
            ),
        }
