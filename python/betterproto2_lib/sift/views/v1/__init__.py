# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/views/v1/views.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CreateViewRequest",
    "CreateViewResponse",
    "DeleteViewRequest",
    "DeleteViewResponse",
    "GetViewRequest",
    "GetViewResponse",
    "ListApplicableViewsRequest",
    "ListApplicableViewsResponse",
    "ListViewsRequest",
    "ListViewsResponse",
    "PinViewRequest",
    "PinViewResponse",
    "UnpinViewRequest",
    "UnpinViewResponse",
    "UpdateViewRequest",
    "UpdateViewResponse",
    "View",
    "ViewAxisGroups",
    "ViewChannel",
    "ViewChannelCalculatedChannelConfig",
    "ViewChannelCalculatedChannelConfigChannelReference",
    "ViewServiceStub",
    "ViewServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class CreateViewRequest(betterproto2.Message):
    view: "View | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.views.v1", "CreateViewRequest", CreateViewRequest
)


@dataclass(eq=False, repr=False)
class CreateViewResponse(betterproto2.Message):
    view: "View | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.views.v1", "CreateViewResponse", CreateViewResponse
)


@dataclass(eq=False, repr=False)
class DeleteViewRequest(betterproto2.Message):
    view_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.views.v1", "DeleteViewRequest", DeleteViewRequest
)


@dataclass(eq=False, repr=False)
class DeleteViewResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.views.v1", "DeleteViewResponse", DeleteViewResponse
)


@dataclass(eq=False, repr=False)
class GetViewRequest(betterproto2.Message):
    view_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.views.v1", "GetViewRequest", GetViewRequest)


@dataclass(eq=False, repr=False)
class GetViewResponse(betterproto2.Message):
    view: "View | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.views.v1", "GetViewResponse", GetViewResponse
)


@dataclass(eq=False, repr=False)
class ListApplicableViewsRequest(betterproto2.Message):
    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of views to return.
    The service may return fewer than this value.
    If unspecified, at most 50 views will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListApplicableViews` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListApplicableViews` must match
    the call that provided the page token.
    """

    asset_ids: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    run_ids: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.views.v1", "ListApplicableViewsRequest", ListApplicableViewsRequest
)


@dataclass(eq=False, repr=False)
class ListApplicableViewsResponse(betterproto2.Message):
    views: "list[View]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sift.views.v1", "ListApplicableViewsResponse", ListApplicableViewsResponse
)


@dataclass(eq=False, repr=False)
class ListViewsRequest(betterproto2.Message):
    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of views to return.
    The service may return fewer than this value.
    If unspecified, at most 50 views will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListViews` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListViews` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
    Available fields to filter by are 'name', 'createdDate', and 'modifiedDate'.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/views#view). Optional.
    """


default_message_pool.register_message(
    "sift.views.v1", "ListViewsRequest", ListViewsRequest
)


@dataclass(eq=False, repr=False)
class ListViewsResponse(betterproto2.Message):
    views: "list[View]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sift.views.v1", "ListViewsResponse", ListViewsResponse
)


@dataclass(eq=False, repr=False)
class PinViewRequest(betterproto2.Message):
    view_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.views.v1", "PinViewRequest", PinViewRequest)


@dataclass(eq=False, repr=False)
class PinViewResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.views.v1", "PinViewResponse", PinViewResponse
)


@dataclass(eq=False, repr=False)
class UnpinViewRequest(betterproto2.Message):
    view_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.views.v1", "UnpinViewRequest", UnpinViewRequest
)


@dataclass(eq=False, repr=False)
class UnpinViewResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.views.v1", "UnpinViewResponse", UnpinViewResponse
)


@dataclass(eq=False, repr=False)
class UpdateViewRequest(betterproto2.Message):
    view: "View | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to update.
    """


default_message_pool.register_message(
    "sift.views.v1", "UpdateViewRequest", UpdateViewRequest
)


@dataclass(eq=False, repr=False)
class UpdateViewResponse(betterproto2.Message):
    view: "View | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.views.v1", "UpdateViewResponse", UpdateViewResponse
)


@dataclass(eq=False, repr=False)
class View(betterproto2.Message):
    view_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    axis_groups: "ViewAxisGroups | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    channels: "list[ViewChannel]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    created_date: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    is_pinned: "bool" = betterproto2.field(10, betterproto2.TYPE_BOOL)


default_message_pool.register_message("sift.views.v1", "View", View)


@dataclass(eq=False, repr=False)
class ViewAxisGroups(betterproto2.Message):
    left: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)

    right: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message(
    "sift.views.v1", "View.AxisGroups", ViewAxisGroups
)


@dataclass(eq=False, repr=False)
class ViewChannel(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    component: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    data_type: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    axis_group: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    bit_field_names: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )

    calculated_channel_config: "ViewChannelCalculatedChannelConfig | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )


default_message_pool.register_message("sift.views.v1", "View.Channel", ViewChannel)


@dataclass(eq=False, repr=False)
class ViewChannelCalculatedChannelConfig(betterproto2.Message):
    channel_key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    channel_references: "dict[str, ViewChannelCalculatedChannelConfigChannelReference]" = betterproto2.field(
        2,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )

    expression: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    unit: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.views.v1",
    "View.Channel.CalculatedChannelConfig",
    ViewChannelCalculatedChannelConfig,
)


@dataclass(eq=False, repr=False)
class ViewChannelCalculatedChannelConfigChannelReference(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    component: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.views.v1",
    "View.Channel.CalculatedChannelConfig.ChannelReference",
    ViewChannelCalculatedChannelConfigChannelReference,
)


class ViewServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_view(self, message: "GetViewRequest") -> "GetViewResponse":
        """
        Retrieves a view.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/GetView",
            GetViewRequest.SerializeToString,
            GetViewResponse.FromString,
        )(message)

    def create_view(self, message: "CreateViewRequest") -> "CreateViewResponse":
        """
        Creates a view.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/CreateView",
            CreateViewRequest.SerializeToString,
            CreateViewResponse.FromString,
        )(message)

    def update_view(self, message: "UpdateViewRequest") -> "UpdateViewResponse":
        """
        Updates an existing view using using the list of fields specified in `update_mask`.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/UpdateView",
            UpdateViewRequest.SerializeToString,
            UpdateViewResponse.FromString,
        )(message)

    def list_views(self, message: "ListViewsRequest") -> "ListViewsResponse":
        """
        Retrieves views using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/ListViews",
            ListViewsRequest.SerializeToString,
            ListViewsResponse.FromString,
        )(message)

    def list_applicable_views(
        self, message: "ListApplicableViewsRequest"
    ) -> "ListApplicableViewsResponse":
        """
        Lists views that apply to assets/runs.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/ListApplicableViews",
            ListApplicableViewsRequest.SerializeToString,
            ListApplicableViewsResponse.FromString,
        )(message)

    def delete_view(self, message: "DeleteViewRequest") -> "DeleteViewResponse":
        """
        Deletes a view.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/DeleteView",
            DeleteViewRequest.SerializeToString,
            DeleteViewResponse.FromString,
        )(message)

    def pin_view(self, message: "PinViewRequest") -> "PinViewResponse":
        """
        Pins a view.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/PinView",
            PinViewRequest.SerializeToString,
            PinViewResponse.FromString,
        )(message)

    def unpin_view(self, message: "UnpinViewRequest") -> "UnpinViewResponse":
        """
        Unpins a view.
        """

        return self._channel.unary_unary(
            "/sift.views.v1.ViewService/UnpinView",
            UnpinViewRequest.SerializeToString,
            UnpinViewResponse.FromString,
        )(message)


class ViewServiceAsyncStub(betterproto2.ServiceStub):
    async def get_view(
        self,
        message: "GetViewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetViewResponse":
        """
        Retrieves a view.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/GetView",
            message,
            GetViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_view(
        self,
        message: "CreateViewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateViewResponse":
        """
        Creates a view.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/CreateView",
            message,
            CreateViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_view(
        self,
        message: "UpdateViewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateViewResponse":
        """
        Updates an existing view using using the list of fields specified in `update_mask`.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/UpdateView",
            message,
            UpdateViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_views(
        self,
        message: "ListViewsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListViewsResponse":
        """
        Retrieves views using an optional filter.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/ListViews",
            message,
            ListViewsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_applicable_views(
        self,
        message: "ListApplicableViewsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListApplicableViewsResponse":
        """
        Lists views that apply to assets/runs.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/ListApplicableViews",
            message,
            ListApplicableViewsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_view(
        self,
        message: "DeleteViewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteViewResponse":
        """
        Deletes a view.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/DeleteView",
            message,
            DeleteViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pin_view(
        self,
        message: "PinViewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "PinViewResponse":
        """
        Pins a view.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/PinView",
            message,
            PinViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unpin_view(
        self,
        message: "UnpinViewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UnpinViewResponse":
        """
        Unpins a view.
        """

        return await self._unary_unary(
            "/sift.views.v1.ViewService/UnpinView",
            message,
            UnpinViewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__


class ViewServiceBase(ServiceBase):
    async def get_view(self, message: "GetViewRequest") -> "GetViewResponse":
        """
        Retrieves a view.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_view(self, message: "CreateViewRequest") -> "CreateViewResponse":
        """
        Creates a view.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_view(self, message: "UpdateViewRequest") -> "UpdateViewResponse":
        """
        Updates an existing view using using the list of fields specified in `update_mask`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_views(self, message: "ListViewsRequest") -> "ListViewsResponse":
        """
        Retrieves views using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_applicable_views(
        self, message: "ListApplicableViewsRequest"
    ) -> "ListApplicableViewsResponse":
        """
        Lists views that apply to assets/runs.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_view(self, message: "DeleteViewRequest") -> "DeleteViewResponse":
        """
        Deletes a view.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pin_view(self, message: "PinViewRequest") -> "PinViewResponse":
        """
        Pins a view.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unpin_view(self, message: "UnpinViewRequest") -> "UnpinViewResponse":
        """
        Unpins a view.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_view(
        self, stream: "grpclib.server.Stream[GetViewRequest, GetViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_view(request)
        await stream.send_message(response)

    async def __rpc_create_view(
        self, stream: "grpclib.server.Stream[CreateViewRequest, CreateViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_view(request)
        await stream.send_message(response)

    async def __rpc_update_view(
        self, stream: "grpclib.server.Stream[UpdateViewRequest, UpdateViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_view(request)
        await stream.send_message(response)

    async def __rpc_list_views(
        self, stream: "grpclib.server.Stream[ListViewsRequest, ListViewsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_views(request)
        await stream.send_message(response)

    async def __rpc_list_applicable_views(
        self,
        stream: "grpclib.server.Stream[ListApplicableViewsRequest, ListApplicableViewsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_applicable_views(request)
        await stream.send_message(response)

    async def __rpc_delete_view(
        self, stream: "grpclib.server.Stream[DeleteViewRequest, DeleteViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_view(request)
        await stream.send_message(response)

    async def __rpc_pin_view(
        self, stream: "grpclib.server.Stream[PinViewRequest, PinViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pin_view(request)
        await stream.send_message(response)

    async def __rpc_unpin_view(
        self, stream: "grpclib.server.Stream[UnpinViewRequest, UnpinViewResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unpin_view(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.views.v1.ViewService/GetView": grpclib.const.Handler(
                self.__rpc_get_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetViewRequest,
                GetViewResponse,
            ),
            "/sift.views.v1.ViewService/CreateView": grpclib.const.Handler(
                self.__rpc_create_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateViewRequest,
                CreateViewResponse,
            ),
            "/sift.views.v1.ViewService/UpdateView": grpclib.const.Handler(
                self.__rpc_update_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateViewRequest,
                UpdateViewResponse,
            ),
            "/sift.views.v1.ViewService/ListViews": grpclib.const.Handler(
                self.__rpc_list_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListViewsRequest,
                ListViewsResponse,
            ),
            "/sift.views.v1.ViewService/ListApplicableViews": grpclib.const.Handler(
                self.__rpc_list_applicable_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListApplicableViewsRequest,
                ListApplicableViewsResponse,
            ),
            "/sift.views.v1.ViewService/DeleteView": grpclib.const.Handler(
                self.__rpc_delete_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteViewRequest,
                DeleteViewResponse,
            ),
            "/sift.views.v1.ViewService/PinView": grpclib.const.Handler(
                self.__rpc_pin_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                PinViewRequest,
                PinViewResponse,
            ),
            "/sift.views.v1.ViewService/UnpinView": grpclib.const.Handler(
                self.__rpc_unpin_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnpinViewRequest,
                UnpinViewResponse,
            ),
        }
