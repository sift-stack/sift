# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/assets/v1/assets.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Asset",
    "DeleteAssetRequest",
    "DeleteAssetResponse",
    "GetAssetRequest",
    "GetAssetResponse",
    "ListAssetsRequest",
    "ListAssetsResponse",
    "UpdateAssetRequest",
    "UpdateAssetResponse",
    "AssetServiceStub",
    "AssetServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class Asset(betterproto2.Message):
    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    modified_date: "datetime.datetime | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_by_user_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    tags: "list[str]" = betterproto2.field(9, betterproto2.TYPE_STRING, repeated=True)
    """
    The names of the tags to associate with this asset.
    """


default_message_pool.register_message("sift.assets.v1", "Asset", Asset)


@dataclass(eq=False, repr=False)
class DeleteAssetRequest(betterproto2.Message):
    """
    The request for a call to `AssetService_DeleteAsset` to delete a single existing annotation by its asset_id.
    """

    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The id of the asset to be deleted. Required.
    """


default_message_pool.register_message(
    "sift.assets.v1", "DeleteAssetRequest", DeleteAssetRequest
)


@dataclass(eq=False, repr=False)
class DeleteAssetResponse(betterproto2.Message):
    """
    The response of a call to `AssetService_DeleteAsset`.
    """

    pass


default_message_pool.register_message(
    "sift.assets.v1", "DeleteAssetResponse", DeleteAssetResponse
)


@dataclass(eq=False, repr=False)
class GetAssetRequest(betterproto2.Message):
    """
    The request for a call to `AssetService_GetAsset` to retrieve a single existing asset by its asset_id.
    """

    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The id of the asset to be retrieved. Required.
    """


default_message_pool.register_message(
    "sift.assets.v1", "GetAssetRequest", GetAssetRequest
)


@dataclass(eq=False, repr=False)
class GetAssetResponse(betterproto2.Message):
    asset: "Asset | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.assets.v1", "GetAssetResponse", GetAssetResponse
)


@dataclass(eq=False, repr=False)
class ListAssetsRequest(betterproto2.Message):
    """
    The request for a call to `AssetService_ListAssets`.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of assets to return.
    The service may return fewer than this value.
    If unspecified, at most 50 assets will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListAssets` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListAssets` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `asset_id`, `created_by_user_id`, `modified_by_user_id`,
    `created_date`, `modified_date`, and `name`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/assets#asset). Optional.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    How to order the retrieved assets. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date` and `modified_date`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.assets.v1", "ListAssetsRequest", ListAssetsRequest
)


@dataclass(eq=False, repr=False)
class ListAssetsResponse(betterproto2.Message):
    """
    The result of a call to `AssetService_ListAssets`.
    """

    assets: "list[Asset]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.assets.v1", "ListAssetsResponse", ListAssetsResponse
)


@dataclass(eq=False, repr=False)
class UpdateAssetRequest(betterproto2.Message):
    asset: "Asset | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The asset to update. The asset's `asset_id` field is used to identify asset run to update
    and is required.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to be updated. Currently, the only field available to be updated is `tags`.
    """


default_message_pool.register_message(
    "sift.assets.v1", "UpdateAssetRequest", UpdateAssetRequest
)


@dataclass(eq=False, repr=False)
class UpdateAssetResponse(betterproto2.Message):
    asset: "Asset | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.assets.v1", "UpdateAssetResponse", UpdateAssetResponse
)


class AssetServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def delete_asset(self, message: "DeleteAssetRequest") -> "DeleteAssetResponse":
        """
        Deletes an asset.
        """

        return self._channel.unary_unary(
            "/sift.assets.v1.AssetService/DeleteAsset",
            DeleteAssetRequest.SerializeToString,
            DeleteAssetResponse.FromString,
        )(message)

    def get_asset(self, message: "GetAssetRequest") -> "GetAssetResponse":
        """
        Retrieves an asset.
        """

        return self._channel.unary_unary(
            "/sift.assets.v1.AssetService/GetAsset",
            GetAssetRequest.SerializeToString,
            GetAssetResponse.FromString,
        )(message)

    def list_assets(self, message: "ListAssetsRequest") -> "ListAssetsResponse":
        """
        Retrieves assets using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.assets.v1.AssetService/ListAssets",
            ListAssetsRequest.SerializeToString,
            ListAssetsResponse.FromString,
        )(message)

    def update_asset(self, message: "UpdateAssetRequest") -> "UpdateAssetResponse":
        return self._channel.unary_unary(
            "/sift.assets.v1.AssetService/UpdateAsset",
            UpdateAssetRequest.SerializeToString,
            UpdateAssetResponse.FromString,
        )(message)


class AssetServiceAsyncStub(betterproto2.ServiceStub):
    async def delete_asset(
        self,
        message: "DeleteAssetRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteAssetResponse":
        """
        Deletes an asset.
        """

        return await self._unary_unary(
            "/sift.assets.v1.AssetService/DeleteAsset",
            message,
            DeleteAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_asset(
        self,
        message: "GetAssetRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetAssetResponse":
        """
        Retrieves an asset.
        """

        return await self._unary_unary(
            "/sift.assets.v1.AssetService/GetAsset",
            message,
            GetAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_assets(
        self,
        message: "ListAssetsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListAssetsResponse":
        """
        Retrieves assets using an optional filter.
        """

        return await self._unary_unary(
            "/sift.assets.v1.AssetService/ListAssets",
            message,
            ListAssetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_asset(
        self,
        message: "UpdateAssetRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateAssetResponse":
        return await self._unary_unary(
            "/sift.assets.v1.AssetService/UpdateAsset",
            message,
            UpdateAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__


class AssetServiceBase(ServiceBase):
    async def delete_asset(
        self, message: "DeleteAssetRequest"
    ) -> "DeleteAssetResponse":
        """
        Deletes an asset.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_asset(self, message: "GetAssetRequest") -> "GetAssetResponse":
        """
        Retrieves an asset.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_assets(self, message: "ListAssetsRequest") -> "ListAssetsResponse":
        """
        Retrieves assets using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_asset(
        self, message: "UpdateAssetRequest"
    ) -> "UpdateAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_delete_asset(
        self, stream: "grpclib.server.Stream[DeleteAssetRequest, DeleteAssetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_asset(request)
        await stream.send_message(response)

    async def __rpc_get_asset(
        self, stream: "grpclib.server.Stream[GetAssetRequest, GetAssetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_asset(request)
        await stream.send_message(response)

    async def __rpc_list_assets(
        self, stream: "grpclib.server.Stream[ListAssetsRequest, ListAssetsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_assets(request)
        await stream.send_message(response)

    async def __rpc_update_asset(
        self, stream: "grpclib.server.Stream[UpdateAssetRequest, UpdateAssetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_asset(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.assets.v1.AssetService/DeleteAsset": grpclib.const.Handler(
                self.__rpc_delete_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteAssetRequest,
                DeleteAssetResponse,
            ),
            "/sift.assets.v1.AssetService/GetAsset": grpclib.const.Handler(
                self.__rpc_get_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAssetRequest,
                GetAssetResponse,
            ),
            "/sift.assets.v1.AssetService/ListAssets": grpclib.const.Handler(
                self.__rpc_list_assets,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAssetsRequest,
                ListAssetsResponse,
            ),
            "/sift.assets.v1.AssetService/UpdateAsset": grpclib.const.Handler(
                self.__rpc_update_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateAssetRequest,
                UpdateAssetResponse,
            ),
        }
