# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/channels/v3/channels.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Channel",
    "GetChannelRequest",
    "GetChannelResponse",
    "ListChannelsRequest",
    "ListChannelsResponse",
    "ChannelServiceStub",
    "ChannelServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class Channel(betterproto2.Message):
    channel_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The full name of the channel.
    """

    asset_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    unit_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    data_type: "__common__type__v1__.ChannelDataType" = betterproto2.field(
        10,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __common__type__v1__.ChannelDataType(0),
    )

    enum_types: "list[__common__type__v1__.ChannelEnumType]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )

    bit_field_elements: "list[__common__type__v1__.ChannelBitFieldElement]" = (
        betterproto2.field(12, betterproto2.TYPE_MESSAGE, repeated=True)
    )


default_message_pool.register_message("sift.channels.v3", "Channel", Channel)


@dataclass(eq=False, repr=False)
class GetChannelRequest(betterproto2.Message):
    """
    The request for a call to `ChannelService_GetChannel`.
    """

    channel_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.channels.v3", "GetChannelRequest", GetChannelRequest
)


@dataclass(eq=False, repr=False)
class GetChannelResponse(betterproto2.Message):
    """
    The response of a call to `ChannelService_GetChannel`.
    """

    channel: "Channel | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.channels.v3", "GetChannelResponse", GetChannelResponse
)


@dataclass(eq=False, repr=False)
class ListChannelsRequest(betterproto2.Message):
    """
    The request for a call to `ChannelService_ListChannels` to retrieve channels.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of channels to return. The service may return fewer than this value.
    If unspecified, at most 50 channels will be returned. The maximum value is 10,000; values above
    10,000 will be coerced to 10,000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListChannels` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListChannels` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `channel_id`, `asset_id`, `name`, `description`, `active`,
    `run_id`, `run_name`, `run_client_key`, `created_date`, and `modified_date`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/channels#channel). Optional.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    How to order the retrieved channels. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date` and `modified_date`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.channels.v3", "ListChannelsRequest", ListChannelsRequest
)


@dataclass(eq=False, repr=False)
class ListChannelsResponse(betterproto2.Message):
    """
    The result of a call to `ChannelService_ListChannels`.
    """

    channels: "list[Channel]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.channels.v3", "ListChannelsResponse", ListChannelsResponse
)


class ChannelServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_channel(self, message: "GetChannelRequest") -> "GetChannelResponse":
        """
        Retrieve a channel
        """

        return self._channel.unary_unary(
            "/sift.channels.v3.ChannelService/GetChannel",
            GetChannelRequest.SerializeToString,
            GetChannelResponse.FromString,
        )(message)

    def list_channels(self, message: "ListChannelsRequest") -> "ListChannelsResponse":
        """
        Retrieve channels using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.channels.v3.ChannelService/ListChannels",
            ListChannelsRequest.SerializeToString,
            ListChannelsResponse.FromString,
        )(message)


class ChannelServiceAsyncStub(betterproto2.ServiceStub):
    async def get_channel(
        self,
        message: "GetChannelRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetChannelResponse":
        """
        Retrieve a channel
        """

        return await self._unary_unary(
            "/sift.channels.v3.ChannelService/GetChannel",
            message,
            GetChannelResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_channels(
        self,
        message: "ListChannelsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListChannelsResponse":
        """
        Retrieve channels using an optional filter.
        """

        return await self._unary_unary(
            "/sift.channels.v3.ChannelService/ListChannels",
            message,
            ListChannelsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...common.type import v1 as __common__type__v1__


class ChannelServiceBase(ServiceBase):
    async def get_channel(self, message: "GetChannelRequest") -> "GetChannelResponse":
        """
        Retrieve a channel
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_channels(
        self, message: "ListChannelsRequest"
    ) -> "ListChannelsResponse":
        """
        Retrieve channels using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_channel(
        self, stream: "grpclib.server.Stream[GetChannelRequest, GetChannelResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_channel(request)
        await stream.send_message(response)

    async def __rpc_list_channels(
        self, stream: "grpclib.server.Stream[ListChannelsRequest, ListChannelsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_channels(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.channels.v3.ChannelService/GetChannel": grpclib.const.Handler(
                self.__rpc_get_channel,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetChannelRequest,
                GetChannelResponse,
            ),
            "/sift.channels.v3.ChannelService/ListChannels": grpclib.const.Handler(
                self.__rpc_list_channels,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListChannelsRequest,
                ListChannelsResponse,
            ),
        }
