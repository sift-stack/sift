# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/rule_evaluation/v1/rule_evaluation.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AssetsTimeRange",
    "EvaluateRulesAnnotationOptions",
    "EvaluateRulesFromCurrentRuleVersions",
    "EvaluateRulesFromReportTemplate",
    "EvaluateRulesFromRuleConfigs",
    "EvaluateRulesFromRuleVersions",
    "EvaluateRulesPreviewRequest",
    "EvaluateRulesPreviewResponse",
    "EvaluateRulesRequest",
    "EvaluateRulesResponse",
    "RuleEvaluationServiceStub",
    "RuleEvaluationServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class AssetsTimeRange(betterproto2.Message):
    assets: "__common__type__v1__.NamedResources | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    start_time: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    end_time: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1", "AssetsTimeRange", AssetsTimeRange
)


@dataclass(eq=False, repr=False)
class EvaluateRulesAnnotationOptions(betterproto2.Message):
    tags: "__common__type__v1__.NamedResources | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesAnnotationOptions",
    EvaluateRulesAnnotationOptions,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesFromCurrentRuleVersions(betterproto2.Message):
    rules: "__common__type__v1__.ResourceIdentifiers | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesFromCurrentRuleVersions",
    EvaluateRulesFromCurrentRuleVersions,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesFromReportTemplate(betterproto2.Message):
    report_template: "__common__type__v1__.ResourceIdentifier | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesFromReportTemplate",
    EvaluateRulesFromReportTemplate,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesFromRuleConfigs(betterproto2.Message):
    configs: "list[__rules__v1__.UpdateRuleRequest]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesFromRuleConfigs",
    EvaluateRulesFromRuleConfigs,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesFromRuleVersions(betterproto2.Message):
    rule_version_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesFromRuleVersions",
    EvaluateRulesFromRuleVersions,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesPreviewRequest(betterproto2.Message):
    """


    Oneofs:
        - time:
        - mode:
    """

    run: "__common__type__v1__.ResourceIdentifier | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="time"
    )

    rules: "EvaluateRulesFromCurrentRuleVersions | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    rule_versions: "EvaluateRulesFromRuleVersions | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    report_template: "EvaluateRulesFromReportTemplate | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    rule_configs: "EvaluateRulesFromRuleConfigs | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    organization_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Only required if your user belongs to multiple organizations
    """


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesPreviewRequest",
    EvaluateRulesPreviewRequest,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesPreviewResponse(betterproto2.Message):
    created_annotation_count: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    dry_run_annotations: "list[__rules__v1__.DryRunAnnotation]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.rule_evaluation.v1",
    "EvaluateRulesPreviewResponse",
    EvaluateRulesPreviewResponse,
)


@dataclass(eq=False, repr=False)
class EvaluateRulesRequest(betterproto2.Message):
    """


    Oneofs:
        - time:
        - mode:
    """

    run: "__common__type__v1__.ResourceIdentifier | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="time"
    )

    assets: "AssetsTimeRange | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="time"
    )

    rules: "EvaluateRulesFromCurrentRuleVersions | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    rule_versions: "EvaluateRulesFromRuleVersions | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    report_template: "EvaluateRulesFromReportTemplate | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="mode"
    )

    annotation_options: "EvaluateRulesAnnotationOptions | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    organization_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Only required if your user belongs to multiple organizations
    """

    report_name: "str | None" = betterproto2.field(
        8, betterproto2.TYPE_STRING, optional=True
    )
    """
    If this request creates a report, this field will be used as the report name.
    """


default_message_pool.register_message(
    "sift.rule_evaluation.v1", "EvaluateRulesRequest", EvaluateRulesRequest
)


@dataclass(eq=False, repr=False)
class EvaluateRulesResponse(betterproto2.Message):
    created_annotation_count: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    report_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    A report will be generated if rules were evaluated against a run.
    """

    job_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    This will be set if the job has an extended run time and is being processed asynchronously.
    """


default_message_pool.register_message(
    "sift.rule_evaluation.v1", "EvaluateRulesResponse", EvaluateRulesResponse
)


class RuleEvaluationServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def evaluate_rules(
        self, message: "EvaluateRulesRequest"
    ) -> "EvaluateRulesResponse":
        """
        Evaluate rules from a designated source against a run or asset and return the total amount of annotations created and the ID of the generated report.
        """

        return self._channel.unary_unary(
            "/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRules",
            EvaluateRulesRequest.SerializeToString,
            EvaluateRulesResponse.FromString,
        )(message)

    def evaluate_rules_preview(
        self, message: "EvaluateRulesPreviewRequest"
    ) -> "EvaluateRulesPreviewResponse":
        """
        Perform a dry run evaluation for existing rules or rule configurations against a run and return the annotations that would be generated.
        """

        return self._channel.unary_unary(
            "/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRulesPreview",
            EvaluateRulesPreviewRequest.SerializeToString,
            EvaluateRulesPreviewResponse.FromString,
        )(message)


class RuleEvaluationServiceAsyncStub(betterproto2.ServiceStub):
    async def evaluate_rules(
        self,
        message: "EvaluateRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "EvaluateRulesResponse":
        """
        Evaluate rules from a designated source against a run or asset and return the total amount of annotations created and the ID of the generated report.
        """

        return await self._unary_unary(
            "/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRules",
            message,
            EvaluateRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def evaluate_rules_preview(
        self,
        message: "EvaluateRulesPreviewRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "EvaluateRulesPreviewResponse":
        """
        Perform a dry run evaluation for existing rules or rule configurations against a run and return the annotations that would be generated.
        """

        return await self._unary_unary(
            "/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRulesPreview",
            message,
            EvaluateRulesPreviewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...common.type import v1 as __common__type__v1__
from ...rules import v1 as __rules__v1__


class RuleEvaluationServiceBase(ServiceBase):
    async def evaluate_rules(
        self, message: "EvaluateRulesRequest"
    ) -> "EvaluateRulesResponse":
        """
        Evaluate rules from a designated source against a run or asset and return the total amount of annotations created and the ID of the generated report.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def evaluate_rules_preview(
        self, message: "EvaluateRulesPreviewRequest"
    ) -> "EvaluateRulesPreviewResponse":
        """
        Perform a dry run evaluation for existing rules or rule configurations against a run and return the annotations that would be generated.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_evaluate_rules(
        self,
        stream: "grpclib.server.Stream[EvaluateRulesRequest, EvaluateRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.evaluate_rules(request)
        await stream.send_message(response)

    async def __rpc_evaluate_rules_preview(
        self,
        stream: "grpclib.server.Stream[EvaluateRulesPreviewRequest, EvaluateRulesPreviewResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.evaluate_rules_preview(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRules": grpclib.const.Handler(
                self.__rpc_evaluate_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                EvaluateRulesRequest,
                EvaluateRulesResponse,
            ),
            "/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRulesPreview": grpclib.const.Handler(
                self.__rpc_evaluate_rules_preview,
                grpclib.const.Cardinality.UNARY_UNARY,
                EvaluateRulesPreviewRequest,
                EvaluateRulesPreviewResponse,
            ),
        }
