# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/users/v2/users.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "GetUserRequest",
    "GetUserResponse",
    "ListActiveUsersRequest",
    "ListActiveUsersResponse",
    "UpdateUserOrganizationActiveRequest",
    "UpdateUserOrganizationActiveResponse",
    "UserServiceStub",
    "UserServiceBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto2.Message):
    """
    The request for a call to retrieve a single existing user by its user_id.
    """

    user_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The id of the asset to be retrieved. Required.
    """


default_message_pool.register_message("sift.users.v2", "GetUserRequest", GetUserRequest)


@dataclass(eq=False, repr=False)
class GetUserResponse(betterproto2.Message):
    user: "__common__type__v1__.User | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.users.v2", "GetUserResponse", GetUserResponse
)


@dataclass(eq=False, repr=False)
class ListActiveUsersRequest(betterproto2.Message):
    """
    The request for a call to `UserService_ListActiveUsers` to retrieve users.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of users to return. The service may return fewer than this value.
    If unspecified, at most 50 users will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListActiveUsers` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListActiveUsers` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `user_id` and `name`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/users#user). Optional.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. If provided, this will scope down the user search to just those in the organization ID provided.
    """

    order_by: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    How to order the retrieved users. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are:
    - created_date
    - modified_date
    """


default_message_pool.register_message(
    "sift.users.v2", "ListActiveUsersRequest", ListActiveUsersRequest
)


@dataclass(eq=False, repr=False)
class ListActiveUsersResponse(betterproto2.Message):
    """
    The response of a call to `UserService_ListActiveUsersResponse`.
    """

    users: "list[__common__type__v1__.User]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.users.v2", "ListActiveUsersResponse", ListActiveUsersResponse
)


@dataclass(eq=False, repr=False)
class UpdateUserOrganizationActiveRequest(betterproto2.Message):
    user_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    active: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "sift.users.v2",
    "UpdateUserOrganizationActiveRequest",
    UpdateUserOrganizationActiveRequest,
)


@dataclass(eq=False, repr=False)
class UpdateUserOrganizationActiveResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.users.v2",
    "UpdateUserOrganizationActiveResponse",
    UpdateUserOrganizationActiveResponse,
)


class UserServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def update_user_organization_active(
        self, message: "UpdateUserOrganizationActiveRequest"
    ) -> "UpdateUserOrganizationActiveResponse":
        """
        Used to toggle a user's active status within their organization.
        """

        return self._channel.unary_unary(
            "/sift.users.v2.UserService/UpdateUserOrganizationActive",
            UpdateUserOrganizationActiveRequest.SerializeToString,
            UpdateUserOrganizationActiveResponse.FromString,
        )(message)

    def get_user(self, message: "GetUserRequest") -> "GetUserResponse":
        """
        Retrieves a user object.
        """

        return self._channel.unary_unary(
            "/sift.users.v2.UserService/GetUser",
            GetUserRequest.SerializeToString,
            GetUserResponse.FromString,
        )(message)

    def list_active_users(
        self, message: "ListActiveUsersRequest"
    ) -> "ListActiveUsersResponse":
        """
        List active users.
        """

        return self._channel.unary_unary(
            "/sift.users.v2.UserService/ListActiveUsers",
            ListActiveUsersRequest.SerializeToString,
            ListActiveUsersResponse.FromString,
        )(message)


class UserServiceAsyncStub(betterproto2.ServiceStub):
    async def update_user_organization_active(
        self,
        message: "UpdateUserOrganizationActiveRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateUserOrganizationActiveResponse":
        """
        Used to toggle a user's active status within their organization.
        """

        return await self._unary_unary(
            "/sift.users.v2.UserService/UpdateUserOrganizationActive",
            message,
            UpdateUserOrganizationActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user(
        self,
        message: "GetUserRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetUserResponse":
        """
        Retrieves a user object.
        """

        return await self._unary_unary(
            "/sift.users.v2.UserService/GetUser",
            message,
            GetUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_active_users(
        self,
        message: "ListActiveUsersRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListActiveUsersResponse":
        """
        List active users.
        """

        return await self._unary_unary(
            "/sift.users.v2.UserService/ListActiveUsers",
            message,
            ListActiveUsersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...common.type import v1 as __common__type__v1__


class UserServiceBase(ServiceBase):
    async def update_user_organization_active(
        self, message: "UpdateUserOrganizationActiveRequest"
    ) -> "UpdateUserOrganizationActiveResponse":
        """
        Used to toggle a user's active status within their organization.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user(self, message: "GetUserRequest") -> "GetUserResponse":
        """
        Retrieves a user object.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_active_users(
        self, message: "ListActiveUsersRequest"
    ) -> "ListActiveUsersResponse":
        """
        List active users.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_user_organization_active(
        self,
        stream: "grpclib.server.Stream[UpdateUserOrganizationActiveRequest, UpdateUserOrganizationActiveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_user_organization_active(request)
        await stream.send_message(response)

    async def __rpc_get_user(
        self, stream: "grpclib.server.Stream[GetUserRequest, GetUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_list_active_users(
        self,
        stream: "grpclib.server.Stream[ListActiveUsersRequest, ListActiveUsersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_active_users(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.users.v2.UserService/UpdateUserOrganizationActive": grpclib.const.Handler(
                self.__rpc_update_user_organization_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserOrganizationActiveRequest,
                UpdateUserOrganizationActiveResponse,
            ),
            "/sift.users.v2.UserService/GetUser": grpclib.const.Handler(
                self.__rpc_get_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserRequest,
                GetUserResponse,
            ),
            "/sift.users.v2.UserService/ListActiveUsers": grpclib.const.Handler(
                self.__rpc_list_active_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListActiveUsersRequest,
                ListActiveUsersResponse,
            ),
        }
