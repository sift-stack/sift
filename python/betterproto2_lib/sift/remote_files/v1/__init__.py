# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/remote_files/v1/remote_files.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EntityType",
    "AudioMetadata",
    "BatchDeleteRemoteFilesRequest",
    "BatchDeleteRemoteFilesResponse",
    "CreateRemoteFileRequest",
    "CreateRemoteFileResponse",
    "DeleteRemoteFileRequest",
    "DeleteRemoteFileResponse",
    "GetRemoteFileDownloadUrlRequest",
    "GetRemoteFileDownloadUrlResponse",
    "GetRemoteFileRequest",
    "GetRemoteFileResponse",
    "ImageMetadata",
    "ListRemoteFilesRequest",
    "ListRemoteFilesResponse",
    "RemoteFile",
    "UpdateRemoteFileRequest",
    "UpdateRemoteFileResponse",
    "VideoMetadata",
    "RemoteFileServiceStub",
    "RemoteFileServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class EntityType(betterproto2.Enum):
    UNSPECIFIED = 0

    RUN = 1

    ANNOTATION = 2

    ASSET = 3

    ANNOTATION_LOG = 4


@dataclass(eq=False, repr=False)
class AudioMetadata(betterproto2.Message):
    duration_seconds: "float" = betterproto2.field(1, betterproto2.TYPE_FLOAT)

    timestamp: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.remote_files.v1", "AudioMetadata", AudioMetadata
)


@dataclass(eq=False, repr=False)
class BatchDeleteRemoteFilesRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_BatchDeleteRemoteFiles` to delete remote files.
    """

    remote_file_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Up to 1000 remote file IDs can be provided per request.
    """


default_message_pool.register_message(
    "sift.remote_files.v1",
    "BatchDeleteRemoteFilesRequest",
    BatchDeleteRemoteFilesRequest,
)


@dataclass(eq=False, repr=False)
class BatchDeleteRemoteFilesResponse(betterproto2.Message):
    """
    The response of a call to `RemoteFileService_BatchDeleteRemoteFiles`.
    """

    pass


default_message_pool.register_message(
    "sift.remote_files.v1",
    "BatchDeleteRemoteFilesResponse",
    BatchDeleteRemoteFilesResponse,
)


@dataclass(eq=False, repr=False)
class CreateRemoteFileRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_CreateRemoteFile` to create a remote file.

    Oneofs:
        - metadata:
    """

    file_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    entity_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    entity_type: "EntityType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: EntityType(0)
    )

    file_mime_type: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    file_content_encoding: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    file_size: "int" = betterproto2.field(6, betterproto2.TYPE_UINT64)

    description: "str | None" = betterproto2.field(
        7, betterproto2.TYPE_STRING, optional=True
    )

    organization_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    video_metadata: "VideoMetadata | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True, group="metadata"
    )

    image_metadata: "ImageMetadata | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True, group="metadata"
    )

    audio_metadata: "AudioMetadata | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True, group="metadata"
    )

    custom_uuid: "str | None" = betterproto2.field(
        11, betterproto2.TYPE_STRING, optional=True
    )
    """
    A custom UUID used to generate the object key. Recommended to be left unset.
    """


default_message_pool.register_message(
    "sift.remote_files.v1", "CreateRemoteFileRequest", CreateRemoteFileRequest
)


@dataclass(eq=False, repr=False)
class CreateRemoteFileResponse(betterproto2.Message):
    """
    The response for a call to `RemoteFileService_CreateRemoteFile`.
    """

    remote_file: "RemoteFile | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.remote_files.v1", "CreateRemoteFileResponse", CreateRemoteFileResponse
)


@dataclass(eq=False, repr=False)
class DeleteRemoteFileRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_DeleteRemoteFile` to delete a remote file.
    """

    remote_file_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.remote_files.v1", "DeleteRemoteFileRequest", DeleteRemoteFileRequest
)


@dataclass(eq=False, repr=False)
class DeleteRemoteFileResponse(betterproto2.Message):
    """
    The response of a call to `RemoteFileService_DeleteRemoteFile`.
    """

    pass


default_message_pool.register_message(
    "sift.remote_files.v1", "DeleteRemoteFileResponse", DeleteRemoteFileResponse
)


@dataclass(eq=False, repr=False)
class GetRemoteFileDownloadUrlRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_GetRemoteFileDownloadUrl`.
    """

    remote_file_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.remote_files.v1",
    "GetRemoteFileDownloadUrlRequest",
    GetRemoteFileDownloadUrlRequest,
)


@dataclass(eq=False, repr=False)
class GetRemoteFileDownloadUrlResponse(betterproto2.Message):
    """
    The response of a call to `RemoteFileService_GetRemoteFileDownloadUrl`.
    """

    download_url: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.remote_files.v1",
    "GetRemoteFileDownloadUrlResponse",
    GetRemoteFileDownloadUrlResponse,
)


@dataclass(eq=False, repr=False)
class GetRemoteFileRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_GetRemoteFile` to retrieve a remote file;
    """

    remote_file_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.remote_files.v1", "GetRemoteFileRequest", GetRemoteFileRequest
)


@dataclass(eq=False, repr=False)
class GetRemoteFileResponse(betterproto2.Message):
    """
    The response of a call to `RemoteFileService_GetRemoteFile`.
    """

    remote_file: "RemoteFile | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.remote_files.v1", "GetRemoteFileResponse", GetRemoteFileResponse
)


@dataclass(eq=False, repr=False)
class ImageMetadata(betterproto2.Message):
    height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    width: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)


default_message_pool.register_message(
    "sift.remote_files.v1", "ImageMetadata", ImageMetadata
)


@dataclass(eq=False, repr=False)
class ListRemoteFilesRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_ListRemoteFiles` to retrieve remote files.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of remote files to return. The service may return fewer than this value.
    If unspecified, at most 50 remote files will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListRemoteFiles` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListRemoteFiles` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `remote_file_id`, `entity_id`, `entity_type`, and `file_name`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/remote_files#remotefile). Optional.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    This field is only required if your user belongs to multiple organizations.
    """


default_message_pool.register_message(
    "sift.remote_files.v1", "ListRemoteFilesRequest", ListRemoteFilesRequest
)


@dataclass(eq=False, repr=False)
class ListRemoteFilesResponse(betterproto2.Message):
    """
    The response of a call to `RemoteFileService_ListRemoteFilesResponse`.
    """

    remote_files: "list[RemoteFile]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.remote_files.v1", "ListRemoteFilesResponse", ListRemoteFilesResponse
)


@dataclass(eq=False, repr=False)
class RemoteFile(betterproto2.Message):
    """


    Oneofs:
        - metadata:
    """

    remote_file_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    entity_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    entity_type: "EntityType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: EntityType(0)
    )

    file_name: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    file_mime_type: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    file_content_encoding: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    storage_key: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    file_size: "int" = betterproto2.field(9, betterproto2.TYPE_UINT64)

    description: "str | None" = betterproto2.field(
        10, betterproto2.TYPE_STRING, optional=True
    )

    video_metadata: "VideoMetadata | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True, group="metadata"
    )

    image_metadata: "ImageMetadata | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True, group="metadata"
    )

    audio_metadata: "AudioMetadata | None" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, optional=True, group="metadata"
    )

    created_by_user_id: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        15, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sift.remote_files.v1", "RemoteFile", RemoteFile)


@dataclass(eq=False, repr=False)
class UpdateRemoteFileRequest(betterproto2.Message):
    """
    The request for a call to `RemoteFileService_UpdateRemoteFile` to update a remote file.
    """

    remote_file: "RemoteFile | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The remote file to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to be updated. The fields available to be updated are `description` and `metadata`.
    """


default_message_pool.register_message(
    "sift.remote_files.v1", "UpdateRemoteFileRequest", UpdateRemoteFileRequest
)


@dataclass(eq=False, repr=False)
class UpdateRemoteFileResponse(betterproto2.Message):
    """
    The response of a call to `RemoteFileService_UpdateRemoteFile`.
    """

    remote_file: "RemoteFile | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.remote_files.v1", "UpdateRemoteFileResponse", UpdateRemoteFileResponse
)


@dataclass(eq=False, repr=False)
class VideoMetadata(betterproto2.Message):
    height: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    width: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)

    duration_seconds: "float" = betterproto2.field(3, betterproto2.TYPE_FLOAT)

    timestamp: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.remote_files.v1", "VideoMetadata", VideoMetadata
)


class RemoteFileServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_remote_file(
        self, message: "GetRemoteFileRequest"
    ) -> "GetRemoteFileResponse":
        """
        Retrieve a remote file.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFile",
            GetRemoteFileRequest.SerializeToString,
            GetRemoteFileResponse.FromString,
        )(message)

    def create_remote_file(
        self, message: "CreateRemoteFileRequest"
    ) -> "CreateRemoteFileResponse":
        """
        Create a remote file.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/CreateRemoteFile",
            CreateRemoteFileRequest.SerializeToString,
            CreateRemoteFileResponse.FromString,
        )(message)

    def list_remote_files(
        self, message: "ListRemoteFilesRequest"
    ) -> "ListRemoteFilesResponse":
        """
        List remote files.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/ListRemoteFiles",
            ListRemoteFilesRequest.SerializeToString,
            ListRemoteFilesResponse.FromString,
        )(message)

    def update_remote_file(
        self, message: "UpdateRemoteFileRequest"
    ) -> "UpdateRemoteFileResponse":
        """
        Updates an existing remote file using using the list of fields specified in `update_mask`.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/UpdateRemoteFile",
            UpdateRemoteFileRequest.SerializeToString,
            UpdateRemoteFileResponse.FromString,
        )(message)

    def delete_remote_file(
        self, message: "DeleteRemoteFileRequest"
    ) -> "DeleteRemoteFileResponse":
        """
        Delete a remote file.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/DeleteRemoteFile",
            DeleteRemoteFileRequest.SerializeToString,
            DeleteRemoteFileResponse.FromString,
        )(message)

    def batch_delete_remote_files(
        self, message: "BatchDeleteRemoteFilesRequest"
    ) -> "BatchDeleteRemoteFilesResponse":
        """
        Batch deletes remote files. Each batch is limited to 1000 records.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/BatchDeleteRemoteFiles",
            BatchDeleteRemoteFilesRequest.SerializeToString,
            BatchDeleteRemoteFilesResponse.FromString,
        )(message)

    def get_remote_file_download_url(
        self, message: "GetRemoteFileDownloadUrlRequest"
    ) -> "GetRemoteFileDownloadUrlResponse":
        """
        Gets a download URL for the remote file.
        """

        return self._channel.unary_unary(
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFileDownloadUrl",
            GetRemoteFileDownloadUrlRequest.SerializeToString,
            GetRemoteFileDownloadUrlResponse.FromString,
        )(message)


class RemoteFileServiceAsyncStub(betterproto2.ServiceStub):
    async def get_remote_file(
        self,
        message: "GetRemoteFileRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetRemoteFileResponse":
        """
        Retrieve a remote file.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFile",
            message,
            GetRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_remote_file(
        self,
        message: "CreateRemoteFileRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateRemoteFileResponse":
        """
        Create a remote file.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/CreateRemoteFile",
            message,
            CreateRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_remote_files(
        self,
        message: "ListRemoteFilesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListRemoteFilesResponse":
        """
        List remote files.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/ListRemoteFiles",
            message,
            ListRemoteFilesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_remote_file(
        self,
        message: "UpdateRemoteFileRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateRemoteFileResponse":
        """
        Updates an existing remote file using using the list of fields specified in `update_mask`.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/UpdateRemoteFile",
            message,
            UpdateRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_remote_file(
        self,
        message: "DeleteRemoteFileRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteRemoteFileResponse":
        """
        Delete a remote file.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/DeleteRemoteFile",
            message,
            DeleteRemoteFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_delete_remote_files(
        self,
        message: "BatchDeleteRemoteFilesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchDeleteRemoteFilesResponse":
        """
        Batch deletes remote files. Each batch is limited to 1000 records.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/BatchDeleteRemoteFiles",
            message,
            BatchDeleteRemoteFilesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_remote_file_download_url(
        self,
        message: "GetRemoteFileDownloadUrlRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetRemoteFileDownloadUrlResponse":
        """
        Gets a download URL for the remote file.
        """

        return await self._unary_unary(
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFileDownloadUrl",
            message,
            GetRemoteFileDownloadUrlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__


class RemoteFileServiceBase(ServiceBase):
    async def get_remote_file(
        self, message: "GetRemoteFileRequest"
    ) -> "GetRemoteFileResponse":
        """
        Retrieve a remote file.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_remote_file(
        self, message: "CreateRemoteFileRequest"
    ) -> "CreateRemoteFileResponse":
        """
        Create a remote file.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_remote_files(
        self, message: "ListRemoteFilesRequest"
    ) -> "ListRemoteFilesResponse":
        """
        List remote files.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_remote_file(
        self, message: "UpdateRemoteFileRequest"
    ) -> "UpdateRemoteFileResponse":
        """
        Updates an existing remote file using using the list of fields specified in `update_mask`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_remote_file(
        self, message: "DeleteRemoteFileRequest"
    ) -> "DeleteRemoteFileResponse":
        """
        Delete a remote file.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_delete_remote_files(
        self, message: "BatchDeleteRemoteFilesRequest"
    ) -> "BatchDeleteRemoteFilesResponse":
        """
        Batch deletes remote files. Each batch is limited to 1000 records.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_remote_file_download_url(
        self, message: "GetRemoteFileDownloadUrlRequest"
    ) -> "GetRemoteFileDownloadUrlResponse":
        """
        Gets a download URL for the remote file.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_remote_file(
        self,
        stream: "grpclib.server.Stream[GetRemoteFileRequest, GetRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_remote_file(request)
        await stream.send_message(response)

    async def __rpc_create_remote_file(
        self,
        stream: "grpclib.server.Stream[CreateRemoteFileRequest, CreateRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_remote_file(request)
        await stream.send_message(response)

    async def __rpc_list_remote_files(
        self,
        stream: "grpclib.server.Stream[ListRemoteFilesRequest, ListRemoteFilesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_remote_files(request)
        await stream.send_message(response)

    async def __rpc_update_remote_file(
        self,
        stream: "grpclib.server.Stream[UpdateRemoteFileRequest, UpdateRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_remote_file(request)
        await stream.send_message(response)

    async def __rpc_delete_remote_file(
        self,
        stream: "grpclib.server.Stream[DeleteRemoteFileRequest, DeleteRemoteFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_remote_file(request)
        await stream.send_message(response)

    async def __rpc_batch_delete_remote_files(
        self,
        stream: "grpclib.server.Stream[BatchDeleteRemoteFilesRequest, BatchDeleteRemoteFilesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_delete_remote_files(request)
        await stream.send_message(response)

    async def __rpc_get_remote_file_download_url(
        self,
        stream: "grpclib.server.Stream[GetRemoteFileDownloadUrlRequest, GetRemoteFileDownloadUrlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_remote_file_download_url(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFile": grpclib.const.Handler(
                self.__rpc_get_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRemoteFileRequest,
                GetRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/CreateRemoteFile": grpclib.const.Handler(
                self.__rpc_create_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRemoteFileRequest,
                CreateRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/ListRemoteFiles": grpclib.const.Handler(
                self.__rpc_list_remote_files,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRemoteFilesRequest,
                ListRemoteFilesResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/UpdateRemoteFile": grpclib.const.Handler(
                self.__rpc_update_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRemoteFileRequest,
                UpdateRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/DeleteRemoteFile": grpclib.const.Handler(
                self.__rpc_delete_remote_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRemoteFileRequest,
                DeleteRemoteFileResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/BatchDeleteRemoteFiles": grpclib.const.Handler(
                self.__rpc_batch_delete_remote_files,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchDeleteRemoteFilesRequest,
                BatchDeleteRemoteFilesResponse,
            ),
            "/sift.remote_files.v1.RemoteFileService/GetRemoteFileDownloadUrl": grpclib.const.Handler(
                self.__rpc_get_remote_file_download_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRemoteFileDownloadUrlRequest,
                GetRemoteFileDownloadUrlResponse,
            ),
        }
