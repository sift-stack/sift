# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/common/type/v1/channel_bit_field_element.proto, sift/common/type/v1/channel_config.proto, sift/common/type/v1/channel_data_type.proto, sift/common/type/v1/channel_enum_type.proto, sift/common/type/v1/organization.proto, sift/common/type/v1/resource_identifier.proto, sift/common/type/v1/resource_ref.proto, sift/common/type/v1/user.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ChannelDataType",
    "ChannelBitFieldElement",
    "ChannelConfig",
    "ChannelEnumType",
    "ClientKeys",
    "FindResourceBy",
    "Ids",
    "NamedResource",
    "NamedResources",
    "Names",
    "Organization",
    "ResourceIdentifier",
    "ResourceIdentifiers",
    "ResourceRef",
    "User",
)

from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

betterproto2.check_compiler_version("0.4.0")


class ChannelDataType(betterproto2.Enum):
    UNSPECIFIED = 0

    DOUBLE = 1

    STRING = 2

    ENUM = 3

    BIT_FIELD = 4

    BOOL = 5

    FLOAT = 6

    INT_32 = 7

    UINT_32 = 8

    INT_64 = 9

    UINT_64 = 10


@dataclass(eq=False, repr=False)
class ChannelBitFieldElement(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    index: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The index of this element's first bit in the logical bit field array.
    """

    bit_count: "int" = betterproto2.field(3, betterproto2.TYPE_UINT32)


default_message_pool.register_message(
    "sift.common.type.v1", "ChannelBitFieldElement", ChannelBitFieldElement
)


@dataclass(eq=False, repr=False)
class ChannelConfig(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    units: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    data_type: "ChannelDataType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: ChannelDataType(0)
    )

    enum_types: "list[ChannelEnumType]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )

    bit_field_elements: "list[ChannelBitFieldElement]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.common.type.v1", "ChannelConfig", ChannelConfig
)


@dataclass(eq=False, repr=False)
class ChannelEnumType(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    key: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)


default_message_pool.register_message(
    "sift.common.type.v1", "ChannelEnumType", ChannelEnumType
)


@dataclass(eq=False, repr=False)
class ClientKeys(betterproto2.Message):
    client_keys: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message("sift.common.type.v1", "ClientKeys", ClientKeys)


@dataclass(eq=False, repr=False)
class FindResourceBy(betterproto2.Message):
    """


    Oneofs:
        - identifier:
    """

    id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="identifier"
    )
    """
    Find by the resource's global id, e.g. asset_id, run_id, report_id.
    """

    client_key: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="identifier"
    )
    """
    Find by the resource's client_key, if available.
    """

    name: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="identifier"
    )
    """
    Find by the resource's name. If multiple resources are found with the same name, an error will be returned.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    When finding by `client_key` or `name`, the `organization_id` should also be specified.
    Only required if the user belongs to more than one organization.
    """


default_message_pool.register_message(
    "sift.common.type.v1", "FindResourceBy", FindResourceBy
)


@dataclass(eq=False, repr=False)
class Ids(betterproto2.Message):
    ids: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message("sift.common.type.v1", "Ids", Ids)


@dataclass(eq=False, repr=False)
class NamedResource(betterproto2.Message):
    """


    Oneofs:
        - resource:
    """

    id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="resource"
    )

    name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="resource"
    )


default_message_pool.register_message(
    "sift.common.type.v1", "NamedResource", NamedResource
)


@dataclass(eq=False, repr=False)
class NamedResources(betterproto2.Message):
    """


    Oneofs:
        - resources:
    """

    ids: "Ids | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="resources"
    )

    names: "Names | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="resources"
    )


default_message_pool.register_message(
    "sift.common.type.v1", "NamedResources", NamedResources
)


@dataclass(eq=False, repr=False)
class Names(betterproto2.Message):
    names: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message("sift.common.type.v1", "Names", Names)


@dataclass(eq=False, repr=False)
class Organization(betterproto2.Message):
    organization_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    organization_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.common.type.v1", "Organization", Organization
)


@dataclass(eq=False, repr=False)
class ResourceIdentifier(betterproto2.Message):
    """


    Oneofs:
        - identifier:
    """

    id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="identifier"
    )

    client_key: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="identifier"
    )


default_message_pool.register_message(
    "sift.common.type.v1", "ResourceIdentifier", ResourceIdentifier
)


@dataclass(eq=False, repr=False)
class ResourceIdentifiers(betterproto2.Message):
    """


    Oneofs:
        - identifiers:
    """

    ids: "Ids | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="identifiers"
    )

    client_keys: "ClientKeys | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="identifiers"
    )


default_message_pool.register_message(
    "sift.common.type.v1", "ResourceIdentifiers", ResourceIdentifiers
)


@dataclass(eq=False, repr=False)
class ResourceRef(betterproto2.Message):
    """
    ResourceRef is meant to be embedded as a field in other resources. It's used by one resource to point to another resource.
    In a request, use the `find_by` field to select a resource to point to.
    In a response, the fields marked `google.api.field_behavior = OUTPUT_ONLY` will be populated by the backend.
    """

    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The global unique id of the resource, e.g. the asset_id, run_id, or report_id.
    """

    client_key: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    If a resource has a client_key associated with it, it will be included.
    """

    name: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The name of the resource.
    """

    find_by: "FindResourceBy | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Use this field to 'construct' a ResourceRef.
    You can give just the name, id, or client_key and the backend will find the resource you're referring to.
    """


default_message_pool.register_message("sift.common.type.v1", "ResourceRef", ResourceRef)


@dataclass(eq=False, repr=False)
class User(betterproto2.Message):
    user_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    user_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    organizations: "list[Organization]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sift.common.type.v1", "User", User)
