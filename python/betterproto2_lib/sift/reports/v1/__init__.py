# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/reports/v1/reports.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ReportRuleStatus",
    "CancelReportRequest",
    "CancelReportResponse",
    "CreateReportFromReportTemplateRequest",
    "CreateReportFromRulesRequest",
    "CreateReportRequest",
    "CreateReportRequestClientKeys",
    "CreateReportRequestRuleIds",
    "CreateReportResponse",
    "GetReportRequest",
    "GetReportResponse",
    "ListReportsRequest",
    "ListReportsResponse",
    "Report",
    "ReportRuleStatusDetails",
    "ReportRuleStatusDetailsCanceled",
    "ReportRuleStatusDetailsCreated",
    "ReportRuleStatusDetailsError",
    "ReportRuleStatusDetailsFailed",
    "ReportRuleStatusDetailsFinished",
    "ReportRuleStatusDetailsLive",
    "ReportRuleSummary",
    "ReportTag",
    "RerunReportRequest",
    "RerunReportResponse",
    "ReportServiceStub",
    "ReportServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class ReportRuleStatus(betterproto2.Enum):
    UNSPECIFIED = 0

    CREATED = 1

    LIVE = 2

    FINISHED = 3

    FAILED = 4

    CANCELED = 5

    ERROR = 6


@dataclass(eq=False, repr=False)
class CancelReportRequest(betterproto2.Message):
    report_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.reports.v1", "CancelReportRequest", CancelReportRequest
)


@dataclass(eq=False, repr=False)
class CancelReportResponse(betterproto2.Message):
    """
    no response fields
    """

    pass


default_message_pool.register_message(
    "sift.reports.v1", "CancelReportResponse", CancelReportResponse
)


@dataclass(eq=False, repr=False)
class CreateReportFromReportTemplateRequest(betterproto2.Message):
    """
    Used to create a report from a report template.
    """

    report_template_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.reports.v1",
    "CreateReportFromReportTemplateRequest",
    CreateReportFromReportTemplateRequest,
)


@dataclass(eq=False, repr=False)
class CreateReportFromRulesRequest(betterproto2.Message):
    """
    Used to construct an arbitrary report for an arbitrary set of rules. Rules can be specified either by rule ID
    or client key based on the variant used in the `rule_identifiers` field.

    Oneofs:
        - rule_identifiers:
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )

    tag_names: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )

    rule_ids: "CreateReportRequestRuleIds | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="rule_identifiers"
    )

    rule_client_keys: "CreateReportRequestClientKeys | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="rule_identifiers"
    )


default_message_pool.register_message(
    "sift.reports.v1", "CreateReportFromRulesRequest", CreateReportFromRulesRequest
)


@dataclass(eq=False, repr=False)
class CreateReportRequest(betterproto2.Message):
    """
    The request of a call to `ReportService_CreateReport` to create a report. A report can be created either via a report template
    or an arbitrary report can be constructed depending on the variant of the `request` field.

    Oneofs:
        - request:
    """

    report_from_report_template_request: "CreateReportFromReportTemplateRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )

    report_from_rules_request: "CreateReportFromRulesRequest | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="request")
    )

    organization_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    run_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    name: "str | None" = betterproto2.field(5, betterproto2.TYPE_STRING, optional=True)
    """
    Override the name of the report. If not provided, the name will be generated based on the report template or run.
    """


default_message_pool.register_message(
    "sift.reports.v1", "CreateReportRequest", CreateReportRequest
)


@dataclass(eq=False, repr=False)
class CreateReportRequestClientKeys(betterproto2.Message):
    rule_client_keys: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "CreateReportRequestClientKeys", CreateReportRequestClientKeys
)


@dataclass(eq=False, repr=False)
class CreateReportRequestRuleIds(betterproto2.Message):
    rule_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "CreateReportRequestRuleIds", CreateReportRequestRuleIds
)


@dataclass(eq=False, repr=False)
class CreateReportResponse(betterproto2.Message):
    """
    The response of a call to `ReportService_CreateReport` to create a report.
    """

    report: "Report | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "CreateReportResponse", CreateReportResponse
)


@dataclass(eq=False, repr=False)
class GetReportRequest(betterproto2.Message):
    """
    The request for a call to `ReportService_GetReport` to retrieve a report template.
    """

    report_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.reports.v1", "GetReportRequest", GetReportRequest
)


@dataclass(eq=False, repr=False)
class GetReportResponse(betterproto2.Message):
    """
    The request of a call to `ReportService_GetReport` to retrieve a report template.
    """

    report: "Report | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "GetReportResponse", GetReportResponse
)


@dataclass(eq=False, repr=False)
class ListReportsRequest(betterproto2.Message):
    """
    The request for a call to `ReportService_ListReports` to retrieve report.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of reports to return. The service may return fewer than this value.
    If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListReports` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListReports` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `report_id`, `report_template_id`, `tag_name`, `name`, and `run_id`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/reports#report). Optional.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    order_by: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    How to order the retrieved reports. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date` and `modified_date`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.reports.v1", "ListReportsRequest", ListReportsRequest
)


@dataclass(eq=False, repr=False)
class ListReportsResponse(betterproto2.Message):
    """
    The response of a call to `ReportService_ListReportsResponse`.
    """

    reports: "list[Report]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.reports.v1", "ListReportsResponse", ListReportsResponse
)


@dataclass(eq=False, repr=False)
class Report(betterproto2.Message):
    report_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    report_template_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    run_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    description: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )

    summaries: "list[ReportRuleSummary]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )

    tags: "list[ReportTag]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )

    rerun_from_report_id: "str | None" = betterproto2.field(
        13, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message("sift.reports.v1", "Report", Report)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetails(betterproto2.Message):
    """


    Oneofs:
        - details:
    """

    created: "ReportRuleStatusDetailsCreated | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="details"
    )

    live: "ReportRuleStatusDetailsLive | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="details"
    )

    finished: "ReportRuleStatusDetailsFinished | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="details"
    )

    failed: "ReportRuleStatusDetailsFailed | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="details"
    )

    canceled: "ReportRuleStatusDetailsCanceled | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="details"
    )

    error: "ReportRuleStatusDetailsError | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="details"
    )


default_message_pool.register_message(
    "sift.reports.v1", "ReportRuleStatusDetails", ReportRuleStatusDetails
)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsCanceled(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.reports.v1",
    "ReportRuleStatusDetailsCanceled",
    ReportRuleStatusDetailsCanceled,
)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsCreated(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.reports.v1", "ReportRuleStatusDetailsCreated", ReportRuleStatusDetailsCreated
)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsError(betterproto2.Message):
    error_message: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    exit_code: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_INT32, optional=True
    )

    stdout: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )

    stderr: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "ReportRuleStatusDetailsError", ReportRuleStatusDetailsError
)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsFailed(betterproto2.Message):
    error_message: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    exit_code: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_INT32, optional=True
    )

    stdout: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )

    stderr: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "ReportRuleStatusDetailsFailed", ReportRuleStatusDetailsFailed
)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsFinished(betterproto2.Message):
    stdout: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )

    stderr: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message(
    "sift.reports.v1",
    "ReportRuleStatusDetailsFinished",
    ReportRuleStatusDetailsFinished,
)


@dataclass(eq=False, repr=False)
class ReportRuleStatusDetailsLive(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.reports.v1", "ReportRuleStatusDetailsLive", ReportRuleStatusDetailsLive
)


@dataclass(eq=False, repr=False)
class ReportRuleSummary(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    rule_client_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    rule_version_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    rule_version_number: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)

    report_rule_version_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    num_open: "int" = betterproto2.field(6, betterproto2.TYPE_UINT32)

    num_failed: "int" = betterproto2.field(7, betterproto2.TYPE_UINT32)

    num_passed: "int" = betterproto2.field(8, betterproto2.TYPE_UINT32)

    status: "ReportRuleStatus" = betterproto2.field(
        9, betterproto2.TYPE_ENUM, default_factory=lambda: ReportRuleStatus(0)
    )

    status_details: "ReportRuleStatusDetails | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_date: "datetime.datetime | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True
    )

    asset_id: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    deleted_date: "datetime.datetime | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.reports.v1", "ReportRuleSummary", ReportRuleSummary
)


@dataclass(eq=False, repr=False)
class ReportTag(betterproto2.Message):
    tag_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.reports.v1", "ReportTag", ReportTag)


@dataclass(eq=False, repr=False)
class RerunReportRequest(betterproto2.Message):
    report_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.reports.v1", "RerunReportRequest", RerunReportRequest
)


@dataclass(eq=False, repr=False)
class RerunReportResponse(betterproto2.Message):
    job_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    report_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.reports.v1", "RerunReportResponse", RerunReportResponse
)


class ReportServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_report(self, message: "GetReportRequest") -> "GetReportResponse":
        """
        Retrieve a report.
        """

        return self._channel.unary_unary(
            "/sift.reports.v1.ReportService/GetReport",
            GetReportRequest.SerializeToString,
            GetReportResponse.FromString,
        )(message)

    def create_report(self, message: "CreateReportRequest") -> "CreateReportResponse":
        """
        Create a report.
        """

        return self._channel.unary_unary(
            "/sift.reports.v1.ReportService/CreateReport",
            CreateReportRequest.SerializeToString,
            CreateReportResponse.FromString,
        )(message)

    def list_reports(self, message: "ListReportsRequest") -> "ListReportsResponse":
        """
        List reports.
        """

        return self._channel.unary_unary(
            "/sift.reports.v1.ReportService/ListReports",
            ListReportsRequest.SerializeToString,
            ListReportsResponse.FromString,
        )(message)

    def rerun_report(self, message: "RerunReportRequest") -> "RerunReportResponse":
        """
        Rerunning a report will create a new report with the same rule versions and run  as the original report and run the
        evaluation again using the most up-to-date set of data.
        """

        return self._channel.unary_unary(
            "/sift.reports.v1.ReportService/RerunReport",
            RerunReportRequest.SerializeToString,
            RerunReportResponse.FromString,
        )(message)

    def cancel_report(self, message: "CancelReportRequest") -> "CancelReportResponse":
        """
        Canceling a report will stop the evaluation of the report and mark it as canceled. Any results that have been
        calculated up to the point of cancellation will be saved.
        """

        return self._channel.unary_unary(
            "/sift.reports.v1.ReportService/CancelReport",
            CancelReportRequest.SerializeToString,
            CancelReportResponse.FromString,
        )(message)


class ReportServiceAsyncStub(betterproto2.ServiceStub):
    async def get_report(
        self,
        message: "GetReportRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetReportResponse":
        """
        Retrieve a report.
        """

        return await self._unary_unary(
            "/sift.reports.v1.ReportService/GetReport",
            message,
            GetReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_report(
        self,
        message: "CreateReportRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateReportResponse":
        """
        Create a report.
        """

        return await self._unary_unary(
            "/sift.reports.v1.ReportService/CreateReport",
            message,
            CreateReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_reports(
        self,
        message: "ListReportsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListReportsResponse":
        """
        List reports.
        """

        return await self._unary_unary(
            "/sift.reports.v1.ReportService/ListReports",
            message,
            ListReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rerun_report(
        self,
        message: "RerunReportRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RerunReportResponse":
        """
        Rerunning a report will create a new report with the same rule versions and run  as the original report and run the
        evaluation again using the most up-to-date set of data.
        """

        return await self._unary_unary(
            "/sift.reports.v1.ReportService/RerunReport",
            message,
            RerunReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_report(
        self,
        message: "CancelReportRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CancelReportResponse":
        """
        Canceling a report will stop the evaluation of the report and mark it as canceled. Any results that have been
        calculated up to the point of cancellation will be saved.
        """

        return await self._unary_unary(
            "/sift.reports.v1.ReportService/CancelReport",
            message,
            CancelReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ReportServiceBase(ServiceBase):
    async def get_report(self, message: "GetReportRequest") -> "GetReportResponse":
        """
        Retrieve a report.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_report(
        self, message: "CreateReportRequest"
    ) -> "CreateReportResponse":
        """
        Create a report.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_reports(
        self, message: "ListReportsRequest"
    ) -> "ListReportsResponse":
        """
        List reports.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rerun_report(
        self, message: "RerunReportRequest"
    ) -> "RerunReportResponse":
        """
        Rerunning a report will create a new report with the same rule versions and run  as the original report and run the
        evaluation again using the most up-to-date set of data.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_report(
        self, message: "CancelReportRequest"
    ) -> "CancelReportResponse":
        """
        Canceling a report will stop the evaluation of the report and mark it as canceled. Any results that have been
        calculated up to the point of cancellation will be saved.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_report(
        self, stream: "grpclib.server.Stream[GetReportRequest, GetReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_report(request)
        await stream.send_message(response)

    async def __rpc_create_report(
        self, stream: "grpclib.server.Stream[CreateReportRequest, CreateReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_report(request)
        await stream.send_message(response)

    async def __rpc_list_reports(
        self, stream: "grpclib.server.Stream[ListReportsRequest, ListReportsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_reports(request)
        await stream.send_message(response)

    async def __rpc_rerun_report(
        self, stream: "grpclib.server.Stream[RerunReportRequest, RerunReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.rerun_report(request)
        await stream.send_message(response)

    async def __rpc_cancel_report(
        self, stream: "grpclib.server.Stream[CancelReportRequest, CancelReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.reports.v1.ReportService/GetReport": grpclib.const.Handler(
                self.__rpc_get_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReportRequest,
                GetReportResponse,
            ),
            "/sift.reports.v1.ReportService/CreateReport": grpclib.const.Handler(
                self.__rpc_create_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateReportRequest,
                CreateReportResponse,
            ),
            "/sift.reports.v1.ReportService/ListReports": grpclib.const.Handler(
                self.__rpc_list_reports,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListReportsRequest,
                ListReportsResponse,
            ),
            "/sift.reports.v1.ReportService/RerunReport": grpclib.const.Handler(
                self.__rpc_rerun_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                RerunReportRequest,
                RerunReportResponse,
            ),
            "/sift.reports.v1.ReportService/CancelReport": grpclib.const.Handler(
                self.__rpc_cancel_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelReportRequest,
                CancelReportResponse,
            ),
        }
