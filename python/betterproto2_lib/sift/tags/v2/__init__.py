# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/tags/v2/tags.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CreateTagRequest",
    "CreateTagResponse",
    "ListTagsRequest",
    "ListTagsResponse",
    "Tag",
    "TagServiceStub",
    "TagServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class CreateTagRequest(betterproto2.Message):
    """
    The request for a call to TagService.CreateTag.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name for the new tag.
    If the tag already exists, an error is returned.
    """


default_message_pool.register_message(
    "sift.tags.v2", "CreateTagRequest", CreateTagRequest
)


@dataclass(eq=False, repr=False)
class CreateTagResponse(betterproto2.Message):
    """
    The result of a call to TagService.CreateTag.
    """

    tag: "Tag | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message(
    "sift.tags.v2", "CreateTagResponse", CreateTagResponse
)


@dataclass(eq=False, repr=False)
class ListTagsRequest(betterproto2.Message):
    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of tags to return.
    The service may return fewer than this value.
    If unspecified, at most 50 tags will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListTags` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListTags` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
    Available fields to filter by are 'name' and 'tag_id'.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#tag). Optional.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    How to order the retrieved campaigns. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date` and `name`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,name"
    """


default_message_pool.register_message(
    "sift.tags.v2", "ListTagsRequest", ListTagsRequest
)


@dataclass(eq=False, repr=False)
class ListTagsResponse(betterproto2.Message):
    tags: "list[Tag]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is empty, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sift.tags.v2", "ListTagsResponse", ListTagsResponse
)


@dataclass(eq=False, repr=False)
class Tag(betterproto2.Message):
    tag_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    created_by_user_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sift.tags.v2", "Tag", Tag)


class TagServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def create_tag(self, message: "CreateTagRequest") -> "CreateTagResponse":
        """
        Create a tag.
        """

        return self._channel.unary_unary(
            "/sift.tags.v2.TagService/CreateTag",
            CreateTagRequest.SerializeToString,
            CreateTagResponse.FromString,
        )(message)

    def list_tags(self, message: "ListTagsRequest") -> "ListTagsResponse":
        """
        Retrieves tags using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.tags.v2.TagService/ListTags",
            ListTagsRequest.SerializeToString,
            ListTagsResponse.FromString,
        )(message)


class TagServiceAsyncStub(betterproto2.ServiceStub):
    async def create_tag(
        self,
        message: "CreateTagRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateTagResponse":
        """
        Create a tag.
        """

        return await self._unary_unary(
            "/sift.tags.v2.TagService/CreateTag",
            message,
            CreateTagResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_tags(
        self,
        message: "ListTagsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListTagsResponse":
        """
        Retrieves tags using an optional filter.
        """

        return await self._unary_unary(
            "/sift.tags.v2.TagService/ListTags",
            message,
            ListTagsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TagServiceBase(ServiceBase):
    async def create_tag(self, message: "CreateTagRequest") -> "CreateTagResponse":
        """
        Create a tag.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_tags(self, message: "ListTagsRequest") -> "ListTagsResponse":
        """
        Retrieves tags using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_tag(
        self, stream: "grpclib.server.Stream[CreateTagRequest, CreateTagResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_tag(request)
        await stream.send_message(response)

    async def __rpc_list_tags(
        self, stream: "grpclib.server.Stream[ListTagsRequest, ListTagsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_tags(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.tags.v2.TagService/CreateTag": grpclib.const.Handler(
                self.__rpc_create_tag,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTagRequest,
                CreateTagResponse,
            ),
            "/sift.tags.v2.TagService/ListTags": grpclib.const.Handler(
                self.__rpc_list_tags,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListTagsRequest,
                ListTagsResponse,
            ),
        }
