# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/campaigns/v1/campaigns.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Campaign",
    "CampaignReport",
    "CreateCampaignFrom",
    "CreateCampaignRequest",
    "CreateCampaignResponse",
    "GetCampaignRequest",
    "GetCampaignResponse",
    "ListCampaignsRequest",
    "ListCampaignsResponse",
    "UpdateCampaignRequest",
    "UpdateCampaignResponse",
    "CampaignServiceStub",
    "CampaignServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class Campaign(betterproto2.Message):
    campaign_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    client_key: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )

    name: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    description: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )

    archived_date: "datetime.datetime | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )

    tags: "list[__tags__v1__.TagRef]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )

    reports: "list[CampaignReport]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A campaign, at its core, is a list of reports
    """

    created_from_campaign_id: "str | None" = betterproto2.field(
        13, betterproto2.TYPE_STRING, optional=True
    )
    """
    If this campaign was created by duplicating another campaign, that other campaign will be referenced here
    """


default_message_pool.register_message("sift.campaigns.v1", "Campaign", Campaign)


@dataclass(eq=False, repr=False)
class CampaignReport(betterproto2.Message):
    """
    A top-level summary of the report's rules is provided here so clients needn't aggregate this information themselves.
    """

    report_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Direct reference to the report. Set this on the client to tell the backend which report you're referring to.
    """

    report_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    num_annotations: "int" = betterproto2.field(3, betterproto2.TYPE_UINT32)
    """
    How many annotations exist under the report's various rules.
    """

    num_passed_rules: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    How many rules from this report were never triggered and generated NO annotations.
    """

    num_accepted_rules: "int" = betterproto2.field(5, betterproto2.TYPE_UINT32)
    """
    How many rules have annotations which are ALL marked as accepted.
    """

    num_failed_rules: "int" = betterproto2.field(6, betterproto2.TYPE_UINT32)
    """
    How many rules have ANY annotations which are marked as failed.
    """

    num_open_rules: "int" = betterproto2.field(7, betterproto2.TYPE_UINT32)
    """
    How many rules have annotations of which SOME are marked as open and NONE are marked as failed.
    """


default_message_pool.register_message(
    "sift.campaigns.v1", "CampaignReport", CampaignReport
)


@dataclass(eq=False, repr=False)
class CreateCampaignFrom(betterproto2.Message):
    """
    Campaigns can be created from a few different sources.

    Oneofs:
        - initializer:
    """

    reports: "__common__type__v1__.ResourceIdentifiers | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="initializer"
    )
    """
    Create a campaign directly from a set of reports
    """

    runs: "__common__type__v1__.ResourceIdentifiers | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="initializer"
    )
    """
    Create a campaign from a set of runs by collecting all the reports generated by those runs
    """

    other_campaign: "__common__type__v1__.ResourceIdentifier | None" = (
        betterproto2.field(
            3, betterproto2.TYPE_MESSAGE, optional=True, group="initializer"
        )
    )
    """
    Duplicate another campaign
    """


default_message_pool.register_message(
    "sift.campaigns.v1", "CreateCampaignFrom", CreateCampaignFrom
)


@dataclass(eq=False, repr=False)
class CreateCampaignRequest(betterproto2.Message):
    """
    The request of a call to `CampaignService_CreateCampaign` to create a campaign.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The descriptive display name of the created campaign
    """

    description: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    A custom description for the campaign
    """

    tags: "__common__type__v1__.NamedResources | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Tags to be applied to the new campaign
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    `organization_id` is only required if your user belongs to multiple organizations
    """

    client_key: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )
    """
    User-specified unique identifier.
    """

    create_from: "CreateCampaignFrom | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Initialize the campaign, or leave this field empty to create an empty campaign to be populated later
    """


default_message_pool.register_message(
    "sift.campaigns.v1", "CreateCampaignRequest", CreateCampaignRequest
)


@dataclass(eq=False, repr=False)
class CreateCampaignResponse(betterproto2.Message):
    """
    The response of a call to `CampaignService_CreateCampaign` to create a campaign.
    """

    campaign: "Campaign | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.campaigns.v1", "CreateCampaignResponse", CreateCampaignResponse
)


@dataclass(eq=False, repr=False)
class GetCampaignRequest(betterproto2.Message):
    """
    The request for a call to `CampaignService_GetCampaign` to retrieve a campaign.
    If `campaign_id` is provided then all other arguments will be ignored.
    The `organization_id` argument is only required if using `client_key` and the user belongs to multiple organizations.
    """

    campaign_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.campaigns.v1", "GetCampaignRequest", GetCampaignRequest
)


@dataclass(eq=False, repr=False)
class GetCampaignResponse(betterproto2.Message):
    """
    The response of a call to `CampaignService_GetCampaign` to retrieve a campaign.
    """

    campaign: "Campaign | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.campaigns.v1", "GetCampaignResponse", GetCampaignResponse
)


@dataclass(eq=False, repr=False)
class ListCampaignsRequest(betterproto2.Message):
    """
    The request for a call to `CampaignService_ListCampaigns` to retrieve campaigns.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of campaigns to return. The service may return fewer than this value.
    If unspecified, at most 50 campaigns will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListCampaigns` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListCampaigns` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are:
    `created_by_user_id`, `tag_id`, `tag_name`, `report_id`, `report_name`, `campaign_id`, `client_key`, `description`, `run_id`, and `name`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to this definition. Optional.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    include_archived: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    If `true` then archived campaigns will be included in the query. Defaults to `false`.
    """

    order_by: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    How to order the retrieved campaigns. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date` and `modified_date`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.campaigns.v1", "ListCampaignsRequest", ListCampaignsRequest
)


@dataclass(eq=False, repr=False)
class ListCampaignsResponse(betterproto2.Message):
    """
    The response of a call to `CampaignService_ListCampaignsResponse`.
    """

    campaigns: "list[Campaign]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.campaigns.v1", "ListCampaignsResponse", ListCampaignsResponse
)


@dataclass(eq=False, repr=False)
class UpdateCampaignRequest(betterproto2.Message):
    """
    The request for a call to `CampaignService_UpdateCampaign` to update a campaign. When updating
    tags or rules, the update will perform a full replace. Additionally, when updating rules, only the rule ID or the rule client key
    is required, but it is okay to provide both. If some rules contain only client keys and others only rule IDs, they will be consolidated.
    """

    campaign: "Campaign | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The campaign to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to be updated. The fields available to be updated are `name`, `archived_date`, `description`, `tags`, and `reports`.
    """


default_message_pool.register_message(
    "sift.campaigns.v1", "UpdateCampaignRequest", UpdateCampaignRequest
)


@dataclass(eq=False, repr=False)
class UpdateCampaignResponse(betterproto2.Message):
    """
    The response of a call to `CampaignService_UpdateCampaign`.
    """

    campaign: "Campaign | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.campaigns.v1", "UpdateCampaignResponse", UpdateCampaignResponse
)


class CampaignServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_campaign(self, message: "GetCampaignRequest") -> "GetCampaignResponse":
        """
        Retrieve a campaign.
        """

        return self._channel.unary_unary(
            "/sift.campaigns.v1.CampaignService/GetCampaign",
            GetCampaignRequest.SerializeToString,
            GetCampaignResponse.FromString,
        )(message)

    def create_campaign(
        self, message: "CreateCampaignRequest"
    ) -> "CreateCampaignResponse":
        """
        Create a campaign.
        """

        return self._channel.unary_unary(
            "/sift.campaigns.v1.CampaignService/CreateCampaign",
            CreateCampaignRequest.SerializeToString,
            CreateCampaignResponse.FromString,
        )(message)

    def list_campaigns(
        self, message: "ListCampaignsRequest"
    ) -> "ListCampaignsResponse":
        """
        List campaigns.
        """

        return self._channel.unary_unary(
            "/sift.campaigns.v1.CampaignService/ListCampaigns",
            ListCampaignsRequest.SerializeToString,
            ListCampaignsResponse.FromString,
        )(message)

    def update_campaign(
        self, message: "UpdateCampaignRequest"
    ) -> "UpdateCampaignResponse":
        """
        Updates an existing campaign using the list of fields specified in `update_mask`.
        """

        return self._channel.unary_unary(
            "/sift.campaigns.v1.CampaignService/UpdateCampaign",
            UpdateCampaignRequest.SerializeToString,
            UpdateCampaignResponse.FromString,
        )(message)


class CampaignServiceAsyncStub(betterproto2.ServiceStub):
    async def get_campaign(
        self,
        message: "GetCampaignRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCampaignResponse":
        """
        Retrieve a campaign.
        """

        return await self._unary_unary(
            "/sift.campaigns.v1.CampaignService/GetCampaign",
            message,
            GetCampaignResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_campaign(
        self,
        message: "CreateCampaignRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateCampaignResponse":
        """
        Create a campaign.
        """

        return await self._unary_unary(
            "/sift.campaigns.v1.CampaignService/CreateCampaign",
            message,
            CreateCampaignResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_campaigns(
        self,
        message: "ListCampaignsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListCampaignsResponse":
        """
        List campaigns.
        """

        return await self._unary_unary(
            "/sift.campaigns.v1.CampaignService/ListCampaigns",
            message,
            ListCampaignsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_campaign(
        self,
        message: "UpdateCampaignRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateCampaignResponse":
        """
        Updates an existing campaign using the list of fields specified in `update_mask`.
        """

        return await self._unary_unary(
            "/sift.campaigns.v1.CampaignService/UpdateCampaign",
            message,
            UpdateCampaignResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
from ...common.type import v1 as __common__type__v1__
from ...tags import v1 as __tags__v1__


class CampaignServiceBase(ServiceBase):
    async def get_campaign(
        self, message: "GetCampaignRequest"
    ) -> "GetCampaignResponse":
        """
        Retrieve a campaign.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_campaign(
        self, message: "CreateCampaignRequest"
    ) -> "CreateCampaignResponse":
        """
        Create a campaign.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_campaigns(
        self, message: "ListCampaignsRequest"
    ) -> "ListCampaignsResponse":
        """
        List campaigns.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_campaign(
        self, message: "UpdateCampaignRequest"
    ) -> "UpdateCampaignResponse":
        """
        Updates an existing campaign using the list of fields specified in `update_mask`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_campaign(
        self, stream: "grpclib.server.Stream[GetCampaignRequest, GetCampaignResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_campaign(request)
        await stream.send_message(response)

    async def __rpc_create_campaign(
        self,
        stream: "grpclib.server.Stream[CreateCampaignRequest, CreateCampaignResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_campaign(request)
        await stream.send_message(response)

    async def __rpc_list_campaigns(
        self,
        stream: "grpclib.server.Stream[ListCampaignsRequest, ListCampaignsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_campaigns(request)
        await stream.send_message(response)

    async def __rpc_update_campaign(
        self,
        stream: "grpclib.server.Stream[UpdateCampaignRequest, UpdateCampaignResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_campaign(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.campaigns.v1.CampaignService/GetCampaign": grpclib.const.Handler(
                self.__rpc_get_campaign,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCampaignRequest,
                GetCampaignResponse,
            ),
            "/sift.campaigns.v1.CampaignService/CreateCampaign": grpclib.const.Handler(
                self.__rpc_create_campaign,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateCampaignRequest,
                CreateCampaignResponse,
            ),
            "/sift.campaigns.v1.CampaignService/ListCampaigns": grpclib.const.Handler(
                self.__rpc_list_campaigns,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListCampaignsRequest,
                ListCampaignsResponse,
            ),
            "/sift.campaigns.v1.CampaignService/UpdateCampaign": grpclib.const.Handler(
                self.__rpc_update_campaign,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateCampaignRequest,
                UpdateCampaignResponse,
            ),
        }
