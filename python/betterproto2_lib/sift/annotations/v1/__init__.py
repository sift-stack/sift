# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/annotations/v1/annotations.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AnnotationState",
    "AnnotationType",
    "Annotation",
    "AnnotationLinkedChannel",
    "AnnotationLinkedChannelsBitFieldElement",
    "AnnotationLinkedChannelsChannel",
    "BatchDeleteAnnotationsRequest",
    "BatchDeleteAnnotationsResponse",
    "CreateAnnotationRequest",
    "CreateAnnotationResponse",
    "DeleteAnnotationRequest",
    "DeleteAnnotationResponse",
    "GetAnnotationRequest",
    "GetAnnotationResponse",
    "ListAnnotationsRequest",
    "ListAnnotationsResponse",
    "UpdateAnnotationRequest",
    "UpdateAnnotationResponse",
    "AnnotationServiceStub",
    "AnnotationServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class AnnotationState(betterproto2.Enum):
    UNSPECIFIED = 0

    OPEN = 1

    FLAGGED = 2

    RESOLVED = 3


class AnnotationType(betterproto2.Enum):
    UNSPECIFIED = 0

    DATA_REVIEW = 1

    PHASE = 2


@dataclass(eq=False, repr=False)
class Annotation(betterproto2.Message):
    annotation_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    start_time: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    end_time: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )

    run_id: "str | None" = betterproto2.field(
        10, betterproto2.TYPE_STRING, optional=True
    )

    state: "AnnotationState | None" = betterproto2.field(
        11, betterproto2.TYPE_ENUM, optional=True
    )

    organization_id: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)

    assigned_to_user_id: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    annotation_type: "AnnotationType" = betterproto2.field(
        14, betterproto2.TYPE_ENUM, default_factory=lambda: AnnotationType(0)
    )

    tags: "list[str]" = betterproto2.field(15, betterproto2.TYPE_STRING, repeated=True)

    legend_config: "str | None" = betterproto2.field(
        16, betterproto2.TYPE_STRING, optional=True
    )

    created_by_condition_id: "str | None" = betterproto2.field(
        17, betterproto2.TYPE_STRING, optional=True
    )

    created_by_rule_condition_version_id: "str | None" = betterproto2.field(
        18, betterproto2.TYPE_STRING, optional=True
    )

    report_rule_version_id: "str | None" = betterproto2.field(
        19, betterproto2.TYPE_STRING, optional=True
    )

    pending: "bool" = betterproto2.field(20, betterproto2.TYPE_BOOL)
    """
    An annotation is pending if it is part of an ongoing violation of a rule condition.
    The `end_time` of a pending annotation might be set, but is not yet finalized.
    """


default_message_pool.register_message("sift.annotations.v1", "Annotation", Annotation)


@dataclass(eq=False, repr=False)
class AnnotationLinkedChannel(betterproto2.Message):
    """


    Oneofs:
        - type:
    """

    channel: "AnnotationLinkedChannelsChannel | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    bit_field_element: "AnnotationLinkedChannelsBitFieldElement | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="type")
    )


default_message_pool.register_message(
    "sift.annotations.v1", "AnnotationLinkedChannel", AnnotationLinkedChannel
)


@dataclass(eq=False, repr=False)
class AnnotationLinkedChannelsBitFieldElement(betterproto2.Message):
    channel_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    bit_field_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotations.v1",
    "AnnotationLinkedChannelsBitFieldElement",
    AnnotationLinkedChannelsBitFieldElement,
)


@dataclass(eq=False, repr=False)
class AnnotationLinkedChannelsChannel(betterproto2.Message):
    channel_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotations.v1",
    "AnnotationLinkedChannelsChannel",
    AnnotationLinkedChannelsChannel,
)


@dataclass(eq=False, repr=False)
class BatchDeleteAnnotationsRequest(betterproto2.Message):
    annotation_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Limit of 1000 annotations per batch
    """


default_message_pool.register_message(
    "sift.annotations.v1",
    "BatchDeleteAnnotationsRequest",
    BatchDeleteAnnotationsRequest,
)


@dataclass(eq=False, repr=False)
class BatchDeleteAnnotationsResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.annotations.v1",
    "BatchDeleteAnnotationsResponse",
    BatchDeleteAnnotationsResponse,
)


@dataclass(eq=False, repr=False)
class CreateAnnotationRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationService_CreateAnnotation` to create a new annotation.
    At least 1 asset, tag, or channel must be specified.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name assigned to the new annotation.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A short description about the new annotation.
    """

    start_time: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When the annotation starts.
    """

    end_time: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When the annotation ends.
    """

    assets: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    The names of the assets to associate with this annotation.
    """

    linked_channels: "list[AnnotationLinkedChannel]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The channels to associate with this annotation.
    """

    tags: "list[str]" = betterproto2.field(7, betterproto2.TYPE_STRING, repeated=True)
    """
    The names of the tags to associate with this annotation.
    """

    run_id: "str | None" = betterproto2.field(
        8, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ID of the run that this annotation is associated with.
    """

    assign_to_user_id: "str | None" = betterproto2.field(
        9, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ID of the user that this annotation is assigned to.
    """

    organization_id: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    The organization associated with this annotation. An organization ID is only required
    if the user belongs to multiple organizations.
    """

    state: "AnnotationState | None" = betterproto2.field(
        11, betterproto2.TYPE_ENUM, optional=True
    )
    """
    The state of the annotation. If an annotation has an `annotation_type` of `ANNOTATION_TYPE_PHASE`, then state must be
    unset, otherwise an error will be returned.
    """

    annotation_type: "AnnotationType" = betterproto2.field(
        12, betterproto2.TYPE_ENUM, default_factory=lambda: AnnotationType(0)
    )
    """
    The type of the annotation.
    """

    created_by_condition_id: "str | None" = betterproto2.field(
        14, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ID of the rule condition that created this annotation.
    """

    legend_config: "str | None" = betterproto2.field(
        13, betterproto2.TYPE_STRING, optional=True
    )
    """
    A JSON string containing the axes configuration of the annotation's linked channels.
    """

    created_by_rule_condition_version_id: "str | None" = betterproto2.field(
        15, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ID of the rule condition version that created this annotation.
    """


default_message_pool.register_message(
    "sift.annotations.v1", "CreateAnnotationRequest", CreateAnnotationRequest
)


@dataclass(eq=False, repr=False)
class CreateAnnotationResponse(betterproto2.Message):
    """
    The result of a call to `AnnotationService_CreateAnnotation`.
    """

    annotation: "Annotation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.annotations.v1", "CreateAnnotationResponse", CreateAnnotationResponse
)


@dataclass(eq=False, repr=False)
class DeleteAnnotationRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationService_DeleteAnnotation`.
    """

    annotation_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotations.v1", "DeleteAnnotationRequest", DeleteAnnotationRequest
)


@dataclass(eq=False, repr=False)
class DeleteAnnotationResponse(betterproto2.Message):
    """
    The response of a call to `AnnotationService_DeleteAnnotation`.
    """

    pass


default_message_pool.register_message(
    "sift.annotations.v1", "DeleteAnnotationResponse", DeleteAnnotationResponse
)


@dataclass(eq=False, repr=False)
class GetAnnotationRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationService_GetAnnotation`.
    """

    annotation_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotations.v1", "GetAnnotationRequest", GetAnnotationRequest
)


@dataclass(eq=False, repr=False)
class GetAnnotationResponse(betterproto2.Message):
    """
    The response of a call to `AnnotationService_GetAnnotation`.
    """

    annotation: "Annotation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.annotations.v1", "GetAnnotationResponse", GetAnnotationResponse
)


@dataclass(eq=False, repr=False)
class ListAnnotationsRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationService_ListAnnotations` to retrieve annotations.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of annotations to return. The service may return fewer than this value.
    If unspecified, at most 50 annotations will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListAnnotations` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListAnnotations` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `annotation_id`, `start_time`, `end_time`,
    `created_date`, `modified_date`, `run_id`, `name`, `description`, `state`, `created_by_user_id`, `created_by_rule_condition_version_id`,
    `annotation_type`, `tag_name`, `report_id`, `asset_id`, `asset_name`, `pending`, and `assignee`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/annotations#annotation). Optional.
    """

    organization_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    This field is only required if your user belongs to multiple organizations.
    """

    order_by: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    How to order the retrieved annotations. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date`, `modified_date`, `start_time`, and `end_time`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.annotations.v1", "ListAnnotationsRequest", ListAnnotationsRequest
)


@dataclass(eq=False, repr=False)
class ListAnnotationsResponse(betterproto2.Message):
    """
    The result of a call to `AnnotationService_ListAnnotations`.
    """

    annotations: "list[Annotation]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Oops, we skipped to index 5! No reason for that; the indices between aren't reserved or anything.
    """


default_message_pool.register_message(
    "sift.annotations.v1", "ListAnnotationsResponse", ListAnnotationsResponse
)


@dataclass(eq=False, repr=False)
class UpdateAnnotationRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationService_UpdateAnnotation` to update an annotation.
    """

    annotation: "Annotation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The annotation to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to be updated. The fields available to be updated are `name`, `description`, `start_time`,
    `end_time`, `assigned_to_user_id`, `state`, and `tags`.
    Important Note: if `tags` is specified in the update mask and `annotation.tags` is an empty list then all associated tags on the annotation
    will be removed.
    """


default_message_pool.register_message(
    "sift.annotations.v1", "UpdateAnnotationRequest", UpdateAnnotationRequest
)


@dataclass(eq=False, repr=False)
class UpdateAnnotationResponse(betterproto2.Message):
    """
    The response of a call to `AnnotationService_UpdateAnnotation`.
    """

    annotation: "Annotation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.annotations.v1", "UpdateAnnotationResponse", UpdateAnnotationResponse
)


class AnnotationServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def create_annotation(
        self, message: "CreateAnnotationRequest"
    ) -> "CreateAnnotationResponse":
        """
        Creates an annotation.
        """

        return self._channel.unary_unary(
            "/sift.annotations.v1.AnnotationService/CreateAnnotation",
            CreateAnnotationRequest.SerializeToString,
            CreateAnnotationResponse.FromString,
        )(message)

    def delete_annotation(
        self, message: "DeleteAnnotationRequest"
    ) -> "DeleteAnnotationResponse":
        """
        Deletes an annotation.
        """

        return self._channel.unary_unary(
            "/sift.annotations.v1.AnnotationService/DeleteAnnotation",
            DeleteAnnotationRequest.SerializeToString,
            DeleteAnnotationResponse.FromString,
        )(message)

    def batch_delete_annotations(
        self, message: "BatchDeleteAnnotationsRequest"
    ) -> "BatchDeleteAnnotationsResponse":
        """
        Batch deletes annotations.
        """

        return self._channel.unary_unary(
            "/sift.annotations.v1.AnnotationService/BatchDeleteAnnotations",
            BatchDeleteAnnotationsRequest.SerializeToString,
            BatchDeleteAnnotationsResponse.FromString,
        )(message)

    def list_annotations(
        self, message: "ListAnnotationsRequest"
    ) -> "ListAnnotationsResponse":
        """
        Retrieves annotations using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.annotations.v1.AnnotationService/ListAnnotations",
            ListAnnotationsRequest.SerializeToString,
            ListAnnotationsResponse.FromString,
        )(message)

    def get_annotation(
        self, message: "GetAnnotationRequest"
    ) -> "GetAnnotationResponse":
        """
        Retrieves an annotation
        """

        return self._channel.unary_unary(
            "/sift.annotations.v1.AnnotationService/GetAnnotation",
            GetAnnotationRequest.SerializeToString,
            GetAnnotationResponse.FromString,
        )(message)

    def update_annotation(
        self, message: "UpdateAnnotationRequest"
    ) -> "UpdateAnnotationResponse":
        """
        Updates an existing annotation using using the list of fields specified in `update_mask`.
        """

        return self._channel.unary_unary(
            "/sift.annotations.v1.AnnotationService/UpdateAnnotation",
            UpdateAnnotationRequest.SerializeToString,
            UpdateAnnotationResponse.FromString,
        )(message)


class AnnotationServiceAsyncStub(betterproto2.ServiceStub):
    async def create_annotation(
        self,
        message: "CreateAnnotationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateAnnotationResponse":
        """
        Creates an annotation.
        """

        return await self._unary_unary(
            "/sift.annotations.v1.AnnotationService/CreateAnnotation",
            message,
            CreateAnnotationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_annotation(
        self,
        message: "DeleteAnnotationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteAnnotationResponse":
        """
        Deletes an annotation.
        """

        return await self._unary_unary(
            "/sift.annotations.v1.AnnotationService/DeleteAnnotation",
            message,
            DeleteAnnotationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_delete_annotations(
        self,
        message: "BatchDeleteAnnotationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchDeleteAnnotationsResponse":
        """
        Batch deletes annotations.
        """

        return await self._unary_unary(
            "/sift.annotations.v1.AnnotationService/BatchDeleteAnnotations",
            message,
            BatchDeleteAnnotationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_annotations(
        self,
        message: "ListAnnotationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListAnnotationsResponse":
        """
        Retrieves annotations using an optional filter.
        """

        return await self._unary_unary(
            "/sift.annotations.v1.AnnotationService/ListAnnotations",
            message,
            ListAnnotationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_annotation(
        self,
        message: "GetAnnotationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetAnnotationResponse":
        """
        Retrieves an annotation
        """

        return await self._unary_unary(
            "/sift.annotations.v1.AnnotationService/GetAnnotation",
            message,
            GetAnnotationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_annotation(
        self,
        message: "UpdateAnnotationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateAnnotationResponse":
        """
        Updates an existing annotation using using the list of fields specified in `update_mask`.
        """

        return await self._unary_unary(
            "/sift.annotations.v1.AnnotationService/UpdateAnnotation",
            message,
            UpdateAnnotationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__


class AnnotationServiceBase(ServiceBase):
    async def create_annotation(
        self, message: "CreateAnnotationRequest"
    ) -> "CreateAnnotationResponse":
        """
        Creates an annotation.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_annotation(
        self, message: "DeleteAnnotationRequest"
    ) -> "DeleteAnnotationResponse":
        """
        Deletes an annotation.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_delete_annotations(
        self, message: "BatchDeleteAnnotationsRequest"
    ) -> "BatchDeleteAnnotationsResponse":
        """
        Batch deletes annotations.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_annotations(
        self, message: "ListAnnotationsRequest"
    ) -> "ListAnnotationsResponse":
        """
        Retrieves annotations using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_annotation(
        self, message: "GetAnnotationRequest"
    ) -> "GetAnnotationResponse":
        """
        Retrieves an annotation
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_annotation(
        self, message: "UpdateAnnotationRequest"
    ) -> "UpdateAnnotationResponse":
        """
        Updates an existing annotation using using the list of fields specified in `update_mask`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_annotation(
        self,
        stream: "grpclib.server.Stream[CreateAnnotationRequest, CreateAnnotationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_annotation(request)
        await stream.send_message(response)

    async def __rpc_delete_annotation(
        self,
        stream: "grpclib.server.Stream[DeleteAnnotationRequest, DeleteAnnotationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_annotation(request)
        await stream.send_message(response)

    async def __rpc_batch_delete_annotations(
        self,
        stream: "grpclib.server.Stream[BatchDeleteAnnotationsRequest, BatchDeleteAnnotationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_delete_annotations(request)
        await stream.send_message(response)

    async def __rpc_list_annotations(
        self,
        stream: "grpclib.server.Stream[ListAnnotationsRequest, ListAnnotationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_annotations(request)
        await stream.send_message(response)

    async def __rpc_get_annotation(
        self,
        stream: "grpclib.server.Stream[GetAnnotationRequest, GetAnnotationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_annotation(request)
        await stream.send_message(response)

    async def __rpc_update_annotation(
        self,
        stream: "grpclib.server.Stream[UpdateAnnotationRequest, UpdateAnnotationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_annotation(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.annotations.v1.AnnotationService/CreateAnnotation": grpclib.const.Handler(
                self.__rpc_create_annotation,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateAnnotationRequest,
                CreateAnnotationResponse,
            ),
            "/sift.annotations.v1.AnnotationService/DeleteAnnotation": grpclib.const.Handler(
                self.__rpc_delete_annotation,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteAnnotationRequest,
                DeleteAnnotationResponse,
            ),
            "/sift.annotations.v1.AnnotationService/BatchDeleteAnnotations": grpclib.const.Handler(
                self.__rpc_batch_delete_annotations,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchDeleteAnnotationsRequest,
                BatchDeleteAnnotationsResponse,
            ),
            "/sift.annotations.v1.AnnotationService/ListAnnotations": grpclib.const.Handler(
                self.__rpc_list_annotations,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAnnotationsRequest,
                ListAnnotationsResponse,
            ),
            "/sift.annotations.v1.AnnotationService/GetAnnotation": grpclib.const.Handler(
                self.__rpc_get_annotation,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAnnotationRequest,
                GetAnnotationResponse,
            ),
            "/sift.annotations.v1.AnnotationService/UpdateAnnotation": grpclib.const.Handler(
                self.__rpc_update_annotation,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateAnnotationRequest,
                UpdateAnnotationResponse,
            ),
        }
