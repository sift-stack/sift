# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/protobuf_descriptors/v2/channel_parsing_options.proto, sift/protobuf_descriptors/v2/protobuf_descriptors.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ArrayIndexOverrideType",
    "BytesDecodingType",
    "MapKeyOverrideType",
    "TagSourceType",
    "TagTargetType",
    "AddProtobufDescriptorRequest",
    "AddProtobufDescriptorResponse",
    "DeleteProtobufDescriptorsRequest",
    "DeleteProtobufDescriptorsResponse",
    "ListProtobufDescriptorsRequest",
    "ListProtobufDescriptorsResponse",
    "ProtobufDescriptor",
    "TagSource",
    "TagTarget",
    "ProtobufDescriptorServiceStub",
    "ProtobufDescriptorServiceBase",
)

import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class ArrayIndexOverrideType(betterproto2.Enum):
    """
    Enum for the source and destination of an array index override
    """

    ARRAY_INDEX_OVERRIDE_UNSPECIFIED = 0
    """
    Default value, will be ignored
    """

    ARRAY_INDEX_OVERRIDE_TARGET = 1
    """
    Array Index will be replaced on fields with this type specified
    """

    ARRAY_INDEX_OVERRIDE_SOURCE = 2
    """
    Array Index  will be sourced from fields with this type specified
    """

    ARRAY_INDEX_OVERRIDE_REMOVE_INDEX = 3
    """
    Array Index will be removed from fields with this type specified
    """

    ARRAY_INDEX_OVERRIDE_ENUM = 4
    """
    Array Index will be replaced with the enum name specified by the display_override_enum value on the field
    """


class BytesDecodingType(betterproto2.Enum):
    """
    Enum for how to decode bytes fields
    """

    UNSPECIFIED = 0
    """
    Default value, will be ignored
    """

    UTF8 = 1
    """
    Decode bytes as UTF-8
    """


class MapKeyOverrideType(betterproto2.Enum):
    """
    Enum for the source and destination of a map key override
    """

    MAP_KEY_OVERRIDE_UNSPECIFIED = 0
    """
    Default value, will be ignored
    """

    MAP_KEY_OVERRIDE_TARGET = 1
    """
    Map key will be replaced on fields with this type specified
    """

    MAP_KEY_OVERRIDE_SOURCE = 2
    """
    Map key will be sourced from fields with this type specified
    """

    MAP_KEY_OVERRIDE_REMOVE_KEY = 3
    """
    Map key will be removed from fields with this type specified
    """

    MAP_KEY_OVERRIDE_ENUM = 4
    """
    Map key will be replaced with the enum name specified by the display_override_enum value on the field
    """


class TagSourceType(betterproto2.Enum):
    """
    Enum for different types of tag sources
    """

    DESCENDANT_SOURCES = 0
    """
    Tags can be sourced from descendant fields
    """

    SIBLING_SOURCES = 1
    """
    Tags can be sourced from sibling fields
    """

    DESCENDANT_AND_SIBLING_SOURCES = 2
    """
    Tags can be sourced from both descendant and sibling fields
    """


class TagTargetType(betterproto2.Enum):
    """
    Enum for different types of tag targets
    """

    ANCESTOR_TARGETS = 0
    """
    Tags can be applied to ancestor fields
    """

    SIBLING_TARGETS = 1
    """
    Tags can be applied to sibling fields
    """

    ANCESTOR_AND_SIBLING_TARGETS = 2
    """
    Tags can be applied to both ancestor and sibling fields
    """


@dataclass(eq=False, repr=False)
class AddProtobufDescriptorRequest(betterproto2.Message):
    protobuf_descriptor: "ProtobufDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    force_duplicate_registration: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If set to true, the service will ignore checks that this descriptor has already been registered
    and will ensure that it is registered as the latest proto descriptor for the message type.
    """


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2",
    "AddProtobufDescriptorRequest",
    AddProtobufDescriptorRequest,
)


@dataclass(eq=False, repr=False)
class AddProtobufDescriptorResponse(betterproto2.Message):
    protobuf_descriptor: "ProtobufDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2",
    "AddProtobufDescriptorResponse",
    AddProtobufDescriptorResponse,
)


@dataclass(eq=False, repr=False)
class DeleteProtobufDescriptorsRequest(betterproto2.Message):
    message_type_full_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    namespace: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    protobuf_descriptor_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("message_type_full_name"):
            warnings.warn(
                "DeleteProtobufDescriptorsRequest.message_type_full_name is deprecated",
                DeprecationWarning,
            )
        if self.is_set("namespace"):
            warnings.warn(
                "DeleteProtobufDescriptorsRequest.namespace is deprecated",
                DeprecationWarning,
            )


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2",
    "DeleteProtobufDescriptorsRequest",
    DeleteProtobufDescriptorsRequest,
)


@dataclass(eq=False, repr=False)
class DeleteProtobufDescriptorsResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2",
    "DeleteProtobufDescriptorsResponse",
    DeleteProtobufDescriptorsResponse,
)


@dataclass(eq=False, repr=False)
class ListProtobufDescriptorsRequest(betterproto2.Message):
    """
    The request for a call to `ProtobufDescriptorService_ListProtobufDescriptors` to retrieve protobuf descriptors.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of protobuf descriptors to return.
    The service may return fewer than this value.
    If unspecified, at most 50 protobuf descriptors will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListProtobufDescriptors` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListProtobufDescriptors` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `protobuf_descriptor_id`, `proto_file_name`, `namespace`, and `message_type_full_name`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#protobufdescriptor). Optional.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    How to order the retrieved protobuf descriptors. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date`, `modified_date`, and `message_type_full_name` and `namespace`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
    Example: "created_date desc,modified_date"
    """


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2",
    "ListProtobufDescriptorsRequest",
    ListProtobufDescriptorsRequest,
)


@dataclass(eq=False, repr=False)
class ListProtobufDescriptorsResponse(betterproto2.Message):
    """
    The response of a call to `ProtobufDescriptorService_ListProtobufDescriptors`.
    """

    protobuf_descriptors: "list[ProtobufDescriptor]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2",
    "ListProtobufDescriptorsResponse",
    ListProtobufDescriptorsResponse,
)


@dataclass(eq=False, repr=False)
class ProtobufDescriptor(betterproto2.Message):
    message_type_full_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    file_descriptor_set: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    proto_file_name: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    namespace: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    protobuf_descriptor_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2", "ProtobufDescriptor", ProtobufDescriptor
)


@dataclass(eq=False, repr=False)
class TagSource(betterproto2.Message):
    """
    Message representing a tag source

    Setting either of these values indicates that the field is a tag source
    and the value can be applied to allowed tag_targets.
    Tag sources apply only to the nearest ancestor (if any) and do not propagate
    to ancestors that are lists or maps or beyond.
    They can apply to both ancestor and sibling fields.
    """

    allowed_tag_target: "TagTargetType | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Indicates which tag_target relationships are allowed to have this tag.
    If set to ANCESTOR_TARGETS, sibling tag_targets will not have this value.
    If set to SIBLING_TARGETS, it will not apply to tag_targets that are ancestors.
    """

    tag_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The name of the tag. It defaults to the field name but can be overridden here.
    """


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2", "TagSource", TagSource
)


@dataclass(eq=False, repr=False)
class TagTarget(betterproto2.Message):
    """
    Message representing a tag target
    """

    allowed_tag_source: "TagSourceType | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Setting this value indicates the allowed sources for tag values.
    If set to SIBLING_SOURCES, tag_sources from descendant proto fields will not be applied.
    If set to DESCENDANT_SOURCES, sibling tag_sources will not be applied.
    """


default_message_pool.register_message(
    "sift.protobuf_descriptors.v2", "TagTarget", TagTarget
)


class ProtobufDescriptorServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def add_protobuf_descriptor(
        self, message: "AddProtobufDescriptorRequest"
    ) -> "AddProtobufDescriptorResponse":
        """
        Used to register a protobuf message to be ingested.
        """

        return self._channel.unary_unary(
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/AddProtobufDescriptor",
            AddProtobufDescriptorRequest.SerializeToString,
            AddProtobufDescriptorResponse.FromString,
        )(message)

    def delete_protobuf_descriptors(
        self, message: "DeleteProtobufDescriptorsRequest"
    ) -> "DeleteProtobufDescriptorsResponse":
        """
        Delete protobuf descriptors of that match the provided `namespace` and `message_type_full_name`.
        """

        return self._channel.unary_unary(
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/DeleteProtobufDescriptors",
            DeleteProtobufDescriptorsRequest.SerializeToString,
            DeleteProtobufDescriptorsResponse.FromString,
        )(message)

    def list_protobuf_descriptors(
        self, message: "ListProtobufDescriptorsRequest"
    ) -> "ListProtobufDescriptorsResponse":
        """
        Retrieve protobuf descriptors using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/ListProtobufDescriptors",
            ListProtobufDescriptorsRequest.SerializeToString,
            ListProtobufDescriptorsResponse.FromString,
        )(message)


class ProtobufDescriptorServiceAsyncStub(betterproto2.ServiceStub):
    async def add_protobuf_descriptor(
        self,
        message: "AddProtobufDescriptorRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AddProtobufDescriptorResponse":
        """
        Used to register a protobuf message to be ingested.
        """

        return await self._unary_unary(
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/AddProtobufDescriptor",
            message,
            AddProtobufDescriptorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_protobuf_descriptors(
        self,
        message: "DeleteProtobufDescriptorsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteProtobufDescriptorsResponse":
        """
        Delete protobuf descriptors of that match the provided `namespace` and `message_type_full_name`.
        """

        return await self._unary_unary(
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/DeleteProtobufDescriptors",
            message,
            DeleteProtobufDescriptorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_protobuf_descriptors(
        self,
        message: "ListProtobufDescriptorsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListProtobufDescriptorsResponse":
        """
        Retrieve protobuf descriptors using an optional filter.
        """

        return await self._unary_unary(
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/ListProtobufDescriptors",
            message,
            ListProtobufDescriptorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ProtobufDescriptorServiceBase(ServiceBase):
    async def add_protobuf_descriptor(
        self, message: "AddProtobufDescriptorRequest"
    ) -> "AddProtobufDescriptorResponse":
        """
        Used to register a protobuf message to be ingested.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_protobuf_descriptors(
        self, message: "DeleteProtobufDescriptorsRequest"
    ) -> "DeleteProtobufDescriptorsResponse":
        """
        Delete protobuf descriptors of that match the provided `namespace` and `message_type_full_name`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_protobuf_descriptors(
        self, message: "ListProtobufDescriptorsRequest"
    ) -> "ListProtobufDescriptorsResponse":
        """
        Retrieve protobuf descriptors using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_protobuf_descriptor(
        self,
        stream: "grpclib.server.Stream[AddProtobufDescriptorRequest, AddProtobufDescriptorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_protobuf_descriptor(request)
        await stream.send_message(response)

    async def __rpc_delete_protobuf_descriptors(
        self,
        stream: "grpclib.server.Stream[DeleteProtobufDescriptorsRequest, DeleteProtobufDescriptorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_protobuf_descriptors(request)
        await stream.send_message(response)

    async def __rpc_list_protobuf_descriptors(
        self,
        stream: "grpclib.server.Stream[ListProtobufDescriptorsRequest, ListProtobufDescriptorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_protobuf_descriptors(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/AddProtobufDescriptor": grpclib.const.Handler(
                self.__rpc_add_protobuf_descriptor,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddProtobufDescriptorRequest,
                AddProtobufDescriptorResponse,
            ),
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/DeleteProtobufDescriptors": grpclib.const.Handler(
                self.__rpc_delete_protobuf_descriptors,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteProtobufDescriptorsRequest,
                DeleteProtobufDescriptorsResponse,
            ),
            "/sift.protobuf_descriptors.v2.ProtobufDescriptorService/ListProtobufDescriptors": grpclib.const.Handler(
                self.__rpc_list_protobuf_descriptors,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListProtobufDescriptorsRequest,
                ListProtobufDescriptorsResponse,
            ),
        }
