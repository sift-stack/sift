# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/ping/v1/ping.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "PingRequest",
    "PingResponse",
    "PingServiceStub",
    "PingServiceBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class PingRequest(betterproto2.Message):
    pass


default_message_pool.register_message("sift.ping.v1", "PingRequest", PingRequest)


@dataclass(eq=False, repr=False)
class PingResponse(betterproto2.Message):
    response: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.ping.v1", "PingResponse", PingResponse)


class PingServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def ping(self, message: "PingRequest | None" = None) -> "PingResponse":
        if message is None:
            message = PingRequest()

        return self._channel.unary_unary(
            "/sift.ping.v1.PingService/Ping",
            PingRequest.SerializeToString,
            PingResponse.FromString,
        )(message)


class PingServiceAsyncStub(betterproto2.ServiceStub):
    async def ping(
        self,
        message: "PingRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "PingResponse":
        if message is None:
            message = PingRequest()

        return await self._unary_unary(
            "/sift.ping.v1.PingService/Ping",
            message,
            PingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PingServiceBase(ServiceBase):
    async def ping(self, message: "PingRequest") -> "PingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_ping(
        self, stream: "grpclib.server.Stream[PingRequest, PingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ping(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.ping.v1.PingService/Ping": grpclib.const.Handler(
                self.__rpc_ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                PingRequest,
                PingResponse,
            ),
        }
