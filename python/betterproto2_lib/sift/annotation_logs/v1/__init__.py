# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/annotation_logs/v1/annotation_logs.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AnnotationCommentBodyElementType",
    "AnnotationLogKind",
    "AnnotationLogState",
    "AnnotationCommentBodyElement",
    "AnnotationCommentUserMention",
    "AnnotationLogAssignedProperties",
    "AnnotationLogCommentProperties",
    "AnnotationLogSearchResult",
    "AnnotationLogStateUpdateProperties",
    "CreateAnnotationLogRequest",
    "CreateAnnotationLogResponse",
    "DeleteAnnotationLogRequest",
    "DeleteAnnotationLogResponse",
    "ListAnnotationLogsRequest",
    "ListAnnotationLogsResponse",
    "AnnotationLogServiceStub",
    "AnnotationLogServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class AnnotationCommentBodyElementType(betterproto2.Enum):
    UNSPECIFIED = 0

    TEXT = 1

    USER_MENTION = 2


class AnnotationLogKind(betterproto2.Enum):
    UNSPECIFIED = 0

    COMMENT = 1

    STATE_UPDATE = 2

    ASSIGNED = 3


class AnnotationLogState(betterproto2.Enum):
    UNSPECIFIED = 0

    CREATED = 1

    OPEN = 2

    FLAGGED = 3

    RESOLVED = 4


@dataclass(eq=False, repr=False)
class AnnotationCommentBodyElement(betterproto2.Message):
    type: "AnnotationCommentBodyElementType" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: AnnotationCommentBodyElementType(0),
    )

    text: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    user_mention: "AnnotationCommentUserMention | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "AnnotationCommentBodyElement",
    AnnotationCommentBodyElement,
)


@dataclass(eq=False, repr=False)
class AnnotationCommentUserMention(betterproto2.Message):
    user_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    user_email: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "AnnotationCommentUserMention",
    AnnotationCommentUserMention,
)


@dataclass(eq=False, repr=False)
class AnnotationLogAssignedProperties(betterproto2.Message):
    assigned_to_user_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    assigned_to_user_email: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "AnnotationLogAssignedProperties",
    AnnotationLogAssignedProperties,
)


@dataclass(eq=False, repr=False)
class AnnotationLogCommentProperties(betterproto2.Message):
    body: "list[AnnotationCommentBodyElement]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "AnnotationLogCommentProperties",
    AnnotationLogCommentProperties,
)


@dataclass(eq=False, repr=False)
class AnnotationLogSearchResult(betterproto2.Message):
    """


    Oneofs:
        - properties:
    """

    annotation_log_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    annotation_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    kind: "AnnotationLogKind" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, default_factory=lambda: AnnotationLogKind(0)
    )

    created_by_user_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    created_by_user_name: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    assigned: "AnnotationLogAssignedProperties | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True, group="properties"
    )

    state_update: "AnnotationLogStateUpdateProperties | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True, group="properties"
    )

    comment: "AnnotationLogCommentProperties | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True, group="properties"
    )


default_message_pool.register_message(
    "sift.annotation_logs.v1", "AnnotationLogSearchResult", AnnotationLogSearchResult
)


@dataclass(eq=False, repr=False)
class AnnotationLogStateUpdateProperties(betterproto2.Message):
    state: "AnnotationLogState" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: AnnotationLogState(0)
    )


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "AnnotationLogStateUpdateProperties",
    AnnotationLogStateUpdateProperties,
)


@dataclass(eq=False, repr=False)
class CreateAnnotationLogRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationLogService_CreateAnnotationLog` to create an annotation log.

    Oneofs:
        - properties: The properties associated with the specific kind of annotation log.
    """

    annotation_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the parent annotation associated to associate with the new annotation log.
    """

    kind: "AnnotationLogKind" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: AnnotationLogKind(0)
    )
    """
    The kind of annotation log to create.
    """

    assigned: "AnnotationLogAssignedProperties | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="properties"
    )

    state_update: "AnnotationLogStateUpdateProperties | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="properties"
    )

    comment: "AnnotationLogCommentProperties | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="properties"
    )


default_message_pool.register_message(
    "sift.annotation_logs.v1", "CreateAnnotationLogRequest", CreateAnnotationLogRequest
)


@dataclass(eq=False, repr=False)
class CreateAnnotationLogResponse(betterproto2.Message):
    """
    The response of a call to `AnnotationLogService_CreateAnnotationLog`.
    """

    annotation_log: "AnnotationLogSearchResult | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "CreateAnnotationLogResponse",
    CreateAnnotationLogResponse,
)


@dataclass(eq=False, repr=False)
class DeleteAnnotationLogRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationLogService_DeleteAnnotationLog` to delete an annotation log.
    """

    annotation_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the parent annotation associated with the annotation log to be deleted.
    """

    annotation_log_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    ID of the annotation log to be deleted.
    """


default_message_pool.register_message(
    "sift.annotation_logs.v1", "DeleteAnnotationLogRequest", DeleteAnnotationLogRequest
)


@dataclass(eq=False, repr=False)
class DeleteAnnotationLogResponse(betterproto2.Message):
    """
    The Response of a call to `AnnotationLogService_DeleteAnnotationLog`.
    """

    pass


default_message_pool.register_message(
    "sift.annotation_logs.v1",
    "DeleteAnnotationLogResponse",
    DeleteAnnotationLogResponse,
)


@dataclass(eq=False, repr=False)
class ListAnnotationLogsRequest(betterproto2.Message):
    """
    The request for a call to `AnnotationLogService_ListAnnotationLogs` to retrieve annotation logs.
    """

    annotation_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the parent annotation associated with the annotation logs.
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    The maximum number of annotation logs to return.
    The service may return fewer than this value.
    If unspecified, at most 50 annotation logs will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListAnnotationLogs` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListAnnotationLogs` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `annotation_log_id`, `annotation_id`, `created_by_user_id`,
    `created_date`, `modified_date`, and `kind`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/annotation_logs#annotationlogsearchresult). Optional.
    """


default_message_pool.register_message(
    "sift.annotation_logs.v1", "ListAnnotationLogsRequest", ListAnnotationLogsRequest
)


@dataclass(eq=False, repr=False)
class ListAnnotationLogsResponse(betterproto2.Message):
    """
    The response of a call to `AnnotationLogService_ListAnnotationLogs`.
    """

    annotation_logs: "list[AnnotationLogSearchResult]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.annotation_logs.v1", "ListAnnotationLogsResponse", ListAnnotationLogsResponse
)


class AnnotationLogServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def create_annotation_log(
        self, message: "CreateAnnotationLogRequest"
    ) -> "CreateAnnotationLogResponse":
        """
        Creates an annotation log on an annotation.
        """

        return self._channel.unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/CreateAnnotationLog",
            CreateAnnotationLogRequest.SerializeToString,
            CreateAnnotationLogResponse.FromString,
        )(message)

    def list_annotation_logs(
        self, message: "ListAnnotationLogsRequest"
    ) -> "ListAnnotationLogsResponse":
        """
        Retrieves annotation logs using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/ListAnnotationLogs",
            ListAnnotationLogsRequest.SerializeToString,
            ListAnnotationLogsResponse.FromString,
        )(message)

    def delete_annotation_log(
        self, message: "DeleteAnnotationLogRequest"
    ) -> "DeleteAnnotationLogResponse":
        """
        Deletes an annotation log.
        """

        return self._channel.unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/DeleteAnnotationLog",
            DeleteAnnotationLogRequest.SerializeToString,
            DeleteAnnotationLogResponse.FromString,
        )(message)


class AnnotationLogServiceAsyncStub(betterproto2.ServiceStub):
    async def create_annotation_log(
        self,
        message: "CreateAnnotationLogRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateAnnotationLogResponse":
        """
        Creates an annotation log on an annotation.
        """

        return await self._unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/CreateAnnotationLog",
            message,
            CreateAnnotationLogResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_annotation_logs(
        self,
        message: "ListAnnotationLogsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListAnnotationLogsResponse":
        """
        Retrieves annotation logs using an optional filter.
        """

        return await self._unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/ListAnnotationLogs",
            message,
            ListAnnotationLogsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_annotation_log(
        self,
        message: "DeleteAnnotationLogRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteAnnotationLogResponse":
        """
        Deletes an annotation log.
        """

        return await self._unary_unary(
            "/sift.annotation_logs.v1.AnnotationLogService/DeleteAnnotationLog",
            message,
            DeleteAnnotationLogResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AnnotationLogServiceBase(ServiceBase):
    async def create_annotation_log(
        self, message: "CreateAnnotationLogRequest"
    ) -> "CreateAnnotationLogResponse":
        """
        Creates an annotation log on an annotation.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_annotation_logs(
        self, message: "ListAnnotationLogsRequest"
    ) -> "ListAnnotationLogsResponse":
        """
        Retrieves annotation logs using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_annotation_log(
        self, message: "DeleteAnnotationLogRequest"
    ) -> "DeleteAnnotationLogResponse":
        """
        Deletes an annotation log.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_annotation_log(
        self,
        stream: "grpclib.server.Stream[CreateAnnotationLogRequest, CreateAnnotationLogResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_annotation_log(request)
        await stream.send_message(response)

    async def __rpc_list_annotation_logs(
        self,
        stream: "grpclib.server.Stream[ListAnnotationLogsRequest, ListAnnotationLogsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_annotation_logs(request)
        await stream.send_message(response)

    async def __rpc_delete_annotation_log(
        self,
        stream: "grpclib.server.Stream[DeleteAnnotationLogRequest, DeleteAnnotationLogResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_annotation_log(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.annotation_logs.v1.AnnotationLogService/CreateAnnotationLog": grpclib.const.Handler(
                self.__rpc_create_annotation_log,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateAnnotationLogRequest,
                CreateAnnotationLogResponse,
            ),
            "/sift.annotation_logs.v1.AnnotationLogService/ListAnnotationLogs": grpclib.const.Handler(
                self.__rpc_list_annotation_logs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAnnotationLogsRequest,
                ListAnnotationLogsResponse,
            ),
            "/sift.annotation_logs.v1.AnnotationLogService/DeleteAnnotationLog": grpclib.const.Handler(
                self.__rpc_delete_annotation_log,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteAnnotationLogRequest,
                DeleteAnnotationLogResponse,
            ),
        }
