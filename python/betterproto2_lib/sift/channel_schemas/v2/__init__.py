# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/channel_schemas/v2/channel_schemas.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BatchCreateChannelSchemasRequest",
    "BatchCreateChannelSchemasResponse",
    "CreateChannelSchemaRequest",
    "CreateChannelSchemaResponse",
    "ChannelSchemaServiceStub",
    "ChannelSchemaServiceBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class BatchCreateChannelSchemasRequest(betterproto2.Message):
    """
    The request for a call to `ChannelSchemaService_BatchCreateChannelSchemas`.
    """

    requests: "list[CreateChannelSchemaRequest]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Limit of 1000 channels schemas per batch
    """

    asset_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The asset to which the channel schemas belong (case-insensitive).
    If this field, and any of the child requests specify an asset, the assets must match.
    """


default_message_pool.register_message(
    "sift.channel_schemas.v2",
    "BatchCreateChannelSchemasRequest",
    BatchCreateChannelSchemasRequest,
)


@dataclass(eq=False, repr=False)
class BatchCreateChannelSchemasResponse(betterproto2.Message):
    """
    The response of a call to `ChannelSchemaService_BatchCreateChannelSchemas`.
    """

    pass


default_message_pool.register_message(
    "sift.channel_schemas.v2",
    "BatchCreateChannelSchemasResponse",
    BatchCreateChannelSchemasResponse,
)


@dataclass(eq=False, repr=False)
class CreateChannelSchemaRequest(betterproto2.Message):
    """
    The request for a call to `ChannelSchemaService_CreateChannelSchema`.
    """

    channel: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    unit: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    data_type: "__common__type__v1__.ChannelDataType" = betterproto2.field(
        3,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __common__type__v1__.ChannelDataType(0),
    )

    enum_types: "list[__common__type__v1__.ChannelEnumType]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )

    bit_field_elements: "list[__common__type__v1__.ChannelBitFieldElement]" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    asset_name: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The name of the asset (case-insensitive).
    """


default_message_pool.register_message(
    "sift.channel_schemas.v2", "CreateChannelSchemaRequest", CreateChannelSchemaRequest
)


@dataclass(eq=False, repr=False)
class CreateChannelSchemaResponse(betterproto2.Message):
    """
    The response of a call to `ChannelSchemaService_CreateChannelSchema`.
    """

    pass


default_message_pool.register_message(
    "sift.channel_schemas.v2",
    "CreateChannelSchemaResponse",
    CreateChannelSchemaResponse,
)


class ChannelSchemaServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def create_channel_schema(
        self, message: "CreateChannelSchemaRequest"
    ) -> "CreateChannelSchemaResponse":
        """
        Create a channel schema
        """

        return self._channel.unary_unary(
            "/sift.channel_schemas.v2.ChannelSchemaService/CreateChannelSchema",
            CreateChannelSchemaRequest.SerializeToString,
            CreateChannelSchemaResponse.FromString,
        )(message)

    def batch_create_channel_schemas(
        self, message: "BatchCreateChannelSchemasRequest"
    ) -> "BatchCreateChannelSchemasResponse":
        """
        Create a batch of channel schemas
        """

        return self._channel.unary_unary(
            "/sift.channel_schemas.v2.ChannelSchemaService/BatchCreateChannelSchemas",
            BatchCreateChannelSchemasRequest.SerializeToString,
            BatchCreateChannelSchemasResponse.FromString,
        )(message)


class ChannelSchemaServiceAsyncStub(betterproto2.ServiceStub):
    async def create_channel_schema(
        self,
        message: "CreateChannelSchemaRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateChannelSchemaResponse":
        """
        Create a channel schema
        """

        return await self._unary_unary(
            "/sift.channel_schemas.v2.ChannelSchemaService/CreateChannelSchema",
            message,
            CreateChannelSchemaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_create_channel_schemas(
        self,
        message: "BatchCreateChannelSchemasRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchCreateChannelSchemasResponse":
        """
        Create a batch of channel schemas
        """

        return await self._unary_unary(
            "/sift.channel_schemas.v2.ChannelSchemaService/BatchCreateChannelSchemas",
            message,
            BatchCreateChannelSchemasResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...common.type import v1 as __common__type__v1__


class ChannelSchemaServiceBase(ServiceBase):
    async def create_channel_schema(
        self, message: "CreateChannelSchemaRequest"
    ) -> "CreateChannelSchemaResponse":
        """
        Create a channel schema
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_create_channel_schemas(
        self, message: "BatchCreateChannelSchemasRequest"
    ) -> "BatchCreateChannelSchemasResponse":
        """
        Create a batch of channel schemas
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_channel_schema(
        self,
        stream: "grpclib.server.Stream[CreateChannelSchemaRequest, CreateChannelSchemaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_channel_schema(request)
        await stream.send_message(response)

    async def __rpc_batch_create_channel_schemas(
        self,
        stream: "grpclib.server.Stream[BatchCreateChannelSchemasRequest, BatchCreateChannelSchemasResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_create_channel_schemas(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.channel_schemas.v2.ChannelSchemaService/CreateChannelSchema": grpclib.const.Handler(
                self.__rpc_create_channel_schema,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateChannelSchemaRequest,
                CreateChannelSchemaResponse,
            ),
            "/sift.channel_schemas.v2.ChannelSchemaService/BatchCreateChannelSchemas": grpclib.const.Handler(
                self.__rpc_batch_create_channel_schemas,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchCreateChannelSchemasRequest,
                BatchCreateChannelSchemasResponse,
            ),
        }
