# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/rules/v1/rules.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ActionKind",
    "ConditionComparator",
    "SearchOrder",
    "AnnotationActionConfiguration",
    "AssetExpressionValidationResult",
    "BatchDeleteRulesRequest",
    "BatchDeleteRulesResponse",
    "BatchGetRulesRequest",
    "BatchGetRulesResponse",
    "BatchGetRuleVersionsRequest",
    "BatchGetRuleVersionsResponse",
    "BatchUndeleteRulesRequest",
    "BatchUndeleteRulesResponse",
    "BatchUpdateRulesRequest",
    "BatchUpdateRulesResponse",
    "CalculatedChannelConfig",
    "ChannelReference",
    "ContextualChannels",
    "CreateRuleRequest",
    "CreateRuleResponse",
    "DeleteRuleRequest",
    "DeleteRuleResponse",
    "DryRunAnnotation",
    "EvaluatedAnnotationOptions",
    "EvaluateRulesRequest",
    "EvaluateRulesResponse",
    "GetRuleRequest",
    "GetRuleResponse",
    "GetRuleVersionRequest",
    "GetRuleVersionResponse",
    "JsonRulesRequest",
    "JsonRulesResponse",
    "LastValueThreshold",
    "ListRulesRequest",
    "ListRulesResponse",
    "ListRuleVersionsRequest",
    "ListRuleVersionsResponse",
    "NotificationActionConfiguration",
    "Rule",
    "RuleAction",
    "RuleActionConfiguration",
    "RuleAssetConfiguration",
    "RuleCondition",
    "RuleConditionExpression",
    "RuleVersion",
    "SearchRulesRequest",
    "SearchRulesResponse",
    "SingleChannelComparisonExpression",
    "TimeRangeQuery",
    "UndeleteRuleRequest",
    "UndeleteRuleResponse",
    "UpdateActionRequest",
    "UpdateConditionRequest",
    "UpdateHumanFriendlyRulesRequest",
    "UpdateHumanFriendlyRulesResponse",
    "UpdateJsonRulesRequest",
    "UpdateJsonRulesResponse",
    "UpdateRuleRequest",
    "UpdateRuleResponse",
    "ValidateJsonRulesRequest",
    "ValidateJsonRulesResponse",
    "ValidationResult",
    "ViewHumanFriendlyRulesRequest",
    "ViewHumanFriendlyRulesResponse",
    "ViewJsonRulesRequest",
    "ViewJsonRulesResponse",
    "RuleServiceStub",
    "RuleServiceBase",
)

import datetime
import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class ActionKind(betterproto2.Enum):
    UNSPECIFIED = 0

    NOTIFICATION = 1

    ANNOTATION = 2


class ConditionComparator(betterproto2.Enum):
    UNSPECIFIED = 0

    LESS_THAN = 1

    LESS_THAN_OR_EQUAL = 2

    GREATER_THAN = 3

    GREATER_THAN_OR_EQUAL = 4

    EQUAL = 5

    NOT_EQUAL = 6


class SearchOrder(betterproto2.Enum):
    UNSPECIFIED = 0

    ASC = 1

    DESC = 2


@dataclass(eq=False, repr=False)
class AnnotationActionConfiguration(betterproto2.Message):
    tag_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    annotation_type: "__annotations__v1__.AnnotationType" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __annotations__v1__.AnnotationType(0),
    )

    assigned_to_user_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "AnnotationActionConfiguration", AnnotationActionConfiguration
)


@dataclass(eq=False, repr=False)
class AssetExpressionValidationResult(betterproto2.Message):
    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    asset_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    asset_tag_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    asset_tag_id is the tag_id that caused this asset to be included in the rule
    """

    error: "str | None" = betterproto2.field(4, betterproto2.TYPE_STRING, optional=True)


default_message_pool.register_message(
    "sift.rules.v1", "AssetExpressionValidationResult", AssetExpressionValidationResult
)


@dataclass(eq=False, repr=False)
class BatchDeleteRulesRequest(betterproto2.Message):
    """
    BatchDeleteRulesRequest is used to delete a rule by rule_id or client_key. For each rule if both are provided, only rule_id will be used.
    """

    rule_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    client_keys: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "BatchDeleteRulesRequest", BatchDeleteRulesRequest
)


@dataclass(eq=False, repr=False)
class BatchDeleteRulesResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.rules.v1", "BatchDeleteRulesResponse", BatchDeleteRulesResponse
)


@dataclass(eq=False, repr=False)
class BatchGetRulesRequest(betterproto2.Message):
    """
    BatchGetRulesRequest is used to retrieve rules by rule_ids or client_keys. If both are provided, both will be used to retrieve rules.
    """

    rule_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    client_keys: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "BatchGetRulesRequest", BatchGetRulesRequest
)


@dataclass(eq=False, repr=False)
class BatchGetRulesResponse(betterproto2.Message):
    rules: "list[Rule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "BatchGetRulesResponse", BatchGetRulesResponse
)


@dataclass(eq=False, repr=False)
class BatchGetRuleVersionsRequest(betterproto2.Message):
    rule_version_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "BatchGetRuleVersionsRequest", BatchGetRuleVersionsRequest
)


@dataclass(eq=False, repr=False)
class BatchGetRuleVersionsResponse(betterproto2.Message):
    rules: "list[Rule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "BatchGetRuleVersionsResponse", BatchGetRuleVersionsResponse
)


@dataclass(eq=False, repr=False)
class BatchUndeleteRulesRequest(betterproto2.Message):
    """
    BatchUndeleteRulesRequest is used to delete a rule by rule_id or client_key. For each rule if both are provided, only rule_id will be used.
    """

    rule_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    client_keys: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "BatchUndeleteRulesRequest", BatchUndeleteRulesRequest
)


@dataclass(eq=False, repr=False)
class BatchUndeleteRulesResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.rules.v1", "BatchUndeleteRulesResponse", BatchUndeleteRulesResponse
)


@dataclass(eq=False, repr=False)
class BatchUpdateRulesRequest(betterproto2.Message):
    rules: "list[UpdateRuleRequest]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    rules are limited 1000 rules at a time
    """

    validate_only: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If validate_only is true, the request will only validate the request and not save the rules.
    """

    override_expression_validation: "bool" = betterproto2.field(
        3, betterproto2.TYPE_BOOL
    )
    """
    If override_expression_validation is true, the request will save the rules even if the expressions are invalid. This
    can be useful for multi-asset rules where an invalid expression for one asset should not prevent the rule from being saved.
    """


default_message_pool.register_message(
    "sift.rules.v1", "BatchUpdateRulesRequest", BatchUpdateRulesRequest
)


@dataclass(eq=False, repr=False)
class BatchUpdateRulesResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    rules_created_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The total number of rules created in the request. If validate_only is true, this will indicate how many rules would have been created.
    """

    rules_updated_count: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total number of rules updated in the request. If validate_only is true, this will indicate how many rules would have been updated.
    """

    validate_only: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    This will be true if the request only validated the request and did not save the rules.
    """

    validation_results: "list[ValidationResult]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    One ValidationResult per rule in the request will be returned
    """


default_message_pool.register_message(
    "sift.rules.v1", "BatchUpdateRulesResponse", BatchUpdateRulesResponse
)


@dataclass(eq=False, repr=False)
class CalculatedChannelConfig(betterproto2.Message):
    channel_references: "dict[str, ChannelReference]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )

    expression: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "CalculatedChannelConfig", CalculatedChannelConfig
)


@dataclass(eq=False, repr=False)
class ChannelReference(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    component: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Deprecated - use name instead. If provided, name will be joined with the component as `component.name`
    """


default_message_pool.register_message(
    "sift.rules.v1", "ChannelReference", ChannelReference
)


@dataclass(eq=False, repr=False)
class ContextualChannels(betterproto2.Message):
    channels: "list[ChannelReference]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "ContextualChannels", ContextualChannels
)


@dataclass(eq=False, repr=False)
class CreateRuleRequest(betterproto2.Message):
    update: "UpdateRuleRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "CreateRuleRequest", CreateRuleRequest
)


@dataclass(eq=False, repr=False)
class CreateRuleResponse(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "CreateRuleResponse", CreateRuleResponse
)


@dataclass(eq=False, repr=False)
class DeleteRuleRequest(betterproto2.Message):
    """
    DeleteRuleRequest is used to delete a rule by rule_id or client_key. If both are provided, only rule_id will be used.
    """

    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "DeleteRuleRequest", DeleteRuleRequest
)


@dataclass(eq=False, repr=False)
class DeleteRuleResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.rules.v1", "DeleteRuleResponse", DeleteRuleResponse
)


@dataclass(eq=False, repr=False)
class DryRunAnnotation(betterproto2.Message):
    condition_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    start_time: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    end_time: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    condition_version_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "DryRunAnnotation", DryRunAnnotation
)


@dataclass(eq=False, repr=False)
class EvaluatedAnnotationOptions(betterproto2.Message):
    tag_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "EvaluatedAnnotationOptions", EvaluatedAnnotationOptions
)


@dataclass(eq=False, repr=False)
class EvaluateRulesRequest(betterproto2.Message):
    """
    Deprecated - use RuleEvaluationService instead.

    Oneofs:
        - time:
    """

    rule_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    annotation_options: "EvaluatedAnnotationOptions | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    run_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="time"
    )

    time_range: "TimeRangeQuery | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="time"
    )

    dry_run: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)

    def __post_init__(self) -> None:
        warnings.warn("EvaluateRulesRequest is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message(
    "sift.rules.v1", "EvaluateRulesRequest", EvaluateRulesRequest
)


@dataclass(eq=False, repr=False)
class EvaluateRulesResponse(betterproto2.Message):
    """
    Deprecated - use RuleEvaluationService instead.
    """

    created_annotation_count: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    dry_run_annotations: "list[DryRunAnnotation]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If dry_run is true, this will be populated with the annotations that would be created
    """

    job_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    job_id and report_id will be set if the job has an extended run time and is being processed asynchronously.
    """

    report_id: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )

    def __post_init__(self) -> None:
        warnings.warn("EvaluateRulesResponse is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message(
    "sift.rules.v1", "EvaluateRulesResponse", EvaluateRulesResponse
)


@dataclass(eq=False, repr=False)
class GetRuleRequest(betterproto2.Message):
    """
    GetRuleRequest is used to retrieve a rule by rule_id or client_key. If both are provided, only rule_id will be used.
    """

    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.rules.v1", "GetRuleRequest", GetRuleRequest)


@dataclass(eq=False, repr=False)
class GetRuleResponse(betterproto2.Message):
    rule: "Rule | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "GetRuleResponse", GetRuleResponse
)


@dataclass(eq=False, repr=False)
class GetRuleVersionRequest(betterproto2.Message):
    rule_version_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "GetRuleVersionRequest", GetRuleVersionRequest
)


@dataclass(eq=False, repr=False)
class GetRuleVersionResponse(betterproto2.Message):
    rule: "Rule | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "GetRuleVersionResponse", GetRuleVersionResponse
)


@dataclass(eq=False, repr=False)
class JsonRulesRequest(betterproto2.Message):
    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    rules_json: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "JsonRulesRequest", JsonRulesRequest
)


@dataclass(eq=False, repr=False)
class JsonRulesResponse(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    total_rules_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    rules_created_count: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)

    rules_updated_count: "int" = betterproto2.field(4, betterproto2.TYPE_INT32)

    rules_deleted_count: "int" = betterproto2.field(5, betterproto2.TYPE_INT32)

    error_messages: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "JsonRulesResponse", JsonRulesResponse
)


@dataclass(eq=False, repr=False)
class LastValueThreshold(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.rules.v1", "LastValueThreshold", LastValueThreshold
)


@dataclass(eq=False, repr=False)
class ListRulesRequest(betterproto2.Message):
    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of Rules to return.
    The service may return fewer than this value.
    If unspecified, at most 50 Rules will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListRules` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListRules` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `rule_id`, `client_key`, `name`, and `description`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    Optional.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    How to order the retrieved Rules. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
    Available fields to order_by are `created_date` and `modified_date`.
    If left empty, items are ordered by `created_date` in ascending order (oldest-first).
    """


default_message_pool.register_message(
    "sift.rules.v1", "ListRulesRequest", ListRulesRequest
)


@dataclass(eq=False, repr=False)
class ListRulesResponse(betterproto2.Message):
    rules: "list[Rule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "ListRulesResponse", ListRulesResponse
)


@dataclass(eq=False, repr=False)
class ListRuleVersionsRequest(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    The maximum number of Rule Versions to return.
    The service may return fewer than this value.
    If unspecified, at most 50 Rule Versions will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListRuleVersions` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListRuleVersions` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `rule_version_id`, `user_notes`,  and `change_message`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions). Optional.
    """


default_message_pool.register_message(
    "sift.rules.v1", "ListRuleVersionsRequest", ListRuleVersionsRequest
)


@dataclass(eq=False, repr=False)
class ListRuleVersionsResponse(betterproto2.Message):
    rule_versions: "list[RuleVersion]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "ListRuleVersionsResponse", ListRuleVersionsResponse
)


@dataclass(eq=False, repr=False)
class NotificationActionConfiguration(betterproto2.Message):
    recipient_user_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "NotificationActionConfiguration", NotificationActionConfiguration
)


@dataclass(eq=False, repr=False)
class Rule(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    asset_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    name: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    is_enabled: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)

    created_date: "datetime.datetime | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    conditions: "list[RuleCondition]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )

    rule_version: "RuleVersion | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True
    )

    client_key: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)
    """
    client_key is a client provided identifier for the rule. It is immutable after rule creation.
    """

    asset_configuration: "RuleAssetConfiguration | None" = betterproto2.field(
        15, betterproto2.TYPE_MESSAGE, optional=True
    )

    contextual_channels: "ContextualChannels | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )

    deleted_date: "datetime.datetime | None" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, optional=True
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("asset_id"):
            warnings.warn("Rule.asset_id is deprecated", DeprecationWarning)


default_message_pool.register_message("sift.rules.v1", "Rule", Rule)


@dataclass(eq=False, repr=False)
class RuleAction(betterproto2.Message):
    rule_action_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    rule_condition_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    action_type: "ActionKind" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ActionKind(0)
    )

    configuration: "RuleActionConfiguration | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_date: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    rule_action_version_id: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.rules.v1", "RuleAction", RuleAction)


@dataclass(eq=False, repr=False)
class RuleActionConfiguration(betterproto2.Message):
    """


    Oneofs:
        - configuration:
    """

    notification: "NotificationActionConfiguration | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="configuration"
    )

    annotation: "AnnotationActionConfiguration | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="configuration"
    )


default_message_pool.register_message(
    "sift.rules.v1", "RuleActionConfiguration", RuleActionConfiguration
)


@dataclass(eq=False, repr=False)
class RuleAssetConfiguration(betterproto2.Message):
    asset_ids: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )

    tag_ids: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "RuleAssetConfiguration", RuleAssetConfiguration
)


@dataclass(eq=False, repr=False)
class RuleCondition(betterproto2.Message):
    rule_condition_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    rule_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    expression: "RuleConditionExpression | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_date: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    actions: "list[RuleAction]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )

    rule_condition_version_id: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)


default_message_pool.register_message("sift.rules.v1", "RuleCondition", RuleCondition)


@dataclass(eq=False, repr=False)
class RuleConditionExpression(betterproto2.Message):
    """


    Oneofs:
        - expression:
    """

    single_channel_comparison: "SingleChannelComparisonExpression | None" = (
        betterproto2.field(
            1, betterproto2.TYPE_MESSAGE, optional=True, group="expression"
        )
    )

    calculated_channel: "CalculatedChannelConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="expression"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("single_channel_comparison"):
            warnings.warn(
                "RuleConditionExpression.single_channel_comparison is deprecated",
                DeprecationWarning,
            )


default_message_pool.register_message(
    "sift.rules.v1", "RuleConditionExpression", RuleConditionExpression
)


@dataclass(eq=False, repr=False)
class RuleVersion(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    rule_version_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    version: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    version_notes: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    generated_change_message: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    deleted_date: "datetime.datetime | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sift.rules.v1", "RuleVersion", RuleVersion)


@dataclass(eq=False, repr=False)
class SearchRulesRequest(betterproto2.Message):
    limit: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT32, optional=True)
    """
    Max number of rules to return (returns all if omitted).
    """

    offset: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    Only applies if limit provided.
    """

    order: "SearchOrder | None" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Order to sort results by (defaults to ascending).
    """

    name_matches: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    case_sensitive: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)

    regexp: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)

    order_by: "str | None" = betterproto2.field(
        7, betterproto2.TYPE_STRING, optional=True
    )

    rule_ids: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )
    """
    If provided, only returns rules with the given ids
    """

    asset_ids: "list[str]" = betterproto2.field(
        9, betterproto2.TYPE_STRING, repeated=True
    )
    """
    If provided, only returns rules that apply to the given asset ids
    """

    include_deleted: "bool" = betterproto2.field(10, betterproto2.TYPE_BOOL)

    asset_tags: "__common__type__v1__.NamedResources | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If provided, returns rules with assets that have the given tags
    """


default_message_pool.register_message(
    "sift.rules.v1", "SearchRulesRequest", SearchRulesRequest
)


@dataclass(eq=False, repr=False)
class SearchRulesResponse(betterproto2.Message):
    count: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    rules: "list[Rule]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Conditions are not included in the search response. The latest version of the rule is returned.
    """


default_message_pool.register_message(
    "sift.rules.v1", "SearchRulesResponse", SearchRulesResponse
)


@dataclass(eq=False, repr=False)
class SingleChannelComparisonExpression(betterproto2.Message):
    """
    Deprecated - use CalculatedChannelConfig.

    Oneofs:
        - threshold: Threshold can be either a double or a string. Boolean values are encoded as 1 or 0. Enum values are stored as the string representation.
    """

    channel_component: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Deprecated - use channel_name instead. If provided, channel_component will be joined with the name as `channel_component.channel_name`
    """

    channel_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    comparator: "ConditionComparator" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ConditionComparator(0)
    )

    double: "float | None" = betterproto2.field(
        4, betterproto2.TYPE_DOUBLE, optional=True, group="threshold"
    )

    string: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True, group="threshold"
    )

    last_value: "LastValueThreshold | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="threshold"
    )


default_message_pool.register_message(
    "sift.rules.v1",
    "SingleChannelComparisonExpression",
    SingleChannelComparisonExpression,
)


@dataclass(eq=False, repr=False)
class TimeRangeQuery(betterproto2.Message):
    start_time: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    end_time: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sift.rules.v1", "TimeRangeQuery", TimeRangeQuery)


@dataclass(eq=False, repr=False)
class UndeleteRuleRequest(betterproto2.Message):
    """
    UndeleteRuleRequest is used to undelete a rule by rule_id or client_key. If both are provided, only rule_id will be used.
    """

    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "UndeleteRuleRequest", UndeleteRuleRequest
)


@dataclass(eq=False, repr=False)
class UndeleteRuleResponse(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sift.rules.v1", "UndeleteRuleResponse", UndeleteRuleResponse
)


@dataclass(eq=False, repr=False)
class UpdateActionRequest(betterproto2.Message):
    rule_action_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )

    action_type: "ActionKind" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: ActionKind(0)
    )

    configuration: "RuleActionConfiguration | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "UpdateActionRequest", UpdateActionRequest
)


@dataclass(eq=False, repr=False)
class UpdateConditionRequest(betterproto2.Message):
    rule_condition_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )

    expression: "RuleConditionExpression | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    actions: "list[UpdateActionRequest]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "UpdateConditionRequest", UpdateConditionRequest
)


@dataclass(eq=False, repr=False)
class UpdateHumanFriendlyRulesRequest(betterproto2.Message):
    """
    Deprecated - use UpdateJsonRulesRequest.
    """

    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    rules_json: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    def __post_init__(self) -> None:
        warnings.warn(
            "UpdateHumanFriendlyRulesRequest is deprecated", DeprecationWarning
        )
        super().__post_init__()


default_message_pool.register_message(
    "sift.rules.v1", "UpdateHumanFriendlyRulesRequest", UpdateHumanFriendlyRulesRequest
)


@dataclass(eq=False, repr=False)
class UpdateHumanFriendlyRulesResponse(betterproto2.Message):
    """
    Deprecated - use UpdateJsonRulesResponse.
    """

    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    rules_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    messages: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    def __post_init__(self) -> None:
        warnings.warn(
            "UpdateHumanFriendlyRulesResponse is deprecated", DeprecationWarning
        )
        super().__post_init__()


default_message_pool.register_message(
    "sift.rules.v1",
    "UpdateHumanFriendlyRulesResponse",
    UpdateHumanFriendlyRulesResponse,
)


@dataclass(eq=False, repr=False)
class UpdateJsonRulesRequest(betterproto2.Message):
    request: "JsonRulesRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "UpdateJsonRulesRequest", UpdateJsonRulesRequest
)


@dataclass(eq=False, repr=False)
class UpdateJsonRulesResponse(betterproto2.Message):
    response: "JsonRulesResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "UpdateJsonRulesResponse", UpdateJsonRulesResponse
)


@dataclass(eq=False, repr=False)
class UpdateRuleRequest(betterproto2.Message):
    """
    UpdateRuleRequest is used to create or update a rule. If the rule_id or client_key is provided, the rule will be updated. If not, a new rule will be created.
    """

    rule_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    asset_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Deprecated - use asset_configuration instead.
    """

    is_enabled: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)

    conditions: "list[UpdateConditionRequest]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )

    organization_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    version_notes: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    client_key: "str | None" = betterproto2.field(
        9, betterproto2.TYPE_STRING, optional=True
    )
    """
    client_key is a client provided identifier for the rule. It is immutable after being set
    """

    asset_configuration: "RuleAssetConfiguration | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )

    contextual_channels: "ContextualChannels | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("asset_id"):
            warnings.warn(
                "UpdateRuleRequest.asset_id is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "sift.rules.v1", "UpdateRuleRequest", UpdateRuleRequest
)


@dataclass(eq=False, repr=False)
class UpdateRuleResponse(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "UpdateRuleResponse", UpdateRuleResponse
)


@dataclass(eq=False, repr=False)
class ValidateJsonRulesRequest(betterproto2.Message):
    request: "JsonRulesRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "ValidateJsonRulesRequest", ValidateJsonRulesRequest
)


@dataclass(eq=False, repr=False)
class ValidateJsonRulesResponse(betterproto2.Message):
    response: "JsonRulesResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.rules.v1", "ValidateJsonRulesResponse", ValidateJsonRulesResponse
)


@dataclass(eq=False, repr=False)
class ValidationResult(betterproto2.Message):
    rule_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    asset_expression_validation_results: "list[AssetExpressionValidationResult]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    If the expression is invalid for an asset, one or more AssetExpressionValidationResult will be returned. This may block
    saving if the override_expression_validation flag is not set.
    """

    error: "str | None" = betterproto2.field(4, betterproto2.TYPE_STRING, optional=True)
    """
    If the rule is invalid and unable to be saved, this will contain the error message. Expression errors will be returned in
    the asset_expression_validation_results.
    """


default_message_pool.register_message(
    "sift.rules.v1", "ValidationResult", ValidationResult
)


@dataclass(eq=False, repr=False)
class ViewHumanFriendlyRulesRequest(betterproto2.Message):
    """
    Deprecated - use ViewJsonRulesRequest.
    """

    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    def __post_init__(self) -> None:
        warnings.warn("ViewHumanFriendlyRulesRequest is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message(
    "sift.rules.v1", "ViewHumanFriendlyRulesRequest", ViewHumanFriendlyRulesRequest
)


@dataclass(eq=False, repr=False)
class ViewHumanFriendlyRulesResponse(betterproto2.Message):
    """
    Deprecated - use ViewJsonRulesResponse.
    """

    rules_json: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    def __post_init__(self) -> None:
        warnings.warn(
            "ViewHumanFriendlyRulesResponse is deprecated", DeprecationWarning
        )
        super().__post_init__()


default_message_pool.register_message(
    "sift.rules.v1", "ViewHumanFriendlyRulesResponse", ViewHumanFriendlyRulesResponse
)


@dataclass(eq=False, repr=False)
class ViewJsonRulesRequest(betterproto2.Message):
    asset_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "ViewJsonRulesRequest", ViewJsonRulesRequest
)


@dataclass(eq=False, repr=False)
class ViewJsonRulesResponse(betterproto2.Message):
    rules_json: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.rules.v1", "ViewJsonRulesResponse", ViewJsonRulesResponse
)


class RuleServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def search_rules(self, message: "SearchRulesRequest") -> "SearchRulesResponse":
        """
        Queries rules based on provided search parameters.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/SearchRules",
            SearchRulesRequest.SerializeToString,
            SearchRulesResponse.FromString,
        )(message)

    def get_rule(self, message: "GetRuleRequest") -> "GetRuleResponse":
        """
        Retrieves the latest version of a rule.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/GetRule",
            GetRuleRequest.SerializeToString,
            GetRuleResponse.FromString,
        )(message)

    def batch_get_rules(
        self, message: "BatchGetRulesRequest"
    ) -> "BatchGetRulesResponse":
        """
        Retrieve multiple rules.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/BatchGetRules",
            BatchGetRulesRequest.SerializeToString,
            BatchGetRulesResponse.FromString,
        )(message)

    def create_rule(self, message: "CreateRuleRequest") -> "CreateRuleResponse":
        """
        Creates a rule.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/CreateRule",
            CreateRuleRequest.SerializeToString,
            CreateRuleResponse.FromString,
        )(message)

    def update_rule(self, message: "UpdateRuleRequest") -> "UpdateRuleResponse":
        """
        Updates an existing rule.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/UpdateRule",
            UpdateRuleRequest.SerializeToString,
            UpdateRuleResponse.FromString,
        )(message)

    def batch_update_rules(
        self, message: "BatchUpdateRulesRequest"
    ) -> "BatchUpdateRulesResponse":
        """
        Updates existing rules or creates rules that do not exist.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/BatchUpdateRules",
            BatchUpdateRulesRequest.SerializeToString,
            BatchUpdateRulesResponse.FromString,
        )(message)

    def delete_rule(self, message: "DeleteRuleRequest") -> "DeleteRuleResponse":
        """
        Deletes a rule
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/DeleteRule",
            DeleteRuleRequest.SerializeToString,
            DeleteRuleResponse.FromString,
        )(message)

    def batch_delete_rules(
        self, message: "BatchDeleteRulesRequest"
    ) -> "BatchDeleteRulesResponse":
        """
        Deletes multiple rules
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/BatchDeleteRules",
            BatchDeleteRulesRequest.SerializeToString,
            BatchDeleteRulesResponse.FromString,
        )(message)

    def undelete_rule(self, message: "UndeleteRuleRequest") -> "UndeleteRuleResponse":
        """
        Undeletes a rule
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/UndeleteRule",
            UndeleteRuleRequest.SerializeToString,
            UndeleteRuleResponse.FromString,
        )(message)

    def batch_undelete_rules(
        self, message: "BatchUndeleteRulesRequest"
    ) -> "BatchUndeleteRulesResponse":
        """
        Undeletes multiple rules
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/BatchUndeleteRules",
            BatchUndeleteRulesRequest.SerializeToString,
            BatchUndeleteRulesResponse.FromString,
        )(message)

    def evaluate_rules(
        self, message: "EvaluateRulesRequest"
    ) -> "EvaluateRulesResponse":
        """
        Deprecated - use RuleEvaluationService instead.
        """

        warnings.warn("RuleService.evaluate_rules is deprecated", DeprecationWarning)

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/EvaluateRules",
            EvaluateRulesRequest.SerializeToString,
            EvaluateRulesResponse.FromString,
        )(message)

    def view_human_friendly_rules(
        self, message: "ViewHumanFriendlyRulesRequest"
    ) -> "ViewHumanFriendlyRulesResponse":
        """
        Deprecated - use ViewJsonRules instead. Retrieve a JSON object containing all of the rules for a given asset.
        """

        warnings.warn(
            "RuleService.view_human_friendly_rules is deprecated", DeprecationWarning
        )

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/ViewHumanFriendlyRules",
            ViewHumanFriendlyRulesRequest.SerializeToString,
            ViewHumanFriendlyRulesResponse.FromString,
        )(message)

    def view_json_rules(
        self, message: "ViewJsonRulesRequest"
    ) -> "ViewJsonRulesResponse":
        """
        Deprecated - use BatchGetRules instead. Retrieve a JSON object containing all of the rules for a given asset.
        """

        warnings.warn("RuleService.view_json_rules is deprecated", DeprecationWarning)

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/ViewJsonRules",
            ViewJsonRulesRequest.SerializeToString,
            ViewJsonRulesResponse.FromString,
        )(message)

    def update_human_friendly_rules(
        self, message: "UpdateHumanFriendlyRulesRequest"
    ) -> "UpdateHumanFriendlyRulesResponse":
        """
        Deprecated - use BatchUpdateRules instead. Batch update rules given the `rules_json` which is a JSON list of rules.
        """

        warnings.warn(
            "RuleService.update_human_friendly_rules is deprecated", DeprecationWarning
        )

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/UpdateHumanFriendlyRules",
            UpdateHumanFriendlyRulesRequest.SerializeToString,
            UpdateHumanFriendlyRulesResponse.FromString,
        )(message)

    def validate_json_rules(
        self, message: "ValidateJsonRulesRequest"
    ) -> "ValidateJsonRulesResponse":
        """
        Deprecated - use BatchUpdateRules with validate_only flag instead. Validate a batch update for rules given the `rules_json` which is a JSON list of rules. This is a dry-run operation.
        """

        warnings.warn(
            "RuleService.validate_json_rules is deprecated", DeprecationWarning
        )

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/ValidateJsonRules",
            ValidateJsonRulesRequest.SerializeToString,
            ValidateJsonRulesResponse.FromString,
        )(message)

    def update_json_rules(
        self, message: "UpdateJsonRulesRequest"
    ) -> "UpdateJsonRulesResponse":
        """
        Deprecated - use BatchUpdateRules instead. Batch update rules given the `rules_json` which is a JSON list of rules.
        """

        warnings.warn("RuleService.update_json_rules is deprecated", DeprecationWarning)

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/UpdateJsonRules",
            UpdateJsonRulesRequest.SerializeToString,
            UpdateJsonRulesResponse.FromString,
        )(message)

    def list_rules(self, message: "ListRulesRequest") -> "ListRulesResponse":
        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/ListRules",
            ListRulesRequest.SerializeToString,
            ListRulesResponse.FromString,
        )(message)

    def list_rule_versions(
        self, message: "ListRuleVersionsRequest"
    ) -> "ListRuleVersionsResponse":
        """
        Retrieves a list of rule versions for the given rule.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/ListRuleVersions",
            ListRuleVersionsRequest.SerializeToString,
            ListRuleVersionsResponse.FromString,
        )(message)

    def get_rule_version(
        self, message: "GetRuleVersionRequest"
    ) -> "GetRuleVersionResponse":
        """
        Retrieves a specific version of a rule.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/GetRuleVersion",
            GetRuleVersionRequest.SerializeToString,
            GetRuleVersionResponse.FromString,
        )(message)

    def batch_get_rule_versions(
        self, message: "BatchGetRuleVersionsRequest"
    ) -> "BatchGetRuleVersionsResponse":
        """
        Retrieves multiple rules by rule versions.
        """

        return self._channel.unary_unary(
            "/sift.rules.v1.RuleService/BatchGetRuleVersions",
            BatchGetRuleVersionsRequest.SerializeToString,
            BatchGetRuleVersionsResponse.FromString,
        )(message)


class RuleServiceAsyncStub(betterproto2.ServiceStub):
    async def search_rules(
        self,
        message: "SearchRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "SearchRulesResponse":
        """
        Queries rules based on provided search parameters.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/SearchRules",
            message,
            SearchRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_rule(
        self,
        message: "GetRuleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetRuleResponse":
        """
        Retrieves the latest version of a rule.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/GetRule",
            message,
            GetRuleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_get_rules(
        self,
        message: "BatchGetRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchGetRulesResponse":
        """
        Retrieve multiple rules.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/BatchGetRules",
            message,
            BatchGetRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_rule(
        self,
        message: "CreateRuleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateRuleResponse":
        """
        Creates a rule.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/CreateRule",
            message,
            CreateRuleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_rule(
        self,
        message: "UpdateRuleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateRuleResponse":
        """
        Updates an existing rule.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/UpdateRule",
            message,
            UpdateRuleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_update_rules(
        self,
        message: "BatchUpdateRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchUpdateRulesResponse":
        """
        Updates existing rules or creates rules that do not exist.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/BatchUpdateRules",
            message,
            BatchUpdateRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_rule(
        self,
        message: "DeleteRuleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DeleteRuleResponse":
        """
        Deletes a rule
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/DeleteRule",
            message,
            DeleteRuleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_delete_rules(
        self,
        message: "BatchDeleteRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchDeleteRulesResponse":
        """
        Deletes multiple rules
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/BatchDeleteRules",
            message,
            BatchDeleteRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def undelete_rule(
        self,
        message: "UndeleteRuleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UndeleteRuleResponse":
        """
        Undeletes a rule
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/UndeleteRule",
            message,
            UndeleteRuleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_undelete_rules(
        self,
        message: "BatchUndeleteRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchUndeleteRulesResponse":
        """
        Undeletes multiple rules
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/BatchUndeleteRules",
            message,
            BatchUndeleteRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def evaluate_rules(
        self,
        message: "EvaluateRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "EvaluateRulesResponse":
        """
        Deprecated - use RuleEvaluationService instead.
        """

        warnings.warn("RuleService.evaluate_rules is deprecated", DeprecationWarning)

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/EvaluateRules",
            message,
            EvaluateRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def view_human_friendly_rules(
        self,
        message: "ViewHumanFriendlyRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ViewHumanFriendlyRulesResponse":
        """
        Deprecated - use ViewJsonRules instead. Retrieve a JSON object containing all of the rules for a given asset.
        """

        warnings.warn(
            "RuleService.view_human_friendly_rules is deprecated", DeprecationWarning
        )

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/ViewHumanFriendlyRules",
            message,
            ViewHumanFriendlyRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def view_json_rules(
        self,
        message: "ViewJsonRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ViewJsonRulesResponse":
        """
        Deprecated - use BatchGetRules instead. Retrieve a JSON object containing all of the rules for a given asset.
        """

        warnings.warn("RuleService.view_json_rules is deprecated", DeprecationWarning)

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/ViewJsonRules",
            message,
            ViewJsonRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_human_friendly_rules(
        self,
        message: "UpdateHumanFriendlyRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateHumanFriendlyRulesResponse":
        """
        Deprecated - use BatchUpdateRules instead. Batch update rules given the `rules_json` which is a JSON list of rules.
        """

        warnings.warn(
            "RuleService.update_human_friendly_rules is deprecated", DeprecationWarning
        )

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/UpdateHumanFriendlyRules",
            message,
            UpdateHumanFriendlyRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validate_json_rules(
        self,
        message: "ValidateJsonRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ValidateJsonRulesResponse":
        """
        Deprecated - use BatchUpdateRules with validate_only flag instead. Validate a batch update for rules given the `rules_json` which is a JSON list of rules. This is a dry-run operation.
        """

        warnings.warn(
            "RuleService.validate_json_rules is deprecated", DeprecationWarning
        )

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/ValidateJsonRules",
            message,
            ValidateJsonRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_json_rules(
        self,
        message: "UpdateJsonRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "UpdateJsonRulesResponse":
        """
        Deprecated - use BatchUpdateRules instead. Batch update rules given the `rules_json` which is a JSON list of rules.
        """

        warnings.warn("RuleService.update_json_rules is deprecated", DeprecationWarning)

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/UpdateJsonRules",
            message,
            UpdateJsonRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_rules(
        self,
        message: "ListRulesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListRulesResponse":
        return await self._unary_unary(
            "/sift.rules.v1.RuleService/ListRules",
            message,
            ListRulesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_rule_versions(
        self,
        message: "ListRuleVersionsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListRuleVersionsResponse":
        """
        Retrieves a list of rule versions for the given rule.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/ListRuleVersions",
            message,
            ListRuleVersionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_rule_version(
        self,
        message: "GetRuleVersionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetRuleVersionResponse":
        """
        Retrieves a specific version of a rule.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/GetRuleVersion",
            message,
            GetRuleVersionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_get_rule_versions(
        self,
        message: "BatchGetRuleVersionsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchGetRuleVersionsResponse":
        """
        Retrieves multiple rules by rule versions.
        """

        return await self._unary_unary(
            "/sift.rules.v1.RuleService/BatchGetRuleVersions",
            message,
            BatchGetRuleVersionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...annotations import v1 as __annotations__v1__
from ...common.type import v1 as __common__type__v1__


class RuleServiceBase(ServiceBase):
    async def search_rules(
        self, message: "SearchRulesRequest"
    ) -> "SearchRulesResponse":
        """
        Queries rules based on provided search parameters.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_rule(self, message: "GetRuleRequest") -> "GetRuleResponse":
        """
        Retrieves the latest version of a rule.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_get_rules(
        self, message: "BatchGetRulesRequest"
    ) -> "BatchGetRulesResponse":
        """
        Retrieve multiple rules.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_rule(self, message: "CreateRuleRequest") -> "CreateRuleResponse":
        """
        Creates a rule.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_rule(self, message: "UpdateRuleRequest") -> "UpdateRuleResponse":
        """
        Updates an existing rule.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_update_rules(
        self, message: "BatchUpdateRulesRequest"
    ) -> "BatchUpdateRulesResponse":
        """
        Updates existing rules or creates rules that do not exist.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_rule(self, message: "DeleteRuleRequest") -> "DeleteRuleResponse":
        """
        Deletes a rule
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_delete_rules(
        self, message: "BatchDeleteRulesRequest"
    ) -> "BatchDeleteRulesResponse":
        """
        Deletes multiple rules
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def undelete_rule(
        self, message: "UndeleteRuleRequest"
    ) -> "UndeleteRuleResponse":
        """
        Undeletes a rule
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_undelete_rules(
        self, message: "BatchUndeleteRulesRequest"
    ) -> "BatchUndeleteRulesResponse":
        """
        Undeletes multiple rules
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def evaluate_rules(
        self, message: "EvaluateRulesRequest"
    ) -> "EvaluateRulesResponse":
        """
        Deprecated - use RuleEvaluationService instead.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def view_human_friendly_rules(
        self, message: "ViewHumanFriendlyRulesRequest"
    ) -> "ViewHumanFriendlyRulesResponse":
        """
        Deprecated - use ViewJsonRules instead. Retrieve a JSON object containing all of the rules for a given asset.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def view_json_rules(
        self, message: "ViewJsonRulesRequest"
    ) -> "ViewJsonRulesResponse":
        """
        Deprecated - use BatchGetRules instead. Retrieve a JSON object containing all of the rules for a given asset.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_human_friendly_rules(
        self, message: "UpdateHumanFriendlyRulesRequest"
    ) -> "UpdateHumanFriendlyRulesResponse":
        """
        Deprecated - use BatchUpdateRules instead. Batch update rules given the `rules_json` which is a JSON list of rules.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validate_json_rules(
        self, message: "ValidateJsonRulesRequest"
    ) -> "ValidateJsonRulesResponse":
        """
        Deprecated - use BatchUpdateRules with validate_only flag instead. Validate a batch update for rules given the `rules_json` which is a JSON list of rules. This is a dry-run operation.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_json_rules(
        self, message: "UpdateJsonRulesRequest"
    ) -> "UpdateJsonRulesResponse":
        """
        Deprecated - use BatchUpdateRules instead. Batch update rules given the `rules_json` which is a JSON list of rules.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_rules(self, message: "ListRulesRequest") -> "ListRulesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_rule_versions(
        self, message: "ListRuleVersionsRequest"
    ) -> "ListRuleVersionsResponse":
        """
        Retrieves a list of rule versions for the given rule.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_rule_version(
        self, message: "GetRuleVersionRequest"
    ) -> "GetRuleVersionResponse":
        """
        Retrieves a specific version of a rule.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_get_rule_versions(
        self, message: "BatchGetRuleVersionsRequest"
    ) -> "BatchGetRuleVersionsResponse":
        """
        Retrieves multiple rules by rule versions.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_search_rules(
        self, stream: "grpclib.server.Stream[SearchRulesRequest, SearchRulesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_rules(request)
        await stream.send_message(response)

    async def __rpc_get_rule(
        self, stream: "grpclib.server.Stream[GetRuleRequest, GetRuleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_rule(request)
        await stream.send_message(response)

    async def __rpc_batch_get_rules(
        self,
        stream: "grpclib.server.Stream[BatchGetRulesRequest, BatchGetRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_get_rules(request)
        await stream.send_message(response)

    async def __rpc_create_rule(
        self, stream: "grpclib.server.Stream[CreateRuleRequest, CreateRuleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_rule(request)
        await stream.send_message(response)

    async def __rpc_update_rule(
        self, stream: "grpclib.server.Stream[UpdateRuleRequest, UpdateRuleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_rule(request)
        await stream.send_message(response)

    async def __rpc_batch_update_rules(
        self,
        stream: "grpclib.server.Stream[BatchUpdateRulesRequest, BatchUpdateRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_update_rules(request)
        await stream.send_message(response)

    async def __rpc_delete_rule(
        self, stream: "grpclib.server.Stream[DeleteRuleRequest, DeleteRuleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_rule(request)
        await stream.send_message(response)

    async def __rpc_batch_delete_rules(
        self,
        stream: "grpclib.server.Stream[BatchDeleteRulesRequest, BatchDeleteRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_delete_rules(request)
        await stream.send_message(response)

    async def __rpc_undelete_rule(
        self, stream: "grpclib.server.Stream[UndeleteRuleRequest, UndeleteRuleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.undelete_rule(request)
        await stream.send_message(response)

    async def __rpc_batch_undelete_rules(
        self,
        stream: "grpclib.server.Stream[BatchUndeleteRulesRequest, BatchUndeleteRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_undelete_rules(request)
        await stream.send_message(response)

    async def __rpc_evaluate_rules(
        self,
        stream: "grpclib.server.Stream[EvaluateRulesRequest, EvaluateRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.evaluate_rules(request)
        await stream.send_message(response)

    async def __rpc_view_human_friendly_rules(
        self,
        stream: "grpclib.server.Stream[ViewHumanFriendlyRulesRequest, ViewHumanFriendlyRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.view_human_friendly_rules(request)
        await stream.send_message(response)

    async def __rpc_view_json_rules(
        self,
        stream: "grpclib.server.Stream[ViewJsonRulesRequest, ViewJsonRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.view_json_rules(request)
        await stream.send_message(response)

    async def __rpc_update_human_friendly_rules(
        self,
        stream: "grpclib.server.Stream[UpdateHumanFriendlyRulesRequest, UpdateHumanFriendlyRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_human_friendly_rules(request)
        await stream.send_message(response)

    async def __rpc_validate_json_rules(
        self,
        stream: "grpclib.server.Stream[ValidateJsonRulesRequest, ValidateJsonRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.validate_json_rules(request)
        await stream.send_message(response)

    async def __rpc_update_json_rules(
        self,
        stream: "grpclib.server.Stream[UpdateJsonRulesRequest, UpdateJsonRulesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_json_rules(request)
        await stream.send_message(response)

    async def __rpc_list_rules(
        self, stream: "grpclib.server.Stream[ListRulesRequest, ListRulesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_rules(request)
        await stream.send_message(response)

    async def __rpc_list_rule_versions(
        self,
        stream: "grpclib.server.Stream[ListRuleVersionsRequest, ListRuleVersionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_rule_versions(request)
        await stream.send_message(response)

    async def __rpc_get_rule_version(
        self,
        stream: "grpclib.server.Stream[GetRuleVersionRequest, GetRuleVersionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_rule_version(request)
        await stream.send_message(response)

    async def __rpc_batch_get_rule_versions(
        self,
        stream: "grpclib.server.Stream[BatchGetRuleVersionsRequest, BatchGetRuleVersionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_get_rule_versions(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.rules.v1.RuleService/SearchRules": grpclib.const.Handler(
                self.__rpc_search_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchRulesRequest,
                SearchRulesResponse,
            ),
            "/sift.rules.v1.RuleService/GetRule": grpclib.const.Handler(
                self.__rpc_get_rule,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRuleRequest,
                GetRuleResponse,
            ),
            "/sift.rules.v1.RuleService/BatchGetRules": grpclib.const.Handler(
                self.__rpc_batch_get_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchGetRulesRequest,
                BatchGetRulesResponse,
            ),
            "/sift.rules.v1.RuleService/CreateRule": grpclib.const.Handler(
                self.__rpc_create_rule,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRuleRequest,
                CreateRuleResponse,
            ),
            "/sift.rules.v1.RuleService/UpdateRule": grpclib.const.Handler(
                self.__rpc_update_rule,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRuleRequest,
                UpdateRuleResponse,
            ),
            "/sift.rules.v1.RuleService/BatchUpdateRules": grpclib.const.Handler(
                self.__rpc_batch_update_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchUpdateRulesRequest,
                BatchUpdateRulesResponse,
            ),
            "/sift.rules.v1.RuleService/DeleteRule": grpclib.const.Handler(
                self.__rpc_delete_rule,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRuleRequest,
                DeleteRuleResponse,
            ),
            "/sift.rules.v1.RuleService/BatchDeleteRules": grpclib.const.Handler(
                self.__rpc_batch_delete_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchDeleteRulesRequest,
                BatchDeleteRulesResponse,
            ),
            "/sift.rules.v1.RuleService/UndeleteRule": grpclib.const.Handler(
                self.__rpc_undelete_rule,
                grpclib.const.Cardinality.UNARY_UNARY,
                UndeleteRuleRequest,
                UndeleteRuleResponse,
            ),
            "/sift.rules.v1.RuleService/BatchUndeleteRules": grpclib.const.Handler(
                self.__rpc_batch_undelete_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchUndeleteRulesRequest,
                BatchUndeleteRulesResponse,
            ),
            "/sift.rules.v1.RuleService/EvaluateRules": grpclib.const.Handler(
                self.__rpc_evaluate_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                EvaluateRulesRequest,
                EvaluateRulesResponse,
            ),
            "/sift.rules.v1.RuleService/ViewHumanFriendlyRules": grpclib.const.Handler(
                self.__rpc_view_human_friendly_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                ViewHumanFriendlyRulesRequest,
                ViewHumanFriendlyRulesResponse,
            ),
            "/sift.rules.v1.RuleService/ViewJsonRules": grpclib.const.Handler(
                self.__rpc_view_json_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                ViewJsonRulesRequest,
                ViewJsonRulesResponse,
            ),
            "/sift.rules.v1.RuleService/UpdateHumanFriendlyRules": grpclib.const.Handler(
                self.__rpc_update_human_friendly_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateHumanFriendlyRulesRequest,
                UpdateHumanFriendlyRulesResponse,
            ),
            "/sift.rules.v1.RuleService/ValidateJsonRules": grpclib.const.Handler(
                self.__rpc_validate_json_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                ValidateJsonRulesRequest,
                ValidateJsonRulesResponse,
            ),
            "/sift.rules.v1.RuleService/UpdateJsonRules": grpclib.const.Handler(
                self.__rpc_update_json_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateJsonRulesRequest,
                UpdateJsonRulesResponse,
            ),
            "/sift.rules.v1.RuleService/ListRules": grpclib.const.Handler(
                self.__rpc_list_rules,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRulesRequest,
                ListRulesResponse,
            ),
            "/sift.rules.v1.RuleService/ListRuleVersions": grpclib.const.Handler(
                self.__rpc_list_rule_versions,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRuleVersionsRequest,
                ListRuleVersionsResponse,
            ),
            "/sift.rules.v1.RuleService/GetRuleVersion": grpclib.const.Handler(
                self.__rpc_get_rule_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRuleVersionRequest,
                GetRuleVersionResponse,
            ),
            "/sift.rules.v1.RuleService/BatchGetRuleVersions": grpclib.const.Handler(
                self.__rpc_batch_get_rule_versions,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchGetRuleVersionsRequest,
                BatchGetRuleVersionsResponse,
            ),
        }
