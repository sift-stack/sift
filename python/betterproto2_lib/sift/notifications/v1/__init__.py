# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/notifications/v1/notifications.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "NotificationKind",
    "BatchUpdateNotificationsRequest",
    "BatchUpdateNotificationsResponse",
    "ListNotificationsRequest",
    "ListNotificationsResponse",
    "Notification",
    "UpdateNotificationRequest",
    "NotificationServiceStub",
    "NotificationServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class NotificationKind(betterproto2.Enum):
    UNSPECIFIED = 0

    TEXT = 1

    ANNOTATION_ASSIGNED = 2

    MENTIONED_IN_ANNOTATION_COMMENT = 3

    CONDITION_TRIGGERED = 4

    ANNOTATION_STATE_CHANGED = 5

    REPORT_READY = 6


@dataclass(eq=False, repr=False)
class BatchUpdateNotificationsRequest(betterproto2.Message):
    """
    The request for a call to `NotificationService_BatchUpdateNotifications` to update notifications.
    A maximum of 1000 notifications can be modified in a batch.
    """

    requests: "list[UpdateNotificationRequest]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.notifications.v1",
    "BatchUpdateNotificationsRequest",
    BatchUpdateNotificationsRequest,
)


@dataclass(eq=False, repr=False)
class BatchUpdateNotificationsResponse(betterproto2.Message):
    """
    The response of a call to `NotificationService_BatchUpdateNotifications` containing the updated notifications.
    """

    notifications: "list[Notification]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The updated notifications.
    """


default_message_pool.register_message(
    "sift.notifications.v1",
    "BatchUpdateNotificationsResponse",
    BatchUpdateNotificationsResponse,
)


@dataclass(eq=False, repr=False)
class ListNotificationsRequest(betterproto2.Message):
    """
    The request for a call to `NotificationService_ListNotifications` to retrieve notifications.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of notifications to return.
    The service may return fewer than this value.
    If unspecified, at most 50 notifications will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListNotifications` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListNotifications` must match
    the call that provided the page token.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `notification_id`, `created_by_user_id`, `recipient_user_id`,
    `created_date`, `notification_type`, and `is_read`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/notifications#notification). Optional.
    """


default_message_pool.register_message(
    "sift.notifications.v1", "ListNotificationsRequest", ListNotificationsRequest
)


@dataclass(eq=False, repr=False)
class ListNotificationsResponse(betterproto2.Message):
    """
    The response of a call to `NotificationService_ListNotifications`.
    """

    notifications: "list[Notification]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.notifications.v1", "ListNotificationsResponse", ListNotificationsResponse
)


@dataclass(eq=False, repr=False)
class Notification(betterproto2.Message):
    notification_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    created_date: "datetime.datetime | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    modified_date: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    created_by_user_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    modified_by_user_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    organization_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    recipient_user_id: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    is_read: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)

    full_link: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    notification_type: "NotificationKind" = betterproto2.field(
        10, betterproto2.TYPE_ENUM, default_factory=lambda: NotificationKind(0)
    )

    contents: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    entity_id: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.notifications.v1", "Notification", Notification
)


@dataclass(eq=False, repr=False)
class UpdateNotificationRequest(betterproto2.Message):
    notification: "Notification | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The notification to update. The notification's `notification_id` field is used to identify the notification to update
    and must be provided.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The list of fields to be updated. Currently, the only field that can be updated is `is_read`.
    """


default_message_pool.register_message(
    "sift.notifications.v1", "UpdateNotificationRequest", UpdateNotificationRequest
)


class NotificationServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def list_notifications(
        self, message: "ListNotificationsRequest"
    ) -> "ListNotificationsResponse":
        """
        Retrieves notifications using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.notifications.v1.NotificationService/ListNotifications",
            ListNotificationsRequest.SerializeToString,
            ListNotificationsResponse.FromString,
        )(message)

    def batch_update_notifications(
        self, message: "BatchUpdateNotificationsRequest"
    ) -> "BatchUpdateNotificationsResponse":
        """
        Batch updates a list of notifications using the list of fields specified in their respective `update_mask`s.
        """

        return self._channel.unary_unary(
            "/sift.notifications.v1.NotificationService/BatchUpdateNotifications",
            BatchUpdateNotificationsRequest.SerializeToString,
            BatchUpdateNotificationsResponse.FromString,
        )(message)


class NotificationServiceAsyncStub(betterproto2.ServiceStub):
    async def list_notifications(
        self,
        message: "ListNotificationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListNotificationsResponse":
        """
        Retrieves notifications using an optional filter.
        """

        return await self._unary_unary(
            "/sift.notifications.v1.NotificationService/ListNotifications",
            message,
            ListNotificationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_update_notifications(
        self,
        message: "BatchUpdateNotificationsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchUpdateNotificationsResponse":
        """
        Batch updates a list of notifications using the list of fields specified in their respective `update_mask`s.
        """

        return await self._unary_unary(
            "/sift.notifications.v1.NotificationService/BatchUpdateNotifications",
            message,
            BatchUpdateNotificationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__


class NotificationServiceBase(ServiceBase):
    async def list_notifications(
        self, message: "ListNotificationsRequest"
    ) -> "ListNotificationsResponse":
        """
        Retrieves notifications using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def batch_update_notifications(
        self, message: "BatchUpdateNotificationsRequest"
    ) -> "BatchUpdateNotificationsResponse":
        """
        Batch updates a list of notifications using the list of fields specified in their respective `update_mask`s.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_notifications(
        self,
        stream: "grpclib.server.Stream[ListNotificationsRequest, ListNotificationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_notifications(request)
        await stream.send_message(response)

    async def __rpc_batch_update_notifications(
        self,
        stream: "grpclib.server.Stream[BatchUpdateNotificationsRequest, BatchUpdateNotificationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch_update_notifications(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.notifications.v1.NotificationService/ListNotifications": grpclib.const.Handler(
                self.__rpc_list_notifications,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListNotificationsRequest,
                ListNotificationsResponse,
            ),
            "/sift.notifications.v1.NotificationService/BatchUpdateNotifications": grpclib.const.Handler(
                self.__rpc_batch_update_notifications,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchUpdateNotificationsRequest,
                BatchUpdateNotificationsResponse,
            ),
        }
