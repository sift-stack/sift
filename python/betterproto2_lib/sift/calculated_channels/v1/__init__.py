# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/calculated_channels/v1/calculated_channels.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ExpressionIdentifierLibrary",
    "ExpressionIdentifierType",
    "ExpressionMode",
    "ErrorValidatingExpressionResult",
    "ExpressionChannelReference",
    "ExpressionIdentifier",
    "ExpressionRequest",
    "ListExpressionIdentifiersRequest",
    "ListExpressionIdentifiersResponse",
    "SuccessValidatingExpressionResult",
    "ValidateExpressionRequest",
    "ValidateExpressionResponse",
    "CalculatedChannelsServiceStub",
    "CalculatedChannelsServiceBase",
)

import warnings
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


class ExpressionIdentifierLibrary(betterproto2.Enum):
    UNSPECIFIED = 0

    MATH = 1

    STRING = 2

    LIST = 3

    ITER = 4

    STATEFUL = 5

    SUMMARY = 6


class ExpressionIdentifierType(betterproto2.Enum):
    UNSPECIFIED = 0

    FUNCTION = 1

    CHANNEL = 2


class ExpressionMode(betterproto2.Enum):
    UNSPECIFIED = 0

    RULES = 1

    CALCULATED_CHANNELS = 2

    RULER = 3

    STRUCTURED_DATA = 4


@dataclass(eq=False, repr=False)
class ErrorValidatingExpressionResult(betterproto2.Message):
    error_message: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "ErrorValidatingExpressionResult",
    ErrorValidatingExpressionResult,
)


@dataclass(eq=False, repr=False)
class ExpressionChannelReference(betterproto2.Message):
    channel_reference: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    channel_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "ExpressionChannelReference",
    ExpressionChannelReference,
)


@dataclass(eq=False, repr=False)
class ExpressionIdentifier(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    type: "ExpressionIdentifierType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ExpressionIdentifierType(0)
    )

    display_name: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    library: "ExpressionIdentifierLibrary" = betterproto2.field(
        5,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ExpressionIdentifierLibrary(0),
    )


default_message_pool.register_message(
    "sift.calculated_channels.v1", "ExpressionIdentifier", ExpressionIdentifier
)


@dataclass(eq=False, repr=False)
class ExpressionRequest(betterproto2.Message):
    channel_references: "dict[str, str]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING),
    )
    """
    A map from the channel reference in the expression string (e.g. $1) to the channel id (uuid).
    This is deprecated and should be passed in expression_channel_references instead.
    """

    expression: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    expression_channel_references: "list[ExpressionChannelReference]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("channel_references"):
            warnings.warn(
                "ExpressionRequest.channel_references is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "sift.calculated_channels.v1", "ExpressionRequest", ExpressionRequest
)


@dataclass(eq=False, repr=False)
class ListExpressionIdentifiersRequest(betterproto2.Message):
    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    Defaults to 1000. Max of 10,000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    mode: "ExpressionMode" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ExpressionMode(0)
    )


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "ListExpressionIdentifiersRequest",
    ListExpressionIdentifiersRequest,
)


@dataclass(eq=False, repr=False)
class ListExpressionIdentifiersResponse(betterproto2.Message):
    identifiers: "list[ExpressionIdentifier]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "ListExpressionIdentifiersResponse",
    ListExpressionIdentifiersResponse,
)


@dataclass(eq=False, repr=False)
class SuccessValidatingExpressionResult(betterproto2.Message):
    data_type: "__common__type__v1__.ChannelDataType" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __common__type__v1__.ChannelDataType(0),
    )


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "SuccessValidatingExpressionResult",
    SuccessValidatingExpressionResult,
)


@dataclass(eq=False, repr=False)
class ValidateExpressionRequest(betterproto2.Message):
    expression: "ExpressionRequest | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    mode: "ExpressionMode" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: ExpressionMode(0)
    )


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "ValidateExpressionRequest",
    ValidateExpressionRequest,
)


@dataclass(eq=False, repr=False)
class ValidateExpressionResponse(betterproto2.Message):
    """


    Oneofs:
        - result:
    """

    error: "ErrorValidatingExpressionResult | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="result"
    )

    success: "SuccessValidatingExpressionResult | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="result"
    )


default_message_pool.register_message(
    "sift.calculated_channels.v1",
    "ValidateExpressionResponse",
    ValidateExpressionResponse,
)


class CalculatedChannelsServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def list_expression_identifiers(
        self, message: "ListExpressionIdentifiersRequest"
    ) -> "ListExpressionIdentifiersResponse":
        """
        Retrieves a list of valid identifiers that can be used as part of a calculated channel expression.
        """

        return self._channel.unary_unary(
            "/sift.calculated_channels.v1.CalculatedChannelsService/ListExpressionIdentifiers",
            ListExpressionIdentifiersRequest.SerializeToString,
            ListExpressionIdentifiersResponse.FromString,
        )(message)

    def validate_expression(
        self, message: "ValidateExpressionRequest"
    ) -> "ValidateExpressionResponse":
        """
        Used to validate whether or not an expression used for a calculated channel is valid.
        """

        return self._channel.unary_unary(
            "/sift.calculated_channels.v1.CalculatedChannelsService/ValidateExpression",
            ValidateExpressionRequest.SerializeToString,
            ValidateExpressionResponse.FromString,
        )(message)


class CalculatedChannelsServiceAsyncStub(betterproto2.ServiceStub):
    async def list_expression_identifiers(
        self,
        message: "ListExpressionIdentifiersRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListExpressionIdentifiersResponse":
        """
        Retrieves a list of valid identifiers that can be used as part of a calculated channel expression.
        """

        return await self._unary_unary(
            "/sift.calculated_channels.v1.CalculatedChannelsService/ListExpressionIdentifiers",
            message,
            ListExpressionIdentifiersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validate_expression(
        self,
        message: "ValidateExpressionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ValidateExpressionResponse":
        """
        Used to validate whether or not an expression used for a calculated channel is valid.
        """

        return await self._unary_unary(
            "/sift.calculated_channels.v1.CalculatedChannelsService/ValidateExpression",
            message,
            ValidateExpressionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...common.type import v1 as __common__type__v1__


class CalculatedChannelsServiceBase(ServiceBase):
    async def list_expression_identifiers(
        self, message: "ListExpressionIdentifiersRequest"
    ) -> "ListExpressionIdentifiersResponse":
        """
        Retrieves a list of valid identifiers that can be used as part of a calculated channel expression.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validate_expression(
        self, message: "ValidateExpressionRequest"
    ) -> "ValidateExpressionResponse":
        """
        Used to validate whether or not an expression used for a calculated channel is valid.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_expression_identifiers(
        self,
        stream: "grpclib.server.Stream[ListExpressionIdentifiersRequest, ListExpressionIdentifiersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_expression_identifiers(request)
        await stream.send_message(response)

    async def __rpc_validate_expression(
        self,
        stream: "grpclib.server.Stream[ValidateExpressionRequest, ValidateExpressionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.validate_expression(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.calculated_channels.v1.CalculatedChannelsService/ListExpressionIdentifiers": grpclib.const.Handler(
                self.__rpc_list_expression_identifiers,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListExpressionIdentifiersRequest,
                ListExpressionIdentifiersResponse,
            ),
            "/sift.calculated_channels.v1.CalculatedChannelsService/ValidateExpression": grpclib.const.Handler(
                self.__rpc_validate_expression,
                grpclib.const.Cardinality.UNARY_UNARY,
                ValidateExpressionRequest,
                ValidateExpressionResponse,
            ),
        }
