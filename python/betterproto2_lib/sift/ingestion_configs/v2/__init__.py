# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sift/ingestion_configs/v2/ingestion_configs.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ChannelConfig",
    "CreateIngestionConfigFlowsRequest",
    "CreateIngestionConfigFlowsResponse",
    "CreateIngestionConfigRequest",
    "CreateIngestionConfigResponse",
    "FlowConfig",
    "GetIngestionConfigRequest",
    "GetIngestionConfigResponse",
    "IngestionConfig",
    "ListIngestionConfigFlowsRequest",
    "ListIngestionConfigFlowsResponse",
    "ListIngestionConfigsRequest",
    "ListIngestionConfigsResponse",
    "IngestionConfigServiceStub",
    "IngestionConfigServiceBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class ChannelConfig(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    unit: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    data_type: "__common__type__v1__.ChannelDataType" = betterproto2.field(
        4,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __common__type__v1__.ChannelDataType(0),
    )

    enum_types: "list[__common__type__v1__.ChannelEnumType]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )

    bit_field_elements: "list[__common__type__v1__.ChannelBitFieldElement]" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    )


default_message_pool.register_message(
    "sift.ingestion_configs.v2", "ChannelConfig", ChannelConfig
)


@dataclass(eq=False, repr=False)
class CreateIngestionConfigFlowsRequest(betterproto2.Message):
    """
    The request for a call to `IngestionConfigService_CreateIngestionConfigFlows` to create ingestion config flows.
    """

    ingestion_config_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    flows: "list[FlowConfig]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    These flows must have unique names. If you try to send a flow with a name that already exists for an ingestion config, it will return an error.
    """


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "CreateIngestionConfigFlowsRequest",
    CreateIngestionConfigFlowsRequest,
)


@dataclass(eq=False, repr=False)
class CreateIngestionConfigFlowsResponse(betterproto2.Message):
    """
    The result of a call to `IngestionConfigService_CreateIngestionConfigFlows`.
    """

    pass


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "CreateIngestionConfigFlowsResponse",
    CreateIngestionConfigFlowsResponse,
)


@dataclass(eq=False, repr=False)
class CreateIngestionConfigRequest(betterproto2.Message):
    """
    The request for a call to `IngestionConfigService_ListIngestionConfigs` to retrieve ingestion configs.
    """

    asset_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    flows: "list[FlowConfig]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )

    organization_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The `client_key` field is a user-defined string you can supply to uniquely identify
    an ingestion config (and retrieve it via `GetIngestionConfig`).
    An error is returned if you try to create an ingestion config with a
    client_key that already exists.
    """


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "CreateIngestionConfigRequest",
    CreateIngestionConfigRequest,
)


@dataclass(eq=False, repr=False)
class CreateIngestionConfigResponse(betterproto2.Message):
    """
    The result of a call to `IngestionConfigService_CreateIngestionConfig`.
    """

    ingestion_config: "IngestionConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "CreateIngestionConfigResponse",
    CreateIngestionConfigResponse,
)


@dataclass(eq=False, repr=False)
class FlowConfig(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    channels: "list[ChannelConfig]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sift.ingestion_configs.v2", "FlowConfig", FlowConfig
)


@dataclass(eq=False, repr=False)
class GetIngestionConfigRequest(betterproto2.Message):
    """
    The request for a call to `IngestionConfigService_GetIngestionConfig` to retrieve an ingestion config.
    """

    ingestion_config_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.ingestion_configs.v2", "GetIngestionConfigRequest", GetIngestionConfigRequest
)


@dataclass(eq=False, repr=False)
class GetIngestionConfigResponse(betterproto2.Message):
    """
    The result of a call to `IngestionConfigService_GetIngestionConfig`.
    """

    ingestion_config: "IngestionConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "GetIngestionConfigResponse",
    GetIngestionConfigResponse,
)


@dataclass(eq=False, repr=False)
class IngestionConfig(betterproto2.Message):
    ingestion_config_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    asset_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    client_key: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.ingestion_configs.v2", "IngestionConfig", IngestionConfig
)


@dataclass(eq=False, repr=False)
class ListIngestionConfigFlowsRequest(betterproto2.Message):
    """
    The request for a call to `IngestionConfigService_ListIngestionConfigFlows` to retrieve ingestion config flows.
    """

    ingestion_config_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    The maximum number of ingestion config flows to return. The service may return fewer than this value.
    If unspecified, at most 50 ingestion config flows will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListIngestionConfigFlows` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListIngestionConfigFlows` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `flow_name`, `flow_id`, `created_date`, and `modified_date`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/ingestion_configs#ingestionconfig). Optional.
    """


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "ListIngestionConfigFlowsRequest",
    ListIngestionConfigFlowsRequest,
)


@dataclass(eq=False, repr=False)
class ListIngestionConfigFlowsResponse(betterproto2.Message):
    """
    The result of a call to `IngestionConfigService_ListIngestionConfigFlows`.
    """

    flows: "list[FlowConfig]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "ListIngestionConfigFlowsResponse",
    ListIngestionConfigFlowsResponse,
)


@dataclass(eq=False, repr=False)
class ListIngestionConfigsRequest(betterproto2.Message):
    """
    The request for a call to `IngestionConfigService_ListIngestionConfigs` to retrieve ingestion configs.
    """

    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The maximum number of ingestion configs to return. The service may return fewer than this value.
    If unspecified, at most 50 ingestion configs will be returned. The maximum value is 1000; values above
    1000 will be coerced to 1000. Optional.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListIngestionConfigs` call.
    Provide this to retrieve the subsequent page.
    When paginating, all other parameters provided to `ListIngestionConfigs` must match
    the call that provided the page token. Optional.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
    Available fields to filter by are `ingestion_config_id`, `client_key`, `asset_id`, `created_date`, and `modified_date`.
    For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
    For more information about the fields used for filtering, please refer to [this definition](/docs/api/grpc/protocol-buffers/ingestion_configs#ingestionconfigservice). Optional.
    """


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "ListIngestionConfigsRequest",
    ListIngestionConfigsRequest,
)


@dataclass(eq=False, repr=False)
class ListIngestionConfigsResponse(betterproto2.Message):
    """
    The result of a call to `IngestionConfigService_ListIngestionConfigs`.
    """

    ingestion_configs: "list[IngestionConfig]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "sift.ingestion_configs.v2",
    "ListIngestionConfigsResponse",
    ListIngestionConfigsResponse,
)


class IngestionConfigServiceStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_ingestion_config(
        self, message: "GetIngestionConfigRequest"
    ) -> "GetIngestionConfigResponse":
        """
        Retrieves an ingestion config.
        """

        return self._channel.unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/GetIngestionConfig",
            GetIngestionConfigRequest.SerializeToString,
            GetIngestionConfigResponse.FromString,
        )(message)

    def create_ingestion_config(
        self, message: "CreateIngestionConfigRequest"
    ) -> "CreateIngestionConfigResponse":
        """
        Create an ingestion config.
        """

        return self._channel.unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/CreateIngestionConfig",
            CreateIngestionConfigRequest.SerializeToString,
            CreateIngestionConfigResponse.FromString,
        )(message)

    def list_ingestion_configs(
        self, message: "ListIngestionConfigsRequest"
    ) -> "ListIngestionConfigsResponse":
        """
        List ingestion configs using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/ListIngestionConfigs",
            ListIngestionConfigsRequest.SerializeToString,
            ListIngestionConfigsResponse.FromString,
        )(message)

    def create_ingestion_config_flows(
        self, message: "CreateIngestionConfigFlowsRequest"
    ) -> "CreateIngestionConfigFlowsResponse":
        """
        Create ingestion config [flows](/glossary#flow).
        """

        return self._channel.unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/CreateIngestionConfigFlows",
            CreateIngestionConfigFlowsRequest.SerializeToString,
            CreateIngestionConfigFlowsResponse.FromString,
        )(message)

    def list_ingestion_config_flows(
        self, message: "ListIngestionConfigFlowsRequest"
    ) -> "ListIngestionConfigFlowsResponse":
        """
        List ingestion config [flows](/glossary#flow) using an optional filter.
        """

        return self._channel.unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/ListIngestionConfigFlows",
            ListIngestionConfigFlowsRequest.SerializeToString,
            ListIngestionConfigFlowsResponse.FromString,
        )(message)


class IngestionConfigServiceAsyncStub(betterproto2.ServiceStub):
    async def get_ingestion_config(
        self,
        message: "GetIngestionConfigRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetIngestionConfigResponse":
        """
        Retrieves an ingestion config.
        """

        return await self._unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/GetIngestionConfig",
            message,
            GetIngestionConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_ingestion_config(
        self,
        message: "CreateIngestionConfigRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateIngestionConfigResponse":
        """
        Create an ingestion config.
        """

        return await self._unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/CreateIngestionConfig",
            message,
            CreateIngestionConfigResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_ingestion_configs(
        self,
        message: "ListIngestionConfigsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListIngestionConfigsResponse":
        """
        List ingestion configs using an optional filter.
        """

        return await self._unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/ListIngestionConfigs",
            message,
            ListIngestionConfigsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_ingestion_config_flows(
        self,
        message: "CreateIngestionConfigFlowsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CreateIngestionConfigFlowsResponse":
        """
        Create ingestion config [flows](/glossary#flow).
        """

        return await self._unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/CreateIngestionConfigFlows",
            message,
            CreateIngestionConfigFlowsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_ingestion_config_flows(
        self,
        message: "ListIngestionConfigFlowsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListIngestionConfigFlowsResponse":
        """
        List ingestion config [flows](/glossary#flow) using an optional filter.
        """

        return await self._unary_unary(
            "/sift.ingestion_configs.v2.IngestionConfigService/ListIngestionConfigFlows",
            message,
            ListIngestionConfigFlowsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...common.type import v1 as __common__type__v1__


class IngestionConfigServiceBase(ServiceBase):
    async def get_ingestion_config(
        self, message: "GetIngestionConfigRequest"
    ) -> "GetIngestionConfigResponse":
        """
        Retrieves an ingestion config.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_ingestion_config(
        self, message: "CreateIngestionConfigRequest"
    ) -> "CreateIngestionConfigResponse":
        """
        Create an ingestion config.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_ingestion_configs(
        self, message: "ListIngestionConfigsRequest"
    ) -> "ListIngestionConfigsResponse":
        """
        List ingestion configs using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_ingestion_config_flows(
        self, message: "CreateIngestionConfigFlowsRequest"
    ) -> "CreateIngestionConfigFlowsResponse":
        """
        Create ingestion config [flows](/glossary#flow).
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_ingestion_config_flows(
        self, message: "ListIngestionConfigFlowsRequest"
    ) -> "ListIngestionConfigFlowsResponse":
        """
        List ingestion config [flows](/glossary#flow) using an optional filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ingestion_config(
        self,
        stream: "grpclib.server.Stream[GetIngestionConfigRequest, GetIngestionConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ingestion_config(request)
        await stream.send_message(response)

    async def __rpc_create_ingestion_config(
        self,
        stream: "grpclib.server.Stream[CreateIngestionConfigRequest, CreateIngestionConfigResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_ingestion_config(request)
        await stream.send_message(response)

    async def __rpc_list_ingestion_configs(
        self,
        stream: "grpclib.server.Stream[ListIngestionConfigsRequest, ListIngestionConfigsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_ingestion_configs(request)
        await stream.send_message(response)

    async def __rpc_create_ingestion_config_flows(
        self,
        stream: "grpclib.server.Stream[CreateIngestionConfigFlowsRequest, CreateIngestionConfigFlowsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_ingestion_config_flows(request)
        await stream.send_message(response)

    async def __rpc_list_ingestion_config_flows(
        self,
        stream: "grpclib.server.Stream[ListIngestionConfigFlowsRequest, ListIngestionConfigFlowsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_ingestion_config_flows(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sift.ingestion_configs.v2.IngestionConfigService/GetIngestionConfig": grpclib.const.Handler(
                self.__rpc_get_ingestion_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetIngestionConfigRequest,
                GetIngestionConfigResponse,
            ),
            "/sift.ingestion_configs.v2.IngestionConfigService/CreateIngestionConfig": grpclib.const.Handler(
                self.__rpc_create_ingestion_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateIngestionConfigRequest,
                CreateIngestionConfigResponse,
            ),
            "/sift.ingestion_configs.v2.IngestionConfigService/ListIngestionConfigs": grpclib.const.Handler(
                self.__rpc_list_ingestion_configs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListIngestionConfigsRequest,
                ListIngestionConfigsResponse,
            ),
            "/sift.ingestion_configs.v2.IngestionConfigService/CreateIngestionConfigFlows": grpclib.const.Handler(
                self.__rpc_create_ingestion_config_flows,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateIngestionConfigFlowsRequest,
                CreateIngestionConfigFlowsResponse,
            ),
            "/sift.ingestion_configs.v2.IngestionConfigService/ListIngestionConfigFlows": grpclib.const.Handler(
                self.__rpc_list_ingestion_config_flows,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListIngestionConfigFlowsRequest,
                ListIngestionConfigFlowsResponse,
            ),
        }
