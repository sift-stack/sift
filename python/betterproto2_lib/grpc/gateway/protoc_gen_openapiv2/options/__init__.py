# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: protoc-gen-openapiv2/options/annotations.proto, protoc-gen-openapiv2/options/openapiv2.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "HeaderParameterType",
    "JsonSchemaJsonSchemaSimpleTypes",
    "Scheme",
    "SecuritySchemeFlow",
    "SecuritySchemeIn",
    "SecuritySchemeType",
    "Contact",
    "EnumSchema",
    "ExternalDocumentation",
    "Header",
    "HeaderParameter",
    "Info",
    "JsonSchema",
    "JsonSchemaFieldConfiguration",
    "License",
    "Operation",
    "Parameters",
    "Response",
    "Schema",
    "Scopes",
    "SecurityDefinitions",
    "SecurityRequirement",
    "SecurityRequirementSecurityRequirementValue",
    "SecurityScheme",
    "Swagger",
    "Tag",
)

from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

betterproto2.check_compiler_version("0.4.0")


class HeaderParameterType(betterproto2.Enum):
    """
    `Type` is a supported HTTP header type.
    See https://swagger.io/specification/v2/#parameterType.
    """

    UNKNOWN = 0

    STRING = 1

    NUMBER = 2

    INTEGER = 3

    BOOLEAN = 4


class JsonSchemaJsonSchemaSimpleTypes(betterproto2.Enum):
    UNKNOWN = 0

    ARRAY = 1

    BOOLEAN = 2

    INTEGER = 3

    NULL = 4

    NUMBER = 5

    OBJECT = 6

    STRING = 7


class Scheme(betterproto2.Enum):
    """
    Scheme describes the schemes supported by the OpenAPI Swagger
    and Operation objects.
    """

    UNKNOWN = 0

    HTTP = 1

    HTTPS = 2

    WS = 3

    WSS = 4


class SecuritySchemeFlow(betterproto2.Enum):
    """
    The flow used by the OAuth2 security scheme. Valid values are
    "implicit", "password", "application" or "accessCode".
    """

    FLOW_INVALID = 0

    FLOW_IMPLICIT = 1

    FLOW_PASSWORD = 2

    FLOW_APPLICATION = 3

    FLOW_ACCESS_CODE = 4


class SecuritySchemeIn(betterproto2.Enum):
    """
    The location of the API key. Valid values are "query" or "header".
    """

    IN_INVALID = 0

    IN_QUERY = 1

    IN_HEADER = 2


class SecuritySchemeType(betterproto2.Enum):
    """
    The type of the security scheme. Valid values are "basic",
    "apiKey" or "oauth2".
    """

    TYPE_INVALID = 0

    TYPE_BASIC = 1

    TYPE_API_KEY = 2

    TYPE_OAUTH2 = 3


@dataclass(eq=False, repr=False)
class Contact(betterproto2.Message):
    """
    `Contact` is a representation of OpenAPI v2 specification's Contact object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#contactObject

    Example:

     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
       info: {
         ...
         contact: {
           name: "gRPC-Gateway project";
           url: "https://github.com/grpc-ecosystem/grpc-gateway";
           email: "none@example.com";
         };
         ...
       };
       ...
     };
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The identifying name of the contact person/organization.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL pointing to the contact information. MUST be in the format of a
    URL.
    """

    email: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The email address of the contact person/organization. MUST be in the format
    of an email address.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Contact", Contact
)


@dataclass(eq=False, repr=False)
class EnumSchema(betterproto2.Message):
    """
    `EnumSchema` is subset of fields from the OpenAPI v2 specification's Schema object.
    Only fields that are applicable to Enums are included
    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject

    Example:

     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_enum) = {
       ...
       title: "MyEnum";
       description:"This is my nice enum";
       example: "ZERO";
       required: true;
       ...
     };
    """

    description: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A short description of the schema.
    """

    default: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    title: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The title of the schema.
    """

    required: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)

    read_only: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)

    external_docs: "ExternalDocumentation | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional external documentation for this schema.
    """

    example: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    ref: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Ref is used to define an external reference to include in the message.
    This could be a fully qualified proto message reference, and that type must
    be imported into the protofile. If no message is identified, the Ref will
    be used verbatim in the output.
    For example:
     `ref: ".google.protobuf.Timestamp"`.
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        9,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "EnumSchema", EnumSchema
)


@dataclass(eq=False, repr=False)
class ExternalDocumentation(betterproto2.Message):
    """
    `ExternalDocumentation` is a representation of OpenAPI v2 specification's
    ExternalDocumentation object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#externalDocumentationObject

    Example:

     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
       ...
       external_docs: {
         description: "More about gRPC-Gateway";
         url: "https://github.com/grpc-ecosystem/grpc-gateway";
       }
       ...
     };
    """

    description: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A short description of the target documentation. GFM syntax can be used for
    rich text representation.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL for the target documentation. Value MUST be in the format
    of a URL.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options",
    "ExternalDocumentation",
    ExternalDocumentation,
)


@dataclass(eq=False, repr=False)
class Header(betterproto2.Message):
    """
    `Header` is a representation of OpenAPI v2 specification's Header object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#headerObject
    """

    description: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    `Description` is a short description of the header.
    """

    type: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The type of the object. The value MUST be one of "string", "number", "integer", or "boolean". The "array" type is not supported.
    """

    format: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    `Format` The extending format for the previously mentioned type.
    """

    default: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    `Default` Declares the value of the header that the server will use if none is provided.
    See: https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2.
    Unlike JSON Schema this value MUST conform to the defined type for the header.
    """

    pattern: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)
    """
    'Pattern' See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Header", Header
)


@dataclass(eq=False, repr=False)
class HeaderParameter(betterproto2.Message):
    """
    `HeaderParameter` a HTTP header parameter.
    See: https://swagger.io/specification/v2/#parameter-object
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    `Name` is the header name.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    `Description` is a short description of the header.
    """

    type: "HeaderParameterType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: HeaderParameterType(0)
    )
    """
    `Type` is the type of the object. The value MUST be one of "string", "number", "integer", or "boolean". The "array" type is not supported.
    See: https://swagger.io/specification/v2/#parameterType.
    """

    format: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    `Format` The extending format for the previously mentioned type.
    """

    required: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    `Required` indicates if the header is optional
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "HeaderParameter", HeaderParameter
)


@dataclass(eq=False, repr=False)
class Info(betterproto2.Message):
    """
    `Info` is a representation of OpenAPI v2 specification's Info object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#infoObject

    Example:

     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
       info: {
         title: "Echo API";
         version: "1.0";
         description: "";
         contact: {
           name: "gRPC-Gateway project";
           url: "https://github.com/grpc-ecosystem/grpc-gateway";
           email: "none@example.com";
         };
         license: {
           name: "BSD 3-Clause License";
           url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
         };
       };
       ...
     };
    """

    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The title of the application.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A short description of the application. GFM syntax can be used for rich
    text representation.
    """

    terms_of_service: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The Terms of Service for the API.
    """

    contact: "Contact | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The contact information for the exposed API.
    """

    license: "License | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The license information for the exposed API.
    """

    version: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Provides the version of the application API (not to be confused
    with the specification version).
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        7,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Info", Info
)


@dataclass(eq=False, repr=False)
class JsonSchema(betterproto2.Message):
    """
    `JSONSchema` represents properties from JSON Schema taken, and as used, in
    the OpenAPI v2 spec.

    This includes changes made by OpenAPI v2.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject

    See also: https://cswr.github.io/JsonSchema/spec/basic_types/,
    https://github.com/json-schema-org/json-schema-spec/blob/master/schema.json

    Example:

     message SimpleMessage {
       option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
         json_schema: {
           title: "SimpleMessage"
           description: "A simple message."
           required: ["id"]
         }
       };

       // Id represents the message identifier.
       string id = 1; [
           (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
             description: "The unique identifier of the simple message."
           }];
     }
    """

    ref: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Ref is used to define an external reference to include in the message.
    This could be a fully qualified proto message reference, and that type must
    be imported into the protofile. If no message is identified, the Ref will
    be used verbatim in the output.
    For example:
     `ref: ".google.protobuf.Timestamp"`.
    """

    title: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The title of the schema.
    """

    description: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    A short description of the schema.
    """

    default: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    read_only: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)

    example: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    A free-form property to include a JSON example of this field. This is copied
    verbatim to the output swagger.json. Quotes must be escaped.
    This property is the same for 2.0 and 3.0.0 https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/3.0.0.md#schemaObject  https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
    """

    multiple_of: "float" = betterproto2.field(10, betterproto2.TYPE_DOUBLE)

    maximum: "float" = betterproto2.field(11, betterproto2.TYPE_DOUBLE)
    """
    Maximum represents an inclusive upper limit for a numeric instance. The
    value of MUST be a number,
    """

    exclusive_maximum: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)

    minimum: "float" = betterproto2.field(13, betterproto2.TYPE_DOUBLE)
    """
    minimum represents an inclusive lower limit for a numeric instance. The
    value of MUST be a number,
    """

    exclusive_minimum: "bool" = betterproto2.field(14, betterproto2.TYPE_BOOL)

    max_length: "int" = betterproto2.field(15, betterproto2.TYPE_UINT64)

    min_length: "int" = betterproto2.field(16, betterproto2.TYPE_UINT64)

    pattern: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    max_items: "int" = betterproto2.field(20, betterproto2.TYPE_UINT64)

    min_items: "int" = betterproto2.field(21, betterproto2.TYPE_UINT64)

    unique_items: "bool" = betterproto2.field(22, betterproto2.TYPE_BOOL)

    max_properties: "int" = betterproto2.field(24, betterproto2.TYPE_UINT64)

    min_properties: "int" = betterproto2.field(25, betterproto2.TYPE_UINT64)

    required: "list[str]" = betterproto2.field(
        26, betterproto2.TYPE_STRING, repeated=True
    )

    array: "list[str]" = betterproto2.field(34, betterproto2.TYPE_STRING, repeated=True)
    """
    Items in 'array' must be unique.
    """

    type: "list[JsonSchemaJsonSchemaSimpleTypes]" = betterproto2.field(
        35, betterproto2.TYPE_ENUM, repeated=True
    )

    format: "str" = betterproto2.field(36, betterproto2.TYPE_STRING)
    """
    `Format`
    """

    enum: "list[str]" = betterproto2.field(46, betterproto2.TYPE_STRING, repeated=True)
    """
    Items in `enum` must be unique https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1
    """

    field_configuration: "JsonSchemaFieldConfiguration | None" = betterproto2.field(
        1001, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional field level properties used when generating the OpenAPI v2 file.
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        48,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "JSONSchema", JsonSchema
)


@dataclass(eq=False, repr=False)
class JsonSchemaFieldConfiguration(betterproto2.Message):
    """
    'FieldConfiguration' provides additional field level properties used when generating the OpenAPI v2 file.
    These properties are not defined by OpenAPIv2, but they are used to control the generation.
    """

    path_param_name: "str" = betterproto2.field(47, betterproto2.TYPE_STRING)
    """
    Alternative parameter name when used as path parameter. If set, this will
    be used as the complete parameter name when this field is used as a path
    parameter. Use this to avoid having auto generated path parameter names
    for overlapping paths.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options",
    "JSONSchema.FieldConfiguration",
    JsonSchemaFieldConfiguration,
)


@dataclass(eq=False, repr=False)
class License(betterproto2.Message):
    """
    `License` is a representation of OpenAPI v2 specification's License object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#licenseObject

    Example:

     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
       info: {
         ...
         license: {
           name: "BSD 3-Clause License";
           url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
         };
         ...
       };
       ...
     };
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The license name used for the API.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A URL to the license used for the API. MUST be in the format of a URL.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "License", License
)


@dataclass(eq=False, repr=False)
class Operation(betterproto2.Message):
    """
    `Operation` is a representation of OpenAPI v2 specification's Operation object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#operationObject

    Example:

     service EchoService {
       rpc Echo(SimpleMessage) returns (SimpleMessage) {
         option (google.api.http) = {
           get: "/v1/example/echo/{id}"
         };

         option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
           summary: "Get a message.";
           operation_id: "getMessage";
           tags: "echo";
           responses: {
             key: "200"
               value: {
               description: "OK";
             }
           }
         };
       }
     }
    """

    tags: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    A list of tags for API documentation control. Tags can be used for logical
    grouping of operations by resources or any other qualifier.
    """

    summary: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A short summary of what the operation does. For maximum readability in the
    swagger-ui, this field SHOULD be less than 120 characters.
    """

    description: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A verbose explanation of the operation behavior. GFM syntax can be used for
    rich text representation.
    """

    external_docs: "ExternalDocumentation | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional external documentation for this operation.
    """

    operation_id: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Unique string used to identify the operation. The id MUST be unique among
    all operations described in the API. Tools and libraries MAY use the
    operationId to uniquely identify an operation, therefore, it is recommended
    to follow common programming naming conventions.
    """

    consumes: "list[str]" = betterproto2.field(
        6, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of MIME types the operation can consume. This overrides the consumes
    definition at the OpenAPI Object. An empty value MAY be used to clear the
    global definition. Value MUST be as described under Mime Types.
    """

    produces: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of MIME types the operation can produce. This overrides the produces
    definition at the OpenAPI Object. An empty value MAY be used to clear the
    global definition. Value MUST be as described under Mime Types.
    """

    responses: "dict[str, Response]" = betterproto2.field(
        9,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    The list of possible responses as they are returned from executing this
    operation.
    """

    schemes: "list[Scheme]" = betterproto2.field(
        10, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    The transfer protocol for the operation. Values MUST be from the list:
    "http", "https", "ws", "wss". The value overrides the OpenAPI Object
    schemes definition.
    """

    deprecated: "bool" = betterproto2.field(11, betterproto2.TYPE_BOOL)
    """
    Declares this operation to be deprecated. Usage of the declared operation
    should be refrained. Default value is false.
    """

    security: "list[SecurityRequirement]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A declaration of which security schemes are applied for this operation. The
    list of values describes alternative security schemes that can be used
    (that is, there is a logical OR between the security requirements). This
    definition overrides any declared top-level security. To remove a top-level
    security declaration, an empty array can be used.
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        13,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """

    parameters: "Parameters | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Custom parameters such as HTTP request headers.
    See: https://swagger.io/docs/specification/2-0/describing-parameters/
    and https://swagger.io/specification/v2/#parameter-object.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Operation", Operation
)


@dataclass(eq=False, repr=False)
class Parameters(betterproto2.Message):
    """
    `Parameters` is a representation of OpenAPI v2 specification's parameters object.
    Note: This technically breaks compatibility with the OpenAPI 2 definition structure as we only
    allow header parameters to be set here since we do not want users specifying custom non-header
    parameters beyond those inferred from the Protobuf schema.
    See: https://swagger.io/specification/v2/#parameter-object
    """

    headers: "list[HeaderParameter]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    `Headers` is one or more HTTP header parameter.
    See: https://swagger.io/docs/specification/2-0/describing-parameters/#header-parameters
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Parameters", Parameters
)


@dataclass(eq=False, repr=False)
class Response(betterproto2.Message):
    """
    `Response` is a representation of OpenAPI v2 specification's Response object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#responseObject
    """

    description: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    `Description` is a short description of the response.
    GFM syntax can be used for rich text representation.
    """

    schema: "Schema | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    `Schema` optionally defines the structure of the response.
    If `Schema` is not provided, it means there is no content to the response.
    """

    headers: "dict[str, Header]" = betterproto2.field(
        3,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    `Headers` A list of headers that are sent with the response.
    `Header` name is expected to be a string in the canonical format of the MIME header key
    See: https://golang.org/pkg/net/textproto/#CanonicalMIMEHeaderKey
    """

    examples: "dict[str, str]" = betterproto2.field(
        4,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING),
    )
    """
    `Examples` gives per-mimetype response examples.
    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#example-object
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        5,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Response", Response
)


@dataclass(eq=False, repr=False)
class Schema(betterproto2.Message):
    """
    `Schema` is a representation of OpenAPI v2 specification's Schema object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
    """

    json_schema: "JsonSchema | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    discriminator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Adds support for polymorphism. The discriminator is the schema property
    name that is used to differentiate between other schema that inherit this
    schema. The property name used MUST be defined at this schema and it MUST
    be in the required property list. When used, the value MUST be the name of
    this schema or any schema that inherits it.
    """

    read_only: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Relevant only for Schema "properties" definitions. Declares the property as
    "read only". This means that it MAY be sent as part of a response but MUST
    NOT be sent as part of the request. Properties marked as readOnly being
    true SHOULD NOT be in the required list of the defined schema. Default
    value is false.
    """

    external_docs: "ExternalDocumentation | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional external documentation for this schema.
    """

    example: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    A free-form property to include an example of an instance for this schema in JSON.
    This is copied verbatim to the output.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Schema", Schema
)


@dataclass(eq=False, repr=False)
class Scopes(betterproto2.Message):
    """
    `Scopes` is a representation of OpenAPI v2 specification's Scopes object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#scopesObject

    Lists the available scopes for an OAuth2 security scheme.
    """

    scope: "dict[str, str]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING),
    )
    """
    Maps between a name of a scope to a short description of it (as the value
    of the property).
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Scopes", Scopes
)


@dataclass(eq=False, repr=False)
class SecurityDefinitions(betterproto2.Message):
    """
    `SecurityDefinitions` is a representation of OpenAPI v2 specification's
    Security Definitions object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject

    A declaration of the security schemes available to be used in the
    specification. This does not enforce the security schemes on the operations
    and only serves to provide the relevant details for each scheme.
    """

    security: "dict[str, SecurityScheme]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    A single security scheme definition, mapping a "name" to the scheme it
    defines.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options",
    "SecurityDefinitions",
    SecurityDefinitions,
)


@dataclass(eq=False, repr=False)
class SecurityRequirement(betterproto2.Message):
    """
    `SecurityRequirement` is a representation of OpenAPI v2 specification's
    Security Requirement object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityRequirementObject

    Lists the required security schemes to execute this operation. The object can
    have multiple security schemes declared in it which are all required (that
    is, there is a logical AND between the schemes).

    The name used for each property MUST correspond to a security scheme
    declared in the Security Definitions.
    """

    security_requirement: "dict[str, SecurityRequirementSecurityRequirementValue]" = (
        betterproto2.field(
            1,
            betterproto2.TYPE_MAP,
            map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
        )
    )
    """
    Each name must correspond to a security scheme which is declared in
    the Security Definitions. If the security scheme is of type "oauth2",
    then the value is a list of scope names required for the execution.
    For other security scheme types, the array MUST be empty.
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options",
    "SecurityRequirement",
    SecurityRequirement,
)


@dataclass(eq=False, repr=False)
class SecurityRequirementSecurityRequirementValue(betterproto2.Message):
    """
    If the security scheme is of type "oauth2", then the value is a list of
    scope names required for the execution. For other security scheme types,
    the array MUST be empty.
    """

    scope: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options",
    "SecurityRequirement.SecurityRequirementValue",
    SecurityRequirementSecurityRequirementValue,
)


@dataclass(eq=False, repr=False)
class SecurityScheme(betterproto2.Message):
    """
    `SecurityScheme` is a representation of OpenAPI v2 specification's
    Security Scheme object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securitySchemeObject

    Allows the definition of a security scheme that can be used by the
    operations. Supported schemes are basic authentication, an API key (either as
    a header or as a query parameter) and OAuth2's common flows (implicit,
    password, application and access code).
    """

    type: "SecuritySchemeType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: SecuritySchemeType(0)
    )
    """
    The type of the security scheme. Valid values are "basic",
    "apiKey" or "oauth2".
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A short description for security scheme.
    """

    name: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The name of the header or query parameter to be used.
    Valid for apiKey.
    """

    in_: "SecuritySchemeIn" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: SecuritySchemeIn(0)
    )
    """
    The location of the API key. Valid values are "query" or
    "header".
    Valid for apiKey.
    """

    flow: "SecuritySchemeFlow" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, default_factory=lambda: SecuritySchemeFlow(0)
    )
    """
    The flow used by the OAuth2 security scheme. Valid values are
    "implicit", "password", "application" or "accessCode".
    Valid for oauth2.
    """

    authorization_url: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The authorization URL to be used for this flow. This SHOULD be in
    the form of a URL.
    Valid for oauth2/implicit and oauth2/accessCode.
    """

    token_url: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    The token URL to be used for this flow. This SHOULD be in the
    form of a URL.
    Valid for oauth2/password, oauth2/application and oauth2/accessCode.
    """

    scopes: "Scopes | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The available scopes for the OAuth2 security scheme.
    Valid for oauth2.
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        9,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "SecurityScheme", SecurityScheme
)


@dataclass(eq=False, repr=False)
class Swagger(betterproto2.Message):
    """
    `Swagger` is a representation of OpenAPI v2 specification's Swagger object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#swaggerObject

    Example:

     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
       info: {
         title: "Echo API";
         version: "1.0";
         description: "";
         contact: {
           name: "gRPC-Gateway project";
           url: "https://github.com/grpc-ecosystem/grpc-gateway";
           email: "none@example.com";
         };
         license: {
           name: "BSD 3-Clause License";
           url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
         };
       };
       schemes: HTTPS;
       consumes: "application/json";
       produces: "application/json";
     };
    """

    swagger: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Specifies the OpenAPI Specification version being used. It can be
    used by the OpenAPI UI and other clients to interpret the API listing. The
    value MUST be "2.0".
    """

    info: "Info | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Provides metadata about the API. The metadata can be used by the
    clients if needed.
    """

    host: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The host (name or ip) serving the API. This MUST be the host only and does
    not include the scheme nor sub-paths. It MAY include a port. If the host is
    not included, the host serving the documentation is to be used (including
    the port). The host does not support path templating.
    """

    base_path: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The base path on which the API is served, which is relative to the host. If
    it is not included, the API is served directly under the host. The value
    MUST start with a leading slash (/). The basePath does not support path
    templating.
    Note that using `base_path` does not change the endpoint paths that are
    generated in the resulting OpenAPI file. If you wish to use `base_path`
    with relatively generated OpenAPI paths, the `base_path` prefix must be
    manually removed from your `google.api.http` paths and your code changed to
    serve the API from the `base_path`.
    """

    schemes: "list[Scheme]" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    The transfer protocol of the API. Values MUST be from the list: "http",
    "https", "ws", "wss". If the schemes is not included, the default scheme to
    be used is the one used to access the OpenAPI definition itself.
    """

    consumes: "list[str]" = betterproto2.field(
        6, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of MIME types the APIs can consume. This is global to all APIs but
    can be overridden on specific API calls. Value MUST be as described under
    Mime Types.
    """

    produces: "list[str]" = betterproto2.field(
        7, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of MIME types the APIs can produce. This is global to all APIs but
    can be overridden on specific API calls. Value MUST be as described under
    Mime Types.
    """

    responses: "dict[str, Response]" = betterproto2.field(
        10,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    An object to hold responses that can be used across operations. This
    property does not define global responses for all operations.
    """

    security_definitions: "SecurityDefinitions | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Security scheme definitions that can be used across the specification.
    """

    security: "list[SecurityRequirement]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A declaration of which security schemes are applied for the API as a whole.
    The list of values describes alternative security schemes that can be used
    (that is, there is a logical OR between the security requirements).
    Individual operations can override this definition.
    """

    tags: "list[Tag]" = betterproto2.field(13, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    A list of tags for API documentation control. Tags can be used for logical
    grouping of operations by resources or any other qualifier.
    """

    external_docs: "ExternalDocumentation | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional external documentation.
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        15,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Swagger", Swagger
)


@dataclass(eq=False, repr=False)
class Tag(betterproto2.Message):
    """
    `Tag` is a representation of OpenAPI v2 specification's Tag object.

    See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#tagObject
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the tag. Use it to allow override of the name of a
    global Tag object, then use that name to reference the tag throughout the
    OpenAPI file.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A short description for the tag. GFM syntax can be used for rich text
    representation.
    """

    external_docs: "ExternalDocumentation | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional external documentation for this tag.
    """

    extensions: "dict[str, ____google__protobuf__.Value]" = betterproto2.field(
        4,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    Custom properties that start with "x-" such as "x-foo" used to describe
    extra functionality that is not covered by the standard OpenAPI Specification.
    See: https://swagger.io/docs/specification/2-0/swagger-extensions/
    """


default_message_pool.register_message(
    "grpc.gateway.protoc_gen_openapiv2.options", "Tag", Tag
)


from .....google import protobuf as ____google__protobuf__
