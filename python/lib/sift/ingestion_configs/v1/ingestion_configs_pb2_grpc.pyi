"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.ingestion_configs.v1.ingestion_configs_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class IngestionConfigServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetIngestionConfig: grpc.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigResponse,
    ]
    """Retrieves an ingestion config."""

    CreateIngestionConfig: grpc.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigResponse,
    ]
    """Create an ingestion config."""

    ListIngestionConfigs: grpc.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsResponse,
    ]
    """List ingestion configs using an optional filter."""

    CreateIngestionConfigFlows: grpc.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsResponse,
    ]
    """Create ingestion config [flows](/glossary#flow)."""

    ListIngestionConfigFlows: grpc.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsResponse,
    ]
    """List ingestion config [flows](/glossary#flow) using an optional filter."""

class IngestionConfigServiceAsyncStub:
    GetIngestionConfig: grpc.aio.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigResponse,
    ]
    """Retrieves an ingestion config."""

    CreateIngestionConfig: grpc.aio.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigResponse,
    ]
    """Create an ingestion config."""

    ListIngestionConfigs: grpc.aio.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsResponse,
    ]
    """List ingestion configs using an optional filter."""

    CreateIngestionConfigFlows: grpc.aio.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsResponse,
    ]
    """Create ingestion config [flows](/glossary#flow)."""

    ListIngestionConfigFlows: grpc.aio.UnaryUnaryMultiCallable[
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsRequest,
        sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsResponse,
    ]
    """List ingestion config [flows](/glossary#flow) using an optional filter."""

class IngestionConfigServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetIngestionConfig(
        self,
        request: sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigResponse, collections.abc.Awaitable[sift.ingestion_configs.v1.ingestion_configs_pb2.GetIngestionConfigResponse]]:
        """Retrieves an ingestion config."""

    @abc.abstractmethod
    def CreateIngestionConfig(
        self,
        request: sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigResponse, collections.abc.Awaitable[sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigResponse]]:
        """Create an ingestion config."""

    @abc.abstractmethod
    def ListIngestionConfigs(
        self,
        request: sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsResponse, collections.abc.Awaitable[sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigsResponse]]:
        """List ingestion configs using an optional filter."""

    @abc.abstractmethod
    def CreateIngestionConfigFlows(
        self,
        request: sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsResponse, collections.abc.Awaitable[sift.ingestion_configs.v1.ingestion_configs_pb2.CreateIngestionConfigFlowsResponse]]:
        """Create ingestion config [flows](/glossary#flow)."""

    @abc.abstractmethod
    def ListIngestionConfigFlows(
        self,
        request: sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsResponse, collections.abc.Awaitable[sift.ingestion_configs.v1.ingestion_configs_pb2.ListIngestionConfigFlowsResponse]]:
        """List ingestion config [flows](/glossary#flow) using an optional filter."""

def add_IngestionConfigServiceServicer_to_server(servicer: IngestionConfigServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
