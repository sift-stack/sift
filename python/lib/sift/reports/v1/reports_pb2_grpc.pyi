"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.reports.v1.reports_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ReportServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetReport: grpc.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.GetReportRequest,
        sift.reports.v1.reports_pb2.GetReportResponse,
    ]
    """Retrieve a report."""

    CreateReport: grpc.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.CreateReportRequest,
        sift.reports.v1.reports_pb2.CreateReportResponse,
    ]
    """Create a report."""

    ListReports: grpc.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.ListReportsRequest,
        sift.reports.v1.reports_pb2.ListReportsResponse,
    ]
    """List reports."""

    RerunReport: grpc.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.RerunReportRequest,
        sift.reports.v1.reports_pb2.RerunReportResponse,
    ]
    """Rerunning a report will create a new report with the same rule versions and run  as the original report and run the
    evaluation again using the most up-to-date set of data.
    """

    CancelReport: grpc.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.CancelReportRequest,
        sift.reports.v1.reports_pb2.CancelReportResponse,
    ]
    """Canceling a report will stop the evaluation of the report and mark it as canceled. Any results that have been
    calculated up to the point of cancellation will be saved.
    """

class ReportServiceAsyncStub:
    GetReport: grpc.aio.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.GetReportRequest,
        sift.reports.v1.reports_pb2.GetReportResponse,
    ]
    """Retrieve a report."""

    CreateReport: grpc.aio.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.CreateReportRequest,
        sift.reports.v1.reports_pb2.CreateReportResponse,
    ]
    """Create a report."""

    ListReports: grpc.aio.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.ListReportsRequest,
        sift.reports.v1.reports_pb2.ListReportsResponse,
    ]
    """List reports."""

    RerunReport: grpc.aio.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.RerunReportRequest,
        sift.reports.v1.reports_pb2.RerunReportResponse,
    ]
    """Rerunning a report will create a new report with the same rule versions and run  as the original report and run the
    evaluation again using the most up-to-date set of data.
    """

    CancelReport: grpc.aio.UnaryUnaryMultiCallable[
        sift.reports.v1.reports_pb2.CancelReportRequest,
        sift.reports.v1.reports_pb2.CancelReportResponse,
    ]
    """Canceling a report will stop the evaluation of the report and mark it as canceled. Any results that have been
    calculated up to the point of cancellation will be saved.
    """

class ReportServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetReport(
        self,
        request: sift.reports.v1.reports_pb2.GetReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.reports.v1.reports_pb2.GetReportResponse, collections.abc.Awaitable[sift.reports.v1.reports_pb2.GetReportResponse]]:
        """Retrieve a report."""

    @abc.abstractmethod
    def CreateReport(
        self,
        request: sift.reports.v1.reports_pb2.CreateReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.reports.v1.reports_pb2.CreateReportResponse, collections.abc.Awaitable[sift.reports.v1.reports_pb2.CreateReportResponse]]:
        """Create a report."""

    @abc.abstractmethod
    def ListReports(
        self,
        request: sift.reports.v1.reports_pb2.ListReportsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.reports.v1.reports_pb2.ListReportsResponse, collections.abc.Awaitable[sift.reports.v1.reports_pb2.ListReportsResponse]]:
        """List reports."""

    @abc.abstractmethod
    def RerunReport(
        self,
        request: sift.reports.v1.reports_pb2.RerunReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.reports.v1.reports_pb2.RerunReportResponse, collections.abc.Awaitable[sift.reports.v1.reports_pb2.RerunReportResponse]]:
        """Rerunning a report will create a new report with the same rule versions and run  as the original report and run the
        evaluation again using the most up-to-date set of data.
        """

    @abc.abstractmethod
    def CancelReport(
        self,
        request: sift.reports.v1.reports_pb2.CancelReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.reports.v1.reports_pb2.CancelReportResponse, collections.abc.Awaitable[sift.reports.v1.reports_pb2.CancelReportResponse]]:
        """Canceling a report will stop the evaluation of the report and mark it as canceled. Any results that have been
        calculated up to the point of cancellation will be saved.
        """

def add_ReportServiceServicer_to_server(servicer: ReportServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
