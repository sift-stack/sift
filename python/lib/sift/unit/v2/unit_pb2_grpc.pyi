"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
The "sift.units" package name already declared by the channel_parsing_options.proto
so this package uses the singular form to avoid a conflict.
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.unit.v2.unit_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UnitServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListUnits: grpc.UnaryUnaryMultiCallable[
        sift.unit.v2.unit_pb2.ListUnitsRequest,
        sift.unit.v2.unit_pb2.ListUnitsResponse,
    ]

class UnitServiceAsyncStub:
    ListUnits: grpc.aio.UnaryUnaryMultiCallable[
        sift.unit.v2.unit_pb2.ListUnitsRequest,
        sift.unit.v2.unit_pb2.ListUnitsResponse,
    ]

class UnitServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListUnits(
        self,
        request: sift.unit.v2.unit_pb2.ListUnitsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.unit.v2.unit_pb2.ListUnitsResponse, collections.abc.Awaitable[sift.unit.v2.unit_pb2.ListUnitsResponse]]: ...

def add_UnitServiceServicer_to_server(servicer: UnitServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
