"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.data_imports.v2.data_imports_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DataImportServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateDataImportFromUrl: grpc.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlRequest,
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlResponse,
    ]

    CreateDataImportFromUpload: grpc.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadRequest,
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadResponse,
    ]

    DetectConfig: grpc.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.DetectConfigRequest,
        sift.data_imports.v2.data_imports_pb2.DetectConfigResponse,
    ]

    ListDataImports: grpc.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.ListDataImportsRequest,
        sift.data_imports.v2.data_imports_pb2.ListDataImportsResponse,
    ]

    RetryDataImport: grpc.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.RetryDataImportRequest,
        sift.data_imports.v2.data_imports_pb2.RetryDataImportResponse,
    ]

    GetDataImport: grpc.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.GetDataImportRequest,
        sift.data_imports.v2.data_imports_pb2.GetDataImportResponse,
    ]

class DataImportServiceAsyncStub:
    CreateDataImportFromUrl: grpc.aio.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlRequest,
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlResponse,
    ]

    CreateDataImportFromUpload: grpc.aio.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadRequest,
        sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadResponse,
    ]

    DetectConfig: grpc.aio.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.DetectConfigRequest,
        sift.data_imports.v2.data_imports_pb2.DetectConfigResponse,
    ]

    ListDataImports: grpc.aio.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.ListDataImportsRequest,
        sift.data_imports.v2.data_imports_pb2.ListDataImportsResponse,
    ]

    RetryDataImport: grpc.aio.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.RetryDataImportRequest,
        sift.data_imports.v2.data_imports_pb2.RetryDataImportResponse,
    ]

    GetDataImport: grpc.aio.UnaryUnaryMultiCallable[
        sift.data_imports.v2.data_imports_pb2.GetDataImportRequest,
        sift.data_imports.v2.data_imports_pb2.GetDataImportResponse,
    ]

class DataImportServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateDataImportFromUrl(
        self,
        request: sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlResponse, collections.abc.Awaitable[sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUrlResponse]]: ...

    @abc.abstractmethod
    def CreateDataImportFromUpload(
        self,
        request: sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadResponse, collections.abc.Awaitable[sift.data_imports.v2.data_imports_pb2.CreateDataImportFromUploadResponse]]: ...

    @abc.abstractmethod
    def DetectConfig(
        self,
        request: sift.data_imports.v2.data_imports_pb2.DetectConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.data_imports.v2.data_imports_pb2.DetectConfigResponse, collections.abc.Awaitable[sift.data_imports.v2.data_imports_pb2.DetectConfigResponse]]: ...

    @abc.abstractmethod
    def ListDataImports(
        self,
        request: sift.data_imports.v2.data_imports_pb2.ListDataImportsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.data_imports.v2.data_imports_pb2.ListDataImportsResponse, collections.abc.Awaitable[sift.data_imports.v2.data_imports_pb2.ListDataImportsResponse]]: ...

    @abc.abstractmethod
    def RetryDataImport(
        self,
        request: sift.data_imports.v2.data_imports_pb2.RetryDataImportRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.data_imports.v2.data_imports_pb2.RetryDataImportResponse, collections.abc.Awaitable[sift.data_imports.v2.data_imports_pb2.RetryDataImportResponse]]: ...

    @abc.abstractmethod
    def GetDataImport(
        self,
        request: sift.data_imports.v2.data_imports_pb2.GetDataImportRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.data_imports.v2.data_imports_pb2.GetDataImportResponse, collections.abc.Awaitable[sift.data_imports.v2.data_imports_pb2.GetDataImportResponse]]: ...

def add_DataImportServiceServicer_to_server(servicer: DataImportServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
