"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.assets.v1.assets_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AssetServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    DeleteAsset: grpc.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.DeleteAssetRequest,
        sift.assets.v1.assets_pb2.DeleteAssetResponse,
    ]
    """Deletes an asset."""

    GetAsset: grpc.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.GetAssetRequest,
        sift.assets.v1.assets_pb2.GetAssetResponse,
    ]
    """Retrieves an asset."""

    ListAssets: grpc.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.ListAssetsRequest,
        sift.assets.v1.assets_pb2.ListAssetsResponse,
    ]
    """Retrieves assets using an optional filter."""

    UpdateAsset: grpc.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.UpdateAssetRequest,
        sift.assets.v1.assets_pb2.UpdateAssetResponse,
    ]

class AssetServiceAsyncStub:
    DeleteAsset: grpc.aio.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.DeleteAssetRequest,
        sift.assets.v1.assets_pb2.DeleteAssetResponse,
    ]
    """Deletes an asset."""

    GetAsset: grpc.aio.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.GetAssetRequest,
        sift.assets.v1.assets_pb2.GetAssetResponse,
    ]
    """Retrieves an asset."""

    ListAssets: grpc.aio.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.ListAssetsRequest,
        sift.assets.v1.assets_pb2.ListAssetsResponse,
    ]
    """Retrieves assets using an optional filter."""

    UpdateAsset: grpc.aio.UnaryUnaryMultiCallable[
        sift.assets.v1.assets_pb2.UpdateAssetRequest,
        sift.assets.v1.assets_pb2.UpdateAssetResponse,
    ]

class AssetServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def DeleteAsset(
        self,
        request: sift.assets.v1.assets_pb2.DeleteAssetRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.assets.v1.assets_pb2.DeleteAssetResponse, collections.abc.Awaitable[sift.assets.v1.assets_pb2.DeleteAssetResponse]]:
        """Deletes an asset."""

    @abc.abstractmethod
    def GetAsset(
        self,
        request: sift.assets.v1.assets_pb2.GetAssetRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.assets.v1.assets_pb2.GetAssetResponse, collections.abc.Awaitable[sift.assets.v1.assets_pb2.GetAssetResponse]]:
        """Retrieves an asset."""

    @abc.abstractmethod
    def ListAssets(
        self,
        request: sift.assets.v1.assets_pb2.ListAssetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.assets.v1.assets_pb2.ListAssetsResponse, collections.abc.Awaitable[sift.assets.v1.assets_pb2.ListAssetsResponse]]:
        """Retrieves assets using an optional filter."""

    @abc.abstractmethod
    def UpdateAsset(
        self,
        request: sift.assets.v1.assets_pb2.UpdateAssetRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.assets.v1.assets_pb2.UpdateAssetResponse, collections.abc.Awaitable[sift.assets.v1.assets_pb2.UpdateAssetResponse]]: ...

def add_AssetServiceServicer_to_server(servicer: AssetServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
