"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.annotations.v1.annotations_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AnnotationServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateAnnotation: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.CreateAnnotationRequest,
        sift.annotations.v1.annotations_pb2.CreateAnnotationResponse,
    ]
    """Creates an annotation."""

    DeleteAnnotation: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.DeleteAnnotationRequest,
        sift.annotations.v1.annotations_pb2.DeleteAnnotationResponse,
    ]
    """Delete Annotation is deprecated. Use ArchiveAnnotation instead.
    Calling this will archive the annotation, which should be done using the
    ArchiveAnnotation method or the UpdateAnnotation method with the delete date set to a non-null value.
    Restoring an annotation can be done using the UnarchiveAnnotation method or by calling
    UpdateAnnotation with the delete date set to a null value.
    """

    ArchiveAnnotation: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.ArchiveAnnotationRequest,
        sift.annotations.v1.annotations_pb2.ArchiveAnnotationResponse,
    ]
    """Archives an annotation."""

    UnarchiveAnnotation: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.UnarchiveAnnotationRequest,
        sift.annotations.v1.annotations_pb2.UnarchiveAnnotationResponse,
    ]
    """Unarchives an annotation."""

    BatchDeleteAnnotations: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsResponse,
    ]
    """BatchDeleteAnnotations is deprecated. Use BatchArchiveAnnotations instead.
    BatchDeleteAnnotations will archive the annotations specified in the request. These can be restored
    by calling UnarchiveAnnotation or UpdateAnnotation with the delete date set to a null value.
    """

    BatchArchiveAnnotations: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsResponse,
    ]
    """Batch archives annotations."""

    BatchUnarchiveAnnotations: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsResponse,
    ]
    """Batch unarchives annotations."""

    ListAnnotations: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.ListAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.ListAnnotationsResponse,
    ]
    """Retrieves annotations using an optional filter."""

    GetAnnotation: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.GetAnnotationRequest,
        sift.annotations.v1.annotations_pb2.GetAnnotationResponse,
    ]
    """Retrieves an annotation"""

    UpdateAnnotation: grpc.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.UpdateAnnotationRequest,
        sift.annotations.v1.annotations_pb2.UpdateAnnotationResponse,
    ]
    """Updates an existing annotation using using the list of fields specified in `update_mask`."""

class AnnotationServiceAsyncStub:
    CreateAnnotation: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.CreateAnnotationRequest,
        sift.annotations.v1.annotations_pb2.CreateAnnotationResponse,
    ]
    """Creates an annotation."""

    DeleteAnnotation: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.DeleteAnnotationRequest,
        sift.annotations.v1.annotations_pb2.DeleteAnnotationResponse,
    ]
    """Delete Annotation is deprecated. Use ArchiveAnnotation instead.
    Calling this will archive the annotation, which should be done using the
    ArchiveAnnotation method or the UpdateAnnotation method with the delete date set to a non-null value.
    Restoring an annotation can be done using the UnarchiveAnnotation method or by calling
    UpdateAnnotation with the delete date set to a null value.
    """

    ArchiveAnnotation: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.ArchiveAnnotationRequest,
        sift.annotations.v1.annotations_pb2.ArchiveAnnotationResponse,
    ]
    """Archives an annotation."""

    UnarchiveAnnotation: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.UnarchiveAnnotationRequest,
        sift.annotations.v1.annotations_pb2.UnarchiveAnnotationResponse,
    ]
    """Unarchives an annotation."""

    BatchDeleteAnnotations: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsResponse,
    ]
    """BatchDeleteAnnotations is deprecated. Use BatchArchiveAnnotations instead.
    BatchDeleteAnnotations will archive the annotations specified in the request. These can be restored
    by calling UnarchiveAnnotation or UpdateAnnotation with the delete date set to a null value.
    """

    BatchArchiveAnnotations: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsResponse,
    ]
    """Batch archives annotations."""

    BatchUnarchiveAnnotations: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsResponse,
    ]
    """Batch unarchives annotations."""

    ListAnnotations: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.ListAnnotationsRequest,
        sift.annotations.v1.annotations_pb2.ListAnnotationsResponse,
    ]
    """Retrieves annotations using an optional filter."""

    GetAnnotation: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.GetAnnotationRequest,
        sift.annotations.v1.annotations_pb2.GetAnnotationResponse,
    ]
    """Retrieves an annotation"""

    UpdateAnnotation: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotations.v1.annotations_pb2.UpdateAnnotationRequest,
        sift.annotations.v1.annotations_pb2.UpdateAnnotationResponse,
    ]
    """Updates an existing annotation using using the list of fields specified in `update_mask`."""

class AnnotationServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateAnnotation(
        self,
        request: sift.annotations.v1.annotations_pb2.CreateAnnotationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.CreateAnnotationResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.CreateAnnotationResponse]]:
        """Creates an annotation."""

    @abc.abstractmethod
    def DeleteAnnotation(
        self,
        request: sift.annotations.v1.annotations_pb2.DeleteAnnotationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.DeleteAnnotationResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.DeleteAnnotationResponse]]:
        """Delete Annotation is deprecated. Use ArchiveAnnotation instead.
        Calling this will archive the annotation, which should be done using the
        ArchiveAnnotation method or the UpdateAnnotation method with the delete date set to a non-null value.
        Restoring an annotation can be done using the UnarchiveAnnotation method or by calling
        UpdateAnnotation with the delete date set to a null value.
        """

    @abc.abstractmethod
    def ArchiveAnnotation(
        self,
        request: sift.annotations.v1.annotations_pb2.ArchiveAnnotationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.ArchiveAnnotationResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.ArchiveAnnotationResponse]]:
        """Archives an annotation."""

    @abc.abstractmethod
    def UnarchiveAnnotation(
        self,
        request: sift.annotations.v1.annotations_pb2.UnarchiveAnnotationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.UnarchiveAnnotationResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.UnarchiveAnnotationResponse]]:
        """Unarchives an annotation."""

    @abc.abstractmethod
    def BatchDeleteAnnotations(
        self,
        request: sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.BatchDeleteAnnotationsResponse]]:
        """BatchDeleteAnnotations is deprecated. Use BatchArchiveAnnotations instead.
        BatchDeleteAnnotations will archive the annotations specified in the request. These can be restored
        by calling UnarchiveAnnotation or UpdateAnnotation with the delete date set to a null value.
        """

    @abc.abstractmethod
    def BatchArchiveAnnotations(
        self,
        request: sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.BatchArchiveAnnotationsResponse]]:
        """Batch archives annotations."""

    @abc.abstractmethod
    def BatchUnarchiveAnnotations(
        self,
        request: sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.BatchUnarchiveAnnotationsResponse]]:
        """Batch unarchives annotations."""

    @abc.abstractmethod
    def ListAnnotations(
        self,
        request: sift.annotations.v1.annotations_pb2.ListAnnotationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.ListAnnotationsResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.ListAnnotationsResponse]]:
        """Retrieves annotations using an optional filter."""

    @abc.abstractmethod
    def GetAnnotation(
        self,
        request: sift.annotations.v1.annotations_pb2.GetAnnotationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.GetAnnotationResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.GetAnnotationResponse]]:
        """Retrieves an annotation"""

    @abc.abstractmethod
    def UpdateAnnotation(
        self,
        request: sift.annotations.v1.annotations_pb2.UpdateAnnotationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotations.v1.annotations_pb2.UpdateAnnotationResponse, collections.abc.Awaitable[sift.annotations.v1.annotations_pb2.UpdateAnnotationResponse]]:
        """Updates an existing annotation using using the list of fields specified in `update_mask`."""

def add_AnnotationServiceServicer_to_server(servicer: AnnotationServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
