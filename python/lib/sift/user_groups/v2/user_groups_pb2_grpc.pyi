"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.user_groups.v2.user_groups_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UserGroupServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListUserGroups: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.ListUserGroupsRequest,
        sift.user_groups.v2.user_groups_pb2.ListUserGroupsResponse,
    ]

    GetUserGroup: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.GetUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.GetUserGroupResponse,
    ]

    CreateUserGroup: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.CreateUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.CreateUserGroupResponse,
    ]

    UpdateUserGroup: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.UpdateUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.UpdateUserGroupResponse,
    ]

    DeleteUserGroup: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.DeleteUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.DeleteUserGroupResponse,
    ]

    AddUserToUserGroup: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupResponse,
    ]

    RemoveUserFromUserGroup: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupResponse,
    ]

    UpdateUserUserGroups: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsRequest,
        sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsResponse,
    ]

    GetUserGroupsForAssets: grpc.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsRequest,
        sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsResponse,
    ]

class UserGroupServiceAsyncStub:
    ListUserGroups: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.ListUserGroupsRequest,
        sift.user_groups.v2.user_groups_pb2.ListUserGroupsResponse,
    ]

    GetUserGroup: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.GetUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.GetUserGroupResponse,
    ]

    CreateUserGroup: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.CreateUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.CreateUserGroupResponse,
    ]

    UpdateUserGroup: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.UpdateUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.UpdateUserGroupResponse,
    ]

    DeleteUserGroup: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.DeleteUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.DeleteUserGroupResponse,
    ]

    AddUserToUserGroup: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupResponse,
    ]

    RemoveUserFromUserGroup: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupRequest,
        sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupResponse,
    ]

    UpdateUserUserGroups: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsRequest,
        sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsResponse,
    ]

    GetUserGroupsForAssets: grpc.aio.UnaryUnaryMultiCallable[
        sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsRequest,
        sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsResponse,
    ]

class UserGroupServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListUserGroups(
        self,
        request: sift.user_groups.v2.user_groups_pb2.ListUserGroupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.ListUserGroupsResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.ListUserGroupsResponse]]: ...

    @abc.abstractmethod
    def GetUserGroup(
        self,
        request: sift.user_groups.v2.user_groups_pb2.GetUserGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.GetUserGroupResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.GetUserGroupResponse]]: ...

    @abc.abstractmethod
    def CreateUserGroup(
        self,
        request: sift.user_groups.v2.user_groups_pb2.CreateUserGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.CreateUserGroupResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.CreateUserGroupResponse]]: ...

    @abc.abstractmethod
    def UpdateUserGroup(
        self,
        request: sift.user_groups.v2.user_groups_pb2.UpdateUserGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.UpdateUserGroupResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.UpdateUserGroupResponse]]: ...

    @abc.abstractmethod
    def DeleteUserGroup(
        self,
        request: sift.user_groups.v2.user_groups_pb2.DeleteUserGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.DeleteUserGroupResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.DeleteUserGroupResponse]]: ...

    @abc.abstractmethod
    def AddUserToUserGroup(
        self,
        request: sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.AddUserToUserGroupResponse]]: ...

    @abc.abstractmethod
    def RemoveUserFromUserGroup(
        self,
        request: sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.RemoveUserFromUserGroupResponse]]: ...

    @abc.abstractmethod
    def UpdateUserUserGroups(
        self,
        request: sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.UpdateUserUserGroupsResponse]]: ...

    @abc.abstractmethod
    def GetUserGroupsForAssets(
        self,
        request: sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsResponse, collections.abc.Awaitable[sift.user_groups.v2.user_groups_pb2.GetUserGroupsForAssetsResponse]]: ...

def add_UserGroupServiceServicer_to_server(servicer: UserGroupServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
