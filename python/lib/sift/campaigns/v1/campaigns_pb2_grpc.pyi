"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.campaigns.v1.campaigns_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class CampaignServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetCampaign: grpc.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.GetCampaignRequest,
        sift.campaigns.v1.campaigns_pb2.GetCampaignResponse,
    ]
    """Retrieve a campaign."""

    CreateCampaign: grpc.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.CreateCampaignRequest,
        sift.campaigns.v1.campaigns_pb2.CreateCampaignResponse,
    ]
    """Create a campaign."""

    ListCampaigns: grpc.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.ListCampaignsRequest,
        sift.campaigns.v1.campaigns_pb2.ListCampaignsResponse,
    ]
    """List campaigns."""

    UpdateCampaign: grpc.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.UpdateCampaignRequest,
        sift.campaigns.v1.campaigns_pb2.UpdateCampaignResponse,
    ]
    """Updates an existing campaign using the list of fields specified in `update_mask`."""

class CampaignServiceAsyncStub:
    GetCampaign: grpc.aio.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.GetCampaignRequest,
        sift.campaigns.v1.campaigns_pb2.GetCampaignResponse,
    ]
    """Retrieve a campaign."""

    CreateCampaign: grpc.aio.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.CreateCampaignRequest,
        sift.campaigns.v1.campaigns_pb2.CreateCampaignResponse,
    ]
    """Create a campaign."""

    ListCampaigns: grpc.aio.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.ListCampaignsRequest,
        sift.campaigns.v1.campaigns_pb2.ListCampaignsResponse,
    ]
    """List campaigns."""

    UpdateCampaign: grpc.aio.UnaryUnaryMultiCallable[
        sift.campaigns.v1.campaigns_pb2.UpdateCampaignRequest,
        sift.campaigns.v1.campaigns_pb2.UpdateCampaignResponse,
    ]
    """Updates an existing campaign using the list of fields specified in `update_mask`."""

class CampaignServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetCampaign(
        self,
        request: sift.campaigns.v1.campaigns_pb2.GetCampaignRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.campaigns.v1.campaigns_pb2.GetCampaignResponse, collections.abc.Awaitable[sift.campaigns.v1.campaigns_pb2.GetCampaignResponse]]:
        """Retrieve a campaign."""

    @abc.abstractmethod
    def CreateCampaign(
        self,
        request: sift.campaigns.v1.campaigns_pb2.CreateCampaignRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.campaigns.v1.campaigns_pb2.CreateCampaignResponse, collections.abc.Awaitable[sift.campaigns.v1.campaigns_pb2.CreateCampaignResponse]]:
        """Create a campaign."""

    @abc.abstractmethod
    def ListCampaigns(
        self,
        request: sift.campaigns.v1.campaigns_pb2.ListCampaignsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.campaigns.v1.campaigns_pb2.ListCampaignsResponse, collections.abc.Awaitable[sift.campaigns.v1.campaigns_pb2.ListCampaignsResponse]]:
        """List campaigns."""

    @abc.abstractmethod
    def UpdateCampaign(
        self,
        request: sift.campaigns.v1.campaigns_pb2.UpdateCampaignRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.campaigns.v1.campaigns_pb2.UpdateCampaignResponse, collections.abc.Awaitable[sift.campaigns.v1.campaigns_pb2.UpdateCampaignResponse]]:
        """Updates an existing campaign using the list of fields specified in `update_mask`."""

def add_CampaignServiceServicer_to_server(servicer: CampaignServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
