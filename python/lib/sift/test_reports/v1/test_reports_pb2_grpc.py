# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sift.test_reports.v1 import test_reports_pb2 as sift_dot_test__reports_dot_v1_dot_test__reports__pb2


class TestReportServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ImportTestReport = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/ImportTestReport',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ImportTestReportRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ImportTestReportResponse.FromString,
                )
        self.CreateTestReport = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/CreateTestReport',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestReportRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestReportResponse.FromString,
                )
        self.GetTestReport = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/GetTestReport',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.GetTestReportRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.GetTestReportResponse.FromString,
                )
        self.ListTestReports = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/ListTestReports',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestReportsRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestReportsResponse.FromString,
                )
        self.UpdateTestReport = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/UpdateTestReport',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestReportRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestReportResponse.FromString,
                )
        self.DeleteTestReport = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/DeleteTestReport',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestReportRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestReportResponse.FromString,
                )
        self.CreateTestStep = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/CreateTestStep',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestStepRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestStepResponse.FromString,
                )
        self.ListTestSteps = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/ListTestSteps',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestStepsRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestStepsResponse.FromString,
                )
        self.UpdateTestStep = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/UpdateTestStep',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestStepRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestStepResponse.FromString,
                )
        self.DeleteTestStep = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/DeleteTestStep',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestStepRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestStepResponse.FromString,
                )
        self.CreateTestMeasurement = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/CreateTestMeasurement',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementResponse.FromString,
                )
        self.CreateTestMeasurements = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/CreateTestMeasurements',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementsRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementsResponse.FromString,
                )
        self.ListTestMeasurements = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/ListTestMeasurements',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestMeasurementsRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestMeasurementsResponse.FromString,
                )
        self.CountTestSteps = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/CountTestSteps',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestStepsRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestStepsResponse.FromString,
                )
        self.CountTestMeasurements = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/CountTestMeasurements',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestMeasurementsRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestMeasurementsResponse.FromString,
                )
        self.UpdateTestMeasurement = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/UpdateTestMeasurement',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestMeasurementRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestMeasurementResponse.FromString,
                )
        self.DeleteTestMeasurement = channel.unary_unary(
                '/sift.test_reports.v1.TestReportService/DeleteTestMeasurement',
                request_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestMeasurementRequest.SerializeToString,
                response_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestMeasurementResponse.FromString,
                )


class TestReportServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ImportTestReport(self, request, context):
        """Imports a test report from an already-uploaded file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTestReport(self, request, context):
        """Creates a test report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTestReport(self, request, context):
        """Gets a single test report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestReports(self, request, context):
        """Lists test reports with optional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTestReport(self, request, context):
        """Updates a test report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTestReport(self, request, context):
        """Deletes a test report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTestStep(self, request, context):
        """Creates a test step
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestSteps(self, request, context):
        """Lists test steps with optional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTestStep(self, request, context):
        """Updates a test step
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTestStep(self, request, context):
        """Deletes a test step
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTestMeasurement(self, request, context):
        """Creates a test measurement
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTestMeasurements(self, request, context):
        """Creates multiple test measurements in a single request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestMeasurements(self, request, context):
        """Lists test measurements with optional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountTestSteps(self, request, context):
        """Counts test steps with optional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountTestMeasurements(self, request, context):
        """Counts test measurements with optional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTestMeasurement(self, request, context):
        """Updates a test measurement
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTestMeasurement(self, request, context):
        """Deletes a test measurement
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestReportServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ImportTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportTestReport,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ImportTestReportRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ImportTestReportResponse.SerializeToString,
            ),
            'CreateTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTestReport,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestReportRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestReportResponse.SerializeToString,
            ),
            'GetTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestReport,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.GetTestReportRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.GetTestReportResponse.SerializeToString,
            ),
            'ListTestReports': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestReports,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestReportsRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestReportsResponse.SerializeToString,
            ),
            'UpdateTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTestReport,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestReportRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestReportResponse.SerializeToString,
            ),
            'DeleteTestReport': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTestReport,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestReportRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestReportResponse.SerializeToString,
            ),
            'CreateTestStep': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTestStep,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestStepRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestStepResponse.SerializeToString,
            ),
            'ListTestSteps': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestSteps,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestStepsRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestStepsResponse.SerializeToString,
            ),
            'UpdateTestStep': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTestStep,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestStepRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestStepResponse.SerializeToString,
            ),
            'DeleteTestStep': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTestStep,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestStepRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestStepResponse.SerializeToString,
            ),
            'CreateTestMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTestMeasurement,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementResponse.SerializeToString,
            ),
            'CreateTestMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTestMeasurements,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementsRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementsResponse.SerializeToString,
            ),
            'ListTestMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestMeasurements,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestMeasurementsRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestMeasurementsResponse.SerializeToString,
            ),
            'CountTestSteps': grpc.unary_unary_rpc_method_handler(
                    servicer.CountTestSteps,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestStepsRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestStepsResponse.SerializeToString,
            ),
            'CountTestMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.CountTestMeasurements,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestMeasurementsRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestMeasurementsResponse.SerializeToString,
            ),
            'UpdateTestMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTestMeasurement,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestMeasurementRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestMeasurementResponse.SerializeToString,
            ),
            'DeleteTestMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTestMeasurement,
                    request_deserializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestMeasurementRequest.FromString,
                    response_serializer=sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestMeasurementResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sift.test_reports.v1.TestReportService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestReportService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ImportTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/ImportTestReport',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ImportTestReportRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ImportTestReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/CreateTestReport',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestReportRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/GetTestReport',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.GetTestReportRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.GetTestReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestReports(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/ListTestReports',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestReportsRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestReportsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/UpdateTestReport',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestReportRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTestReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/DeleteTestReport',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestReportRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTestStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/CreateTestStep',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestStepRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestSteps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/ListTestSteps',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestStepsRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestStepsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTestStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/UpdateTestStep',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestStepRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTestStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/DeleteTestStep',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestStepRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTestMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/CreateTestMeasurement',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTestMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/CreateTestMeasurements',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementsRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CreateTestMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/ListTestMeasurements',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestMeasurementsRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.ListTestMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountTestSteps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/CountTestSteps',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestStepsRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestStepsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountTestMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/CountTestMeasurements',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestMeasurementsRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.CountTestMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTestMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/UpdateTestMeasurement',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestMeasurementRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.UpdateTestMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTestMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.test_reports.v1.TestReportService/DeleteTestMeasurement',
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestMeasurementRequest.SerializeToString,
            sift_dot_test__reports_dot_v1_dot_test__reports__pb2.DeleteTestMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
