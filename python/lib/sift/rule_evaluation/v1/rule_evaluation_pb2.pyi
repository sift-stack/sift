"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sift.common.type.v1.resource_identifier_pb2
import sift.rules.v1.rules_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class EvaluateRulesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RUN_FIELD_NUMBER: builtins.int
    ASSETS_FIELD_NUMBER: builtins.int
    RULES_FIELD_NUMBER: builtins.int
    RULE_VERSIONS_FIELD_NUMBER: builtins.int
    REPORT_TEMPLATE_FIELD_NUMBER: builtins.int
    ANNOTATION_OPTIONS_FIELD_NUMBER: builtins.int
    ORGANIZATION_ID_FIELD_NUMBER: builtins.int
    REPORT_NAME_FIELD_NUMBER: builtins.int
    organization_id: builtins.str
    """Only required if your user belongs to multiple organizations"""
    report_name: builtins.str
    """If this request creates a report, this field will be used as the report name."""
    @property
    def run(self) -> sift.common.type.v1.resource_identifier_pb2.ResourceIdentifier: ...
    @property
    def assets(self) -> global___AssetsTimeRange: ...
    @property
    def rules(self) -> global___EvaluateRulesFromCurrentRuleVersions: ...
    @property
    def rule_versions(self) -> global___EvaluateRulesFromRuleVersions: ...
    @property
    def report_template(self) -> global___EvaluateRulesFromReportTemplate: ...
    @property
    def annotation_options(self) -> global___EvaluateRulesAnnotationOptions: ...
    def __init__(
        self,
        *,
        run: sift.common.type.v1.resource_identifier_pb2.ResourceIdentifier | None = ...,
        assets: global___AssetsTimeRange | None = ...,
        rules: global___EvaluateRulesFromCurrentRuleVersions | None = ...,
        rule_versions: global___EvaluateRulesFromRuleVersions | None = ...,
        report_template: global___EvaluateRulesFromReportTemplate | None = ...,
        annotation_options: global___EvaluateRulesAnnotationOptions | None = ...,
        organization_id: builtins.str = ...,
        report_name: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_report_name", b"_report_name", "annotation_options", b"annotation_options", "assets", b"assets", "mode", b"mode", "report_name", b"report_name", "report_template", b"report_template", "rule_versions", b"rule_versions", "rules", b"rules", "run", b"run", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_report_name", b"_report_name", "annotation_options", b"annotation_options", "assets", b"assets", "mode", b"mode", "organization_id", b"organization_id", "report_name", b"report_name", "report_template", b"report_template", "rule_versions", b"rule_versions", "rules", b"rules", "run", b"run", "time", b"time"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_report_name", b"_report_name"]) -> typing.Literal["report_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["mode", b"mode"]) -> typing.Literal["rules", "rule_versions", "report_template"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["time", b"time"]) -> typing.Literal["run", "assets"] | None: ...

global___EvaluateRulesRequest = EvaluateRulesRequest

@typing.final
class AssetsTimeRange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSETS_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    @property
    def assets(self) -> sift.common.type.v1.resource_identifier_pb2.NamedResources: ...
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        assets: sift.common.type.v1.resource_identifier_pb2.NamedResources | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["assets", b"assets", "end_time", b"end_time", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["assets", b"assets", "end_time", b"end_time", "start_time", b"start_time"]) -> None: ...

global___AssetsTimeRange = AssetsTimeRange

@typing.final
class EvaluateRulesFromCurrentRuleVersions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RULES_FIELD_NUMBER: builtins.int
    @property
    def rules(self) -> sift.common.type.v1.resource_identifier_pb2.ResourceIdentifiers: ...
    def __init__(
        self,
        *,
        rules: sift.common.type.v1.resource_identifier_pb2.ResourceIdentifiers | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["rules", b"rules"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["rules", b"rules"]) -> None: ...

global___EvaluateRulesFromCurrentRuleVersions = EvaluateRulesFromCurrentRuleVersions

@typing.final
class EvaluateRulesFromReportTemplate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REPORT_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def report_template(self) -> sift.common.type.v1.resource_identifier_pb2.ResourceIdentifier: ...
    def __init__(
        self,
        *,
        report_template: sift.common.type.v1.resource_identifier_pb2.ResourceIdentifier | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["report_template", b"report_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["report_template", b"report_template"]) -> None: ...

global___EvaluateRulesFromReportTemplate = EvaluateRulesFromReportTemplate

@typing.final
class EvaluateRulesFromRuleVersions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RULE_VERSION_IDS_FIELD_NUMBER: builtins.int
    @property
    def rule_version_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        rule_version_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["rule_version_ids", b"rule_version_ids"]) -> None: ...

global___EvaluateRulesFromRuleVersions = EvaluateRulesFromRuleVersions

@typing.final
class EvaluateRulesAnnotationOptions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAGS_FIELD_NUMBER: builtins.int
    @property
    def tags(self) -> sift.common.type.v1.resource_identifier_pb2.NamedResources: ...
    def __init__(
        self,
        *,
        tags: sift.common.type.v1.resource_identifier_pb2.NamedResources | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["tags", b"tags"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["tags", b"tags"]) -> None: ...

global___EvaluateRulesAnnotationOptions = EvaluateRulesAnnotationOptions

@typing.final
class EvaluateRulesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CREATED_ANNOTATION_COUNT_FIELD_NUMBER: builtins.int
    REPORT_ID_FIELD_NUMBER: builtins.int
    JOB_ID_FIELD_NUMBER: builtins.int
    created_annotation_count: builtins.int
    report_id: builtins.str
    """A report will be generated if rules were evaluated against a run."""
    job_id: builtins.str
    """This will be set if the job has an extended run time and is being processed asynchronously."""
    def __init__(
        self,
        *,
        created_annotation_count: builtins.int = ...,
        report_id: builtins.str | None = ...,
        job_id: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_job_id", b"_job_id", "_report_id", b"_report_id", "job_id", b"job_id", "report_id", b"report_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_job_id", b"_job_id", "_report_id", b"_report_id", "created_annotation_count", b"created_annotation_count", "job_id", b"job_id", "report_id", b"report_id"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_job_id", b"_job_id"]) -> typing.Literal["job_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_report_id", b"_report_id"]) -> typing.Literal["report_id"] | None: ...

global___EvaluateRulesResponse = EvaluateRulesResponse

@typing.final
class EvaluateRulesPreviewRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RUN_FIELD_NUMBER: builtins.int
    RULES_FIELD_NUMBER: builtins.int
    RULE_VERSIONS_FIELD_NUMBER: builtins.int
    REPORT_TEMPLATE_FIELD_NUMBER: builtins.int
    RULE_CONFIGS_FIELD_NUMBER: builtins.int
    ORGANIZATION_ID_FIELD_NUMBER: builtins.int
    organization_id: builtins.str
    """Only required if your user belongs to multiple organizations"""
    @property
    def run(self) -> sift.common.type.v1.resource_identifier_pb2.ResourceIdentifier: ...
    @property
    def rules(self) -> global___EvaluateRulesFromCurrentRuleVersions: ...
    @property
    def rule_versions(self) -> global___EvaluateRulesFromRuleVersions: ...
    @property
    def report_template(self) -> global___EvaluateRulesFromReportTemplate: ...
    @property
    def rule_configs(self) -> global___EvaluateRulesFromRuleConfigs: ...
    def __init__(
        self,
        *,
        run: sift.common.type.v1.resource_identifier_pb2.ResourceIdentifier | None = ...,
        rules: global___EvaluateRulesFromCurrentRuleVersions | None = ...,
        rule_versions: global___EvaluateRulesFromRuleVersions | None = ...,
        report_template: global___EvaluateRulesFromReportTemplate | None = ...,
        rule_configs: global___EvaluateRulesFromRuleConfigs | None = ...,
        organization_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["mode", b"mode", "report_template", b"report_template", "rule_configs", b"rule_configs", "rule_versions", b"rule_versions", "rules", b"rules", "run", b"run", "time", b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["mode", b"mode", "organization_id", b"organization_id", "report_template", b"report_template", "rule_configs", b"rule_configs", "rule_versions", b"rule_versions", "rules", b"rules", "run", b"run", "time", b"time"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["mode", b"mode"]) -> typing.Literal["rules", "rule_versions", "report_template", "rule_configs"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["time", b"time"]) -> typing.Literal["run"] | None: ...

global___EvaluateRulesPreviewRequest = EvaluateRulesPreviewRequest

@typing.final
class EvaluateRulesFromRuleConfigs(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIGS_FIELD_NUMBER: builtins.int
    @property
    def configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[sift.rules.v1.rules_pb2.UpdateRuleRequest]: ...
    def __init__(
        self,
        *,
        configs: collections.abc.Iterable[sift.rules.v1.rules_pb2.UpdateRuleRequest] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["configs", b"configs"]) -> None: ...

global___EvaluateRulesFromRuleConfigs = EvaluateRulesFromRuleConfigs

@typing.final
class EvaluateRulesPreviewResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CREATED_ANNOTATION_COUNT_FIELD_NUMBER: builtins.int
    DRY_RUN_ANNOTATIONS_FIELD_NUMBER: builtins.int
    created_annotation_count: builtins.int
    @property
    def dry_run_annotations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[sift.rules.v1.rules_pb2.DryRunAnnotation]: ...
    def __init__(
        self,
        *,
        created_annotation_count: builtins.int = ...,
        dry_run_annotations: collections.abc.Iterable[sift.rules.v1.rules_pb2.DryRunAnnotation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["created_annotation_count", b"created_annotation_count", "dry_run_annotations", b"dry_run_annotations"]) -> None: ...

global___EvaluateRulesPreviewResponse = EvaluateRulesPreviewResponse
