# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sift.rule_evaluation.v1 import rule_evaluation_pb2 as sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2


class RuleEvaluationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateRules = channel.unary_unary(
                '/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRules',
                request_serializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesRequest.SerializeToString,
                response_deserializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesResponse.FromString,
                )
        self.EvaluateRulesPreview = channel.unary_unary(
                '/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRulesPreview',
                request_serializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesPreviewRequest.SerializeToString,
                response_deserializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesPreviewResponse.FromString,
                )


class RuleEvaluationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EvaluateRules(self, request, context):
        """Evaluate rules from a designated source against a run or asset and return the total amount of annotations created and the ID of the generated report.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateRulesPreview(self, request, context):
        """Perform a dry run evaluation for existing rules or rule configurations against a run and return the annotations that would be generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RuleEvaluationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvaluateRules': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateRules,
                    request_deserializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesRequest.FromString,
                    response_serializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesResponse.SerializeToString,
            ),
            'EvaluateRulesPreview': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateRulesPreview,
                    request_deserializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesPreviewRequest.FromString,
                    response_serializer=sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesPreviewResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sift.rule_evaluation.v1.RuleEvaluationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RuleEvaluationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EvaluateRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRules',
            sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesRequest.SerializeToString,
            sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateRulesPreview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.rule_evaluation.v1.RuleEvaluationService/EvaluateRulesPreview',
            sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesPreviewRequest.SerializeToString,
            sift_dot_rule__evaluation_dot_v1_dot_rule__evaluation__pb2.EvaluateRulesPreviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
