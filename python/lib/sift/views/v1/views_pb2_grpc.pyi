"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.views.v1.views_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ViewServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetView: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.GetViewRequest,
        sift.views.v1.views_pb2.GetViewResponse,
    ]
    """Retrieves a view."""

    CreateView: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.CreateViewRequest,
        sift.views.v1.views_pb2.CreateViewResponse,
    ]
    """Creates a view."""

    UpdateView: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.UpdateViewRequest,
        sift.views.v1.views_pb2.UpdateViewResponse,
    ]
    """Updates an existing view using using the list of fields specified in `update_mask`."""

    ListViews: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.ListViewsRequest,
        sift.views.v1.views_pb2.ListViewsResponse,
    ]
    """Retrieves views using an optional filter."""

    ListApplicableViews: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.ListApplicableViewsRequest,
        sift.views.v1.views_pb2.ListApplicableViewsResponse,
    ]
    """Lists views that apply to assets/runs."""

    DeleteView: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.DeleteViewRequest,
        sift.views.v1.views_pb2.DeleteViewResponse,
    ]
    """Deletes a view."""

    PinView: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.PinViewRequest,
        sift.views.v1.views_pb2.PinViewResponse,
    ]
    """Pins a view."""

    UnpinView: grpc.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.UnpinViewRequest,
        sift.views.v1.views_pb2.UnpinViewResponse,
    ]
    """Unpins a view."""

class ViewServiceAsyncStub:
    GetView: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.GetViewRequest,
        sift.views.v1.views_pb2.GetViewResponse,
    ]
    """Retrieves a view."""

    CreateView: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.CreateViewRequest,
        sift.views.v1.views_pb2.CreateViewResponse,
    ]
    """Creates a view."""

    UpdateView: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.UpdateViewRequest,
        sift.views.v1.views_pb2.UpdateViewResponse,
    ]
    """Updates an existing view using using the list of fields specified in `update_mask`."""

    ListViews: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.ListViewsRequest,
        sift.views.v1.views_pb2.ListViewsResponse,
    ]
    """Retrieves views using an optional filter."""

    ListApplicableViews: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.ListApplicableViewsRequest,
        sift.views.v1.views_pb2.ListApplicableViewsResponse,
    ]
    """Lists views that apply to assets/runs."""

    DeleteView: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.DeleteViewRequest,
        sift.views.v1.views_pb2.DeleteViewResponse,
    ]
    """Deletes a view."""

    PinView: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.PinViewRequest,
        sift.views.v1.views_pb2.PinViewResponse,
    ]
    """Pins a view."""

    UnpinView: grpc.aio.UnaryUnaryMultiCallable[
        sift.views.v1.views_pb2.UnpinViewRequest,
        sift.views.v1.views_pb2.UnpinViewResponse,
    ]
    """Unpins a view."""

class ViewServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetView(
        self,
        request: sift.views.v1.views_pb2.GetViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.GetViewResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.GetViewResponse]]:
        """Retrieves a view."""

    @abc.abstractmethod
    def CreateView(
        self,
        request: sift.views.v1.views_pb2.CreateViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.CreateViewResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.CreateViewResponse]]:
        """Creates a view."""

    @abc.abstractmethod
    def UpdateView(
        self,
        request: sift.views.v1.views_pb2.UpdateViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.UpdateViewResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.UpdateViewResponse]]:
        """Updates an existing view using using the list of fields specified in `update_mask`."""

    @abc.abstractmethod
    def ListViews(
        self,
        request: sift.views.v1.views_pb2.ListViewsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.ListViewsResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.ListViewsResponse]]:
        """Retrieves views using an optional filter."""

    @abc.abstractmethod
    def ListApplicableViews(
        self,
        request: sift.views.v1.views_pb2.ListApplicableViewsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.ListApplicableViewsResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.ListApplicableViewsResponse]]:
        """Lists views that apply to assets/runs."""

    @abc.abstractmethod
    def DeleteView(
        self,
        request: sift.views.v1.views_pb2.DeleteViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.DeleteViewResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.DeleteViewResponse]]:
        """Deletes a view."""

    @abc.abstractmethod
    def PinView(
        self,
        request: sift.views.v1.views_pb2.PinViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.PinViewResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.PinViewResponse]]:
        """Pins a view."""

    @abc.abstractmethod
    def UnpinView(
        self,
        request: sift.views.v1.views_pb2.UnpinViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.views.v1.views_pb2.UnpinViewResponse, collections.abc.Awaitable[sift.views.v1.views_pb2.UnpinViewResponse]]:
        """Unpins a view."""

def add_ViewServiceServicer_to_server(servicer: ViewServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
