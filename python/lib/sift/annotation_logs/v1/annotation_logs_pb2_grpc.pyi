"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.annotation_logs.v1.annotation_logs_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AnnotationLogServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateAnnotationLog: grpc.UnaryUnaryMultiCallable[
        sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogRequest,
        sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogResponse,
    ]
    """Creates an annotation log on an annotation."""

    ListAnnotationLogs: grpc.UnaryUnaryMultiCallable[
        sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsRequest,
        sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsResponse,
    ]
    """Retrieves annotation logs using an optional filter."""

    DeleteAnnotationLog: grpc.UnaryUnaryMultiCallable[
        sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogRequest,
        sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogResponse,
    ]
    """Deletes an annotation log."""

class AnnotationLogServiceAsyncStub:
    CreateAnnotationLog: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogRequest,
        sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogResponse,
    ]
    """Creates an annotation log on an annotation."""

    ListAnnotationLogs: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsRequest,
        sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsResponse,
    ]
    """Retrieves annotation logs using an optional filter."""

    DeleteAnnotationLog: grpc.aio.UnaryUnaryMultiCallable[
        sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogRequest,
        sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogResponse,
    ]
    """Deletes an annotation log."""

class AnnotationLogServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateAnnotationLog(
        self,
        request: sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogResponse, collections.abc.Awaitable[sift.annotation_logs.v1.annotation_logs_pb2.CreateAnnotationLogResponse]]:
        """Creates an annotation log on an annotation."""

    @abc.abstractmethod
    def ListAnnotationLogs(
        self,
        request: sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsResponse, collections.abc.Awaitable[sift.annotation_logs.v1.annotation_logs_pb2.ListAnnotationLogsResponse]]:
        """Retrieves annotation logs using an optional filter."""

    @abc.abstractmethod
    def DeleteAnnotationLog(
        self,
        request: sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogResponse, collections.abc.Awaitable[sift.annotation_logs.v1.annotation_logs_pb2.DeleteAnnotationLogResponse]]:
        """Deletes an annotation log."""

def add_AnnotationLogServiceServicer_to_server(servicer: AnnotationLogServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
