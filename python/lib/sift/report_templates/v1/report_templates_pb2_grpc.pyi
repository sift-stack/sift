"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.report_templates.v1.report_templates_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ReportTemplateServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetReportTemplate: grpc.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.GetReportTemplateRequest,
        sift.report_templates.v1.report_templates_pb2.GetReportTemplateResponse,
    ]
    """Retrieve a report template."""

    CreateReportTemplate: grpc.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.CreateReportTemplateRequest,
        sift.report_templates.v1.report_templates_pb2.CreateReportTemplateResponse,
    ]
    """Create a report template."""

    ListReportTemplates: grpc.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.ListReportTemplatesRequest,
        sift.report_templates.v1.report_templates_pb2.ListReportTemplatesResponse,
    ]
    """List report templates."""

    UpdateReportTemplate: grpc.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateRequest,
        sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateResponse,
    ]
    """Updates an existing report template using the list of fields specified in `update_mask`."""

class ReportTemplateServiceAsyncStub:
    GetReportTemplate: grpc.aio.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.GetReportTemplateRequest,
        sift.report_templates.v1.report_templates_pb2.GetReportTemplateResponse,
    ]
    """Retrieve a report template."""

    CreateReportTemplate: grpc.aio.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.CreateReportTemplateRequest,
        sift.report_templates.v1.report_templates_pb2.CreateReportTemplateResponse,
    ]
    """Create a report template."""

    ListReportTemplates: grpc.aio.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.ListReportTemplatesRequest,
        sift.report_templates.v1.report_templates_pb2.ListReportTemplatesResponse,
    ]
    """List report templates."""

    UpdateReportTemplate: grpc.aio.UnaryUnaryMultiCallable[
        sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateRequest,
        sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateResponse,
    ]
    """Updates an existing report template using the list of fields specified in `update_mask`."""

class ReportTemplateServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetReportTemplate(
        self,
        request: sift.report_templates.v1.report_templates_pb2.GetReportTemplateRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.report_templates.v1.report_templates_pb2.GetReportTemplateResponse, collections.abc.Awaitable[sift.report_templates.v1.report_templates_pb2.GetReportTemplateResponse]]:
        """Retrieve a report template."""

    @abc.abstractmethod
    def CreateReportTemplate(
        self,
        request: sift.report_templates.v1.report_templates_pb2.CreateReportTemplateRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.report_templates.v1.report_templates_pb2.CreateReportTemplateResponse, collections.abc.Awaitable[sift.report_templates.v1.report_templates_pb2.CreateReportTemplateResponse]]:
        """Create a report template."""

    @abc.abstractmethod
    def ListReportTemplates(
        self,
        request: sift.report_templates.v1.report_templates_pb2.ListReportTemplatesRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.report_templates.v1.report_templates_pb2.ListReportTemplatesResponse, collections.abc.Awaitable[sift.report_templates.v1.report_templates_pb2.ListReportTemplatesResponse]]:
        """List report templates."""

    @abc.abstractmethod
    def UpdateReportTemplate(
        self,
        request: sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateResponse, collections.abc.Awaitable[sift.report_templates.v1.report_templates_pb2.UpdateReportTemplateResponse]]:
        """Updates an existing report template using the list of fields specified in `update_mask`."""

def add_ReportTemplateServiceServicer_to_server(servicer: ReportTemplateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
