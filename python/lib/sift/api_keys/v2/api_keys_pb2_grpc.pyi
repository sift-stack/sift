"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.api_keys.v2.api_keys_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ApiKeyServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListApiKeys: grpc.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.ListApiKeysRequest,
        sift.api_keys.v2.api_keys_pb2.ListApiKeysResponse,
    ]

    CreateApiKey: grpc.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.CreateApiKeyRequest,
        sift.api_keys.v2.api_keys_pb2.CreateApiKeyResponse,
    ]

    DeleteApiKey: grpc.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.DeleteApiKeyRequest,
        sift.api_keys.v2.api_keys_pb2.DeleteApiKeyResponse,
    ]

    ApiKeyOrganization: grpc.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationRequest,
        sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationResponse,
    ]

class ApiKeyServiceAsyncStub:
    ListApiKeys: grpc.aio.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.ListApiKeysRequest,
        sift.api_keys.v2.api_keys_pb2.ListApiKeysResponse,
    ]

    CreateApiKey: grpc.aio.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.CreateApiKeyRequest,
        sift.api_keys.v2.api_keys_pb2.CreateApiKeyResponse,
    ]

    DeleteApiKey: grpc.aio.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.DeleteApiKeyRequest,
        sift.api_keys.v2.api_keys_pb2.DeleteApiKeyResponse,
    ]

    ApiKeyOrganization: grpc.aio.UnaryUnaryMultiCallable[
        sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationRequest,
        sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationResponse,
    ]

class ApiKeyServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListApiKeys(
        self,
        request: sift.api_keys.v2.api_keys_pb2.ListApiKeysRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.api_keys.v2.api_keys_pb2.ListApiKeysResponse, collections.abc.Awaitable[sift.api_keys.v2.api_keys_pb2.ListApiKeysResponse]]: ...

    @abc.abstractmethod
    def CreateApiKey(
        self,
        request: sift.api_keys.v2.api_keys_pb2.CreateApiKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.api_keys.v2.api_keys_pb2.CreateApiKeyResponse, collections.abc.Awaitable[sift.api_keys.v2.api_keys_pb2.CreateApiKeyResponse]]: ...

    @abc.abstractmethod
    def DeleteApiKey(
        self,
        request: sift.api_keys.v2.api_keys_pb2.DeleteApiKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.api_keys.v2.api_keys_pb2.DeleteApiKeyResponse, collections.abc.Awaitable[sift.api_keys.v2.api_keys_pb2.DeleteApiKeyResponse]]: ...

    @abc.abstractmethod
    def ApiKeyOrganization(
        self,
        request: sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationResponse, collections.abc.Awaitable[sift.api_keys.v2.api_keys_pb2.ApiKeyOrganizationResponse]]: ...

def add_ApiKeyServiceServicer_to_server(servicer: ApiKeyServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
