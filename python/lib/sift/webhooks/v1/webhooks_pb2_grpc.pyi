"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.webhooks.v1.webhooks_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class WebhookServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetWebhook: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.GetWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.GetWebhookResponse,
    ]
    """Retrieve a webhook by ID."""

    CreateWebhook: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.CreateWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.CreateWebhookResponse,
    ]
    """Create a webhook."""

    UpdateWebhook: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.UpdateWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.UpdateWebhookResponse,
    ]
    """Update select fields of an existing webhook."""

    ListWebhooks: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.ListWebhooksRequest,
        sift.webhooks.v1.webhooks_pb2.ListWebhooksResponse,
    ]
    """Retrieve and optionally filter a list of webhooks."""

    TestWebhook: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.TestWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.TestWebhookResponse,
    ]
    """Test an existing webhook or a webhook create request. This RPC will attempt to send an actual webhook
    with the provided parameters and forward back the response from the target.
    """

    CreateWebhookSignatureKey: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyRequest,
        sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyResponse,
    ]
    """Create an webhook signature key. If a webhook signature key is active, the bodies of all webhooks will be signed using the signature key with HMAC-SHA-256.
    The signature generated will then included in the `X-Sift-Signature` HTTP header. Only one key can be held per organization. If an existing key exists, then
    this will simply return it. See `WebhookService_RotateWebhookSignatureKey` to rotate the key.
    """

    GetWebhookSignatureKey: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyRequest,
        sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyResponse,
    ]
    """Retrieve the current webhook signature key. Will return a not found error if one doesn't yet exist."""

    ToggleWebhookSignatureKeyActivation: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationRequest,
        sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationResponse,
    ]
    """Set the activation state of the organization's current webhook signature key. Will return a not found error if one doesn't yet exist."""

    RotateWebhookSignatureKey: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyRequest,
        sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyResponse,
    ]
    """Generate a new webhook signature key and replace the previous one. The activation state of the new key will match the activation state of the previous."""

    BatchCreateWebhookLogs: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsRequest,
        sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsResponse,
    ]
    """Create a batch of webhook logs. Users should not have to call this directly."""

    ListWebhookLogs: grpc.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.ListWebhookLogsRequest,
        sift.webhooks.v1.webhooks_pb2.ListWebhookLogsResponse,
    ]
    """Retrieve and optionally filter a list of webhook logs."""

class WebhookServiceAsyncStub:
    GetWebhook: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.GetWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.GetWebhookResponse,
    ]
    """Retrieve a webhook by ID."""

    CreateWebhook: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.CreateWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.CreateWebhookResponse,
    ]
    """Create a webhook."""

    UpdateWebhook: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.UpdateWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.UpdateWebhookResponse,
    ]
    """Update select fields of an existing webhook."""

    ListWebhooks: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.ListWebhooksRequest,
        sift.webhooks.v1.webhooks_pb2.ListWebhooksResponse,
    ]
    """Retrieve and optionally filter a list of webhooks."""

    TestWebhook: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.TestWebhookRequest,
        sift.webhooks.v1.webhooks_pb2.TestWebhookResponse,
    ]
    """Test an existing webhook or a webhook create request. This RPC will attempt to send an actual webhook
    with the provided parameters and forward back the response from the target.
    """

    CreateWebhookSignatureKey: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyRequest,
        sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyResponse,
    ]
    """Create an webhook signature key. If a webhook signature key is active, the bodies of all webhooks will be signed using the signature key with HMAC-SHA-256.
    The signature generated will then included in the `X-Sift-Signature` HTTP header. Only one key can be held per organization. If an existing key exists, then
    this will simply return it. See `WebhookService_RotateWebhookSignatureKey` to rotate the key.
    """

    GetWebhookSignatureKey: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyRequest,
        sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyResponse,
    ]
    """Retrieve the current webhook signature key. Will return a not found error if one doesn't yet exist."""

    ToggleWebhookSignatureKeyActivation: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationRequest,
        sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationResponse,
    ]
    """Set the activation state of the organization's current webhook signature key. Will return a not found error if one doesn't yet exist."""

    RotateWebhookSignatureKey: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyRequest,
        sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyResponse,
    ]
    """Generate a new webhook signature key and replace the previous one. The activation state of the new key will match the activation state of the previous."""

    BatchCreateWebhookLogs: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsRequest,
        sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsResponse,
    ]
    """Create a batch of webhook logs. Users should not have to call this directly."""

    ListWebhookLogs: grpc.aio.UnaryUnaryMultiCallable[
        sift.webhooks.v1.webhooks_pb2.ListWebhookLogsRequest,
        sift.webhooks.v1.webhooks_pb2.ListWebhookLogsResponse,
    ]
    """Retrieve and optionally filter a list of webhook logs."""

class WebhookServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetWebhook(
        self,
        request: sift.webhooks.v1.webhooks_pb2.GetWebhookRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.GetWebhookResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.GetWebhookResponse]]:
        """Retrieve a webhook by ID."""

    @abc.abstractmethod
    def CreateWebhook(
        self,
        request: sift.webhooks.v1.webhooks_pb2.CreateWebhookRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.CreateWebhookResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.CreateWebhookResponse]]:
        """Create a webhook."""

    @abc.abstractmethod
    def UpdateWebhook(
        self,
        request: sift.webhooks.v1.webhooks_pb2.UpdateWebhookRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.UpdateWebhookResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.UpdateWebhookResponse]]:
        """Update select fields of an existing webhook."""

    @abc.abstractmethod
    def ListWebhooks(
        self,
        request: sift.webhooks.v1.webhooks_pb2.ListWebhooksRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.ListWebhooksResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.ListWebhooksResponse]]:
        """Retrieve and optionally filter a list of webhooks."""

    @abc.abstractmethod
    def TestWebhook(
        self,
        request: sift.webhooks.v1.webhooks_pb2.TestWebhookRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.TestWebhookResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.TestWebhookResponse]]:
        """Test an existing webhook or a webhook create request. This RPC will attempt to send an actual webhook
        with the provided parameters and forward back the response from the target.
        """

    @abc.abstractmethod
    def CreateWebhookSignatureKey(
        self,
        request: sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.CreateWebhookSignatureKeyResponse]]:
        """Create an webhook signature key. If a webhook signature key is active, the bodies of all webhooks will be signed using the signature key with HMAC-SHA-256.
        The signature generated will then included in the `X-Sift-Signature` HTTP header. Only one key can be held per organization. If an existing key exists, then
        this will simply return it. See `WebhookService_RotateWebhookSignatureKey` to rotate the key.
        """

    @abc.abstractmethod
    def GetWebhookSignatureKey(
        self,
        request: sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.GetWebhookSignatureKeyResponse]]:
        """Retrieve the current webhook signature key. Will return a not found error if one doesn't yet exist."""

    @abc.abstractmethod
    def ToggleWebhookSignatureKeyActivation(
        self,
        request: sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.ToggleWebhookSignatureKeyActivationResponse]]:
        """Set the activation state of the organization's current webhook signature key. Will return a not found error if one doesn't yet exist."""

    @abc.abstractmethod
    def RotateWebhookSignatureKey(
        self,
        request: sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.RotateWebhookSignatureKeyResponse]]:
        """Generate a new webhook signature key and replace the previous one. The activation state of the new key will match the activation state of the previous."""

    @abc.abstractmethod
    def BatchCreateWebhookLogs(
        self,
        request: sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.BatchCreateWebhookLogsResponse]]:
        """Create a batch of webhook logs. Users should not have to call this directly."""

    @abc.abstractmethod
    def ListWebhookLogs(
        self,
        request: sift.webhooks.v1.webhooks_pb2.ListWebhookLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.webhooks.v1.webhooks_pb2.ListWebhookLogsResponse, collections.abc.Awaitable[sift.webhooks.v1.webhooks_pb2.ListWebhookLogsResponse]]:
        """Retrieve and optionally filter a list of webhook logs."""

def add_WebhookServiceServicer_to_server(servicer: WebhookServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
