# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sift.notifications.v1 import notifications_pb2 as sift_dot_notifications_dot_v1_dot_notifications__pb2


class NotificationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListNotifications = channel.unary_unary(
                '/sift.notifications.v1.NotificationService/ListNotifications',
                request_serializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.ListNotificationsRequest.SerializeToString,
                response_deserializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.ListNotificationsResponse.FromString,
                )
        self.BatchUpdateNotifications = channel.unary_unary(
                '/sift.notifications.v1.NotificationService/BatchUpdateNotifications',
                request_serializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.BatchUpdateNotificationsRequest.SerializeToString,
                response_deserializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.BatchUpdateNotificationsResponse.FromString,
                )


class NotificationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListNotifications(self, request, context):
        """Retrieves notifications using an optional filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpdateNotifications(self, request, context):
        """Batch updates a list of notifications using the list of fields specified in their respective `update_mask`s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNotifications,
                    request_deserializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.ListNotificationsRequest.FromString,
                    response_serializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.ListNotificationsResponse.SerializeToString,
            ),
            'BatchUpdateNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchUpdateNotifications,
                    request_deserializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.BatchUpdateNotificationsRequest.FromString,
                    response_serializer=sift_dot_notifications_dot_v1_dot_notifications__pb2.BatchUpdateNotificationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sift.notifications.v1.NotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NotificationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.notifications.v1.NotificationService/ListNotifications',
            sift_dot_notifications_dot_v1_dot_notifications__pb2.ListNotificationsRequest.SerializeToString,
            sift_dot_notifications_dot_v1_dot_notifications__pb2.ListNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchUpdateNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sift.notifications.v1.NotificationService/BatchUpdateNotifications',
            sift_dot_notifications_dot_v1_dot_notifications__pb2.BatchUpdateNotificationsRequest.SerializeToString,
            sift_dot_notifications_dot_v1_dot_notifications__pb2.BatchUpdateNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
