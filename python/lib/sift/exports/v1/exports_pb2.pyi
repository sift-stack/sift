"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sift.calculated_channels.v2.calculated_channels_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ExportOutputFormat:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ExportOutputFormatEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ExportOutputFormat.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EXPORT_OUTPUT_FORMAT_UNSPECIFIED: _ExportOutputFormat.ValueType  # 0
    EXPORT_OUTPUT_FORMAT_CSV: _ExportOutputFormat.ValueType  # 1
    EXPORT_OUTPUT_FORMAT_SUN: _ExportOutputFormat.ValueType  # 2

class ExportOutputFormat(_ExportOutputFormat, metaclass=_ExportOutputFormatEnumTypeWrapper): ...

EXPORT_OUTPUT_FORMAT_UNSPECIFIED: ExportOutputFormat.ValueType  # 0
EXPORT_OUTPUT_FORMAT_CSV: ExportOutputFormat.ValueType  # 1
EXPORT_OUTPUT_FORMAT_SUN: ExportOutputFormat.ValueType  # 2
global___ExportOutputFormat = ExportOutputFormat

@typing.final
class ExportDataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIME_RANGE_FIELD_NUMBER: builtins.int
    RUNS_AND_TIME_RANGE_FIELD_NUMBER: builtins.int
    ASSETS_AND_TIME_RANGE_FIELD_NUMBER: builtins.int
    CHANNEL_IDS_FIELD_NUMBER: builtins.int
    CALCULATED_CHANNEL_CONFIGS_FIELD_NUMBER: builtins.int
    OUTPUT_FORMAT_FIELD_NUMBER: builtins.int
    EXPORT_OPTIONS_FIELD_NUMBER: builtins.int
    output_format: global___ExportOutputFormat.ValueType
    @property
    def time_range(self) -> global___TimeRange:
        """If time_range used, channel_ids or calculated_chanel_configs must be provided to scope data."""

    @property
    def runs_and_time_range(self) -> global___RunsAndTimeRange:
        """Runs used to perform time selection and scope data. Times can optionally be provided to further scope within runs.
        If channel_ids or calculated_channel_configs not provided, all channels from Run Assets are added to scope.
        """

    @property
    def assets_and_time_range(self) -> global___AssetsAndTimeRange:
        """Assets and times provided to scope data.
        If channel_ids or calculated_channel_configs not provided, all channels from Assets are added to scope.
        """

    @property
    def channel_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def calculated_channel_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalculatedChannelConfig]: ...
    @property
    def export_options(self) -> global___ExportOptions: ...
    def __init__(
        self,
        *,
        time_range: global___TimeRange | None = ...,
        runs_and_time_range: global___RunsAndTimeRange | None = ...,
        assets_and_time_range: global___AssetsAndTimeRange | None = ...,
        channel_ids: collections.abc.Iterable[builtins.str] | None = ...,
        calculated_channel_configs: collections.abc.Iterable[global___CalculatedChannelConfig] | None = ...,
        output_format: global___ExportOutputFormat.ValueType = ...,
        export_options: global___ExportOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["assets_and_time_range", b"assets_and_time_range", "export_options", b"export_options", "runs_and_time_range", b"runs_and_time_range", "time_range", b"time_range", "time_selection", b"time_selection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["assets_and_time_range", b"assets_and_time_range", "calculated_channel_configs", b"calculated_channel_configs", "channel_ids", b"channel_ids", "export_options", b"export_options", "output_format", b"output_format", "runs_and_time_range", b"runs_and_time_range", "time_range", b"time_range", "time_selection", b"time_selection"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["time_selection", b"time_selection"]) -> typing.Literal["time_range", "runs_and_time_range", "assets_and_time_range"] | None: ...

global___ExportDataRequest = ExportDataRequest

@typing.final
class TimeRange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_TIME_FIELD_NUMBER: builtins.int
    STOP_TIME_FIELD_NUMBER: builtins.int
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def stop_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        stop_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["start_time", b"start_time", "stop_time", b"stop_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["start_time", b"start_time", "stop_time", b"stop_time"]) -> None: ...

global___TimeRange = TimeRange

@typing.final
class RunsAndTimeRange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RUN_IDS_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    STOP_TIME_FIELD_NUMBER: builtins.int
    @property
    def run_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def stop_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        run_ids: collections.abc.Iterable[builtins.str] | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        stop_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["start_time", b"start_time", "stop_time", b"stop_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["run_ids", b"run_ids", "start_time", b"start_time", "stop_time", b"stop_time"]) -> None: ...

global___RunsAndTimeRange = RunsAndTimeRange

@typing.final
class AssetsAndTimeRange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSET_IDS_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    STOP_TIME_FIELD_NUMBER: builtins.int
    @property
    def asset_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def stop_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        asset_ids: collections.abc.Iterable[builtins.str] | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        stop_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["start_time", b"start_time", "stop_time", b"stop_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["asset_ids", b"asset_ids", "start_time", b"start_time", "stop_time", b"stop_time"]) -> None: ...

global___AssetsAndTimeRange = AssetsAndTimeRange

@typing.final
class CalculatedChannelConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    EXPRESSION_FIELD_NUMBER: builtins.int
    CHANNEL_REFERENCES_FIELD_NUMBER: builtins.int
    UNITS_FIELD_NUMBER: builtins.int
    name: builtins.str
    expression: builtins.str
    units: builtins.str
    @property
    def channel_references(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[sift.calculated_channels.v2.calculated_channels_pb2.CalculatedChannelAbstractChannelReference]: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        expression: builtins.str = ...,
        channel_references: collections.abc.Iterable[sift.calculated_channels.v2.calculated_channels_pb2.CalculatedChannelAbstractChannelReference] | None = ...,
        units: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_units", b"_units", "units", b"units"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_units", b"_units", "channel_references", b"channel_references", "expression", b"expression", "name", b"name", "units", b"units"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_units", b"_units"]) -> typing.Literal["units"] | None: ...

global___CalculatedChannelConfig = CalculatedChannelConfig

@typing.final
class ExportOptions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    USE_LEGACY_FORMAT_FIELD_NUMBER: builtins.int
    SIMPLIFY_CHANNEL_NAMES_FIELD_NUMBER: builtins.int
    COMBINE_RUNS_FIELD_NUMBER: builtins.int
    SPLIT_EXPORT_BY_ASSET_FIELD_NUMBER: builtins.int
    SPLIT_EXPORT_BY_RUN_FIELD_NUMBER: builtins.int
    use_legacy_format: builtins.bool
    """Whether to use legacy format string for channel headers which contains key-value metadata."""
    simplify_channel_names: builtins.bool
    """Whether to simplify channel names by removing the component part of the name if name is unique in export file"""
    combine_runs: builtins.bool
    """Whether to combine runs. e.g. channels from the same asset in different runs will be combined into a single column of data."""
    split_export_by_asset: builtins.bool
    """Split each asset into their own export file"""
    split_export_by_run: builtins.bool
    """Split each run into their own export file"""
    def __init__(
        self,
        *,
        use_legacy_format: builtins.bool = ...,
        simplify_channel_names: builtins.bool = ...,
        combine_runs: builtins.bool = ...,
        split_export_by_asset: builtins.bool = ...,
        split_export_by_run: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["combine_runs", b"combine_runs", "simplify_channel_names", b"simplify_channel_names", "split_export_by_asset", b"split_export_by_asset", "split_export_by_run", b"split_export_by_run", "use_legacy_format", b"use_legacy_format"]) -> None: ...

global___ExportOptions = ExportOptions

@typing.final
class ExportDataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRESIGNED_URL_FIELD_NUMBER: builtins.int
    JOB_ID_FIELD_NUMBER: builtins.int
    presigned_url: builtins.str
    """Pre-signed URL of exported zip containing export files. This will be blank if
    the job is processed as a background job, in which case `job_id` will be non-empty.
    """
    job_id: builtins.str
    """This will be non-empty if the export is being processed asynchronously in a background job."""
    def __init__(
        self,
        *,
        presigned_url: builtins.str = ...,
        job_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["job_id", b"job_id", "presigned_url", b"presigned_url"]) -> None: ...

global___ExportDataResponse = ExportDataResponse

@typing.final
class GetDownloadUrlRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOB_ID_FIELD_NUMBER: builtins.int
    job_id: builtins.str
    def __init__(
        self,
        *,
        job_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["job_id", b"job_id"]) -> None: ...

global___GetDownloadUrlRequest = GetDownloadUrlRequest

@typing.final
class GetDownloadUrlResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRESIGNED_URL_FIELD_NUMBER: builtins.int
    presigned_url: builtins.str
    def __init__(
        self,
        *,
        presigned_url: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["presigned_url", b"presigned_url"]) -> None: ...

global___GetDownloadUrlResponse = GetDownloadUrlResponse
