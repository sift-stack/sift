"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.panel_configurations.v1.panel_configuration_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PanelConfigurationServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetPanelConfiguration: grpc.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationResponse,
    ]
    """Retrieves a panel configuration."""

    ListPanelConfigurations: grpc.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsResponse,
    ]
    """Retrieves panel configurations using an optional filter."""

    CreatePanelConfiguration: grpc.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationResponse,
    ]
    """Creates a panel configuration."""

    UpdatePanelConfiguration: grpc.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationResponse,
    ]
    """Updates an existing panel configuration using using the list of fields specified in `update_mask`."""

class PanelConfigurationServiceAsyncStub:
    GetPanelConfiguration: grpc.aio.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationResponse,
    ]
    """Retrieves a panel configuration."""

    ListPanelConfigurations: grpc.aio.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsResponse,
    ]
    """Retrieves panel configurations using an optional filter."""

    CreatePanelConfiguration: grpc.aio.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationResponse,
    ]
    """Creates a panel configuration."""

    UpdatePanelConfiguration: grpc.aio.UnaryUnaryMultiCallable[
        sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationRequest,
        sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationResponse,
    ]
    """Updates an existing panel configuration using using the list of fields specified in `update_mask`."""

class PanelConfigurationServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetPanelConfiguration(
        self,
        request: sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationResponse, collections.abc.Awaitable[sift.panel_configurations.v1.panel_configuration_pb2.GetPanelConfigurationResponse]]:
        """Retrieves a panel configuration."""

    @abc.abstractmethod
    def ListPanelConfigurations(
        self,
        request: sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsResponse, collections.abc.Awaitable[sift.panel_configurations.v1.panel_configuration_pb2.ListPanelConfigurationsResponse]]:
        """Retrieves panel configurations using an optional filter."""

    @abc.abstractmethod
    def CreatePanelConfiguration(
        self,
        request: sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationResponse, collections.abc.Awaitable[sift.panel_configurations.v1.panel_configuration_pb2.CreatePanelConfigurationResponse]]:
        """Creates a panel configuration."""

    @abc.abstractmethod
    def UpdatePanelConfiguration(
        self,
        request: sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationResponse, collections.abc.Awaitable[sift.panel_configurations.v1.panel_configuration_pb2.UpdatePanelConfigurationResponse]]:
        """Updates an existing panel configuration using using the list of fields specified in `update_mask`."""

def add_PanelConfigurationServiceServicer_to_server(servicer: PanelConfigurationServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
