"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.policies.v1.policies_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PolicyServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetPolicy: grpc.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.GetPolicyRequest,
        sift.policies.v1.policies_pb2.GetPolicyResponse,
    ]
    """Retrieve a policy"""

    ListPolicies: grpc.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.ListPoliciesRequest,
        sift.policies.v1.policies_pb2.ListPoliciesResponse,
    ]
    """Retrieve policies using an optional filter."""

    CreatePolicy: grpc.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.CreatePolicyRequest,
        sift.policies.v1.policies_pb2.CreatePolicyResponse,
    ]
    """Create a policy"""

    UpdatePolicy: grpc.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.UpdatePolicyRequest,
        sift.policies.v1.policies_pb2.UpdatePolicyResponse,
    ]
    """Update a policy"""

    ArchivePolicy: grpc.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.ArchivePolicyRequest,
        sift.policies.v1.policies_pb2.ArchivePolicyResponse,
    ]
    """Archive a policy"""

class PolicyServiceAsyncStub:
    GetPolicy: grpc.aio.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.GetPolicyRequest,
        sift.policies.v1.policies_pb2.GetPolicyResponse,
    ]
    """Retrieve a policy"""

    ListPolicies: grpc.aio.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.ListPoliciesRequest,
        sift.policies.v1.policies_pb2.ListPoliciesResponse,
    ]
    """Retrieve policies using an optional filter."""

    CreatePolicy: grpc.aio.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.CreatePolicyRequest,
        sift.policies.v1.policies_pb2.CreatePolicyResponse,
    ]
    """Create a policy"""

    UpdatePolicy: grpc.aio.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.UpdatePolicyRequest,
        sift.policies.v1.policies_pb2.UpdatePolicyResponse,
    ]
    """Update a policy"""

    ArchivePolicy: grpc.aio.UnaryUnaryMultiCallable[
        sift.policies.v1.policies_pb2.ArchivePolicyRequest,
        sift.policies.v1.policies_pb2.ArchivePolicyResponse,
    ]
    """Archive a policy"""

class PolicyServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetPolicy(
        self,
        request: sift.policies.v1.policies_pb2.GetPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.policies.v1.policies_pb2.GetPolicyResponse, collections.abc.Awaitable[sift.policies.v1.policies_pb2.GetPolicyResponse]]:
        """Retrieve a policy"""

    @abc.abstractmethod
    def ListPolicies(
        self,
        request: sift.policies.v1.policies_pb2.ListPoliciesRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.policies.v1.policies_pb2.ListPoliciesResponse, collections.abc.Awaitable[sift.policies.v1.policies_pb2.ListPoliciesResponse]]:
        """Retrieve policies using an optional filter."""

    @abc.abstractmethod
    def CreatePolicy(
        self,
        request: sift.policies.v1.policies_pb2.CreatePolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.policies.v1.policies_pb2.CreatePolicyResponse, collections.abc.Awaitable[sift.policies.v1.policies_pb2.CreatePolicyResponse]]:
        """Create a policy"""

    @abc.abstractmethod
    def UpdatePolicy(
        self,
        request: sift.policies.v1.policies_pb2.UpdatePolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.policies.v1.policies_pb2.UpdatePolicyResponse, collections.abc.Awaitable[sift.policies.v1.policies_pb2.UpdatePolicyResponse]]:
        """Update a policy"""

    @abc.abstractmethod
    def ArchivePolicy(
        self,
        request: sift.policies.v1.policies_pb2.ArchivePolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.policies.v1.policies_pb2.ArchivePolicyResponse, collections.abc.Awaitable[sift.policies.v1.policies_pb2.ArchivePolicyResponse]]:
        """Archive a policy"""

def add_PolicyServiceServicer_to_server(servicer: PolicyServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
