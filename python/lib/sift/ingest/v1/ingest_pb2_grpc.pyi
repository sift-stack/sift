"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.ingest.v1.ingest_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class IngestServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    IngestWithConfigDataStream: grpc.StreamUnaryMultiCallable[
        sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamRequest,
        sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamResponse,
    ]

class IngestServiceAsyncStub:
    IngestWithConfigDataStream: grpc.aio.StreamUnaryMultiCallable[
        sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamRequest,
        sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamResponse,
    ]

class IngestServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def IngestWithConfigDataStream(
        self,
        request_iterator: _MaybeAsyncIterator[sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamRequest],
        context: _ServicerContext,
    ) -> typing.Union[sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamResponse, collections.abc.Awaitable[sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamResponse]]: ...

def add_IngestServiceServicer_to_server(servicer: IngestServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
