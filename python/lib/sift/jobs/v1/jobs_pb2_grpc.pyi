"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.jobs.v1.jobs_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class JobServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListJobs: grpc.UnaryUnaryMultiCallable[
        sift.jobs.v1.jobs_pb2.ListJobsRequest,
        sift.jobs.v1.jobs_pb2.ListJobsResponse,
    ]
    """List jobs."""

    CancelJob: grpc.UnaryUnaryMultiCallable[
        sift.jobs.v1.jobs_pb2.CancelJobRequest,
        sift.jobs.v1.jobs_pb2.CancelJobResponse,
    ]
    """Requests cancellation of an active job. If the job hasn't started yet, it will be cancelled immediately.
    Jobs that are already finished, failed, or cancelled are not affected.
    Cancelled jobs have implementation-based behavior, but in every case it's valid to cancel a job at any time.
    """

class JobServiceAsyncStub:
    ListJobs: grpc.aio.UnaryUnaryMultiCallable[
        sift.jobs.v1.jobs_pb2.ListJobsRequest,
        sift.jobs.v1.jobs_pb2.ListJobsResponse,
    ]
    """List jobs."""

    CancelJob: grpc.aio.UnaryUnaryMultiCallable[
        sift.jobs.v1.jobs_pb2.CancelJobRequest,
        sift.jobs.v1.jobs_pb2.CancelJobResponse,
    ]
    """Requests cancellation of an active job. If the job hasn't started yet, it will be cancelled immediately.
    Jobs that are already finished, failed, or cancelled are not affected.
    Cancelled jobs have implementation-based behavior, but in every case it's valid to cancel a job at any time.
    """

class JobServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListJobs(
        self,
        request: sift.jobs.v1.jobs_pb2.ListJobsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.jobs.v1.jobs_pb2.ListJobsResponse, collections.abc.Awaitable[sift.jobs.v1.jobs_pb2.ListJobsResponse]]:
        """List jobs."""

    @abc.abstractmethod
    def CancelJob(
        self,
        request: sift.jobs.v1.jobs_pb2.CancelJobRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.jobs.v1.jobs_pb2.CancelJobResponse, collections.abc.Awaitable[sift.jobs.v1.jobs_pb2.CancelJobResponse]]:
        """Requests cancellation of an active job. If the job hasn't started yet, it will be cancelled immediately.
        Jobs that are already finished, failed, or cancelled are not affected.
        Cancelled jobs have implementation-based behavior, but in every case it's valid to cancel a job at any time.
        """

def add_JobServiceServicer_to_server(servicer: JobServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
