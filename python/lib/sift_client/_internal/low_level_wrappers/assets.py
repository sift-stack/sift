"""
Low-level wrapper for the AssetsAPI.

This module provides thin wrappers around the autogenerated bindings for the AssetsAPI.
It handles common concerns like error handling and retries.

It provides both synchronous (AssetsLowLevelClient) and asynchronous (AssetsLowLevelClientAsync)
versions of the client. The async client is generated from the sync client, so they have
the same method signatures.
"""

from __future__ import annotations

import logging
from typing import cast

from google.protobuf.field_mask_pb2 import FieldMask
from sift.assets.v1.assets_pb2 import (
    DeleteAssetRequest,
    GetAssetRequest,
    GetAssetResponse,
    ListAssetsRequest,
    ListAssetsResponse,
    UpdateAssetRequest,
    UpdateAssetResponse,
)
from sift.assets.v1.assets_pb2_grpc import AssetServiceStub

from sift_client._internal.low_level_wrappers.base import (
    LowLevelClientBase,
)
from sift_client.transport.grpc_transport import GrpcClient
from sift_client.types.asset import Asset

# Configure logging
logger = logging.getLogger(__name__)


class AssetsLowLevelClient(LowLevelClientBase):
    """
    Low-level client for the AssetsAPI.

    This class provides a thin wrapper around the autogenerated bindings for the AssetsAPI.
    It handles common concerns like error handling and retries.
    """

    def __init__(self, grpc_client: GrpcClient):
        """
        Initialize the AssetsLowLevelClient.

        Args:
            grpc_client: The gRPC client to use for making API calls.
        """
        self._grpc_client = grpc_client

    async def get_asset(self, asset_id: str) -> Asset:
        request = GetAssetRequest(asset_id=asset_id)
        response = await self._grpc_client.get_stub(AssetServiceStub).GetAsset(request)
        grpc_asset = cast(GetAssetResponse, response).asset
        return Asset.from_grpc(grpc_asset)

    async def list_assets(
        self,
        query_filter: str = None,
        order_by: str = None,
        max_results: int = None,
        page_size: int = None,
    ) -> list[Asset]:
        return await self._handle_pagination(
            self._list_assets,
            page_size=page_size,
            query_filter=query_filter,
            order_by=order_by,
            max_results=max_results,
        )

    async def _list_assets(
        self,
        page_size: int = None,
        page_token: str = None,
        query_filter: str = None,
        order_by: str = None,
    ) -> tuple[list[Asset], str]:
        request_kwargs = {}
        if page_size is not None:
            request_kwargs["page_size"] = page_size
        if page_token is not None:
            request_kwargs["page_token"] = page_token
        if query_filter is not None:
            request_kwargs["filter"] = query_filter
        if order_by is not None:
            request_kwargs["order_by"] = order_by

        request = ListAssetsRequest(**request_kwargs)
        response = await self._grpc_client.get_stub(AssetServiceStub).ListAssets(request)
        response = cast(ListAssetsResponse, response)
        return [Asset.from_grpc(asset) for asset in response.assets], response.next_page_token

    async def update_asset(self, asset: Asset, update_mask: FieldMask) -> Asset:
        grpc_asset = asset.to_grpc()
        request = UpdateAssetRequest(asset=grpc_asset, update_mask=update_mask)
        response = await self._grpc_client.get_stub(AssetServiceStub).UpdateAsset(request)
        updated_grpc_asset = cast(UpdateAssetResponse, response).asset
        return Asset.from_grpc(updated_grpc_asset)

    async def delete_asset(self, asset_id: str) -> None:
        request = DeleteAssetRequest(asset_id=asset_id)
        await self._grpc_client.get_stub(AssetServiceStub).DeleteAsset(request)
