"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import typing

import grpc
import grpc.aio

import test_reports.v1.test_reports_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TestReportServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ImportTestReport: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ImportTestReportRequest,
        test_reports.v1.test_reports_pb2.ImportTestReportResponse,
    ]
    """Imports a test report from an already-uploaded file"""

    CreateTestReport: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestReportRequest,
        test_reports.v1.test_reports_pb2.CreateTestReportResponse,
    ]
    """Creates a test report"""

    GetTestReport: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.GetTestReportRequest,
        test_reports.v1.test_reports_pb2.GetTestReportResponse,
    ]
    """Gets a single test report"""

    ListTestReports: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ListTestReportsRequest,
        test_reports.v1.test_reports_pb2.ListTestReportsResponse,
    ]
    """Lists test reports with optional filtering"""

    UpdateTestReport: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.UpdateTestReportRequest,
        test_reports.v1.test_reports_pb2.UpdateTestReportResponse,
    ]
    """Updates a test report"""

    DeleteTestReport: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.DeleteTestReportRequest,
        test_reports.v1.test_reports_pb2.DeleteTestReportResponse,
    ]
    """Deletes a test report"""

    CreateTestStep: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestStepRequest,
        test_reports.v1.test_reports_pb2.CreateTestStepResponse,
    ]
    """Creates a test step"""

    ListTestSteps: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ListTestStepsRequest,
        test_reports.v1.test_reports_pb2.ListTestStepsResponse,
    ]
    """Lists test steps with optional filtering"""

    UpdateTestStep: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.UpdateTestStepRequest,
        test_reports.v1.test_reports_pb2.UpdateTestStepResponse,
    ]
    """Updates a test step"""

    DeleteTestStep: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.DeleteTestStepRequest,
        test_reports.v1.test_reports_pb2.DeleteTestStepResponse,
    ]
    """Deletes a test step"""

    CreateTestMeasurement: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestMeasurementRequest,
        test_reports.v1.test_reports_pb2.CreateTestMeasurementResponse,
    ]
    """Creates a test measurement"""

    CreateTestMeasurements: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestMeasurementsRequest,
        test_reports.v1.test_reports_pb2.CreateTestMeasurementsResponse,
    ]
    """Creates multiple test measurements in a single request"""

    ListTestMeasurements: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ListTestMeasurementsRequest,
        test_reports.v1.test_reports_pb2.ListTestMeasurementsResponse,
    ]
    """Lists test measurements with optional filtering"""

    CountTestSteps: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CountTestStepsRequest,
        test_reports.v1.test_reports_pb2.CountTestStepsResponse,
    ]
    """Counts test steps with optional filtering"""

    CountTestMeasurements: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CountTestMeasurementsRequest,
        test_reports.v1.test_reports_pb2.CountTestMeasurementsResponse,
    ]
    """Counts test measurements with optional filtering"""

    UpdateTestMeasurement: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.UpdateTestMeasurementRequest,
        test_reports.v1.test_reports_pb2.UpdateTestMeasurementResponse,
    ]
    """Updates a test measurement"""

    DeleteTestMeasurement: grpc.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.DeleteTestMeasurementRequest,
        test_reports.v1.test_reports_pb2.DeleteTestMeasurementResponse,
    ]
    """Deletes a test measurement"""

class TestReportServiceAsyncStub:
    ImportTestReport: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ImportTestReportRequest,
        test_reports.v1.test_reports_pb2.ImportTestReportResponse,
    ]
    """Imports a test report from an already-uploaded file"""

    CreateTestReport: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestReportRequest,
        test_reports.v1.test_reports_pb2.CreateTestReportResponse,
    ]
    """Creates a test report"""

    GetTestReport: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.GetTestReportRequest,
        test_reports.v1.test_reports_pb2.GetTestReportResponse,
    ]
    """Gets a single test report"""

    ListTestReports: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ListTestReportsRequest,
        test_reports.v1.test_reports_pb2.ListTestReportsResponse,
    ]
    """Lists test reports with optional filtering"""

    UpdateTestReport: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.UpdateTestReportRequest,
        test_reports.v1.test_reports_pb2.UpdateTestReportResponse,
    ]
    """Updates a test report"""

    DeleteTestReport: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.DeleteTestReportRequest,
        test_reports.v1.test_reports_pb2.DeleteTestReportResponse,
    ]
    """Deletes a test report"""

    CreateTestStep: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestStepRequest,
        test_reports.v1.test_reports_pb2.CreateTestStepResponse,
    ]
    """Creates a test step"""

    ListTestSteps: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ListTestStepsRequest,
        test_reports.v1.test_reports_pb2.ListTestStepsResponse,
    ]
    """Lists test steps with optional filtering"""

    UpdateTestStep: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.UpdateTestStepRequest,
        test_reports.v1.test_reports_pb2.UpdateTestStepResponse,
    ]
    """Updates a test step"""

    DeleteTestStep: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.DeleteTestStepRequest,
        test_reports.v1.test_reports_pb2.DeleteTestStepResponse,
    ]
    """Deletes a test step"""

    CreateTestMeasurement: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestMeasurementRequest,
        test_reports.v1.test_reports_pb2.CreateTestMeasurementResponse,
    ]
    """Creates a test measurement"""

    CreateTestMeasurements: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CreateTestMeasurementsRequest,
        test_reports.v1.test_reports_pb2.CreateTestMeasurementsResponse,
    ]
    """Creates multiple test measurements in a single request"""

    ListTestMeasurements: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.ListTestMeasurementsRequest,
        test_reports.v1.test_reports_pb2.ListTestMeasurementsResponse,
    ]
    """Lists test measurements with optional filtering"""

    CountTestSteps: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CountTestStepsRequest,
        test_reports.v1.test_reports_pb2.CountTestStepsResponse,
    ]
    """Counts test steps with optional filtering"""

    CountTestMeasurements: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.CountTestMeasurementsRequest,
        test_reports.v1.test_reports_pb2.CountTestMeasurementsResponse,
    ]
    """Counts test measurements with optional filtering"""

    UpdateTestMeasurement: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.UpdateTestMeasurementRequest,
        test_reports.v1.test_reports_pb2.UpdateTestMeasurementResponse,
    ]
    """Updates a test measurement"""

    DeleteTestMeasurement: grpc.aio.UnaryUnaryMultiCallable[
        test_reports.v1.test_reports_pb2.DeleteTestMeasurementRequest,
        test_reports.v1.test_reports_pb2.DeleteTestMeasurementResponse,
    ]
    """Deletes a test measurement"""

class TestReportServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ImportTestReport(
        self,
        request: test_reports.v1.test_reports_pb2.ImportTestReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.ImportTestReportResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.ImportTestReportResponse]]:
        """Imports a test report from an already-uploaded file"""

    @abc.abstractmethod
    def CreateTestReport(
        self,
        request: test_reports.v1.test_reports_pb2.CreateTestReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.CreateTestReportResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.CreateTestReportResponse]]:
        """Creates a test report"""

    @abc.abstractmethod
    def GetTestReport(
        self,
        request: test_reports.v1.test_reports_pb2.GetTestReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.GetTestReportResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.GetTestReportResponse]]:
        """Gets a single test report"""

    @abc.abstractmethod
    def ListTestReports(
        self,
        request: test_reports.v1.test_reports_pb2.ListTestReportsRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.ListTestReportsResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.ListTestReportsResponse]]:
        """Lists test reports with optional filtering"""

    @abc.abstractmethod
    def UpdateTestReport(
        self,
        request: test_reports.v1.test_reports_pb2.UpdateTestReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.UpdateTestReportResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.UpdateTestReportResponse]]:
        """Updates a test report"""

    @abc.abstractmethod
    def DeleteTestReport(
        self,
        request: test_reports.v1.test_reports_pb2.DeleteTestReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.DeleteTestReportResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.DeleteTestReportResponse]]:
        """Deletes a test report"""

    @abc.abstractmethod
    def CreateTestStep(
        self,
        request: test_reports.v1.test_reports_pb2.CreateTestStepRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.CreateTestStepResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.CreateTestStepResponse]]:
        """Creates a test step"""

    @abc.abstractmethod
    def ListTestSteps(
        self,
        request: test_reports.v1.test_reports_pb2.ListTestStepsRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.ListTestStepsResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.ListTestStepsResponse]]:
        """Lists test steps with optional filtering"""

    @abc.abstractmethod
    def UpdateTestStep(
        self,
        request: test_reports.v1.test_reports_pb2.UpdateTestStepRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.UpdateTestStepResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.UpdateTestStepResponse]]:
        """Updates a test step"""

    @abc.abstractmethod
    def DeleteTestStep(
        self,
        request: test_reports.v1.test_reports_pb2.DeleteTestStepRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.DeleteTestStepResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.DeleteTestStepResponse]]:
        """Deletes a test step"""

    @abc.abstractmethod
    def CreateTestMeasurement(
        self,
        request: test_reports.v1.test_reports_pb2.CreateTestMeasurementRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.CreateTestMeasurementResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.CreateTestMeasurementResponse]]:
        """Creates a test measurement"""

    @abc.abstractmethod
    def CreateTestMeasurements(
        self,
        request: test_reports.v1.test_reports_pb2.CreateTestMeasurementsRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.CreateTestMeasurementsResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.CreateTestMeasurementsResponse]]:
        """Creates multiple test measurements in a single request"""

    @abc.abstractmethod
    def ListTestMeasurements(
        self,
        request: test_reports.v1.test_reports_pb2.ListTestMeasurementsRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.ListTestMeasurementsResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.ListTestMeasurementsResponse]]:
        """Lists test measurements with optional filtering"""

    @abc.abstractmethod
    def CountTestSteps(
        self,
        request: test_reports.v1.test_reports_pb2.CountTestStepsRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.CountTestStepsResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.CountTestStepsResponse]]:
        """Counts test steps with optional filtering"""

    @abc.abstractmethod
    def CountTestMeasurements(
        self,
        request: test_reports.v1.test_reports_pb2.CountTestMeasurementsRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.CountTestMeasurementsResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.CountTestMeasurementsResponse]]:
        """Counts test measurements with optional filtering"""

    @abc.abstractmethod
    def UpdateTestMeasurement(
        self,
        request: test_reports.v1.test_reports_pb2.UpdateTestMeasurementRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.UpdateTestMeasurementResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.UpdateTestMeasurementResponse]]:
        """Updates a test measurement"""

    @abc.abstractmethod
    def DeleteTestMeasurement(
        self,
        request: test_reports.v1.test_reports_pb2.DeleteTestMeasurementRequest,
        context: _ServicerContext,
    ) -> typing.Union[test_reports.v1.test_reports_pb2.DeleteTestMeasurementResponse, collections.abc.Awaitable[test_reports.v1.test_reports_pb2.DeleteTestMeasurementResponse]]:
        """Deletes a test measurement"""

def add_TestReportServiceServicer_to_server(servicer: TestReportServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
