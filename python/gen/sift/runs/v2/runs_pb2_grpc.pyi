"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.runs.v2.runs_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class RunServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetRun: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.GetRunRequest,
        sift.runs.v2.runs_pb2.GetRunResponse,
    ]
    """Retrieve a run."""

    ListRuns: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.ListRunsRequest,
        sift.runs.v2.runs_pb2.ListRunsResponse,
    ]
    """Retrieve runs using an optional filter."""

    CreateRun: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.CreateRunRequest,
        sift.runs.v2.runs_pb2.CreateRunResponse,
    ]
    """Create a run."""

    UpdateRun: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.UpdateRunRequest,
        sift.runs.v2.runs_pb2.UpdateRunResponse,
    ]
    """Updates an existing run using using the list of fields specified in `update_mask`."""

    DeleteRun: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.DeleteRunRequest,
        sift.runs.v2.runs_pb2.DeleteRunResponse,
    ]
    """Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`."""

    StopRun: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.StopRunRequest,
        sift.runs.v2.runs_pb2.StopRunResponse,
    ]
    """Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`."""

    CreateAutomaticRunAssociationForAssets: grpc.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsRequest,
        sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsResponse,
    ]
    """Associates a list of assets with a given run."""

class RunServiceAsyncStub:
    GetRun: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.GetRunRequest,
        sift.runs.v2.runs_pb2.GetRunResponse,
    ]
    """Retrieve a run."""

    ListRuns: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.ListRunsRequest,
        sift.runs.v2.runs_pb2.ListRunsResponse,
    ]
    """Retrieve runs using an optional filter."""

    CreateRun: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.CreateRunRequest,
        sift.runs.v2.runs_pb2.CreateRunResponse,
    ]
    """Create a run."""

    UpdateRun: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.UpdateRunRequest,
        sift.runs.v2.runs_pb2.UpdateRunResponse,
    ]
    """Updates an existing run using using the list of fields specified in `update_mask`."""

    DeleteRun: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.DeleteRunRequest,
        sift.runs.v2.runs_pb2.DeleteRunResponse,
    ]
    """Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`."""

    StopRun: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.StopRunRequest,
        sift.runs.v2.runs_pb2.StopRunResponse,
    ]
    """Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`."""

    CreateAutomaticRunAssociationForAssets: grpc.aio.UnaryUnaryMultiCallable[
        sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsRequest,
        sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsResponse,
    ]
    """Associates a list of assets with a given run."""

class RunServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetRun(
        self,
        request: sift.runs.v2.runs_pb2.GetRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.GetRunResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.GetRunResponse]]:
        """Retrieve a run."""

    @abc.abstractmethod
    def ListRuns(
        self,
        request: sift.runs.v2.runs_pb2.ListRunsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.ListRunsResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.ListRunsResponse]]:
        """Retrieve runs using an optional filter."""

    @abc.abstractmethod
    def CreateRun(
        self,
        request: sift.runs.v2.runs_pb2.CreateRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.CreateRunResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.CreateRunResponse]]:
        """Create a run."""

    @abc.abstractmethod
    def UpdateRun(
        self,
        request: sift.runs.v2.runs_pb2.UpdateRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.UpdateRunResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.UpdateRunResponse]]:
        """Updates an existing run using using the list of fields specified in `update_mask`."""

    @abc.abstractmethod
    def DeleteRun(
        self,
        request: sift.runs.v2.runs_pb2.DeleteRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.DeleteRunResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.DeleteRunResponse]]:
        """Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`."""

    @abc.abstractmethod
    def StopRun(
        self,
        request: sift.runs.v2.runs_pb2.StopRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.StopRunResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.StopRunResponse]]:
        """Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`."""

    @abc.abstractmethod
    def CreateAutomaticRunAssociationForAssets(
        self,
        request: sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsResponse, collections.abc.Awaitable[sift.runs.v2.runs_pb2.CreateAutomaticRunAssociationForAssetsResponse]]:
        """Associates a list of assets with a given run."""

def add_RunServiceServicer_to_server(servicer: RunServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
