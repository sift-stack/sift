"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.channel_schemas.v1.channel_schemas_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ChannelSchemaServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateChannelSchema: grpc.UnaryUnaryMultiCallable[
        sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaRequest,
        sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaResponse,
    ]
    """Create a channel schema"""

    BatchCreateChannelSchemas: grpc.UnaryUnaryMultiCallable[
        sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasRequest,
        sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasResponse,
    ]
    """Create a batch of channel schemas"""

class ChannelSchemaServiceAsyncStub:
    CreateChannelSchema: grpc.aio.UnaryUnaryMultiCallable[
        sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaRequest,
        sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaResponse,
    ]
    """Create a channel schema"""

    BatchCreateChannelSchemas: grpc.aio.UnaryUnaryMultiCallable[
        sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasRequest,
        sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasResponse,
    ]
    """Create a batch of channel schemas"""

class ChannelSchemaServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateChannelSchema(
        self,
        request: sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaResponse, collections.abc.Awaitable[sift.channel_schemas.v1.channel_schemas_pb2.CreateChannelSchemaResponse]]:
        """Create a channel schema"""

    @abc.abstractmethod
    def BatchCreateChannelSchemas(
        self,
        request: sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasResponse, collections.abc.Awaitable[sift.channel_schemas.v1.channel_schemas_pb2.BatchCreateChannelSchemasResponse]]:
        """Create a batch of channel schemas"""

def add_ChannelSchemaServiceServicer_to_server(servicer: ChannelSchemaServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
