"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import sift.users.v2.users_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UserServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    UpdateUserOrganizationActive: grpc.UnaryUnaryMultiCallable[
        sift.users.v2.users_pb2.UpdateUserOrganizationActiveRequest,
        sift.users.v2.users_pb2.UpdateUserOrganizationActiveResponse,
    ]
    """Used to toggle a user's active status within their organization."""

    GetUser: grpc.UnaryUnaryMultiCallable[
        sift.users.v2.users_pb2.GetUserRequest,
        sift.users.v2.users_pb2.GetUserResponse,
    ]
    """Retrieves a user object."""

class UserServiceAsyncStub:
    UpdateUserOrganizationActive: grpc.aio.UnaryUnaryMultiCallable[
        sift.users.v2.users_pb2.UpdateUserOrganizationActiveRequest,
        sift.users.v2.users_pb2.UpdateUserOrganizationActiveResponse,
    ]
    """Used to toggle a user's active status within their organization."""

    GetUser: grpc.aio.UnaryUnaryMultiCallable[
        sift.users.v2.users_pb2.GetUserRequest,
        sift.users.v2.users_pb2.GetUserResponse,
    ]
    """Retrieves a user object."""

class UserServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def UpdateUserOrganizationActive(
        self,
        request: sift.users.v2.users_pb2.UpdateUserOrganizationActiveRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.users.v2.users_pb2.UpdateUserOrganizationActiveResponse, collections.abc.Awaitable[sift.users.v2.users_pb2.UpdateUserOrganizationActiveResponse]]:
        """Used to toggle a user's active status within their organization."""

    @abc.abstractmethod
    def GetUser(
        self,
        request: sift.users.v2.users_pb2.GetUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[sift.users.v2.users_pb2.GetUserResponse, collections.abc.Awaitable[sift.users.v2.users_pb2.GetUserResponse]]:
        """Retrieves a user object."""

def add_UserServiceServicer_to_server(servicer: UserServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
