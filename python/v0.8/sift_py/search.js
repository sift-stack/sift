window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"sift_py": {"fullname": "sift_py", "modulename": "sift_py", "kind": "module", "doc": "<p><code>sift_py</code> is a Python module built on top of Sift's protocol buffers to ergonomically interface with\nSift's gRPC API, especially with regard to data ingestion and and rule evaluation. If there are any\nwords or concepts that you find yourself needing to familiarize yourself with, be sure to visit the\nofficial <a href=\"https://docs.siftstack.com/glossary\">Sift documentation</a>.</p>\n\n<ul>\n<li><a href=\"#introduction\">Introduction</a>\n<ul>\n<li><a href=\"#quickstart\">Quickstart</a></li>\n</ul></li>\n<li><a href=\"#telemetry-config\">Telemetry Config</a>\n<ul>\n<li><a href=\"#telemetry-config-from-yaml\">Telemetry Config from YAML</a></li>\n<li><a href=\"#telemetry-config-yaml-schema\">Telemetry Config YAML Schema</a></li>\n<li><a href=\"#named-expression-modules\">Named Expression Modules</a></li>\n</ul></li>\n<li><a href=\"#updating-a-telemetry-config\">Updating a Telemetry Config</a>\n<ul>\n<li><a href=\"#ingestion-client-key\">Ingestion Client Key</a></li>\n</ul></li>\n<li><a href=\"#ingestion-service\">Ingestion Service</a>\n<ul>\n<li><a href=\"#sending-data-to-sift\">Sending data to Sift</a></li>\n</ul></li>\n<li><a href=\"#ingestion-performance\">Ingestion Performance</a>\n<ul>\n<li><a href=\"#buffered-ingestion\">Buffered Ingestion</a></li>\n</ul></li>\n<li><a href=\"#downloading-telemetry\">Downloading Telemetry</a></li>\n<li><a href=\"#file-attachments\">File attachments</a></li>\n<li><a href=\"#more-examples\">More Examples</a></li>\n</ul>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>The two fundamental components of this module are the following:</p>\n\n<ul>\n<li><code>sift_py.ingestion.config.telemetry.TelemetryConfig</code> (telemetry config)</li>\n<li><code>sift_py.ingestion.service.IngestionService</code> (ingestion service)</li>\n</ul>\n\n<p>The telemetry config defines the schema of your telemetry. It is where you will declare your asset, channels and their components,\nflows, and rules:</p>\n\n<ul>\n<li><code>sift_py.ingestion.channel.ChannelConfig</code></li>\n<li><code>sift_py.ingestion.rule.config.RuleConfig</code></li>\n<li><code>sift_py.ingestion.flow.FlowConfig</code></li>\n</ul>\n\n<p>Once you have a telemetry config instantiated, you can then proceed to instantiate <code>sift_py.ingestion.service.IngestionService</code>\nwhich is what's used to actually send Data to Sift.</p>\n\n<h3 id=\"quickstart\">Quickstart</h3>\n\n<p>The following example demonstrates how to create a simple telemetry config for an asset with a single channel\nand a single rule, afterwhich we'll send a single data point to Sift for that channel.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">datetime</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timezone</span>\n\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.channel</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelConfig</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelDataType</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelEnumType</span><span class=\"p\">,</span>\n    <span class=\"n\">double_value</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">IngestionService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.config.telemetry</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">FlowConfig</span><span class=\"p\">,</span> <span class=\"n\">TelemetryConfig</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.rule.config</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">RuleActionCreateDataReviewAnnotation</span><span class=\"p\">,</span>\n    <span class=\"n\">RuleConfig</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a channel config</span>\n<span class=\"n\">temperature_channel</span> <span class=\"o\">=</span> <span class=\"n\">ChannelConfig</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;temperature&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">component</span><span class=\"o\">=</span><span class=\"s2\">&quot;thruster&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">ChannelDataType</span><span class=\"o\">.</span><span class=\"n\">DOUBLE</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;temperature of thruster&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;Kelvin&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a rule config referencing the above channel</span>\n<span class=\"n\">overheating_rule</span> <span class=\"o\">=</span> <span class=\"n\">RuleConfig</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;overheating&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;Notify Ripley if thrusters get too hot&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"s1\">&#39;$1 &gt; 400&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">channel_references</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;channel_reference&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$1&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;channel_config&quot;</span><span class=\"p\">:</span> <span class=\"n\">temperature_channel</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">RuleActionCreateDataReviewAnnotation</span><span class=\"p\">(</span>\n        <span class=\"n\">assignee</span><span class=\"o\">=</span><span class=\"s2\">&quot;ellen.ripley@weylandcorp.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;warning&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;thruster&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">),</span>\n\n<span class=\"c1\"># Creating the telemetry config using the rules and channels</span>\n<span class=\"c1\"># described above</span>\n<span class=\"n\">telemetry_config</span> <span class=\"o\">=</span> <span class=\"n\">TelemetryConfig</span><span class=\"p\">(</span>\n    <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NostromoLV426&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">ingestion_client_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;nostromo_lv_426&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">rules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">overheating_rule</span><span class=\"p\">],</span>\n    <span class=\"n\">flows</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">FlowConfig</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;temperature_reading&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">temperature_channel</span><span class=\"p\">],</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create a gRPC transport channel configured specifically for the Sift API</span>\n<span class=\"n\">sift_channel_config</span> <span class=\"o\">=</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">SIFT_BASE_URI</span><span class=\"p\">,</span> <span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"n\">SIFT_API_KEY</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">use_sift_channel</span><span class=\"p\">(</span><span class=\"n\">sift_channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Create ingestion service using the telemetry config we just created</span>\n    <span class=\"n\">ingestion_service</span> <span class=\"o\">=</span> <span class=\"n\">IngestionService</span><span class=\"p\">(</span>\n        <span class=\"n\">channel</span><span class=\"p\">,</span>\n        <span class=\"n\">telemetry_config</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Send data to Sift for the &#39;temperature_reading&#39; flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;temperature_reading&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;temperature&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;thruster&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">327</span><span class=\"p\">)</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<h2 id=\"telemetry-config\">Telemetry Config</h2>\n\n<p>There are currently two methods with which to initialize a telemetry config:</p>\n\n<ul>\n<li><code>sift_py.ingestion.config.telemetry.TelemetryConfig.__init__</code></li>\n<li><code>sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml</code></li>\n</ul>\n\n<p>Both are equally valid and your choice to use one or the other largely depends on you and your team's preferred\nworkflow. The following sections will cover each initialization method.</p>\n\n<h3 id=\"telemetry-config-from-yaml\">Telemetry Config From Yaml</h3>\n\n<p>While the telemetry config can be declaratively initialized using using the telemetry config's initializer, <code>sift_py</code> also exposes an API\nto initialize a telemetry config from a YAML file. The following is a simple demonstration.</p>\n\n<p>Say that we had the following project structure:</p>\n\n<pre><code> example\n \u251c\u2500 telemetry_configs\n \u2502  \u2514\u2500 nostromo_lv_426.yml\n \u251c\u2500 ping.py\n \u251c\u2500 telemetry_config.py\n \u2514\u2500 requirements.txt\n\n</code></pre>\n\n<p>If our telemetry config is defined in the YAML file, <code>nostromo_lv_426.yml</code>, one of the ways in which\nwe might read that YAML file in as a <code>sift_py.ingestion.config.telemetry.TelemetryConfig</code> is to do the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pathlib</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">TELEMETRY_CONFIGS_DIR</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;telemetry_configs&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">nostromos_lv_426</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TelemetryConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">telemetry_config_path</span> <span class=\"o\">=</span> <span class=\"n\">TELEMETRY_CONFIGS_DIR</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;nostromo_lv_426.yml&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">TelemetryConfig</span><span class=\"o\">.</span><span class=\"n\">try_from_yaml</span><span class=\"p\">(</span><span class=\"n\">telemetry_config_path</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>As for the contents of the <code>nostromo_lv_426.yml</code>, file it might look something like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">asset_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">NostromoLV426</span>\n<span class=\"nt\">ingestion_client_key</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">nostromo_lv_426</span>\n\n<span class=\"nt\">channels</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">temperature_channel</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nl\">&amp;temperature_channel</span>\n<span class=\"w\">    </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">temperature</span>\n<span class=\"w\">    </span><span class=\"nt\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">thruster</span>\n<span class=\"w\">    </span><span class=\"nt\">data_type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">double</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">temperature of the thruster</span>\n<span class=\"w\">    </span><span class=\"nt\">unit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Kelvin</span>\n\n<span class=\"nt\">rules</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">overheating</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Notify Ripley if thrusters get too hot</span>\n<span class=\"w\">    </span><span class=\"nt\">expression</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">$1 &gt; 400</span>\n<span class=\"w\">    </span><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*temperature_channel</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">review</span>\n<span class=\"w\">    </span><span class=\"nt\">assignee</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">ellen.ripley@weylandcorp.com</span>\n<span class=\"w\">    </span><span class=\"nt\">tags</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">warning</span>\n<span class=\"w\">        </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">thruster</span>\n\n<span class=\"nt\">flows</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">temperature_reading</span>\n<span class=\"w\">    </span><span class=\"nt\">channels</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">&lt;&lt;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*temperature_channel</span>\n</code></pre>\n</div>\n\n<p>And with the telemetry config that we just created, we can then proceed to create an ingestion service\nand begin data ingestion.</p>\n\n<h3 id=\"telemetry-config-yaml-schema\">Telemetry Config YAML Schema</h3>\n\n<p>The following is the formal schema for a valid telemetry config in YAML. You can also see the <code>sift_py.ingestion.ingestion.config.yaml.spec</code> module\nto see the schema in the for of Python classes.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">schema</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">|</span>\n<span class=\"w\">    </span><span class=\"no\">A formal specification to create a telemetry config which is used</span>\n<span class=\"w\">    </span><span class=\"no\">to stream data and evaluate rules using Sift&#39;s gRPC API.</span>\n\n<span class=\"w\">  </span><span class=\"nt\">asset_name</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">The name of the asset to telemeter.</span>\n\n<span class=\"w\">  </span><span class=\"nt\">ingestion_client_key</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">User-defined string-key that uniquely identifies this telemetry config.</span>\n\n<span class=\"w\">  </span><span class=\"nt\">organization_id</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Optional ID of user&#39;s organization. Required if user belongs to multiple organizations.</span>\n\n<span class=\"w\">  </span><span class=\"nt\">channels</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Sensors that send the data.</span>\n<span class=\"w\">    </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">      </span><span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">name</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the channel.</span>\n<span class=\"w\">        </span><span class=\"nt\">description</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Description of the channel.</span>\n<span class=\"w\">        </span><span class=\"nt\">unit</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Unit of measurement.</span>\n<span class=\"w\">        </span><span class=\"nt\">component</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the component that the channel belongs to.</span>\n<span class=\"w\">        </span><span class=\"nt\">data_type</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">enum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"s\">&quot;double&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;string&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;enum&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;bit_field&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;bool&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;float&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;int32&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;int64&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;uint32&quot;</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;uint64&quot;</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Type of the data associated with the channel.</span>\n<span class=\"w\">        </span><span class=\"nt\">enum_types</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">          </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">            </span><span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"w\">              </span><span class=\"nt\">name</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">                </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the enum type.</span>\n<span class=\"w\">              </span><span class=\"nt\">key</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">integer</span>\n<span class=\"w\">                </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Key of the enum type.</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Required if `data_type` is `enum`.</span>\n<span class=\"w\">        </span><span class=\"nt\">bit_field_elements</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Required if `data_type` is `bit_field`.</span>\n<span class=\"w\">          </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">            </span><span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"w\">              </span><span class=\"nt\">name</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">                </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the bit-field element.</span>\n<span class=\"w\">              </span><span class=\"nt\">index</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">integer</span>\n<span class=\"w\">                </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Index of the bit-field element.</span>\n<span class=\"w\">              </span><span class=\"nt\">bit_count</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">integer</span>\n<span class=\"w\">                </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Bit count of the bit-field element.</span>\n\n<span class=\"w\">  </span><span class=\"nt\">rules</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Rules that, when evaluated to a true, will perform some sort of action.</span>\n<span class=\"w\">    </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">      </span><span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">name</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the rule.</span>\n<span class=\"w\">        </span><span class=\"nt\">description</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Description of the rule.</span>\n<span class=\"w\">        </span><span class=\"nt\">expression</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">oneOf</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">              </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">A string expression defining the rule logic.</span>\n<span class=\"w\">            </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">              </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">A reference to a named expression.</span>\n<span class=\"w\">              </span><span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"w\">                </span><span class=\"nt\">name</span><span class=\"p\">:</span>\n<span class=\"w\">                  </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">                  </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the named expression.</span>\n<span class=\"w\">        </span><span class=\"nt\">type</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">enum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">phase</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">review</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Determines the action to perform if a rule gets evaluated to true.</span>\n<span class=\"w\">        </span><span class=\"nt\">assignee</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">If &#39;type&#39; is &#39;review&#39;, determines who to notify. Expects an email.</span>\n<span class=\"w\">        </span><span class=\"nt\">tags</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">          </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Tags to associate with the rule.</span>\n<span class=\"w\">        </span><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">A list of channel references that map to an actual channel. Use YAML anchors to reference channels.</span>\n<span class=\"w\">          </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">            </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">|</span>\n<span class=\"w\">              </span><span class=\"no\">Key-value pair of string to channel. The channel should be a YAML anchor to a previously declared channel</span>\n<span class=\"w\">              </span><span class=\"no\">in the top-level &#39;channels&#39; property. The key should take the form of &#39;$1&#39;, &#39;$2&#39;, &#39;$11&#39;, and do on. In YAML</span>\n<span class=\"w\">              </span><span class=\"no\">it would look something like this:</span>\n\n<span class=\"w\">              </span><span class=\"no\">------------------------------------</span>\n<span class=\"w\">              </span><span class=\"no\">channel_references:</span>\n<span class=\"w\">                </span><span class=\"no\">- $1: *vehicle_state_channel</span>\n<span class=\"w\">                </span><span class=\"no\">- $2: *voltage_channel</span>\n<span class=\"w\">              </span><span class=\"no\">------------------------------------</span>\n<span class=\"w\">        </span><span class=\"nt\">sub_expressions</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">A list of sub-expressions which is a mapping of place-holders to sub-expressions.</span>\n<span class=\"w\">          </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">            </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">|</span>\n<span class=\"w\">              </span><span class=\"no\">A sub-expression is made up of two components: A reference and the actual sub-expression. The sub-expression reference is</span>\n<span class=\"w\">              </span><span class=\"no\">a string with a &quot;$&quot; prepended to another string comprised of characters in the following character set: `[a-zA-Z0-9_]`.</span>\n<span class=\"w\">              </span><span class=\"no\">This reference should be mapped to the actual sub-expression. For example, say you have kinematic equations in `kinematics.yml`,</span>\n<span class=\"w\">              </span><span class=\"no\">and the equation you&#39;re interested in using looks like the following:</span>\n\n<span class=\"w\">              </span><span class=\"no\">------------------------------------</span>\n<span class=\"w\">              </span><span class=\"no\">kinetic_energy_gt:</span>\n<span class=\"w\">                </span><span class=\"no\">0.5 * $mass * $1 * $1 &gt; $threshold</span>\n<span class=\"w\">              </span><span class=\"no\">------------------------------------</span>\n\n<span class=\"w\">              </span><span class=\"no\">To properly use `kinetic_energy_gt` in your rule, it would look like the following:</span>\n\n<span class=\"w\">              </span><span class=\"no\">------------------------------------</span>\n<span class=\"w\">              </span><span class=\"no\">rules:</span>\n<span class=\"w\">                </span><span class=\"no\">- name: kinetic_energy</span>\n<span class=\"w\">                  </span><span class=\"no\">description: Tracks high energy output while in motion</span>\n<span class=\"w\">                  </span><span class=\"no\">type: review</span>\n<span class=\"w\">                  </span><span class=\"no\">assignee: bob@example.com</span>\n<span class=\"w\">                  </span><span class=\"no\">expression:</span>\n<span class=\"w\">                    </span><span class=\"no\">name: kinetic_energy_gt</span>\n<span class=\"w\">                  </span><span class=\"no\">channel_references:</span>\n<span class=\"w\">                    </span><span class=\"no\">- $1: *velocity_channel</span>\n<span class=\"w\">                  </span><span class=\"no\">sub_expressions:</span>\n<span class=\"w\">                    </span><span class=\"no\">- $mass: 10</span>\n<span class=\"w\">                    </span><span class=\"no\">- $threshold: 470</span>\n<span class=\"w\">                  </span><span class=\"no\">tags:</span>\n<span class=\"w\">                      </span><span class=\"no\">- nostromo</span>\n<span class=\"w\">              </span><span class=\"no\">------------------------------------</span>\n<span class=\"w\">  </span><span class=\"nt\">flows</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">A list of named groups of channels that send data together.</span>\n<span class=\"w\">    </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">      </span><span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">name</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">string</span>\n<span class=\"w\">          </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Name of the flow.</span>\n<span class=\"w\">        </span><span class=\"nt\">channels</span><span class=\"p\">:</span>\n<span class=\"w\">          </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">array</span>\n<span class=\"w\">          </span><span class=\"nt\">items</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">object</span>\n<span class=\"w\">            </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">|</span>\n<span class=\"w\">              </span><span class=\"no\">List of channels included in the flow. Should be a YAML anchor from a previously declared channel</span>\n<span class=\"w\">              </span><span class=\"no\">in the top-level &#39;channels&#39; property.</span>\n</code></pre>\n</div>\n\n<h2 id=\"named-expression-modules\">Named Expression Modules</h2>\n\n<p>Often times you may find yourself needing to re-using more complex rule expressions across different telemetry\nconfigs. If this is the case you might consider leveraging <code>named expressions</code> which allow you to reference the name\nof an expression defined in another YAML file rather than defining it repeatedly across different telemetry configs.</p>\n\n<p>As an example, say this is our current rule in our YAML telemetry config:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">rules</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy_gt</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Tracks high energy output while in motion</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">review</span>\n<span class=\"w\">    </span><span class=\"nt\">assignee</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">cthulhu@rlyeh.com</span>\n<span class=\"w\">    </span><span class=\"nt\">expression</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0.5 * 10 * $1 * $1 &gt; 470</span>\n<span class=\"w\">    </span><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*velocity_channel</span>\n</code></pre>\n</div>\n\n<p>Instead of repeatedly writing that kinetic energy expression across different telemetry configs, you can move that expression\nover to it's own named expression module YAML file which we'll call <code>kinematics.yml</code>, and then reference it by name in the\ntelemetry configs:</p>\n\n<p><code>kinematics.yml</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">kinetic_energy_gt</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"l l-Scalar l-Scalar-Plain\">0.5 * $mass * $1 * $1 &gt; $threshold</span>\n<span class=\"nt\">rod_torque_gt</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"l l-Scalar l-Scalar-Plain\">(1 / 12) * $mass * $rod_length * $rod_length * $1</span>\n</code></pre>\n</div>\n\n<p><code>telemetry_config.py</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">rules</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Tracks high energy output while in motion</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">review</span>\n<span class=\"w\">    </span><span class=\"nt\">expression</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy_gt</span>\n<span class=\"w\">    </span><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*velocity_channel</span>\n<span class=\"w\">    </span><span class=\"nt\">sub_expressions</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">10</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$threshold</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">470</span>\n</code></pre>\n</div>\n\n<p>In order for the telemetry configs to load in the named expression modules at run-time, all you need to do is provide the path\nto the named expression module(s) wherever it may be. For example, given the following project structure:</p>\n\n<pre><code> example\n \u251c\u2500 telemetry_configs\n \u2502  \u2514\u2500 nostromo_lv_426.yml\n \u251c\u2500 ping.py\n \u251c\u2500 telemetry_config.py\n \u2514\u2500 expression_modules\n    \u251c\u2500 string.yml\n    \u2514\u2500 kinematics.yml\n</code></pre>\n\n<p>Here is how we might load our telemetry config:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pathlib</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">TelemetryConfig</span>\n\n<span class=\"n\">TELEMETRY_CONFIGS_DIR</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;telemetry_configs&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">EXPRESSION_MODULES_DIR</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;expression_modules&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">nostromos_lv_426</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TelemetryConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">telemetry_config_path</span> <span class=\"o\">=</span> <span class=\"n\">TELEMETRY_CONFIGS_DIR</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;nostromo_lv_426.yml&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">TelemetryConfig</span><span class=\"o\">.</span><span class=\"n\">try_from_yaml</span><span class=\"p\">(</span>\n        <span class=\"n\">telemetry_config_path</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">EXPRESSION_MODULES_DIR</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;kinematics.yml&quot;</span><span class=\"p\">),</span>\n            <span class=\"n\">EXPRESSION_MODULES_DIR</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">&quot;string.yml&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"updating-a-telemetry-config\">Updating a Telemetry Config</h2>\n\n<p>The following section covers the situation in which you have an existing telemetry config that you would like to edit\nfor future telemetry and how to use the <code>ingestion_client_key</code>.</p>\n\n<h3 id=\"ingestion-client-key\">Ingestion Client Key</h3>\n\n<p>A <code>sift_py.ingestion.config.telemetry.TelemetryConfig</code> contains a field called <code>ingestion_client_key</code>\nwhich is used by Sift to uniquely identify an existing telemetry config for an asset. For a given telemetry config\nyou are free to make the following changes and Sift will be able to pick it up without changing the <code>ingestion_client_key</code>:</p>\n\n<ul>\n<li>Adding new channels</li>\n<li>Removing existing channels (Need to also remove channel reference in the flow)</li>\n<li>Adding new flows</li>\n<li>Removing existing flows</li>\n<li>Adding new rules</li>\n<li>Updating existing rules</li>\n</ul>\n\n<p>These can even be done on the fly at run-time.</p>\n\n<p>The following changes, however, would require you to also update the <code>ingestion_client_key</code>, otherwise an exception will be raised\nwhen a <code>sift_py.ingestion.service.IngestionService</code> is initialized.</p>\n\n<ul>\n<li>Updating an existing channel</li>\n<li>Adding a new channel to an existing flow</li>\n</ul>\n\n<h2 id=\"ingestion-service\">Ingestion Service</h2>\n\n<p>As mentioned previously, whereas a telemetry config defines the schema of your telemetry,\n<code>sift_py.ingestion.service.IngestionService</code> is what's actually responsible for sending your data to Sift.</p>\n\n<p>The two methods most folks will use to send data to Sift are the following:</p>\n\n<ul>\n<li><code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code></li>\n<li><code>sift_py.ingestion.service.IngestionService.ingest_flows</code></li>\n</ul>\n\n<p>Visit the function definitions to understand the differences between each.</p>\n\n<p>Once you have generated a request using either of those methods\ndata is then sent to Sift using <code>sift_py.ingestion.service.IngestionService.ingest</code>.\nThe following are some examples illustrating generating data ingestion requests and sending them to Sift.</p>\n\n<h3 id=\"sending-data-to-sift\">Sending Data to Sift</h3>\n\n<p>Suppose we have the following telemetry config with four configured instances of <code>sift_py.ingestion.flow.FlowConfig</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">nostromos_lv_426</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TelemetryConfig</span><span class=\"p\">:</span>\n    <span class=\"n\">log_channel</span> <span class=\"o\">=</span> <span class=\"n\">ChannelConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;log&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">ChannelDataType</span><span class=\"o\">.</span><span class=\"n\">STRING</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;asset logs&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">velocity_channel</span> <span class=\"o\">=</span> <span class=\"n\">ChannelConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">ChannelDataType</span><span class=\"o\">.</span><span class=\"n\">DOUBLE</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;speed&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;Miles Per Hour&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">component</span><span class=\"o\">=</span><span class=\"s2\">&quot;mainmotor&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">voltage_channel</span> <span class=\"o\">=</span> <span class=\"n\">ChannelConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">ChannelDataType</span><span class=\"o\">.</span><span class=\"n\">INT_32</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage at source&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;Volts&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">vehicle_state_channel</span> <span class=\"o\">=</span> <span class=\"n\">ChannelConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;vehicle_state&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">ChannelDataType</span><span class=\"o\">.</span><span class=\"n\">ENUM</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;vehicle state&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">enum_types</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">ChannelEnumType</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Accelerating&quot;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n            <span class=\"n\">ChannelEnumType</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Decelerating&quot;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">ChannelEnumType</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stopped&quot;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">gpio_channel</span> <span class=\"o\">=</span> <span class=\"n\">ChannelConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">ChannelDataType</span><span class=\"o\">.</span><span class=\"n\">BIT_FIELD</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;on/off values for pins on gpio&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">bit_field_elements</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;12v&quot;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bit_count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;charge&quot;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bit_count</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;led&quot;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">bit_count</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n            <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;heater&quot;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">bit_count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">TelemetryConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NostromoLV426&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">ingestion_client_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;nostromo_lv_426&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">flows</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">FlowConfig</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"n\">velocity_channel</span><span class=\"p\">,</span>\n                    <span class=\"n\">voltage_channel</span><span class=\"p\">,</span>\n                    <span class=\"n\">vehicle_state_channel</span><span class=\"p\">,</span>\n                    <span class=\"n\">gpio_channel</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">FlowConfig</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">voltage_channel</span><span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">FlowConfig</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;gpio_channel&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">gpio_channel</span><span class=\"p\">],</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">FlowConfig</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">log_channel</span><span class=\"p\">]),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The following is an example of ingesting data for each flow using <code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">time</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">datetime</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timezone</span>\n\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.channel</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelConfig</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelDataType</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelEnumType</span><span class=\"p\">,</span>\n    <span class=\"n\">bit_field_value</span><span class=\"p\">,</span>\n    <span class=\"n\">double_value</span><span class=\"p\">,</span>\n    <span class=\"n\">enum_value</span><span class=\"p\">,</span>\n    <span class=\"n\">int32_value</span><span class=\"p\">,</span>\n    <span class=\"n\">string_value</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">IngestionService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.config.telemetry</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">FlowConfig</span><span class=\"p\">,</span> <span class=\"n\">TelemetryConfig</span>\n\n\n<span class=\"n\">telemetry_config</span> <span class=\"o\">=</span> <span class=\"n\">nostromos_lv_426</span><span class=\"p\">()</span>\n\n<span class=\"n\">sift_channel_config</span> <span class=\"o\">=</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">base_uri</span><span class=\"p\">,</span> <span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"n\">apikey</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">use_sift_channel</span><span class=\"p\">(</span><span class=\"n\">sift_channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">ingestion_service</span> <span class=\"o\">=</span> <span class=\"n\">IngestionService</span><span class=\"p\">(</span>\n        <span class=\"n\">channel</span><span class=\"p\">,</span>\n        <span class=\"n\">telemetry_config</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Send data for the readings flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mainmotor&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">int32_value</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;vehicle_state&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">enum_value</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">bit_field_value</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;00001001&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Send partial data for the readings flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mainmotor&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">bit_field_value</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;00001001&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Send partial data for the logs flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">string_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;INFO: some message&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Send data for both logs and readings</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mainmotor&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">int32_value</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;vehicle_state&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">enum_value</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">bit_field_value</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;00001001&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n                <span class=\"p\">},</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">string_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;INFO: some message&quot;</span><span class=\"p\">)</span>\n                <span class=\"p\">},</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Alternatively, you may also use <code>sift_py.ingestion.service.IngestionService.ingest_flows</code>, but be sure\nto read the documentation for that method to understand how to leverage it correctly. Unlike\n<code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code>, it will not perform any client-side validations.\nThis is useful when performance is critical. Do note, however, that the client-side validations done in <code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code>\nare pretty minimal and should not incur noticeable overhead.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">time</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">datetime</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timezone</span>\n\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.channel</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelConfig</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelDataType</span><span class=\"p\">,</span>\n    <span class=\"n\">ChannelEnumType</span><span class=\"p\">,</span>\n    <span class=\"n\">bit_field_value</span><span class=\"p\">,</span>\n    <span class=\"n\">empty_value</span><span class=\"p\">,</span>\n    <span class=\"n\">double_value</span><span class=\"p\">,</span>\n    <span class=\"n\">enum_value</span><span class=\"p\">,</span>\n    <span class=\"n\">int32_value</span><span class=\"p\">,</span>\n    <span class=\"n\">string_value</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">IngestionService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.ingestion.config.telemetry</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">FlowConfig</span><span class=\"p\">,</span> <span class=\"n\">TelemetryConfig</span>\n\n\n<span class=\"n\">telemetry_config</span> <span class=\"o\">=</span> <span class=\"n\">nostromos_lv_426</span><span class=\"p\">()</span>\n\n<span class=\"n\">sift_channel_config</span> <span class=\"o\">=</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">base_uri</span><span class=\"p\">,</span> <span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"n\">apikey</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">use_sift_channel</span><span class=\"p\">(</span><span class=\"n\">sift_channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">ingestion_service</span> <span class=\"o\">=</span> <span class=\"n\">IngestionService</span><span class=\"p\">(</span>\n        <span class=\"n\">channel</span><span class=\"p\">,</span>\n        <span class=\"n\">telemetry_config</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Send data for the readings flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n            <span class=\"n\">int32_value</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n            <span class=\"n\">enum_value</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"n\">bit_field_value</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;00001001&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Send partial data for the readings flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n            <span class=\"n\">empty_value</span><span class=\"p\">(),</span>\n            <span class=\"n\">empty_value</span><span class=\"p\">(),</span>\n            <span class=\"n\">bit_field_value</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;00001001&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Send data for logs flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">ingest_flows</span><span class=\"p\">({</span>\n        <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"n\">string_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;INFO: some message&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Send data for both logs and readings flow</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">ingest_flows</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n                <span class=\"n\">int32_value</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n                <span class=\"n\">enum_value</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                <span class=\"n\">bit_field_value</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;00001001&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"n\">string_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;INFO: some message&quot;</span><span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"ingestion-performance\">Ingestion Performance</h2>\n\n<p>Depending on your ingestion setup there are some very common Python gotchas as it relates to gRPC that\nhinders performance. The following are some examples of things you may want to avoid\nwhen ingesting data into Sift:</p>\n\n<ol>\n<li>Avoid ingesting a high volume of data points in a hot loop. Prefer to ingest the data as a batch so that\nserializing all outgoing requests can happen in one-fell swoop.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Avoid this:</span>\n<span class=\"k\">for</span> <span class=\"n\">flow</span> <span class=\"ow\">in</span> <span class=\"n\">flows</span><span class=\"p\">:</span>\n    <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"n\">flow</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Do this:</span>\n<span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">flows</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ol start=\"2\">\n<li>Avoid sending too much data at once, otherwise you may encounter CPU-bound bottlenecks caused by\nserializing a large amount of messages.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Avoid this:</span>\n<span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">a_very_large_amount_of_flows</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>To avoid having to deal with these pitfalls, prefer to leverage buffered ingestion.</p>\n\n<h3 id=\"buffered-ingestion\">Buffered Ingestion</h3>\n\n<p><code>sift_py</code> offers an API to automatically buffer requests and send them in batches when the\nbuffer threshold is met. This ensures the following:</p>\n\n<ul>\n<li>You are not serializing, streaming, serializing, streaming, and so on, one record at a time.</li>\n<li>You are not spending too much time serializing a large amount of requests, and likewise,\nspending too much time streaming a high volume of messages.</li>\n</ul>\n\n<p>This API is available via the following:</p>\n\n<ul>\n<li><code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code></li>\n</ul>\n\n<p>The buffered ingestion mechanism simply handles the buffering logic and streams the data only\nafter the buffer threshold is met. The following is an example of how it might be used:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Defaults to a buffer size of `sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE` requests.</span>\n<span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lots_of_flows</span><span class=\"p\">)</span>\n    <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lots_more_flows</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Custom buffer size of 750 requests</span>\n<span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">(</span><span class=\"mi\">750</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lots_of_flows</span><span class=\"p\">)</span>\n    <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lots_more_flows</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Once the with-block ends, the remaining requests will be flushed from the buffer automatically,\nbut you may manually flush as well:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lots_of_flows</span><span class=\"p\">)</span>\n    <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Visit the <code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code> function definition\nfor further details.</p>\n\n<h2 id=\"downloading-telemetry\">Downloading Telemetry</h2>\n\n<p>To download your telemetry locally you'll want to make use of the <code>sift_py.data</code> module. Them module-level documentation\ncontains more details, but here is an example script demonstrating how to download data for multiple channels, putting them\ninto a <code>pandas</code> data frame, and writing the results out to a CSV:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">functools</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data.query</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">ChannelQuery</span><span class=\"p\">,</span> <span class=\"n\">DataQuery</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_async_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DataService</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">channel_demo</span><span class=\"p\">():</span>\n    <span class=\"n\">channel_config</span><span class=\"p\">:</span> <span class=\"n\">SiftChannelConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my-key&quot;</span>\n        <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sift-uri&quot;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">use_sift_async_channel</span><span class=\"p\">(</span><span class=\"n\">channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"n\">data_service</span> <span class=\"o\">=</span> <span class=\"n\">DataService</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">DataQuery</span><span class=\"p\">(</span>\n            <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NostromoLV426&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:08.555-07:00&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:11.556-07:00&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">component</span><span class=\"o\">=</span><span class=\"s2\">&quot;mainmotors&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">data_service</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n        <span class=\"n\">data_frames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">())</span>\n            <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">(</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mainmotors.velocity&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gpio.12v&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">merged_frame</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge_asof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">),</span> <span class=\"n\">data_frames</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">merged_frame</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_csv.csv&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n\n<h2 id=\"file-attachments\">File attachments</h2>\n\n<p>See the module-level documentation for <code>sift_py.file_attachment</code> to learn uploading and downloading\nfile attachments to various entities such as runs, annotations, and annotation logs. Once file attachments\nare created they become viewable in the Sift application.</p>\n\n<h2 id=\"more-examples\">More Examples</h2>\n\n<p>For more comphrensive examples demonstrating a little bit of everything, you may\nvisit the <a href=\"https://github.com/sift-stack/sift/tree/main/python/examples\">examples directory</a> in the project repo.</p>\n"}, "sift_py._internal.cel": {"fullname": "sift_py._internal.cel", "modulename": "sift_py._internal.cel", "kind": "module", "doc": "<p>Utilities to interact with APIs that have a CEL-based interface.</p>\n"}, "sift_py._internal.cel.cel_in": {"fullname": "sift_py._internal.cel.cel_in", "modulename": "sift_py._internal.cel", "qualname": "cel_in", "kind": "function", "doc": "<p>Produces a list membership CEL expression. Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cel_in</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">]))</span>\n<span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.channel": {"fullname": "sift_py._internal.channel", "modulename": "sift_py._internal.channel", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.channel.channel_fqn": {"fullname": "sift_py._internal.channel.channel_fqn", "modulename": "sift_py._internal.channel", "qualname": "channel_fqn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">component</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.channel.get_channels": {"fullname": "sift_py._internal.channel.get_channels", "modulename": "sift_py._internal.channel", "qualname": "get_channels", "kind": "function", "doc": "<p>Queries all channels with the given filter. Filter must be a CEL expression.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel_service</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">v3</span><span class=\"o\">.</span><span class=\"n\">channels_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">ChannelServiceStub</span>,</span><span class=\"param\">\t<span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">page_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">v3</span><span class=\"o\">.</span><span class=\"n\">channels_pb2</span><span class=\"o\">.</span><span class=\"n\">Channel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.convert": {"fullname": "sift_py._internal.convert", "modulename": "sift_py._internal.convert", "kind": "module", "doc": "<p>Utilities for type-conversion and type-casting.</p>\n"}, "sift_py._internal.convert.json": {"fullname": "sift_py._internal.convert.json", "modulename": "sift_py._internal.convert.json", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.convert.json.AsJson": {"fullname": "sift_py._internal.convert.json.AsJson", "modulename": "sift_py._internal.convert.json", "qualname": "AsJson", "kind": "class", "doc": "<p>Utility sub-types that require custom-serialization meant to be used in conjunction with the\n<code>to_json</code> function. Sub-types should implement <code>as_json</code> which should return the object that\nyou want passed to <code>json.dumps</code>.</p>\n", "bases": "abc.ABC"}, "sift_py._internal.convert.json.AsJson.as_json": {"fullname": "sift_py._internal.convert.json.AsJson.as_json", "modulename": "sift_py._internal.convert.json", "qualname": "AsJson.as_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.convert.json.to_json": {"fullname": "sift_py._internal.convert.json.to_json", "modulename": "sift_py._internal.convert.json", "qualname": "to_json", "kind": "function", "doc": "<p>Serializes <code>value</code> to a JSON string uses the <code>AsJson.as_json</code> implementation of the type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.convert.protobuf": {"fullname": "sift_py._internal.convert.protobuf", "modulename": "sift_py._internal.convert.protobuf", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"fullname": "sift_py._internal.convert.protobuf.ProtobufMessage", "modulename": "sift_py._internal.convert.protobuf", "qualname": "ProtobufMessage", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;google.protobuf.message.Message&#x27;&gt;"}, "sift_py._internal.convert.protobuf.AsProtobuf": {"fullname": "sift_py._internal.convert.protobuf.AsProtobuf", "modulename": "sift_py._internal.convert.protobuf", "qualname": "AsProtobuf", "kind": "class", "doc": "<p>Abstract base class used to create create sub-types that can be treated\nas an object that can be converted into an instance of <code>ProtobufMessage</code>.</p>\n\n<p>If there are multiple possible protobuf targets then <code>as_pb</code> may be overloaded.</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"fullname": "sift_py._internal.convert.protobuf.AsProtobuf.as_pb", "modulename": "sift_py._internal.convert.protobuf", "qualname": "AsProtobuf.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"fullname": "sift_py._internal.convert.protobuf.AsProtobuf.from_pb", "modulename": "sift_py._internal.convert.protobuf", "qualname": "AsProtobuf.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.convert.timestamp": {"fullname": "sift_py._internal.convert.timestamp", "modulename": "sift_py._internal.convert.timestamp", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"fullname": "sift_py._internal.convert.timestamp.to_pb_timestamp", "modulename": "sift_py._internal.convert.timestamp", "qualname": "to_pb_timestamp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">timestamp_pb2</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util": {"fullname": "sift_py._internal.test_util", "modulename": "sift_py._internal.test_util", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.test_util.channel": {"fullname": "sift_py._internal.test_util.channel", "modulename": "sift_py._internal.test_util.channel", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.test_util.channel.SerializingFunction": {"fullname": "sift_py._internal.test_util.channel.SerializingFunction", "modulename": "sift_py._internal.test_util.channel", "qualname": "SerializingFunction", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[typing.Any], bytes]"}, "sift_py._internal.test_util.channel.DeserializingFunction": {"fullname": "sift_py._internal.test_util.channel.DeserializingFunction", "modulename": "sift_py._internal.test_util.channel", "qualname": "DeserializingFunction", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[bytes], typing.Any]"}, "sift_py._internal.test_util.channel.DoneCallbackType": {"fullname": "sift_py._internal.test_util.channel.DoneCallbackType", "modulename": "sift_py._internal.test_util.channel", "qualname": "DoneCallbackType", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[typing.Any], NoneType]"}, "sift_py._internal.test_util.channel.RequestIterableType": {"fullname": "sift_py._internal.test_util.channel.RequestIterableType", "modulename": "sift_py._internal.test_util.channel", "qualname": "RequestIterableType", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[collections.abc.Iterable, collections.abc.AsyncIterable]"}, "sift_py._internal.test_util.channel.ResponseIterableType": {"fullname": "sift_py._internal.test_util.channel.ResponseIterableType", "modulename": "sift_py._internal.test_util.channel", "qualname": "ResponseIterableType", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;"}, "sift_py._internal.test_util.channel.MockChannel": {"fullname": "sift_py._internal.test_util.channel.MockChannel", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel", "kind": "class", "doc": "<p>Used as a mock gRPC channel</p>\n", "bases": "grpc_testing.Channel"}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"fullname": "sift_py._internal.test_util.channel.MockChannel.take_unary_unary", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.take_unary_unary", "kind": "function", "doc": "<p>Draws an RPC currently being made by the system under test.</p>\n\n<p>If the given descriptor does not identify any RPC currently being made\nby the system under test, this method blocks until the system under\ntest invokes such an RPC.</p>\n\n<p>Args:\n  method_descriptor: A descriptor.MethodDescriptor describing a\n    unary-unary RPC method.</p>\n\n<p>Returns:\n  A (invocation_metadata, request, unary_unary_channel_rpc) tuple of\n    the RPC's invocation metadata, its request, and a\n    UnaryUnaryChannelRpc with which to \"play server\" for the RPC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method_descriptor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"fullname": "sift_py._internal.test_util.channel.MockChannel.take_unary_stream", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.take_unary_stream", "kind": "function", "doc": "<p>Draws an RPC currently being made by the system under test.</p>\n\n<p>If the given descriptor does not identify any RPC currently being made\nby the system under test, this method blocks until the system under\ntest invokes such an RPC.</p>\n\n<p>Args:\n  method_descriptor: A descriptor.MethodDescriptor describing a\n    unary-stream RPC method.</p>\n\n<p>Returns:\n  A (invocation_metadata, request, unary_stream_channel_rpc) tuple of\n    the RPC's invocation metadata, its request, and a\n    UnaryStreamChannelRpc with which to \"play server\" for the RPC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method_descriptor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"fullname": "sift_py._internal.test_util.channel.MockChannel.take_stream_unary", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.take_stream_unary", "kind": "function", "doc": "<p>Draws an RPC currently being made by the system under test.</p>\n\n<p>If the given descriptor does not identify any RPC currently being made\nby the system under test, this method blocks until the system under\ntest invokes such an RPC.</p>\n\n<p>Args:\n  method_descriptor: A descriptor.MethodDescriptor describing a\n    stream-unary RPC method.</p>\n\n<p>Returns:\n  A (invocation_metadata, stream_unary_channel_rpc) tuple of the RPC's\n    invocation metadata and a StreamUnaryChannelRpc with which to \"play\n    server\" for the RPC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method_descriptor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"fullname": "sift_py._internal.test_util.channel.MockChannel.take_stream_stream", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.take_stream_stream", "kind": "function", "doc": "<p>Draws an RPC currently being made by the system under test.</p>\n\n<p>If the given descriptor does not identify any RPC currently being made\nby the system under test, this method blocks until the system under\ntest invokes such an RPC.</p>\n\n<p>Args:\n  method_descriptor: A descriptor.MethodDescriptor describing a\n    stream-stream RPC method.</p>\n\n<p>Returns:\n  A (invocation_metadata, stream_stream_channel_rpc) tuple of the RPC's\n    invocation metadata and a StreamStreamChannelRpc with which to\n    \"play server\" for the RPC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method_descriptor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"fullname": "sift_py._internal.test_util.channel.MockChannel.subscribe", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.subscribe", "kind": "function", "doc": "<p>Subscribe to this Channel's connectivity state machine.</p>\n\n<p>A Channel may be in any of the states described by ChannelConnectivity.\nThis method allows application to monitor the state transitions.\nThe typical use case is to debug or gain better visibility into gRPC\nruntime's state.</p>\n\n<p>Args:\n  callback: A callable to be invoked with ChannelConnectivity argument.\n    ChannelConnectivity describes current state of the channel.\n    The callable will be invoked immediately upon subscription\n    and again for every change to ChannelConnectivity until it\n    is unsubscribed or this Channel object goes out of scope.\n  try_to_connect: A boolean indicating whether or not this Channel\n    should attempt to connect immediately. If set to False, gRPC\n    runtime decides when to connect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span>, </span><span class=\"param\"><span class=\"n\">try_to_connect</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"fullname": "sift_py._internal.test_util.channel.MockChannel.unsubscribe", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.unsubscribe", "kind": "function", "doc": "<p>Unsubscribes a subscribed callback from this Channel's connectivity.</p>\n\n<p>Args:\n  callback: A callable previously registered with this Channel from\n  having been passed to its \"subscribe\" method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"fullname": "sift_py._internal.test_util.channel.MockChannel.unary_unary", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.unary_unary", "kind": "function", "doc": "<p>Creates a UnaryUnaryMultiCallable for a unary-unary method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None\n    is passed.\n  _registered_method: Implementation Private. A bool representing whether the method\n    is registered.</p>\n\n<p>Returns:\n  A UnaryUnaryMultiCallable value for the named unary-unary method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"fullname": "sift_py._internal.test_util.channel.MockChannel.unary_stream", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.unary_stream", "kind": "function", "doc": "<p>Creates a UnaryStreamMultiCallable for a unary-stream method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None is\n    passed.\n  _registered_method: Implementation Private. A bool representing whether the method\n    is registered.</p>\n\n<p>Returns:\n  A UnaryStreamMultiCallable value for the name unary-stream method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"fullname": "sift_py._internal.test_util.channel.MockChannel.stream_unary", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.stream_unary", "kind": "function", "doc": "<p>Creates a StreamUnaryMultiCallable for a stream-unary method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None is\n    passed.\n  _registered_method: Implementation Private. A bool representing whether the method\n    is registered.</p>\n\n<p>Returns:\n  A StreamUnaryMultiCallable value for the named stream-unary method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"fullname": "sift_py._internal.test_util.channel.MockChannel.stream_stream", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.stream_stream", "kind": "function", "doc": "<p>Creates a StreamStreamMultiCallable for a stream-stream method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None\n    is passed.\n  _registered_method: Implementation Private. A bool representing whether the method\n    is registered.</p>\n\n<p>Returns:\n  A StreamStreamMultiCallable value for the named stream-stream method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockChannel.close": {"fullname": "sift_py._internal.test_util.channel.MockChannel.close", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockChannel.close", "kind": "function", "doc": "<p>Closes this Channel and releases all resources held by it.</p>\n\n<p>Closing the Channel will immediately terminate all RPCs active with the\nChannel and it is not valid to invoke new RPCs with the Channel.</p>\n\n<p>This method is idempotent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel", "kind": "class", "doc": "<p>Enables asynchronous RPC invocation as a client.</p>\n\n<p>Channel objects implement the Asynchronous Context Manager (aka. async\nwith) type, although they are not supported to be entered and exited\nmultiple times.</p>\n", "bases": "grpc.aio._base_channel.Channel"}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.close", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.close", "kind": "function", "doc": "<p>Closes this Channel and releases all resources held by it.</p>\n\n<p>This method immediately stops the channel from executing new RPCs in\nall cases.</p>\n\n<p>If a grace period is specified, this method waits until all active\nRPCs are finished or until the grace period is reached. RPCs that haven't\nbeen terminated within the grace period are aborted.\nIf a grace period is not specified (by passing None for grace),\nall existing RPCs are cancelled immediately.</p>\n\n<p>This method is idempotent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grace</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.get_state", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.get_state", "kind": "function", "doc": "<p>Checks the connectivity state of a channel.</p>\n\n<p>This is an EXPERIMENTAL API.</p>\n\n<p>If the channel reaches a stable connectivity state, it is guaranteed\nthat the return value of this function will eventually converge to that\nstate.</p>\n\n<p>Args:\n  try_to_connect: a bool indicate whether the Channel should try to\n    connect to peer or not.</p>\n\n<p>Returns: A ChannelConnectivity object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">try_to_connect</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ChannelConnectivity</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.wait_for_state_change", "kind": "function", "doc": "<p>Waits for a change in connectivity state.</p>\n\n<p>This is an EXPERIMENTAL API.</p>\n\n<p>The function blocks until there is a change in the channel connectivity\nstate from the \"last_observed_state\". If the state is already\ndifferent, this function will return immediately.</p>\n\n<p>There is an inherent race between the invocation of\n\"Channel.wait_for_state_change\" and \"Channel.get_state\". The state can\nchange arbitrary many times during the race, so there is no way to\nobserve every state transition.</p>\n\n<p>If there is a need to put a timeout for this function, please refer to\n\"asyncio.wait_for\".</p>\n\n<p>Args:\n  last_observed_state: A grpc.ChannelConnectivity object representing\n    the last known state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">last_observed_state</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ChannelConnectivity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.channel_ready", "kind": "function", "doc": "<p>Creates a coroutine that blocks until the Channel is READY.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.unary_unary", "kind": "function", "doc": "<p>Creates a UnaryUnaryMultiCallable for a unary-unary method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None\n    is passed.\n  _registered_method: Implementation Private. Optional: A bool representing\n    whether the method is registered.</p>\n\n<p>Returns:\n  A UnaryUnaryMultiCallable value for the named unary-unary method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_channel</span><span class=\"o\">.</span><span class=\"n\">UnaryUnaryMultiCallable</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.unary_stream", "kind": "function", "doc": "<p>Creates a UnaryStreamMultiCallable for a unary-stream method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None\n    is passed.\n  _registered_method: Implementation Private. Optional: A bool representing\n    whether the method is registered.</p>\n\n<p>Returns:\n  A UnaryStreamMultiCallable value for the named unary-stream method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_channel</span><span class=\"o\">.</span><span class=\"n\">UnaryStreamMultiCallable</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.stream_unary", "kind": "function", "doc": "<p>Creates a StreamUnaryMultiCallable for a stream-unary method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None\n    is passed.\n  _registered_method: Implementation Private. Optional: A bool representing\n    whether the method is registered.</p>\n\n<p>Returns:\n  A StreamUnaryMultiCallable value for the named stream-unary method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_channel</span><span class=\"o\">.</span><span class=\"n\">StreamUnaryMultiCallable</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"fullname": "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream", "modulename": "sift_py._internal.test_util.channel", "qualname": "MockAsyncChannel.stream_stream", "kind": "function", "doc": "<p>Creates a StreamStreamMultiCallable for a stream-stream method.</p>\n\n<p>Args:\n  method: The name of the RPC method.\n  request_serializer: Optional :term:<code>serializer</code> for serializing the request\n    message. Request goes unserialized in case None is passed.\n  response_deserializer: Optional :term:<code>deserializer</code> for deserializing the\n    response message. Response goes undeserialized in case None\n    is passed.\n  _registered_method: Implementation Private. Optional: A bool representing\n    whether the method is registered.</p>\n\n<p>Returns:\n  A StreamStreamMultiCallable value for the named stream-stream method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">request_serializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_deserializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">bytes</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_registered_method</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_channel</span><span class=\"o\">.</span><span class=\"n\">StreamStreamMultiCallable</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.fn": {"fullname": "sift_py._internal.test_util.fn", "modulename": "sift_py._internal.test_util.fn", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.test_util.server_interceptor": {"fullname": "sift_py._internal.test_util.server_interceptor", "modulename": "sift_py._internal.test_util.server_interceptor", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"fullname": "sift_py._internal.test_util.server_interceptor.ServerInterceptor", "modulename": "sift_py._internal.test_util.server_interceptor", "qualname": "ServerInterceptor", "kind": "class", "doc": "<p>Affords intercepting incoming RPCs on the service-side.</p>\n", "bases": "grpc.ServerInterceptor"}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"fullname": "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept", "modulename": "sift_py._internal.test_util.server_interceptor", "qualname": "ServerInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ServicerContext</span>,</span><span class=\"param\">\t<span class=\"n\">method_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"fullname": "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service", "modulename": "sift_py._internal.test_util.server_interceptor", "qualname": "ServerInterceptor.intercept_service", "kind": "function", "doc": "<p>Intercepts incoming RPCs before handing them over to a handler.</p>\n\n<p>State can be passed from an interceptor to downstream interceptors\nvia contextvars. The first interceptor is called from an empty\ncontextvars.Context, and the same Context is used for downstream\ninterceptors and for the final handler call. Note that there are no\nguarantees that interceptors and handlers will be called from the\nsame thread.</p>\n\n<p>Args:\n  continuation: A function that takes a HandlerCallDetails and\n    proceeds to invoke the next interceptor in the chain, if any,\n    or the RPC handler lookup logic, with the call details passed\n    as an argument, and returns an RpcMethodHandler instance if\n    the RPC is considered serviced, or None otherwise.\n  handler_call_details: A HandlerCallDetails describing the RPC.</p>\n\n<p>Returns:\n  An RpcMethodHandler with which the RPC may be serviced if the\n  interceptor chooses to service this RPC, or None otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">continuation</span>, </span><span class=\"param\"><span class=\"n\">handler_call_details</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py._internal.time": {"fullname": "sift_py._internal.time", "modulename": "sift_py._internal.time", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.time.to_timestamp_nanos": {"fullname": "sift_py._internal.time.to_timestamp_nanos", "modulename": "sift_py._internal.time", "qualname": "to_timestamp_nanos", "kind": "function", "doc": "<p>Converts a variety of time-types to a pandas timestamp which supports nano-second precision.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">timestamp_pb2</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.time.to_timestamp_pb": {"fullname": "sift_py._internal.time.to_timestamp_pb", "modulename": "sift_py._internal.time", "qualname": "to_timestamp_pb", "kind": "function", "doc": "<p>Mainly used for testing at the moment. If using this for non-testing purposes\nshould probably make this more robust and support nano-second precision.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">timestamp_pb2</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span>:</span></span>", "funcdef": "def"}, "sift_py._internal.user": {"fullname": "sift_py._internal.user", "modulename": "sift_py._internal.user", "kind": "module", "doc": "<p></p>\n"}, "sift_py._internal.user.get_active_users": {"fullname": "sift_py._internal.user.get_active_users", "modulename": "sift_py._internal.user", "qualname": "get_active_users", "kind": "function", "doc": "<p>Get active users from the user service with the given filter.\nThe filter must be a CEL expression.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">user_service</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">users_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">UserServiceStub</span>,</span><span class=\"param\">\t<span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">page_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">user_pb2</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels": {"fullname": "sift_py.calculated_channels", "modulename": "sift_py.calculated_channels", "kind": "module", "doc": "<p></p>\n"}, "sift_py.calculated_channels.config": {"fullname": "sift_py.calculated_channels.config", "modulename": "sift_py.calculated_channels.config", "kind": "module", "doc": "<p></p>\n"}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig", "kind": "class", "doc": "<p>Configuration for a calculated channel.</p>\n\n<ul>\n<li><code>name</code>: Name of the calculated channel.</li>\n<li><code>description</code>: Description of the calculated channel.</li>\n<li><code>expression</code>: The expression to calculate the value of the calculated channel.</li>\n<li><code>channel_references</code>: A list of channel references that are used in the expression. Each reference can either\nbe an <code>ExpressionChannelReference</code> or <code>ExpressionChannelReferenceChannelConfig</code>.</li>\n<li><code>units</code>: Units of the calculated channel.</li>\n<li><code>client_key</code>: A user defined string that uniquely identifies the calculated channel. Name is unique, but may be changed.</li>\n<li><code>asset_names</code>: A list of asset names to make the calculation available for.</li>\n<li><code>tags</code>: A list of tags on assets to make the calculation available for. NOTE: Not yet supported.</li>\n<li><code>all_assets</code>: A flag that, when set to <code>True</code>, associates the calculated channel with all assets.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.name", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.description", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.expression", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Union[sift_py.rule.config.ExpressionChannelReference, sift_py.rule.config.ExpressionChannelReferenceChannelConfig]]"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.units", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.units", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.calculated_channel_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.asset_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.tag_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.all_assets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.check_for_unsupported_tags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.convert_channel_references", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReference</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReferenceChannelConfig</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReference</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelConfig.validate_assets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate", "kind": "class", "doc": "<p>Represents a dictionary for updating properties of a calculated channel. All fields are optional\nand only the provided fields will be updated.</p>\n\n<ul>\n<li><code>name</code>: Updated name of the calculated channel.</li>\n<li><code>description</code>: Updated description of the calculated channel.</li>\n<li><code>units</code>: String representing the units for the calculated channel.</li>\n<li><code>expression</code>: Updated expression used to calculate channel values.</li>\n<li><code>channel_references</code>: A list of channel references which can either be <code>ExpressionChannelReference</code>\nor <code>ExpressionChannelReferenceChannelConfig</code> used in the expression.</li>\n<li><code>asset_names</code>: List of assets associated with the calculation.</li>\n<li><code>tags</code>: List of tags for associating the calculated channel to assets.</li>\n<li><code>all_assets</code>: Boolean flag indicating if the calculated channel applies to all assets.</li>\n<li><code>archived</code>: Boolean flag indicating if the calculated channel is archived.</li>\n</ul>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.name", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.description", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.units", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.units", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[typing.Union[sift_py.rule.config.ExpressionChannelReference, sift_py.rule.config.ExpressionChannelReferenceChannelConfig]]]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.asset_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.tag_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.all_assets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[bool]"}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"fullname": "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived", "modulename": "sift_py.calculated_channels.config", "qualname": "CalculatedChannelUpdate.archived", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[bool]"}, "sift_py.calculated_channels.service": {"fullname": "sift_py.calculated_channels.service", "modulename": "sift_py.calculated_channels.service", "kind": "module", "doc": "<p></p>\n"}, "sift_py.calculated_channels.service.CalculatedChannelService": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService", "kind": "class", "doc": "<p>A service for managing reusable Calculated Channels. Allows for creating, updating, and retrieving Calculated Channels.</p>\n"}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.__init__", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span></span>)</span>"}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.get_calculated_channel", "kind": "function", "doc": "<p>Get a <code>CalculatedChannel</code>.  See <a href=\"https://docs.siftstack.com/docs/api/grpc/protocol-buffers/calculated_channels\">Sift docs</a>\nfor more information on available arguments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">calculated_channel_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">client_key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.list_calculated_channels", "kind": "function", "doc": "<p>List available Calculated Channels. See <a href=\"https://docs.siftstack.com/docs/api/grpc/protocol-buffers/calculated_channels\">Sift docs</a>\nfor more information on available arguments.</p>\n\n<p>Returns a tuple of a list of <code>CalculatedChannel</code> objects and a next page token.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">page_token</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.list_calculated_channel_versions", "kind": "function", "doc": "<p>List versions of Calculated Channel. See <a href=\"https://docs.siftstack.com/docs/api/grpc/protocol-buffers/calculated_channels\">Sift docs</a>\nfor more information on available arguments.</p>\n\n<p>Returns a tuple of a list of <code>CalculatedChannel</code> objects and a next page token.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">calculated_channel_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">client_key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">page_token</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.create_calculated_channel", "kind": "function", "doc": "<p>Create a <code>CalculatedChannel</code> from a <code>CalculatedChannelConfig</code>. See\n<code>sift_py.calculated_channels.config.CalculatedChannelConfig</code> for more information on available\nfields to configure.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">calculated_channels_pb2</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelValidationResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.update_calculated_channel", "kind": "function", "doc": "<p>Revise a <code>CalculatedChannel</code> from a <code>CalculatedChannelUpdate</code>.  See\n<code>sift_py.calculated_channels.config.CalculatedChannelUpdate</code> for more information on available\nfields to update.</p>\n\n<p><code>revision_notes</code> may be provided to document the reason for revision.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">calculated_channel_config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span>,</span><span class=\"param\">\t<span class=\"n\">updates</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelUpdate</span>,</span><span class=\"param\">\t<span class=\"n\">update_notes</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">calculated_channels_pb2</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelValidationResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"fullname": "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml", "modulename": "sift_py.calculated_channels.service", "qualname": "CalculatedChannelService.create_or_update_calculated_channel_from_yaml", "kind": "function", "doc": "<p>Creates or updates calculated channel from provided yaml files.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">calculated_channels_pb2</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelValidationResult</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sift_py.data": {"fullname": "sift_py.data", "modulename": "sift_py.data", "kind": "module", "doc": "<p>This module contains tools to download telemetry from the Sift data API. The\ncore component of this module is the <code>sift_py.data.service.DataService</code> and the\n<code>sift_py.data.query</code> module. The former is what's used to execute a data query,\nwhile the latter is what's used to actually construct the query. A typical query could look\nsomething like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">DataQuery</span><span class=\"p\">(</span>\n    <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NostromoLV426&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:08.555-07:00&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:11.556-07:00&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">sample_ms</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span>\n    <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n            <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n            <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">component</span><span class=\"o\">=</span><span class=\"s2\">&quot;mainmotors&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n            <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>This query, once passed to the <code>sift_py.data.service.DataService.execute</code> method, will\nfetch data between <code>start_time</code> and <code>end_time</code> at the sampling rate given by <code>sample_ms</code>.</p>\n\n<blockquote>\n  <p>\u26a0\ufe0f <strong>Warning</strong>: Note on Performance</p>\n  \n  <p>Currently the results of a query are all buffered in memory, so it it best to be mindful\n  about your memory limitations and overall performance requirements when requesting data\n  within a large time range and a slow sampling rate. Full-fidelity data is returned\n  when the <code>sample_ms</code> is set to <code>0</code>.</p>\n</blockquote>\n\n<p>The data API allows you to download telemetry for both channels as well as calculated\nchannels. The following examples demonstrate how to download data for both channels and\ncalculated channels, respectively.</p>\n\n<ul>\n<li><a href=\"#regular-channels\">Regular Channels</a></li>\n<li><a href=\"#calculated-channels\">Calculated Channels</a></li>\n</ul>\n\n<h2 id=\"regular-channels\">Regular Channels</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">functools</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data.query</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">ChannelQuery</span><span class=\"p\">,</span> <span class=\"n\">DataQuery</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_async_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DataService</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">channel_demo</span><span class=\"p\">():</span>\n    <span class=\"n\">channel_config</span><span class=\"p\">:</span> <span class=\"n\">SiftChannelConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my-key&quot;</span>\n        <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sift-uri&quot;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">use_sift_async_channel</span><span class=\"p\">(</span><span class=\"n\">channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"n\">data_service</span> <span class=\"o\">=</span> <span class=\"n\">DataService</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">DataQuery</span><span class=\"p\">(</span>\n            <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NostromoLV426&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:08.555-07:00&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:11.556-07:00&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">component</span><span class=\"o\">=</span><span class=\"s2\">&quot;mainmotors&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">ChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;gpio&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">data_service</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n        <span class=\"n\">data_frames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">())</span>\n            <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">(</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mainmotors.velocity&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gpio.12v&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">merged_frame</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge_asof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">),</span> <span class=\"n\">data_frames</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">merged_frame</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_csv.csv&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n\n<h2 id=\"calculated-channels\">Calculated Channels</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">functools</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data.query</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">ChannelQuery</span><span class=\"p\">,</span> <span class=\"n\">DataQuery</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_async_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DataService</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">channel_demo</span><span class=\"p\">():</span>\n    <span class=\"n\">channel_config</span><span class=\"p\">:</span> <span class=\"n\">SiftChannelConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my-key&quot;</span>\n        <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sift-uri&quot;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">use_sift_async_channel</span><span class=\"p\">(</span><span class=\"n\">channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"n\">data_service</span> <span class=\"o\">=</span> <span class=\"n\">DataService</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">DataQuery</span><span class=\"p\">(</span>\n            <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;NostromoLV426&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:08.555-07:00&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2024-07-04T18:09:11.556-07:00&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">CalculatedChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;calc-voltage&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"s2\">&quot;$1 + 10&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">expression_channel_references</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;reference&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$1&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">},</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">CalculatedChannelQuery</span><span class=\"p\">(</span>\n                    <span class=\"n\">channel_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;calc-velocity&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"s2\">&quot;$1 * 2&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">expression_channel_references</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;reference&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$1&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;velocity&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mainmotors&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">},</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;[NostromoLV426].1720141748.047512&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">data_service</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"n\">calc_voltage</span><span class=\"p\">,</span> <span class=\"n\">calc_velocity</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"p\">(</span><span class=\"s2\">&quot;calc-voltage&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;calc-velocity&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">calc_voltage_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">calc_voltage</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">())</span>\n        <span class=\"n\">calc_velocity_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">calc_velocity</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">())</span>\n\n        <span class=\"n\">merged_frame</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge_asof</span><span class=\"p\">(</span><span class=\"n\">calc_voltage_df</span><span class=\"p\">,</span> <span class=\"n\">calc_velocity_df</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">merged_frame</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_csv.csv&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n"}, "sift_py.data.error": {"fullname": "sift_py.data.error", "modulename": "sift_py.data.error", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data.error.DataError": {"fullname": "sift_py.data.error.DataError", "modulename": "sift_py.data.error", "qualname": "DataError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, "sift_py.data.error.DataError.__init__": {"fullname": "sift_py.data.error.DataError.__init__", "modulename": "sift_py.data.error", "qualname": "DataError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.data.error.DataError.msg": {"fullname": "sift_py.data.error.DataError.msg", "modulename": "sift_py.data.error", "qualname": "DataError.msg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query": {"fullname": "sift_py.data.query", "modulename": "sift_py.data.query", "kind": "module", "doc": "<p>Module containing utilities to construct a data query which is ultimately\npassed to <code>sift_py.data.service.DataService.execute</code> to download telemetry.</p>\n\n<p>This module also contains types that represent the result of a data query\nwhich can be easily converted into a <code>pandas</code> data frame or series.</p>\n"}, "sift_py.data.query.DataQuery": {"fullname": "sift_py.data.query.DataQuery", "modulename": "sift_py.data.query", "qualname": "DataQuery", "kind": "class", "doc": "<p>A query that is meant to be passed to <code>sift_py.data.service.DataService.execute</code> to\nretrieve telemetry.</p>\n\n<ul>\n<li><code>asset_name</code>: The name of the asset to query telemetry for.</li>\n<li><code>start_time</code>: The start time of the time range of the data to request.</li>\n<li><code>end_time</code>: The end time of the time range of the data to request.</li>\n<li><code>sample_ms</code>:\nThe sampling rate to use when retrieving data. The lower the sampling rate, the\ngreater the data-fidelity. A sampling rate of <code>0</code> retrieves full-fidelity data.</li>\n<li><code>channels</code>:\nList of either <code>ChannelQuery</code> or <code>CalculatedChannelQuery</code>, but not both. Represents the\nchannels to retrieve data from.</li>\n</ul>\n"}, "sift_py.data.query.DataQuery.__init__": {"fullname": "sift_py.data.query.DataQuery.__init__", "modulename": "sift_py.data.query", "qualname": "DataQuery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">asset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">,</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">timestamp_pb2</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">,</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">timestamp_pb2</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">ChannelQuery</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelQuery</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">sample_ms</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span></span>)</span>"}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"fullname": "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE", "modulename": "sift_py.data.query", "qualname": "DataQuery.DEFAULT_PAGE_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "100000"}, "sift_py.data.query.DataQuery.asset_name": {"fullname": "sift_py.data.query.DataQuery.asset_name", "modulename": "sift_py.data.query", "qualname": "DataQuery.asset_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.DataQuery.start_time": {"fullname": "sift_py.data.query.DataQuery.start_time", "modulename": "sift_py.data.query", "qualname": "DataQuery.start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas._libs.tslibs.timestamps.Timestamp"}, "sift_py.data.query.DataQuery.end_time": {"fullname": "sift_py.data.query.DataQuery.end_time", "modulename": "sift_py.data.query", "qualname": "DataQuery.end_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas._libs.tslibs.timestamps.Timestamp"}, "sift_py.data.query.DataQuery.sample_ms": {"fullname": "sift_py.data.query.DataQuery.sample_ms", "modulename": "sift_py.data.query", "qualname": "DataQuery.sample_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.data.query.DataQuery.page_size": {"fullname": "sift_py.data.query.DataQuery.page_size", "modulename": "sift_py.data.query", "qualname": "DataQuery.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.data.query.DataQuery.channels": {"fullname": "sift_py.data.query.DataQuery.channels", "modulename": "sift_py.data.query", "qualname": "DataQuery.channels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Union[sift_py.data.query.ChannelQuery, sift_py.data.query.CalculatedChannelQuery]]"}, "sift_py.data.query.ChannelLookupInfo": {"fullname": "sift_py.data.query.ChannelLookupInfo", "modulename": "sift_py.data.query", "qualname": "ChannelLookupInfo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "typing.Union[str, typing.Tuple[str, sift_py.ingestion.channel.ChannelDataType]]"}, "sift_py.data.query.DataQueryResult": {"fullname": "sift_py.data.query.DataQueryResult", "modulename": "sift_py.data.query", "qualname": "DataQueryResult", "kind": "class", "doc": "<p>The result of a data query which can contain multiple channels.</p>\n"}, "sift_py.data.query.DataQueryResult.__init__": {"fullname": "sift_py.data.query.DataQueryResult.__init__", "modulename": "sift_py.data.query", "qualname": "DataQueryResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">merged_channel_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">_channel</span><span class=\"o\">.</span><span class=\"n\">ChannelTimeSeries</span><span class=\"p\">]]</span></span>)</span>"}, "sift_py.data.query.DataQueryResult.channel": {"fullname": "sift_py.data.query.DataQueryResult.channel", "modulename": "sift_py.data.query", "qualname": "DataQueryResult.channel", "kind": "function", "doc": "<p>Like <code>channels</code> but returns a single <code>DataQueryResultSet</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lookup</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">DataQueryResultSet</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.DataQueryResult.channels": {"fullname": "sift_py.data.query.DataQueryResult.channels", "modulename": "sift_py.data.query", "qualname": "DataQueryResult.channels", "kind": "function", "doc": "<p>Returns a <code>sift_py.data.channel.ChannelTimeSeries</code> given the <code>lookup</code> argument.\nIf a <code>lookup</code> is a fully qualified name (FQN) <code>str</code> and there are multiple channels\nwith the same FQN, this will raise a <code>ValueError</code>. In these situations, <code>lookup</code> must\nbe a tuple where the first item is the channel FQN and the second the\n<code>sift_py.ingestion.channel.ChannelDataType</code>.</p>\n\n<p>If <code>lookup</code> is a tuple, then the channel data-type will be appended to the key referencing\nthe <code>sift_py.data.channel.ChannelTimeSeries</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">lookup</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">DataQueryResultSet</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.DataQueryResult.all_channels": {"fullname": "sift_py.data.query.DataQueryResult.all_channels", "modulename": "sift_py.data.query", "qualname": "DataQueryResult.all_channels", "kind": "function", "doc": "<p>Returns all channel data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">DataQueryResultSet</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.DataQueryResultSet": {"fullname": "sift_py.data.query.DataQueryResultSet", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet", "kind": "class", "doc": "<p>Represents time series data for a single channel. Can easily be converted into a <code>pandas</code> data frame like so:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data_query_result_set</span><span class=\"o\">.</span><span class=\"n\">all_columns</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n"}, "sift_py.data.query.DataQueryResultSet.__init__": {"fullname": "sift_py.data.query.DataQueryResultSet.__init__", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timestamps</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">timestamps</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.data.query.DataQueryResultSet.identifier": {"fullname": "sift_py.data.query.DataQueryResultSet.identifier", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.DataQueryResultSet.timestamps": {"fullname": "sift_py.data.query.DataQueryResultSet.timestamps", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.timestamps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[pandas._libs.tslibs.timestamps.Timestamp]"}, "sift_py.data.query.DataQueryResultSet.values": {"fullname": "sift_py.data.query.DataQueryResultSet.values", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Any]"}, "sift_py.data.query.DataQueryResultSet.value_column": {"fullname": "sift_py.data.query.DataQueryResultSet.value_column", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.value_column", "kind": "function", "doc": "<p>Returns a single key-value pair dictionary meant to represent the value column of the data-set.\n<code>column_name</code> can be used to override the name of the column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.DataQueryResultSet.time_column": {"fullname": "sift_py.data.query.DataQueryResultSet.time_column", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.time_column", "kind": "function", "doc": "<p>Returns a single key-value pair dictionary meant to represent the time column of the data-set.\n<code>column_name</code> can be used to override the name of the column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.DataQueryResultSet.columns": {"fullname": "sift_py.data.query.DataQueryResultSet.columns", "modulename": "sift_py.data.query", "qualname": "DataQueryResultSet.columns", "kind": "function", "doc": "<p>Returns both the time and value columns with options to override the column names.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_column_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_column_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.ChannelQuery": {"fullname": "sift_py.data.query.ChannelQuery", "modulename": "sift_py.data.query", "qualname": "ChannelQuery", "kind": "class", "doc": "<p>Represents a single channel to include in the <code>sift_py.data.query.DataQuery</code>.</p>\n"}, "sift_py.data.query.ChannelQuery.__init__": {"fullname": "sift_py.data.query.ChannelQuery.__init__", "modulename": "sift_py.data.query", "qualname": "ChannelQuery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">component</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.data.query.ChannelQuery.channel_name": {"fullname": "sift_py.data.query.ChannelQuery.channel_name", "modulename": "sift_py.data.query", "qualname": "ChannelQuery.channel_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.ChannelQuery.component": {"fullname": "sift_py.data.query.ChannelQuery.component", "modulename": "sift_py.data.query", "qualname": "ChannelQuery.component", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.data.query.ChannelQuery.run_name": {"fullname": "sift_py.data.query.ChannelQuery.run_name", "modulename": "sift_py.data.query", "qualname": "ChannelQuery.run_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.data.query.ChannelQuery.fqn": {"fullname": "sift_py.data.query.ChannelQuery.fqn", "modulename": "sift_py.data.query", "qualname": "ChannelQuery.fqn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.data.query.ExpressionChannelReference": {"fullname": "sift_py.data.query.ExpressionChannelReference", "modulename": "sift_py.data.query", "qualname": "ExpressionChannelReference", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, "sift_py.data.query.ExpressionChannelReference.reference": {"fullname": "sift_py.data.query.ExpressionChannelReference.reference", "modulename": "sift_py.data.query", "qualname": "ExpressionChannelReference.reference", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"fullname": "sift_py.data.query.ExpressionChannelReference.channel_name", "modulename": "sift_py.data.query", "qualname": "ExpressionChannelReference.channel_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.ExpressionChannelReference.component": {"fullname": "sift_py.data.query.ExpressionChannelReference.component", "modulename": "sift_py.data.query", "qualname": "ExpressionChannelReference.component", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.data.query.ExpressionChannelReference.data_type": {"fullname": "sift_py.data.query.ExpressionChannelReference.data_type", "modulename": "sift_py.data.query", "qualname": "ExpressionChannelReference.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[sift_py.ingestion.channel.ChannelDataType]"}, "sift_py.data.query.CalculatedChannelQuery": {"fullname": "sift_py.data.query.CalculatedChannelQuery", "modulename": "sift_py.data.query", "qualname": "CalculatedChannelQuery", "kind": "class", "doc": "<p>Represents a single calculated channel to include in the <code>sift_py.data.query.DataQuery</code>.</p>\n"}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"fullname": "sift_py.data.query.CalculatedChannelQuery.__init__", "modulename": "sift_py.data.query", "qualname": "CalculatedChannelQuery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expression_channel_references</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReference</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"fullname": "sift_py.data.query.CalculatedChannelQuery.channel_key", "modulename": "sift_py.data.query", "qualname": "CalculatedChannelQuery.channel_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.CalculatedChannelQuery.expression": {"fullname": "sift_py.data.query.CalculatedChannelQuery.expression", "modulename": "sift_py.data.query", "qualname": "CalculatedChannelQuery.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"fullname": "sift_py.data.query.CalculatedChannelQuery.expression_channel_references", "modulename": "sift_py.data.query", "qualname": "CalculatedChannelQuery.expression_channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.data.query.ExpressionChannelReference]"}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"fullname": "sift_py.data.query.CalculatedChannelQuery.run_name", "modulename": "sift_py.data.query", "qualname": "CalculatedChannelQuery.run_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.data.service": {"fullname": "sift_py.data.service", "modulename": "sift_py.data.service", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data.service.DataService": {"fullname": "sift_py.data.service.DataService", "modulename": "sift_py.data.service", "qualname": "DataService", "kind": "class", "doc": "<p>A service that asynchronously executes a <code>sift_py.data.query.DataQuery</code> to retrieve telemetry\nfor an arbitrary amount of channels (or calculated channels) within a user-specified time-range\nand sampling rate.</p>\n"}, "sift_py.data.service.DataService.__init__": {"fullname": "sift_py.data.service.DataService.__init__", "modulename": "sift_py.data.service", "qualname": "DataService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_channel</span><span class=\"o\">.</span><span class=\"n\">Channel</span></span>)</span>"}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"fullname": "sift_py.data.service.DataService.REQUEST_BATCH_SIZE", "modulename": "sift_py.data.service", "qualname": "DataService.REQUEST_BATCH_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, "sift_py.data.service.DataService.AssetName": {"fullname": "sift_py.data.service.DataService.AssetName", "modulename": "sift_py.data.service", "qualname": "DataService.AssetName", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "&lt;class &#x27;str&#x27;&gt;"}, "sift_py.data.service.DataService.ChannelFqn": {"fullname": "sift_py.data.service.DataService.ChannelFqn", "modulename": "sift_py.data.service", "qualname": "DataService.ChannelFqn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "&lt;class &#x27;str&#x27;&gt;"}, "sift_py.data.service.DataService.RunName": {"fullname": "sift_py.data.service.DataService.RunName", "modulename": "sift_py.data.service", "qualname": "DataService.RunName", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "&lt;class &#x27;str&#x27;&gt;"}, "sift_py.data.service.DataService.execute": {"fullname": "sift_py.data.service.DataService.execute", "modulename": "sift_py.data.service", "qualname": "DataService.execute", "kind": "function", "doc": "<p>Performs the actual query to retrieve telemetry.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">DataQuery</span>,</span><span class=\"param\">\t<span class=\"n\">bust_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">DataQueryResult</span>:</span></span>", "funcdef": "async def"}, "sift_py.data_import": {"fullname": "sift_py.data_import", "modulename": "sift_py.data_import", "kind": "module", "doc": "<p>This module contains services to facilitate importing data.\nIt also provides utilities to easily query the import status.</p>\n\n<p>The fundamental components of this module are the following:</p>\n\n<ul>\n<li><code>sift_py.data_import.config.CsvConfig</code></li>\n<li><code>sift_py.data_import.csv.CsvUploadService</code></li>\n<li><code>sift_py.data_import.status.DataImportService</code></li>\n</ul>\n\n<h2 id=\"simple-csv-upload\">Simple CSV Upload</h2>\n\n<p>A simple CSV upload without needing to craft a custom CSV config can be done like so:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.csv</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">CsvUploadService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.status</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DataImportService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.rest</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftRestConfig</span>\n\n<span class=\"n\">rest_config</span><span class=\"p\">:</span> <span class=\"n\">SiftRestConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"n\">sift_uri</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"n\">apikey</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">asset_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Your Asset Name&quot;</span>\n<span class=\"n\">csv_upload_service</span> <span class=\"o\">=</span> <span class=\"n\">CsvUploadService</span><span class=\"p\">(</span><span class=\"n\">rest_config</span><span class=\"p\">)</span>\n<span class=\"n\">import_service</span><span class=\"p\">:</span> <span class=\"n\">DataImportService</span>  <span class=\"o\">=</span> <span class=\"n\">csv_upload_service</span><span class=\"o\">.</span><span class=\"n\">simple_upload</span><span class=\"p\">(</span><span class=\"n\">asset_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sample_data.csv&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Blocks until the import is completed.</span>\n<span class=\"n\">import_service</span><span class=\"o\">.</span><span class=\"n\">wait_until_complete</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>This example assumes several things about how the data is formatted. For example, that first column\ncontains datetime formatted time stamps. See docstring for <code>simple_upload</code> to see what can be overridden.</p>\n\n<h2 id=\"tdms-upload\">TDMS Upload</h2>\n\n<p>Specify <code>sift-stack-py[tdms]</code> in your dependencies to use the TDMS upload service.\nTDMS files can be uploaded like so:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.csv</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">TdmsUploadService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.status</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DataImportService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.rest</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftRestConfig</span>\n\n<span class=\"n\">rest_config</span><span class=\"p\">:</span> <span class=\"n\">SiftRestConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"n\">sift_uri</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"n\">apikey</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">asset_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Your Asset Name&quot;</span>\n<span class=\"n\">csv_upload_service</span> <span class=\"o\">=</span> <span class=\"n\">CsvUploadService</span><span class=\"p\">(</span><span class=\"n\">rest_config</span><span class=\"p\">)</span>\n<span class=\"n\">import_service</span><span class=\"p\">:</span> <span class=\"n\">DataImportService</span>  <span class=\"o\">=</span> <span class=\"n\">csv_upload_service</span><span class=\"o\">.</span><span class=\"n\">simple_upload</span><span class=\"p\">(</span><span class=\"n\">asset_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sample_data.tdms&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Blocks until the import is completed.</span>\n<span class=\"n\">import_service</span><span class=\"o\">.</span><span class=\"n\">wait_until_complete</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>If you want to upload TDMS groups prefixes to channel names set <code>prefix_channel_with_group</code> to True:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">csv_upload_service</span><span class=\"o\">.</span><span class=\"n\">simple_upload</span><span class=\"p\">(</span><span class=\"n\">asset_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sample_data.tdms&quot;</span><span class=\"p\">,</span> <span class=\"n\">prefix_channel_with_group</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Some times there are TDMS channels without valid data or timing information, you can skip these channels by\nsetting <code>ignore_errors</code> to True:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">csv_upload_service</span><span class=\"o\">.</span><span class=\"n\">simple_upload</span><span class=\"p\">(</span><span class=\"n\">asset_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sample_data.tdms&quot;</span><span class=\"p\">,</span> <span class=\"n\">ignore_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The channels being skipped will be printed out to stdout.</p>\n\n<h2 id=\"csv-upload-with-custom-csv-config\">CSV Upload with custom CSV config</h2>\n\n<p>If your data is formatted a specific way you can create a CsvConfig that will be used to properly\nparse your data:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.csv</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">CsvUploadService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.status</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DataImportService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.rest</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftRestConfig</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.config</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">CsvConfig</span>\n\n<span class=\"n\">rest_config</span><span class=\"p\">:</span> <span class=\"n\">SiftRestConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"n\">sift_uri</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"n\">apikey</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">csv_upload_service</span> <span class=\"o\">=</span> <span class=\"n\">CsvUploadService</span><span class=\"p\">(</span><span class=\"n\">rest_config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create CSV config.</span>\n<span class=\"n\">input_csv</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sample_data.csv&quot;</span>\n\n<span class=\"c1\"># Parse CSV to get channel names.</span>\n<span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">input_csv</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">channel</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">channel</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">data_config</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"n\">channel</span><span class=\"p\">,</span>\n            <span class=\"c1\"># This example assumes all channels are doubles.</span>\n            <span class=\"c1\"># Can also use `ChannelDoubleType.DOUBLE` or `double`</span>\n            <span class=\"s2\">&quot;data_type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;CHANNEL_DATA_TYPE_DOUBLE&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Example channel </span><span class=\"si\">{</span><span class=\"n\">channel</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n<span class=\"n\">csv_config</span> <span class=\"o\">=</span> <span class=\"n\">CsvConfig</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;asset_name&quot;</span><span class=\"p\">:</span> <span class=\"n\">asset_name</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;first_data_row&quot;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;time_column&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;format&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;TIME_FORMAT_ABSOLUTE_DATETIME&quot;</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Can also use `TimeFormatType.ABSOLUTE_DATETIME`</span>\n            <span class=\"s2\">&quot;column_number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">&quot;data_columns&quot;</span><span class=\"p\">:</span> <span class=\"n\">data_config</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">import_service</span><span class=\"p\">:</span> <span class=\"n\">DataImportService</span> <span class=\"o\">=</span> <span class=\"n\">csv_upload_service</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">input_csv</span><span class=\"p\">,</span> <span class=\"n\">csv_config</span><span class=\"p\">)</span>\n<span class=\"n\">import_service</span><span class=\"o\">.</span><span class=\"n\">wait_until_complete</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>In this example the CSV can be created programmatically. You can also import use a json file directly:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">json</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.data_import.config</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">CsvConfig</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;config.json&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">csv_config</span> <span class=\"o\">=</span> <span class=\"n\">CsvConfig</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n"}, "sift_py.data_import.ch10": {"fullname": "sift_py.data_import.ch10", "modulename": "sift_py.data_import.ch10", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.ch10.BaseCh10File": {"fullname": "sift_py.data_import.ch10.BaseCh10File", "modulename": "sift_py.data_import.ch10", "qualname": "BaseCh10File", "kind": "class", "doc": "<p>Base class for uploading IRIG Chapter 10/Chapter 11 files.</p>\n\n<p>Implement a concrete version of this class that parses a ch10 stream and returns\na csv row of data on each iteration.</p>\n\n<p>Set <code>gzip</code> to <code>True</code> if sending a compressed stream.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Ch10</span><span class=\"p\">(</span><span class=\"n\">BaseCh10File</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initialize_csv_data_columns</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">initialize_csv_data_columns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">csv_config_data_columns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_ch10_computer_f1_packet</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">process_ch10_computer_f1_packet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># Processes the first Computer F1 packet</span>\n        <span class=\"c1\"># and returns the measurements as a dict.</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">process_ch10_pcm_packet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Processed the data packets and returns</span>\n        <span class=\"c1\"># a CSV row.</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__next__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"c1\"># On all iterations, return data for the CSV file.</span>\n        <span class=\"k\">if</span> <span class=\"n\">end_of_file</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">StopIteration</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_ch10_data_packet</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"fullname": "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns", "modulename": "sift_py.data_import.ch10", "qualname": "BaseCh10File.csv_config_data_columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, dict]"}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"fullname": "sift_py.data_import.ch10.BaseCh10File.gzip", "modulename": "sift_py.data_import.ch10", "qualname": "BaseCh10File.gzip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"fullname": "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns", "modulename": "sift_py.data_import.ch10", "qualname": "BaseCh10File.initialize_csv_data_columns", "kind": "function", "doc": "<p>Must populate the <code>csv_config_data_columns</code> attribute\nthat is the data_columns entry in the CsvConfig.</p>\n\n<p>See the Sift data_import module or API docs for the schema.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.ch10.Ch10UploadService": {"fullname": "sift_py.data_import.ch10.Ch10UploadService", "modulename": "sift_py.data_import.ch10", "qualname": "Ch10UploadService", "kind": "class", "doc": "<p>Service to upload ch10 files.</p>\n", "bases": "sift_py.data_import.csv.CsvUploadService"}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"fullname": "sift_py.data_import.ch10.Ch10UploadService.upload", "modulename": "sift_py.data_import.ch10", "qualname": "Ch10UploadService.upload", "kind": "function", "doc": "<p>Uploads the ch10 file to the specified asset.</p>\n\n<p>Override <code>time_format</code> to specify the time data format. Default is <code>TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS</code>.\nOverride <code>run_name</code> to specify the name of the run to create for this data. Default is None.\nOverride <code>run_id</code> to specify the id of the run to add this data to. Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ch10_file</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">ch10</span><span class=\"o\">.</span><span class=\"n\">BaseCh10File</span>,</span><span class=\"param\">\t<span class=\"n\">asset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">time_format</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">time_format</span><span class=\"o\">.</span><span class=\"n\">TimeFormatType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">TimeFormatType</span><span class=\"o\">.</span><span class=\"n\">ABSOLUTE_UNIX_NANOSECONDS</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TIME_FORMAT_ABSOLUTE_UNIX_NANOSECONDS&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportService</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.config": {"fullname": "sift_py.data_import.config", "modulename": "sift_py.data_import.config", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.config.CsvConfig": {"fullname": "sift_py.data_import.config.CsvConfig", "modulename": "sift_py.data_import.config", "qualname": "CsvConfig", "kind": "class", "doc": "<p>Defines the CSV config for data imports.</p>\n"}, "sift_py.data_import.config.CsvConfig.__init__": {"fullname": "sift_py.data_import.config.CsvConfig.__init__", "modulename": "sift_py.data_import.config", "qualname": "CsvConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_info</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.data_import.config.CsvConfig.to_json": {"fullname": "sift_py.data_import.config.CsvConfig.to_json", "modulename": "sift_py.data_import.config", "qualname": "CsvConfig.to_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.config.CsvConfig.to_dict": {"fullname": "sift_py.data_import.config.CsvConfig.to_dict", "modulename": "sift_py.data_import.config", "qualname": "CsvConfig.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.csv": {"fullname": "sift_py.data_import.csv", "modulename": "sift_py.data_import.csv", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.csv.CsvUploadService": {"fullname": "sift_py.data_import.csv.CsvUploadService", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService", "kind": "class", "doc": "<p>Abstract service that implements a REST session.</p>\n", "bases": "sift_py.rest._RestService"}, "sift_py.data_import.csv.CsvUploadService.__init__": {"fullname": "sift_py.data_import.csv.CsvUploadService.__init__", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rest_conf</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">SiftRestConfig</span></span>)</span>"}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"fullname": "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService.UPLOAD_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/api/v1/data-imports:upload&#x27;"}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"fullname": "sift_py.data_import.csv.CsvUploadService.URL_PATH", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService.URL_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/api/v1/data-imports:url&#x27;"}, "sift_py.data_import.csv.CsvUploadService.upload": {"fullname": "sift_py.data_import.csv.CsvUploadService.upload", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService.upload", "kind": "function", "doc": "<p>Uploads the CSV file pointed to by <code>path</code> using a custom CSV config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">csv_config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CsvConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportService</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"fullname": "sift_py.data_import.csv.CsvUploadService.upload_from_url", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService.upload_from_url", "kind": "function", "doc": "<p>Uploads the CSV file pointed to by <code>url</code> using a custom CSV config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">csv_config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CsvConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportService</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"fullname": "sift_py.data_import.csv.CsvUploadService.simple_upload", "modulename": "sift_py.data_import.csv", "qualname": "CsvUploadService.simple_upload", "kind": "function", "doc": "<p>Uploads the CSV file pointed to by <code>path</code> to the specified asset. This function will\ninfer the data types and assume certain things about how the data is formatted. See the options\nbelow for what parameters can be overridden. Use <code>upload</code> if you need to specify a custom CSV config.</p>\n\n<p>Override <code>first_data_row</code> to specify which is the first row with data. Default is 2.\nOverride <code>time_column</code> to specify which column contains timestamp information. Default is 1.\nOverride <code>time_format</code> to specify the time data format. Default is <code>TimeFormatType.ABSOLUTE_DATETIME</code>.\nOverride <code>run_name</code> to specify the name of the run to create for this data. Default is None.\nOverride <code>run_id</code> to specify the id of the run to add this data to. Default is None.\nOverride <code>units_row</code> to specify which row contains unit information. Default is None.\nOverride <code>descriptions_row</code> to specify which row contains channel description information. Default is None.\nOverride <code>relative_start_time</code> if a relative time format is used. Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">asset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">first_data_row</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">time_column</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">time_format</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">time_format</span><span class=\"o\">.</span><span class=\"n\">TimeFormatType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">TimeFormatType</span><span class=\"o\">.</span><span class=\"n\">ABSOLUTE_DATETIME</span><span class=\"p\">:</span> <span class=\"s1\">&#39;TIME_FORMAT_ABSOLUTE_DATETIME&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units_row</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">descriptions_row</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">relative_start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportService</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.status": {"fullname": "sift_py.data_import.status", "modulename": "sift_py.data_import.status", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.status.DataImportStatusType": {"fullname": "sift_py.data_import.status.DataImportStatusType", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType", "kind": "class", "doc": "<p>Status of the data import.</p>\n", "bases": "enum.Enum"}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"fullname": "sift_py.data_import.status.DataImportStatusType.SUCCEEDED", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType.SUCCEEDED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataImportStatusType.SUCCEEDED: &#x27;DATA_IMPORT_STATUS_SUCCEEDED&#x27;&gt;"}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"fullname": "sift_py.data_import.status.DataImportStatusType.PENDING", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType.PENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataImportStatusType.PENDING: &#x27;DATA_IMPORT_STATUS_PENDING&#x27;&gt;"}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"fullname": "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType.IN_PROGRESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataImportStatusType.IN_PROGRESS: &#x27;DATA_IMPORT_STATUS_IN_PROGRESS&#x27;&gt;"}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"fullname": "sift_py.data_import.status.DataImportStatusType.FAILED", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType.FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DataImportStatusType.FAILED: &#x27;DATA_IMPORT_STATUS_FAILED&#x27;&gt;"}, "sift_py.data_import.status.DataImportStatusType.from_str": {"fullname": "sift_py.data_import.status.DataImportStatusType.from_str", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"fullname": "sift_py.data_import.status.DataImportStatusType.as_human_str", "modulename": "sift_py.data_import.status", "qualname": "DataImportStatusType.as_human_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.status.DataImport": {"fullname": "sift_py.data_import.status.DataImport", "modulename": "sift_py.data_import.status", "qualname": "DataImport", "kind": "class", "doc": "<p>Metadata regarding the data import.</p>\n", "bases": "pydantic.main.BaseModel"}, "sift_py.data_import.status.DataImport.model_config": {"fullname": "sift_py.data_import.status.DataImport.model_config", "modulename": "sift_py.data_import.status", "qualname": "DataImport.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;alias_generator&#x27;: &lt;function to_camel&gt;, &#x27;populate_by_name&#x27;: True}"}, "sift_py.data_import.status.DataImport.data_import_id": {"fullname": "sift_py.data_import.status.DataImport.data_import_id", "modulename": "sift_py.data_import.status", "qualname": "DataImport.data_import_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data_import.status.DataImport.created_date": {"fullname": "sift_py.data_import.status.DataImport.created_date", "modulename": "sift_py.data_import.status", "qualname": "DataImport.created_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, "sift_py.data_import.status.DataImport.modified_date": {"fullname": "sift_py.data_import.status.DataImport.modified_date", "modulename": "sift_py.data_import.status", "qualname": "DataImport.modified_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, "sift_py.data_import.status.DataImport.source_url": {"fullname": "sift_py.data_import.status.DataImport.source_url", "modulename": "sift_py.data_import.status", "qualname": "DataImport.source_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data_import.status.DataImport.status": {"fullname": "sift_py.data_import.status.DataImport.status", "modulename": "sift_py.data_import.status", "qualname": "DataImport.status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, sift_py.data_import.status.DataImportStatusType]"}, "sift_py.data_import.status.DataImport.error_message": {"fullname": "sift_py.data_import.status.DataImport.error_message", "modulename": "sift_py.data_import.status", "qualname": "DataImport.error_message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.data_import.status.DataImport.csv_config": {"fullname": "sift_py.data_import.status.DataImport.csv_config", "modulename": "sift_py.data_import.status", "qualname": "DataImport.csv_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, "sift_py.data_import.status.DataImport.convert_status": {"fullname": "sift_py.data_import.status.DataImport.convert_status", "modulename": "sift_py.data_import.status", "qualname": "DataImport.convert_status", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportStatusType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportStatusType</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.status.DataImportService": {"fullname": "sift_py.data_import.status.DataImportService", "modulename": "sift_py.data_import.status", "qualname": "DataImportService", "kind": "class", "doc": "<p>Service used to retrieve information about a particular data import.</p>\n", "bases": "sift_py.rest._RestService"}, "sift_py.data_import.status.DataImportService.__init__": {"fullname": "sift_py.data_import.status.DataImportService.__init__", "modulename": "sift_py.data_import.status", "qualname": "DataImportService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">restconf</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">SiftRestConfig</span>, </span><span class=\"param\"><span class=\"n\">data_import_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"fullname": "sift_py.data_import.status.DataImportService.STATUS_PATH", "modulename": "sift_py.data_import.status", "qualname": "DataImportService.STATUS_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/api/v1/data-imports&#x27;"}, "sift_py.data_import.status.DataImportService.get_data_import": {"fullname": "sift_py.data_import.status.DataImportService.get_data_import", "modulename": "sift_py.data_import.status", "qualname": "DataImportService.get_data_import", "kind": "function", "doc": "<p>Returns information about the data import.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImport</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"fullname": "sift_py.data_import.status.DataImportService.wait_until_complete", "modulename": "sift_py.data_import.status", "qualname": "DataImportService.wait_until_complete", "kind": "function", "doc": "<p>Blocks until the data import is completed. Check the status to determine\nif the import was successful or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImport</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.tdms": {"fullname": "sift_py.data_import.tdms", "modulename": "sift_py.data_import.tdms", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"fullname": "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES", "modulename": "sift_py.data_import.tdms", "qualname": "TDMS_TO_SIFT_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;nptdms.types.Boolean&#x27;&gt;: &lt;ChannelDataType.BOOL: 5&gt;, &lt;class &#x27;nptdms.types.Int8&#x27;&gt;: &lt;ChannelDataType.INT_32: 7&gt;, &lt;class &#x27;nptdms.types.Int16&#x27;&gt;: &lt;ChannelDataType.INT_32: 7&gt;, &lt;class &#x27;nptdms.types.Int32&#x27;&gt;: &lt;ChannelDataType.INT_32: 7&gt;, &lt;class &#x27;nptdms.types.Int64&#x27;&gt;: &lt;ChannelDataType.INT_64: 9&gt;, &lt;class &#x27;nptdms.types.Uint8&#x27;&gt;: &lt;ChannelDataType.UINT_32: 8&gt;, &lt;class &#x27;nptdms.types.Uint16&#x27;&gt;: &lt;ChannelDataType.UINT_32: 8&gt;, &lt;class &#x27;nptdms.types.Uint32&#x27;&gt;: &lt;ChannelDataType.UINT_32: 8&gt;, &lt;class &#x27;nptdms.types.Uint64&#x27;&gt;: &lt;ChannelDataType.UINT_64: 10&gt;, &lt;class &#x27;nptdms.types.SingleFloat&#x27;&gt;: &lt;ChannelDataType.FLOAT: 6&gt;, &lt;class &#x27;nptdms.types.DoubleFloat&#x27;&gt;: &lt;ChannelDataType.DOUBLE: 1&gt;}"}, "sift_py.data_import.tdms.TdmsUploadService": {"fullname": "sift_py.data_import.tdms.TdmsUploadService", "modulename": "sift_py.data_import.tdms", "qualname": "TdmsUploadService", "kind": "class", "doc": "<p>Service to upload TDMS files.</p>\n"}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"fullname": "sift_py.data_import.tdms.TdmsUploadService.__init__", "modulename": "sift_py.data_import.tdms", "qualname": "TdmsUploadService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rest_conf</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">SiftRestConfig</span></span>)</span>"}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"fullname": "sift_py.data_import.tdms.TdmsUploadService.upload", "modulename": "sift_py.data_import.tdms", "qualname": "TdmsUploadService.upload", "kind": "function", "doc": "<p>Uploads the TDMS file pointed to by <code>path</code> to the specified asset.</p>\n\n<p>Set <code>prefix_channel_with_group</code> to True if you want to prefix the channel name with TDMS group.\nThis can later be used to group into folders in the Sift UI.</p>\n\n<p>If <code>ignore_errors</code> is True will skip channels without timing information.</p>\n\n<p>Override <code>run_name</code> to specify the name of the run to create for this data. Default is None.\nOverride <code>run_id</code> to specify the id of the run to add this data to. Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">asset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">prefix_channel_with_group</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">group_into_components</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">data_import</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">DataImportService</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.tempfile": {"fullname": "sift_py.data_import.tempfile", "modulename": "sift_py.data_import.tempfile", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"fullname": "sift_py.data_import.tempfile.NamedTemporaryFile", "modulename": "sift_py.data_import.tempfile", "qualname": "NamedTemporaryFile", "kind": "class", "doc": "<p>Created a named temporary file.</p>\n\n<p>Works on both Windows and Unix systems.</p>\n\n<p>See <a href=\"https://stackoverflow.com/questions/23212435/permission-denied-to-write-to-my-temporary-file\">https://stackoverflow.com/questions/23212435/permission-denied-to-write-to-my-temporary-file</a>\nfor more information on Windows compatibility.</p>\n"}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"fullname": "sift_py.data_import.tempfile.NamedTemporaryFile.__init__", "modulename": "sift_py.data_import.tempfile", "qualname": "NamedTemporaryFile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mode</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"fullname": "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir", "modulename": "sift_py.data_import.tempfile", "qualname": "NamedTemporaryFile.temp_dir", "kind": "variable", "doc": "<p></p>\n"}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"fullname": "sift_py.data_import.tempfile.NamedTemporaryFile.name", "modulename": "sift_py.data_import.tempfile", "qualname": "NamedTemporaryFile.name", "kind": "variable", "doc": "<p></p>\n"}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"fullname": "sift_py.data_import.tempfile.NamedTemporaryFile.file", "modulename": "sift_py.data_import.tempfile", "qualname": "NamedTemporaryFile.file", "kind": "variable", "doc": "<p></p>\n"}, "sift_py.data_import.time_format": {"fullname": "sift_py.data_import.time_format", "modulename": "sift_py.data_import.time_format", "kind": "module", "doc": "<p></p>\n"}, "sift_py.data_import.time_format.TimeFormatType": {"fullname": "sift_py.data_import.time_format.TimeFormatType", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"fullname": "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.ABSOLUTE_RFC3339", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.ABSOLUTE_RFC3339: &#x27;TIME_FORMAT_ABSOLUTE_RFC3339&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"fullname": "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.ABSOLUTE_DATETIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.ABSOLUTE_DATETIME: &#x27;TIME_FORMAT_ABSOLUTE_DATETIME&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.ABSOLUTE_UNIX_SECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.ABSOLUTE_UNIX_SECONDS: &#x27;TIME_FORMAT_ABSOLUTE_UNIX_SECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS: &#x27;TIME_FORMAT_ABSOLUTE_UNIX_MILLISECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS: &#x27;TIME_FORMAT_ABSOLUTE_UNIX_MICROSECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS: &#x27;TIME_FORMAT_ABSOLUTE_UNIX_NANOSECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.RELATIVE_NANOSECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.RELATIVE_NANOSECONDS: &#x27;TIME_FORMAT_RELATIVE_NANOSECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.RELATIVE_MICROSECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.RELATIVE_MICROSECONDS: &#x27;TIME_FORMAT_RELATIVE_MICROSECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.RELATIVE_MILLISECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.RELATIVE_MILLISECONDS: &#x27;TIME_FORMAT_RELATIVE_MILLISECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.RELATIVE_SECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.RELATIVE_SECONDS: &#x27;TIME_FORMAT_RELATIVE_SECONDS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"fullname": "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.RELATIVE_MINUTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.RELATIVE_MINUTES: &#x27;TIME_FORMAT_RELATIVE_MINUTES&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"fullname": "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.RELATIVE_HOURS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TimeFormatType.RELATIVE_HOURS: &#x27;TIME_FORMAT_RELATIVE_HOURS&#x27;&gt;"}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"fullname": "sift_py.data_import.time_format.TimeFormatType.from_str", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"fullname": "sift_py.data_import.time_format.TimeFormatType.as_human_str", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.as_human_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"fullname": "sift_py.data_import.time_format.TimeFormatType.is_relative", "modulename": "sift_py.data_import.time_format", "qualname": "TimeFormatType.is_relative", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sift_py.error": {"fullname": "sift_py.error", "modulename": "sift_py.error", "kind": "module", "doc": "<p></p>\n"}, "sift_py.error.SiftError": {"fullname": "sift_py.error.SiftError", "modulename": "sift_py.error", "qualname": "SiftError", "kind": "class", "doc": "<p>These exceptions are raised when something totally unexpected occurs and is\nmeant to indicate that the error is likely not caused by the user, but rather,\nthe library itself. These errors should be reported to Sift.</p>\n", "bases": "builtins.Exception"}, "sift_py.error.SiftError.__init__": {"fullname": "sift_py.error.SiftError.__init__", "modulename": "sift_py.error", "qualname": "SiftError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.error.SiftError.msg": {"fullname": "sift_py.error.SiftError.msg", "modulename": "sift_py.error", "qualname": "SiftError.msg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.error.SiftAPIDeprecationWarning": {"fullname": "sift_py.error.SiftAPIDeprecationWarning", "modulename": "sift_py.error", "qualname": "SiftAPIDeprecationWarning", "kind": "class", "doc": "<p>Warning used for deprecated API features that may be removed in future updates.</p>\n", "bases": "builtins.FutureWarning"}, "sift_py.file_attachment": {"fullname": "sift_py.file_attachment", "modulename": "sift_py.file_attachment", "kind": "module", "doc": "<p>This module contains services to facilitate uploading and downloading file attachments.\nIt also provides utilities to easily query all file attachments for a given entity\nwhich could be a run, annotation, or annotation logs. File attachment deletion is also supported.</p>\n\n<p>Once files have been attached, they should be viewable on the Sift application, attached to their\nrespective entities. Below are various examples on how to leverage the <code>sift_py.file_attachment.service.FileAttachmentService</code>.</p>\n\n<h2 id=\"initializing-the-file-attachment-service\">Initializing the file attachment service</h2>\n\n<p>Unlike other services throughout <code>sift_py</code>, the <code>sift_py.file_attachment.service.FileAttachmentService</code> does rely on both\nREST and gRPC APIs, so with that in mind we can initialize our service like so:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.file_attachment.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">FileAttachmentService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.file_attachment.entity</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Entity</span><span class=\"p\">,</span> <span class=\"n\">EntityType</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.file_attachment.metadata</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">ImageMetadata</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.rest</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftRestConfig</span>\n\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift.remote_files.v1.remote_files_pb2</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">GetRemoteFileRequest</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift.remote_files.v1.remote_files_pb2_grpc</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">RemoteFileServiceStub</span>\n\n<span class=\"n\">rest_config</span><span class=\"p\">:</span> <span class=\"n\">SiftRestConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Be sure to exclude the &quot;https://&quot; or &quot;http://&quot; scheme out of the uri</span>\n    <span class=\"s2\">&quot;uri&quot;</span><span class=\"p\">:</span> <span class=\"n\">rest_base_uri</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">:</span> <span class=\"n\">apikey</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">sift_channel_config</span> <span class=\"o\">=</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">grpc_base_uri</span><span class=\"p\">,</span> <span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"n\">apikey</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">use_sift_channel</span><span class=\"p\">(</span><span class=\"n\">sift_channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">file_attachment_service</span> <span class=\"o\">=</span> <span class=\"n\">FileAttachmentService</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">rest_config</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<p>With the service initialized we can now interact with the file attachments API.</p>\n\n<h2 id=\"various-examples\">Various Examples</h2>\n\n<p>For demonstrative purposes we will upload an <code>mp4</code> file and attach to a run of <code>run_id</code>.\nOnce it is uploaded we will query all file attachments for a particular run and re-download\nwhat we just uploaded.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_channel</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.file_attachment.service</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">FileAttachmentService</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.file_attachment.entity</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Entity</span><span class=\"p\">,</span> <span class=\"n\">EntityType</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.file_attachment.metadata</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">VideoMetadata</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.rest</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftRestConfig</span>\n\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift.remote_files.v1.remote_files_pb2</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">GetRemoteFileRequest</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift.remote_files.v1.remote_files_pb2_grpc</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">RemoteFileServiceStub</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">with</span> <span class=\"n\">use_sift_channel</span><span class=\"p\">(</span><span class=\"n\">sift_channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">file_attachment_service</span> <span class=\"o\">=</span> <span class=\"n\">FileAttachmentService</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">rest_config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">entity</span><span class=\"o\">=</span><span class=\"n\">Entity</span><span class=\"p\">(</span>\n        <span class=\"n\">entity_id</span><span class=\"o\">=</span><span class=\"n\">run_id</span><span class=\"p\">,</span> <span class=\"c1\"># some arbitrary run ID that refers to an existing run</span>\n        <span class=\"n\">entity_type</span><span class=\"o\">=</span><span class=\"n\">EntityType</span><span class=\"o\">.</span><span class=\"n\">RUN</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># uploading the file attachment and attaching it to a run of `run_id`.</span>\n    <span class=\"n\">remote_file</span> <span class=\"o\">=</span> <span class=\"n\">file_attachment_service</span><span class=\"o\">.</span><span class=\"n\">upload_attachment</span><span class=\"p\">(</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;path/to/foo.mp4&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">entity</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Metatadata.. optional but recommended for optimal viewing in the application</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">VideoMetadata</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">2160</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">3840</span><span class=\"p\">,</span> <span class=\"n\">duration_seconds</span><span class=\"o\">=</span><span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2024</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">),</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;thrusters getting too hot&quot;</span> <span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># retrieving all of the file attachments for our run</span>\n    <span class=\"n\">all_file_attachments</span> <span class=\"o\">=</span> <span class=\"n\">file_attachment_service</span><span class=\"o\">.</span><span class=\"n\">retrieve_attachments</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># downloading our file_attachment and saving it to our current working dir</span>\n    <span class=\"n\">file_attachment_service</span><span class=\"o\">.</span><span class=\"n\">download_attachment</span><span class=\"p\">(</span><span class=\"n\">remote_file</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># downloading our file_attachment and saving it somewhere else with a different name</span>\n    <span class=\"n\">file_attachment_service</span><span class=\"o\">.</span><span class=\"n\">download_attachment</span><span class=\"p\">(</span><span class=\"n\">remote_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;somewhere/else/foo.mp4&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># deleting out file attachment from Sift</span>\n    <span class=\"n\">file_attachment_service</span><span class=\"o\">.</span><span class=\"n\">delete_file_attachments</span><span class=\"p\">(</span><span class=\"n\">remote_file_1</span><span class=\"p\">,</span> <span class=\"n\">remote_file_2</span><span class=\"p\">,</span> <span class=\"n\">remote_file_etc</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, "sift_py.file_attachment._internal.download": {"fullname": "sift_py.file_attachment._internal.download", "modulename": "sift_py.file_attachment._internal.download", "kind": "module", "doc": "<p></p>\n"}, "sift_py.file_attachment._internal.download.download_remote_file": {"fullname": "sift_py.file_attachment._internal.download.download_remote_file", "modulename": "sift_py.file_attachment._internal.download", "qualname": "download_remote_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.file_attachment._internal.upload": {"fullname": "sift_py.file_attachment._internal.upload", "modulename": "sift_py.file_attachment._internal.upload", "kind": "module", "doc": "<p></p>\n"}, "sift_py.file_attachment._internal.upload.UploadService": {"fullname": "sift_py.file_attachment._internal.upload.UploadService", "modulename": "sift_py.file_attachment._internal.upload", "qualname": "UploadService", "kind": "class", "doc": "<p>Service used to upload attachments.</p>\n", "bases": "sift_py.rest._RestService"}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"fullname": "sift_py.file_attachment._internal.upload.UploadService.__init__", "modulename": "sift_py.file_attachment._internal.upload", "qualname": "UploadService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rest_conf</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">SiftRestConfig</span></span>)</span>"}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"fullname": "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH", "modulename": "sift_py.file_attachment._internal.upload", "qualname": "UploadService.UPLOAD_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/api/v0/remote-files/upload&#x27;"}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"fullname": "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH", "modulename": "sift_py.file_attachment._internal.upload", "qualname": "UploadService.UPLOAD_BULK_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/api/v0/remote-files/upload:bulk&#x27;"}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"fullname": "sift_py.file_attachment._internal.upload.UploadService.upload_attachment", "modulename": "sift_py.file_attachment._internal.upload", "qualname": "UploadService.upload_attachment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">file_attachment</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">file_attachment</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">Metadata</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">organization_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.entity": {"fullname": "sift_py.file_attachment.entity", "modulename": "sift_py.file_attachment.entity", "kind": "module", "doc": "<p>Entities represent things that files can be attached to.</p>\n"}, "sift_py.file_attachment.entity.Entity": {"fullname": "sift_py.file_attachment.entity.Entity", "modulename": "sift_py.file_attachment.entity", "qualname": "Entity", "kind": "class", "doc": "<p>An abstract entity that represents the thing that we want to attach files to.</p>\n"}, "sift_py.file_attachment.entity.Entity.__init__": {"fullname": "sift_py.file_attachment.entity.Entity.__init__", "modulename": "sift_py.file_attachment.entity", "qualname": "Entity.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">entity_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">entity_type</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">file_attachment</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">EntityType</span></span>)</span>"}, "sift_py.file_attachment.entity.Entity.entity_id": {"fullname": "sift_py.file_attachment.entity.Entity.entity_id", "modulename": "sift_py.file_attachment.entity", "qualname": "Entity.entity_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.file_attachment.entity.Entity.entity_type": {"fullname": "sift_py.file_attachment.entity.Entity.entity_type", "modulename": "sift_py.file_attachment.entity", "qualname": "Entity.entity_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift_py.file_attachment.entity.EntityType"}, "sift_py.file_attachment.entity.EntityType": {"fullname": "sift_py.file_attachment.entity.EntityType", "modulename": "sift_py.file_attachment.entity", "qualname": "EntityType", "kind": "class", "doc": "<p>Represents the types of entities that supports file attachments.</p>\n", "bases": "enum.Enum"}, "sift_py.file_attachment.entity.EntityType.RUN": {"fullname": "sift_py.file_attachment.entity.EntityType.RUN", "modulename": "sift_py.file_attachment.entity", "qualname": "EntityType.RUN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EntityType.RUN: &#x27;runs&#x27;&gt;"}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"fullname": "sift_py.file_attachment.entity.EntityType.ANNOTATION", "modulename": "sift_py.file_attachment.entity", "qualname": "EntityType.ANNOTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EntityType.ANNOTATION: &#x27;annotations&#x27;&gt;"}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"fullname": "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG", "modulename": "sift_py.file_attachment.entity", "qualname": "EntityType.ANNOTATION_LOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EntityType.ANNOTATION_LOG: &#x27;annotation_logs&#x27;&gt;"}, "sift_py.file_attachment.metadata": {"fullname": "sift_py.file_attachment.metadata", "modulename": "sift_py.file_attachment.metadata", "kind": "module", "doc": "<p>Module containing optional metadata types to provide to Sift when uploading a file attachment.\nThough optional, providing this information could help improve quality of renders on the Sift app.</p>\n"}, "sift_py.file_attachment.metadata.Metadata": {"fullname": "sift_py.file_attachment.metadata.Metadata", "modulename": "sift_py.file_attachment.metadata", "qualname": "Metadata", "kind": "class", "doc": "<p>Utility sub-types that require custom-serialization meant to be used in conjunction with the\n<code>to_json</code> function. Sub-types should implement <code>as_json</code> which should return the object that\nyou want passed to <code>json.dumps</code>.</p>\n", "bases": "sift_py._internal.convert.json.AsJson"}, "sift_py.file_attachment.metadata.VideoMetadata": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata", "kind": "class", "doc": "<p>Metadata for video media-types i.e. any mimetypes of the following pattern: <code>video/*</code>.</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.__init__", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">duration_seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.width", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.height", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.duration_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.timestamp", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[datetime.datetime, NoneType]"}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.as_pb", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">VideoMetadata</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">VideoMetadata</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.from_pb", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">VideoMetadata</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"fullname": "sift_py.file_attachment.metadata.VideoMetadata.as_json", "modulename": "sift_py.file_attachment.metadata", "qualname": "VideoMetadata.as_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.metadata.ImageMetadata": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata", "kind": "class", "doc": "<p>Metadata for image media-types i.e. any mimetypes of the following pattern: <code>image/*</code>.</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata.__init__", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata.width", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata.height", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata.as_pb", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">ImageMetadata</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">ImageMetadata</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata.from_pb", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">ImageMetadata</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"fullname": "sift_py.file_attachment.metadata.ImageMetadata.as_json", "modulename": "sift_py.file_attachment.metadata", "qualname": "ImageMetadata.as_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.service": {"fullname": "sift_py.file_attachment.service", "modulename": "sift_py.file_attachment.service", "kind": "module", "doc": "<p></p>\n"}, "sift_py.file_attachment.service.FileAttachmentService": {"fullname": "sift_py.file_attachment.service.FileAttachmentService", "modulename": "sift_py.file_attachment.service", "qualname": "FileAttachmentService", "kind": "class", "doc": "<p>Service used to retrieve, upload, download, and delete file attachments. Seee <code>sift_py.file_attachment</code>\nfor more information and examples on how to use this service.</p>\n"}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"fullname": "sift_py.file_attachment.service.FileAttachmentService.__init__", "modulename": "sift_py.file_attachment.service", "qualname": "FileAttachmentService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">restconf</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">SiftRestConfig</span></span>)</span>"}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"fullname": "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments", "modulename": "sift_py.file_attachment.service", "qualname": "FileAttachmentService.retrieve_attachments", "kind": "function", "doc": "<p>Retrieves all file attachments for the provided <code>entity</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">file_attachment</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">RemoteFile</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"fullname": "sift_py.file_attachment.service.FileAttachmentService.upload_attachment", "modulename": "sift_py.file_attachment.service", "qualname": "FileAttachmentService.upload_attachment", "kind": "function", "doc": "<p>Uploads a file pointed to by <code>path</code> and attaches it to the provided <code>entity</code>.</p>\n\n<ul>\n<li><code>path</code>: A path to the file to upload to Sift as a file attachment.</li>\n<li><code>entity</code>: The entity to attach the file to.</li>\n<li><code>metadata</code>: Optional metadata to include with the specific file.</li>\n<li><code>description</code>: An optional description to provide for the file attachment.</li>\n<li><code>organization_id</code>: Only required if your user belongs to multiple organizations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">file_attachment</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">file_attachment</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">Metadata</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">organization_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">RemoteFile</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"fullname": "sift_py.file_attachment.service.FileAttachmentService.download_attachment", "modulename": "sift_py.file_attachment.service", "qualname": "FileAttachmentService.download_attachment", "kind": "function", "doc": "<p>Downloads a file attachment and saves it locally.</p>\n\n<ul>\n<li><code>remote_file</code>: Could either be an instance of <code>RemoteFile</code> or the ID of the remote file to download.</li>\n<li><code>out</code>: If unspecified, then the file will be downloaded to the current working directory with the original name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">RemoteFile</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"fullname": "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments", "modulename": "sift_py.file_attachment.service", "qualname": "FileAttachmentService.delete_file_attachments", "kind": "function", "doc": "<p>Deletes remote files given a set of arguments that could either be instances of <code>RemoteFile</code> or the ID\nof remote files to delete</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">to_delete</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">remote_files</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">remote_files_pb2</span><span class=\"o\">.</span><span class=\"n\">RemoteFile</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc": {"fullname": "sift_py.grpc", "modulename": "sift_py.grpc", "kind": "module", "doc": "<p>This module is primarily concerned with configuring and initializing gRPC connections to the Sift API.</p>\n\n<p>Example of establishing a connection to Sift's gRPC APi:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">sift_py.grpc.transport</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">use_sift_channel</span>\n\n<span class=\"c1\"># Be sure not to include the url scheme i.e. &#39;https://&#39; in the uri.</span>\n<span class=\"n\">sift_channel_config</span> <span class=\"o\">=</span> <span class=\"n\">SiftChannelConfig</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">SIFT_BASE_URI</span><span class=\"p\">,</span> <span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"n\">SIFT_API_KEY</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">use_sift_channel</span><span class=\"p\">(</span><span class=\"n\">sift_channel_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Connect to Sift</span>\n</code></pre>\n</div>\n"}, "sift_py.grpc._async_interceptors.base": {"fullname": "sift_py.grpc._async_interceptors.base", "modulename": "sift_py.grpc._async_interceptors.base", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc._async_interceptors.base.Continuation": {"fullname": "sift_py.grpc._async_interceptors.base.Continuation", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "Continuation", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[grpc.aio._interceptor.ClientCallDetails, typing.Any], ~CallType]"}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"fullname": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "ClientAsyncInterceptor", "kind": "class", "doc": "<p>Affords intercepting unary-unary invocations.</p>\n", "bases": "grpc.aio._interceptor.UnaryUnaryClientInterceptor, grpc.aio._interceptor.UnaryStreamClientInterceptor, grpc.aio._interceptor.StreamUnaryClientInterceptor, grpc.aio._interceptor.StreamStreamClientInterceptor"}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"fullname": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "ClientAsyncInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "async def"}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"fullname": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "ClientAsyncInterceptor.intercept_unary_unary", "kind": "function", "doc": "<p>Intercepts a unary-unary invocation asynchronously.</p>\n\n<p>Args:\n  continuation: A coroutine that proceeds with the invocation by\n    executing the next interceptor in the chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>call = await continuation(client_call_details, request)</code>\n    to continue with the RPC. <code>continuation</code> returns the call to the\n    RPC.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request: The request value for the RPC.</p>\n\n<p>Returns:\n  An object with the RPC response.</p>\n\n<p>Raises:\n  AioRpcError: Indicating that the RPC terminated with non-OK status.\n  asyncio.CancelledError: Indicating that the RPC was canceled.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_call</span><span class=\"o\">.</span><span class=\"n\">UnaryUnaryCall</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"fullname": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "ClientAsyncInterceptor.intercept_unary_stream", "kind": "function", "doc": "<p>Intercepts a unary-stream invocation asynchronously.</p>\n\n<p>The function could return the call object or an asynchronous\niterator, in case of being an asyncrhonous iterator this will\nbecome the source of the reads done by the caller.</p>\n\n<p>Args:\n  continuation: A coroutine that proceeds with the invocation by\n    executing the next interceptor in the chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>call = await continuation(client_call_details, request)</code>\n    to continue with the RPC. <code>continuation</code> returns the call to the\n    RPC.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request: The request value for the RPC.</p>\n\n<p>Returns:\n  The RPC Call or an asynchronous iterator.</p>\n\n<p>Raises:\n  AioRpcError: Indicating that the RPC terminated with non-OK status.\n  asyncio.CancelledError: Indicating that the RPC was canceled.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_call</span><span class=\"o\">.</span><span class=\"n\">UnaryStreamCall</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"fullname": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "ClientAsyncInterceptor.intercept_stream_unary", "kind": "function", "doc": "<p>Intercepts a stream-unary invocation asynchronously.</p>\n\n<p>Within the interceptor the usage of the call methods like <code>write</code> or\neven awaiting the call should be done carefully, since the caller\ncould be expecting an untouched call, for example for start writing\nmessages to it.</p>\n\n<p>Args:\n  continuation: A coroutine that proceeds with the invocation by\n    executing the next interceptor in the chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>call = await continuation(client_call_details, request_iterator)</code>\n    to continue with the RPC. <code>continuation</code> returns the call to the\n    RPC.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request_iterator: The request iterator that will produce requests\n    for the RPC.</p>\n\n<p>Returns:\n  The RPC Call.</p>\n\n<p>Raises:\n  AioRpcError: Indicating that the RPC terminated with non-OK status.\n  asyncio.CancelledError: Indicating that the RPC was canceled.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_call</span><span class=\"o\">.</span><span class=\"n\">StreamUnaryCall</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request_iterator</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"fullname": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream", "modulename": "sift_py.grpc._async_interceptors.base", "qualname": "ClientAsyncInterceptor.intercept_stream_stream", "kind": "function", "doc": "<p>Intercepts a stream-stream invocation asynchronously.</p>\n\n<p>Within the interceptor the usage of the call methods like <code>write</code> or\neven awaiting the call should be done carefully, since the caller\ncould be expecting an untouched call, for example for start writing\nmessages to it.</p>\n\n<p>The function could return the call object or an asynchronous\niterator, in case of being an asyncrhonous iterator this will\nbecome the source of the reads done by the caller.</p>\n\n<p>Args:\n  continuation: A coroutine that proceeds with the invocation by\n    executing the next interceptor in the chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>call = await continuation(client_call_details, request_iterator)</code>\n    to continue with the RPC. <code>continuation</code> returns the call to the\n    RPC.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request_iterator: The request iterator that will produce requests\n    for the RPC.</p>\n\n<p>Returns:\n  The RPC Call or an asynchronous iterator.</p>\n\n<p>Raises:\n  AioRpcError: Indicating that the RPC terminated with non-OK status.\n  asyncio.CancelledError: Indicating that the RPC was canceled.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_call</span><span class=\"o\">.</span><span class=\"n\">StreamStreamCall</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request_iterator</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "sift_py.grpc._async_interceptors.metadata": {"fullname": "sift_py.grpc._async_interceptors.metadata", "modulename": "sift_py.grpc._async_interceptors.metadata", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"fullname": "sift_py.grpc._async_interceptors.metadata.Metadata", "modulename": "sift_py.grpc._async_interceptors.metadata", "qualname": "Metadata", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.List[typing.Tuple[str, str]]"}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"fullname": "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor", "modulename": "sift_py.grpc._async_interceptors.metadata", "qualname": "MetadataAsyncInterceptor", "kind": "class", "doc": "<p>Affords intercepting unary-unary invocations.</p>\n", "bases": "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor"}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"fullname": "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__", "modulename": "sift_py.grpc._async_interceptors.metadata", "qualname": "MetadataAsyncInterceptor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span>)</span>"}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"fullname": "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata", "modulename": "sift_py.grpc._async_interceptors.metadata", "qualname": "MetadataAsyncInterceptor.metadata", "kind": "variable", "doc": "<p>Interceptor to add metadata to all async unary and streaming RPCs</p>\n", "annotation": ": List[Tuple[str, str]]"}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"fullname": "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept", "modulename": "sift_py.grpc._async_interceptors.metadata", "qualname": "MetadataAsyncInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_interceptor</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, "sift_py.grpc._interceptors.base": {"fullname": "sift_py.grpc._interceptors.base", "modulename": "sift_py.grpc._interceptors.base", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc._interceptors.base.Continuation": {"fullname": "sift_py.grpc._interceptors.base.Continuation", "modulename": "sift_py.grpc._interceptors.base", "qualname": "Continuation", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[grpc.ClientCallDetails, typing.Any], typing.Any]"}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"fullname": "sift_py.grpc._interceptors.base.ClientInterceptor", "modulename": "sift_py.grpc._interceptors.base", "qualname": "ClientInterceptor", "kind": "class", "doc": "<p>Affords intercepting stream-stream invocations.</p>\n", "bases": "grpc.StreamStreamClientInterceptor, grpc.StreamUnaryClientInterceptor, grpc.UnaryStreamClientInterceptor, grpc.UnaryUnaryClientInterceptor"}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"fullname": "sift_py.grpc._interceptors.base.ClientInterceptor.intercept", "modulename": "sift_py.grpc._interceptors.base", "qualname": "ClientInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"fullname": "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary", "modulename": "sift_py.grpc._interceptors.base", "qualname": "ClientInterceptor.intercept_unary_unary", "kind": "function", "doc": "<p>Intercepts a unary-unary invocation asynchronously.</p>\n\n<p>Args:\n  continuation: A function that proceeds with the invocation by\n    executing the next interceptor in chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>response_future = continuation(client_call_details, request)</code>\n    to continue with the RPC. <code>continuation</code> returns an object that is\n    both a Call for the RPC and a Future. In the event of RPC\n    completion, the return Call-Future's result value will be\n    the response message of the RPC. Should the event terminate\n    with non-OK status, the returned Call-Future's exception value\n    will be an RpcError.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request: The request value for the RPC.</p>\n\n<p>Returns:\n    An object that is both a Call for the RPC and a Future.\n    In the event of RPC completion, the return Call-Future's\n    result value will be the response message of the RPC.\n    Should the event terminate with non-OK status, the returned\n    Call-Future's exception value will be an RpcError.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"fullname": "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary", "modulename": "sift_py.grpc._interceptors.base", "qualname": "ClientInterceptor.intercept_stream_unary", "kind": "function", "doc": "<p>Intercepts a stream-unary invocation asynchronously.</p>\n\n<p>Args:\n  continuation: A function that proceeds with the invocation by\n    executing the next interceptor in chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>response_future = continuation(client_call_details, request_iterator)</code>\n    to continue with the RPC. <code>continuation</code> returns an object that is\n    both a Call for the RPC and a Future. In the event of RPC completion,\n    the return Call-Future's result value will be the response message\n    of the RPC. Should the event terminate with non-OK status, the\n    returned Call-Future's exception value will be an RpcError.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request_iterator: An iterator that yields request values for the RPC.</p>\n\n<p>Returns:\n  An object that is both a Call for the RPC and a Future.\n  In the event of RPC completion, the return Call-Future's\n  result value will be the response message of the RPC.\n  Should the event terminate with non-OK status, the returned\n  Call-Future's exception value will be an RpcError.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"fullname": "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream", "modulename": "sift_py.grpc._interceptors.base", "qualname": "ClientInterceptor.intercept_unary_stream", "kind": "function", "doc": "<p>Intercepts a unary-stream invocation.</p>\n\n<p>Args:\n  continuation: A function that proceeds with the invocation by\n    executing the next interceptor in chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>response_iterator = continuation(client_call_details, request)</code>\n    to continue with the RPC. <code>continuation</code> returns an object that is\n    both a Call for the RPC and an iterator for response values.\n    Drawing response values from the returned Call-iterator may\n    raise RpcError indicating termination of the RPC with non-OK\n    status.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request: The request value for the RPC.</p>\n\n<p>Returns:\n    An object that is both a Call for the RPC and an iterator of\n    response values. Drawing response values from the returned\n    Call-iterator may raise RpcError indicating termination of\n    the RPC with non-OK status. This object <em>should</em> also fulfill the\n    Future interface, though it may not.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"fullname": "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream", "modulename": "sift_py.grpc._interceptors.base", "qualname": "ClientInterceptor.intercept_stream_stream", "kind": "function", "doc": "<p>Intercepts a stream-stream invocation.</p>\n\n<p>Args:\n  continuation: A function that proceeds with the invocation by\n    executing the next interceptor in chain or invoking the\n    actual RPC on the underlying Channel. It is the interceptor's\n    responsibility to call it if it decides to move the RPC forward.\n    The interceptor can use\n    <code>response_iterator = continuation(client_call_details, request_iterator)</code>\n    to continue with the RPC. <code>continuation</code> returns an object that is\n    both a Call for the RPC and an iterator for response values.\n    Drawing response values from the returned Call-iterator may\n    raise RpcError indicating termination of the RPC with non-OK\n    status.\n  client_call_details: A ClientCallDetails object describing the\n    outgoing RPC.\n  request_iterator: An iterator that yields request values for the RPC.</p>\n\n<p>Returns:\n  An object that is both a Call for the RPC and an iterator of\n  response values. Drawing response values from the returned\n  Call-iterator may raise RpcError indicating termination of\n  the RPC with non-OK status. This object <em>should</em> also fulfill the\n  Future interface, though it may not.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">continuation</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span>,</span><span class=\"param\">\t<span class=\"n\">request_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc._interceptors.context": {"fullname": "sift_py.grpc._interceptors.context", "modulename": "sift_py.grpc._interceptors.context", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails", "kind": "class", "doc": "<p>Describes an RPC to be invoked.</p>\n\n<p>Attributes:\n  method: The method name of the RPC.\n  timeout: An optional duration of time in seconds to allow for the RPC.\n  metadata: Optional :term:<code>metadata</code> to be transmitted to\n    the service-side of the RPC.\n  credentials: An optional CallCredentials for the RPC.\n  wait_for_ready: An optional flag to enable :term:<code>wait_for_ready</code> mechanism.\n  compression: An element of grpc.compression, e.g.\n    grpc.compression.Gzip.</p>\n", "bases": "grpc.ClientCallDetails"}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails.__init__", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">credentials</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">CallCredentials</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">wait_for_ready</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails.method", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails.method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails.timeout", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails.timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[float, NoneType]"}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails.metadata", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Sequence[Tuple[str, Union[str, bytes]]], NoneType]"}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails.credentials", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails.credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[grpc.CallCredentials, NoneType]"}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"fullname": "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready", "modulename": "sift_py.grpc._interceptors.context", "qualname": "ClientCallDetails.wait_for_ready", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[bool, NoneType]"}, "sift_py.grpc._interceptors.metadata": {"fullname": "sift_py.grpc._interceptors.metadata", "modulename": "sift_py.grpc._interceptors.metadata", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc._interceptors.metadata.Metadata": {"fullname": "sift_py.grpc._interceptors.metadata.Metadata", "modulename": "sift_py.grpc._interceptors.metadata", "qualname": "Metadata", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.List[typing.Tuple[str, str]]"}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"fullname": "sift_py.grpc._interceptors.metadata.MetadataInterceptor", "modulename": "sift_py.grpc._interceptors.metadata", "qualname": "MetadataInterceptor", "kind": "class", "doc": "<p>Affords intercepting stream-stream invocations.</p>\n", "bases": "sift_py.grpc._interceptors.base.ClientInterceptor"}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"fullname": "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__", "modulename": "sift_py.grpc._interceptors.metadata", "qualname": "MetadataInterceptor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span></span>)</span>"}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"fullname": "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata", "modulename": "sift_py.grpc._interceptors.metadata", "qualname": "MetadataInterceptor.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Tuple[str, str]]"}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"fullname": "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept", "modulename": "sift_py.grpc._interceptors.metadata", "qualname": "MetadataInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">client_call_details</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ClientCallDetails</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc.keepalive": {"fullname": "sift_py.grpc.keepalive", "modulename": "sift_py.grpc.keepalive", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"fullname": "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS", "modulename": "sift_py.grpc.keepalive", "qualname": "DEFAULT_KEEPALIVE_TIME_MS", "kind": "variable", "doc": "<p>Interval with which to send keepalive pings</p>\n", "default_value": "20000"}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"fullname": "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS", "modulename": "sift_py.grpc.keepalive", "qualname": "DEFAULT_KEEPALIVE_TIMEOUT_MS", "kind": "variable", "doc": "<p>Timeout while waiting for server to acknowledge keepalive ping</p>\n", "default_value": "20000"}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"fullname": "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS", "modulename": "sift_py.grpc.keepalive", "qualname": "DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS", "kind": "variable", "doc": "<p>Allows connection without any active RPCs</p>\n", "default_value": "1"}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"fullname": "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA", "modulename": "sift_py.grpc.keepalive", "qualname": "DEFAULT_MAX_PINGS_WITHOUT_DATA", "kind": "variable", "doc": "<p>Disabled</p>\n", "default_value": "0"}, "sift_py.grpc.keepalive.KeepaliveConfig": {"fullname": "sift_py.grpc.keepalive.KeepaliveConfig", "modulename": "sift_py.grpc.keepalive", "qualname": "KeepaliveConfig", "kind": "class", "doc": "<p>Make make this public in the future to allow folks to configure their own keepalive settings\nif there is demand for it.</p>\n", "bases": "builtins.dict"}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"fullname": "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms", "modulename": "sift_py.grpc.keepalive", "qualname": "KeepaliveConfig.keepalive_time_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"fullname": "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms", "modulename": "sift_py.grpc.keepalive", "qualname": "KeepaliveConfig.keepalive_timeout_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"fullname": "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls", "modulename": "sift_py.grpc.keepalive", "qualname": "KeepaliveConfig.keepalive_permit_without_calls", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"fullname": "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data", "modulename": "sift_py.grpc.keepalive", "qualname": "KeepaliveConfig.max_pings_without_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"fullname": "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG", "modulename": "sift_py.grpc.keepalive", "qualname": "DEFAULT_KEEPALIVE_CONFIG", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift_py.grpc.keepalive.KeepaliveConfig", "default_value": "{&#x27;keepalive_time_ms&#x27;: 20000, &#x27;keepalive_timeout_ms&#x27;: 20000, &#x27;keepalive_permit_without_calls&#x27;: 1, &#x27;max_pings_without_data&#x27;: 0}"}, "sift_py.grpc.transport": {"fullname": "sift_py.grpc.transport", "modulename": "sift_py.grpc.transport", "kind": "module", "doc": "<p>This module is concerned with creating a gRPC transport channel specifically for\ninteracting with Sift's gRPC API. the <code>use_sift_channel</code> method creates said channel\nand should generally be used within a with-block for correct resource management.</p>\n"}, "sift_py.grpc.transport.SiftChannel": {"fullname": "sift_py.grpc.transport.SiftChannel", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "&lt;class &#x27;grpc.Channel&#x27;&gt;"}, "sift_py.grpc.transport.SiftAsyncChannel": {"fullname": "sift_py.grpc.transport.SiftAsyncChannel", "modulename": "sift_py.grpc.transport", "qualname": "SiftAsyncChannel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "&lt;class &#x27;grpc.aio._base_channel.Channel&#x27;&gt;"}, "sift_py.grpc.transport.get_ssl_credentials": {"fullname": "sift_py.grpc.transport.get_ssl_credentials", "modulename": "sift_py.grpc.transport", "qualname": "get_ssl_credentials", "kind": "function", "doc": "<p>Returns SSL credentials for use with gRPC.\nWorkaround for this issue: <a href=\"https://github.com/grpc/grpc/issues/29682\">https://github.com/grpc/grpc/issues/29682</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cert_via_openssl</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ChannelCredentials</span>:</span></span>", "funcdef": "def"}, "sift_py.grpc.transport.use_sift_channel": {"fullname": "sift_py.grpc.transport.use_sift_channel", "modulename": "sift_py.grpc.transport", "qualname": "use_sift_channel", "kind": "function", "doc": "<p>Returns an intercepted channel that is meant to be used across all services that\nmake RPCs to Sift's API. It is highly encouraged to use this within a with-block\nfor correct resource clean-up.</p>\n\n<p>Should an RPC fail for a reason that isn't explicitly controlled by Sift, <code>SiftChannel</code>\nwill automatically leverage gRPC's retry mechanism to try and recover until the max-attempts\nare exceeded, after which the underlying exception will be raised.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">SiftChannelConfig</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>:</span></span>", "funcdef": "def"}, "sift_py.grpc.transport.use_sift_async_channel": {"fullname": "sift_py.grpc.transport.use_sift_async_channel", "modulename": "sift_py.grpc.transport", "qualname": "use_sift_async_channel", "kind": "function", "doc": "<p>Like <code>use_sift_channel</code> but returns a channel meant to be used within the context\nof an async runtime when asynchonous I/O is required.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">SiftChannelConfig</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">_base_channel</span><span class=\"o\">.</span><span class=\"n\">Channel</span>:</span></span>", "funcdef": "def"}, "sift_py.grpc.transport.SiftChannelConfig": {"fullname": "sift_py.grpc.transport.SiftChannelConfig", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannelConfig", "kind": "class", "doc": "<p>Config class used to instantiate a <code>SiftChannel</code> via <code>use_sift_channel</code>.</p>\n\n<ul>\n<li><code>uri</code>: The URI of Sift's gRPC API. The scheme portion of the URI i.e. <code>https://</code> should be ommitted.</li>\n<li><code>apikey</code>: User-generated API key generated via the Sift application.</li>\n<li><code>enable_keepalive</code>: Enabled by default, but can be disabled by passing in <code>False</code>. HTTP/2 keep-alive prevents connections from\nbeing terminated during idle periods. A custom <code>sift_py.grpc.keepalive.KeepaliveConfig</code> may also be provided.</li>\n<li><code>use_ssl</code>: INTERNAL USE. Meant to be used for local development.</li>\n<li><code>cert_via_openssl</code>: Enable this if you want to use OpenSSL to load the certificates.\nRun <code>pip install sift-stack-py[openssl]</code> to install the dependencies required to use this option.\nThis works around this issue with grpc loading SSL certificates: <a href=\"https://github.com/grpc/grpc/issues/29682\">https://github.com/grpc/grpc/issues/29682</a>.\nDefault is False.</li>\n</ul>\n", "bases": "builtins.dict"}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"fullname": "sift_py.grpc.transport.SiftChannelConfig.uri", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannelConfig.uri", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"fullname": "sift_py.grpc.transport.SiftChannelConfig.apikey", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannelConfig.apikey", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"fullname": "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannelConfig.enable_keepalive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.Union[bool, sift_py.grpc.keepalive.KeepaliveConfig]]"}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"fullname": "sift_py.grpc.transport.SiftChannelConfig.use_ssl", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannelConfig.use_ssl", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[bool]"}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"fullname": "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl", "modulename": "sift_py.grpc.transport", "qualname": "SiftChannelConfig.cert_via_openssl", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[bool]"}, "sift_py.grpc.transport_test": {"fullname": "sift_py.grpc.transport_test", "modulename": "sift_py.grpc.transport_test", "kind": "module", "doc": "<p></p>\n"}, "sift_py.grpc.transport_test.DataService": {"fullname": "sift_py.grpc.transport_test.DataService", "modulename": "sift_py.grpc.transport_test", "qualname": "DataService", "kind": "class", "doc": "<p>Missing associated documentation comment in .proto file.</p>\n", "bases": "sift.data.v2.data_pb2_grpc.DataServiceServicer"}, "sift_py.grpc.transport_test.DataService.GetData": {"fullname": "sift_py.grpc.transport_test.DataService.GetData", "modulename": "sift_py.grpc.transport_test", "qualname": "DataService.GetData", "kind": "function", "doc": "<p>Query data</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">data_pb2</span><span class=\"o\">.</span><span class=\"n\">GetDataRequest</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ServicerContext</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.grpc.transport_test.AuthInterceptor": {"fullname": "sift_py.grpc.transport_test.AuthInterceptor", "modulename": "sift_py.grpc.transport_test", "qualname": "AuthInterceptor", "kind": "class", "doc": "<p>Affords intercepting incoming RPCs on the service-side.</p>\n", "bases": "sift_py._internal.test_util.server_interceptor.ServerInterceptor"}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"fullname": "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX", "modulename": "sift_py.grpc.transport_test", "qualname": "AuthInterceptor.AUTH_REGEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^Bearer (.+)$&#x27;)"}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"fullname": "sift_py.grpc.transport_test.AuthInterceptor.intercept", "modulename": "sift_py.grpc.transport_test", "qualname": "AuthInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ServicerContext</span>,</span><span class=\"param\">\t<span class=\"n\">method_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"fullname": "sift_py.grpc.transport_test.ForceFailInterceptor", "modulename": "sift_py.grpc.transport_test", "qualname": "ForceFailInterceptor", "kind": "class", "doc": "<p>Force RPC to fail a few times before letting it pass.</p>\n\n<p><code>failed_attempts</code>: Count of how many times failed\n<code>expected_num_fails</code>: How many times you want call to fail</p>\n", "bases": "sift_py._internal.test_util.server_interceptor.ServerInterceptor"}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"fullname": "sift_py.grpc.transport_test.ForceFailInterceptor.__init__", "modulename": "sift_py.grpc.transport_test", "qualname": "ForceFailInterceptor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expected_num_fails</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"fullname": "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts", "modulename": "sift_py.grpc.transport_test", "qualname": "ForceFailInterceptor.failed_attempts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"fullname": "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails", "modulename": "sift_py.grpc.transport_test", "qualname": "ForceFailInterceptor.expected_num_fails", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"fullname": "sift_py.grpc.transport_test.ForceFailInterceptor.intercept", "modulename": "sift_py.grpc.transport_test", "qualname": "ForceFailInterceptor.intercept", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">request_or_iterator</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">ServicerContext</span>,</span><span class=\"param\">\t<span class=\"n\">method_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.grpc.transport_test.test_sift_channel": {"fullname": "sift_py.grpc.transport_test.test_sift_channel", "modulename": "sift_py.grpc.transport_test", "qualname": "test_sift_channel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mocker</span><span class=\"p\">:</span> <span class=\"n\">pytest_mock</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">MockerFixture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion": {"fullname": "sift_py.ingestion", "modulename": "sift_py.ingestion", "kind": "module", "doc": "<p>Module containing components necessary to leverage Sift's data ingestion and rule evaluation API.\nThe fundamental components of this module are the following:</p>\n\n<ul>\n<li><code>sift_py.ingestion.config.telemetry.TelemetryConfig</code></li>\n<li><code>sift_py.ingestion.service.IngestionService</code></li>\n</ul>\n"}, "sift_py.ingestion._internal.channel": {"fullname": "sift_py.ingestion._internal.channel", "modulename": "sift_py.ingestion._internal.channel", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"fullname": "sift_py.ingestion._internal.channel.channel_reference_from_fqn", "modulename": "sift_py.ingestion._internal.channel", "qualname": "channel_reference_from_fqn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fqn</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">rules_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelReference</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.error": {"fullname": "sift_py.ingestion._internal.error", "modulename": "sift_py.ingestion._internal.error", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion._internal.error.IngestionValidationError": {"fullname": "sift_py.ingestion._internal.error.IngestionValidationError", "modulename": "sift_py.ingestion._internal.error", "qualname": "IngestionValidationError", "kind": "class", "doc": "<p>Errors that can occur while initializing the ingestion service\nor when creating ingestion requests.</p>\n", "bases": "builtins.Exception"}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"fullname": "sift_py.ingestion._internal.error.IngestionValidationError.__init__", "modulename": "sift_py.ingestion._internal.error", "qualname": "IngestionValidationError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"fullname": "sift_py.ingestion._internal.error.IngestionValidationError.message", "modulename": "sift_py.ingestion._internal.error", "qualname": "IngestionValidationError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion._internal.ingest": {"fullname": "sift_py.ingestion._internal.ingest", "modulename": "sift_py.ingestion._internal.ingest", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion._internal.ingest_test": {"fullname": "sift_py.ingestion._internal.ingest_test", "modulename": "sift_py.ingestion._internal.ingest_test", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"fullname": "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows", "modulename": "sift_py.ingestion._internal.ingest_test", "qualname": "test_ingestion_service_update_flow_configs_updates_flows", "kind": "function", "doc": "<p>Tests to ensure that if a user adds a new flow to the telemetry config,\n<code>update_flow_configs</code> will ensure that it gets created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mocker</span><span class=\"p\">:</span> <span class=\"n\">pytest_mock</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">MockerFixture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"fullname": "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing", "modulename": "sift_py.ingestion._internal.ingest_test", "qualname": "test_ingestion_service_get_or_create_ingestion_config_retrieves_existing", "kind": "function", "doc": "<p>Ensure that if an ingestion config is queried by client key, a new one is not created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mocker</span><span class=\"p\">:</span> <span class=\"n\">pytest_mock</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">MockerFixture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"fullname": "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist", "modulename": "sift_py.ingestion._internal.ingest_test", "qualname": "test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist", "kind": "function", "doc": "<p>Ensure that if an ingestion config does not exist for a given client key then a new\ningestion config is created based on the telemetry config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mocker</span><span class=\"p\">:</span> <span class=\"n\">pytest_mock</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">MockerFixture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"fullname": "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations", "modulename": "sift_py.ingestion._internal.ingest_test", "qualname": "test_ingestion_service_try_create_ingestion_request_validations", "kind": "function", "doc": "<p>Tests all the different validations that happen when trying to create an ingestion request.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mocker</span><span class=\"p\">:</span> <span class=\"n\">pytest_mock</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">MockerFixture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"fullname": "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules", "modulename": "sift_py.ingestion._internal.ingest_test", "qualname": "test_ingestion_service_init_with_rules", "kind": "function", "doc": "<p>Ensures that rules are created and updated to include the asset from the\ntelemetry config when the ingestion service is initialized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mocker</span><span class=\"p\">:</span> <span class=\"n\">pytest_mock</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">MockerFixture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingestion_config": {"fullname": "sift_py.ingestion._internal.ingestion_config", "modulename": "sift_py.ingestion._internal.ingestion_config", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"fullname": "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key", "modulename": "sift_py.ingestion._internal.ingestion_config", "qualname": "get_ingestion_config_by_client_key", "kind": "function", "doc": "<p>Returns <code>None</code> if no ingestion config can be matched with the provided <code>client_key</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">client_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestionConfig</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"fullname": "sift_py.ingestion._internal.ingestion_config.create_ingestion_config", "modulename": "sift_py.ingestion._internal.ingestion_config", "qualname": "create_ingestion_config", "kind": "function", "doc": "<p>Creates a new ingestion config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">asset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">organization_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestionConfig</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"fullname": "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names", "modulename": "sift_py.ingestion._internal.ingestion_config", "qualname": "get_ingestion_config_flow_names", "kind": "function", "doc": "<p>Gets all names of flow configs of an ingestion config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">ingestion_config_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"fullname": "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows", "modulename": "sift_py.ingestion._internal.ingestion_config", "qualname": "get_ingestion_config_flows", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">ingestion_config_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"fullname": "sift_py.ingestion._internal.ingestion_config.create_flow_configs", "modulename": "sift_py.ingestion._internal.ingestion_config", "qualname": "create_flow_configs", "kind": "function", "doc": "<p>Adds flow configs to an existing ingestion config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">ingestion_config_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">flow_configs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.run": {"fullname": "sift_py.ingestion._internal.run", "modulename": "sift_py.ingestion._internal.run", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"fullname": "sift_py.ingestion._internal.run.get_run_id_by_name", "modulename": "sift_py.ingestion._internal.run", "qualname": "get_run_id_by_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion._internal.run.create_run": {"fullname": "sift_py.ingestion._internal.run.create_run", "modulename": "sift_py.ingestion._internal.run", "qualname": "create_run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">organization_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.buffer": {"fullname": "sift_py.ingestion.buffer", "modulename": "sift_py.ingestion.buffer", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"fullname": "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE", "modulename": "sift_py.ingestion.buffer", "qualname": "DEFAULT_BUFFER_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, "sift_py.ingestion.buffer.FlushCallback": {"fullname": "sift_py.ingestion.buffer.FlushCallback", "modulename": "sift_py.ingestion.buffer", "qualname": "FlushCallback", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "typing.Callable[[], NoneType]"}, "sift_py.ingestion.buffer.OnErrorCallback": {"fullname": "sift_py.ingestion.buffer.OnErrorCallback", "modulename": "sift_py.ingestion.buffer", "qualname": "OnErrorCallback", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "typing.Callable[[BaseException, typing.List[sift.ingest.v1.ingest_pb2.IngestWithConfigDataStreamRequest], typing.Callable[[], NoneType]], NoneType]"}, "sift_py.ingestion.buffer.BufferedIngestionService": {"fullname": "sift_py.ingestion.buffer.BufferedIngestionService", "modulename": "sift_py.ingestion.buffer", "qualname": "BufferedIngestionService", "kind": "class", "doc": "<p>See <code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code>\nfor more information and how to leverage buffered ingestion.</p>\n", "bases": "typing.Generic[~T]"}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"fullname": "sift_py.ingestion.buffer.BufferedIngestionService.__init__", "modulename": "sift_py.ingestion.buffer", "qualname": "BufferedIngestionService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ingestion_service</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">flush_interval_sec</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_error</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"ne\">BaseException</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataStreamRequest</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"fullname": "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows", "modulename": "sift_py.ingestion.buffer", "qualname": "BufferedIngestionService.ingest_flows", "kind": "function", "doc": "<p>Ingests flows in batches for each request generated from a flow.\nSee <code>sift_py.ingestion.service.IngestionService.create_ingestion_request</code>\nfor more information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowOrderedChannelValues</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"fullname": "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows", "modulename": "sift_py.ingestion.buffer", "qualname": "BufferedIngestionService.try_ingest_flows", "kind": "function", "doc": "<p>Ingests flows in batches and performs client-side validations for each request\ngenerated from a flow. See <code>sift_py.ingestion.service.IngestionService.try_create_ingestion_request</code>\nfor more information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">Flow</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"fullname": "sift_py.ingestion.buffer.BufferedIngestionService.flush", "modulename": "sift_py.ingestion.buffer", "qualname": "BufferedIngestionService.flush", "kind": "function", "doc": "<p>Flush and ingest all requests in buffer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel": {"fullname": "sift_py.ingestion.channel", "modulename": "sift_py.ingestion.channel", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.channel.ChannelValue": {"fullname": "sift_py.ingestion.channel.ChannelValue", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelValue", "kind": "class", "doc": "<p>Represents a fully qualified data point for a channel</p>\n", "bases": "builtins.dict"}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"fullname": "sift_py.ingestion.channel.ChannelValue.channel_name", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelValue.channel_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.channel.ChannelValue.component": {"fullname": "sift_py.ingestion.channel.ChannelValue.component", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelValue.component", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.channel.ChannelValue.value": {"fullname": "sift_py.ingestion.channel.ChannelValue.value", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelValue.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift.ingest.v1.ingest_pb2.IngestWithConfigDataChannelValue"}, "sift_py.ingestion.channel.ChannelConfig": {"fullname": "sift_py.ingestion.channel.ChannelConfig", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig", "kind": "class", "doc": "<p>A description for a channel</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"fullname": "sift_py.ingestion.channel.ChannelConfig.__init__", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataType</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">component</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bit_field_elements</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">enum_types</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelEnumType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, "sift_py.ingestion.channel.ChannelConfig.name": {"fullname": "sift_py.ingestion.channel.ChannelConfig.name", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"fullname": "sift_py.ingestion.channel.ChannelConfig.data_type", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift_py.ingestion.channel.ChannelDataType"}, "sift_py.ingestion.channel.ChannelConfig.description": {"fullname": "sift_py.ingestion.channel.ChannelConfig.description", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.channel.ChannelConfig.unit": {"fullname": "sift_py.ingestion.channel.ChannelConfig.unit", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.channel.ChannelConfig.component": {"fullname": "sift_py.ingestion.channel.ChannelConfig.component", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.component", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"fullname": "sift_py.ingestion.channel.ChannelConfig.bit_field_elements", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.bit_field_elements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.ingestion.channel.ChannelBitFieldElement]"}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"fullname": "sift_py.ingestion.channel.ChannelConfig.enum_types", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.enum_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.ingestion.channel.ChannelEnumType]"}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"fullname": "sift_py.ingestion.channel.ChannelConfig.identifier", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"fullname": "sift_py.ingestion.channel.ChannelConfig.value_from", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.value_from", "kind": "function", "doc": "<p>Like <code>try_value_from</code> except will return <code>None</code> there is a failure to produce a channel value due to a type mismatch.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"fullname": "sift_py.ingestion.channel.ChannelConfig.try_value_from", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.try_value_from", "kind": "function", "doc": "<p>Generate a channel value for this particular channel configuration. This will raise an exception\nif there is a type match, namely, if <code>value</code> isn't consistent with the channel's data-type. For a version\nof this function that does not raise an exception and simply ignores type mistmatches, see <code>value_from</code>. If <code>value</code>\nis <code>None</code> then an empty value will be generated.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"fullname": "sift_py.ingestion.channel.ChannelConfig.as_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelConfig</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"fullname": "sift_py.ingestion.channel.ChannelConfig.from_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"fullname": "sift_py.ingestion.channel.ChannelConfig.fqn", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelConfig.fqn", "kind": "function", "doc": "<p>NOTE: Component field of Channel has been deprecated. Function kept for backwards compatibility.</p>\n\n<p>The fully-qualified channel name of a channel called 'voltage' is simply <code>voltage</code>. The\nfully qualified name of a channel called 'temperature' of component 'motor' is a `motor.temperature'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement", "kind": "class", "doc": "<p>Abstract base class used to create create sub-types that can be treated\nas an object that can be converted into an instance of <code>ProtobufMessage</code>.</p>\n\n<p>If there are multiple possible protobuf targets then <code>as_pb</code> may be overloaded.</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement.__init__", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">bit_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement.name", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement.index", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement.index", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement.bit_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">channel_bit_field_element_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelBitFieldElement</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">channel_bit_field_element_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelBitFieldElement</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"fullname": "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelBitFieldElement.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">channel_bit_field_element_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelBitFieldElement</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelEnumType": {"fullname": "sift_py.ingestion.channel.ChannelEnumType", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelEnumType", "kind": "class", "doc": "<p>Abstract base class used to create create sub-types that can be treated\nas an object that can be converted into an instance of <code>ProtobufMessage</code>.</p>\n\n<p>If there are multiple possible protobuf targets then <code>as_pb</code> may be overloaded.</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"fullname": "sift_py.ingestion.channel.ChannelEnumType.__init__", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelEnumType.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "sift_py.ingestion.channel.ChannelEnumType.name": {"fullname": "sift_py.ingestion.channel.ChannelEnumType.name", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelEnumType.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.channel.ChannelEnumType.key": {"fullname": "sift_py.ingestion.channel.ChannelEnumType.key", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelEnumType.key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"fullname": "sift_py.ingestion.channel.ChannelEnumType.as_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelEnumType.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">channel_enum_type_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelEnumType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">channel_enum_type_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelEnumType</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"fullname": "sift_py.ingestion.channel.ChannelEnumType.from_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelEnumType.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">channel_enum_type_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelEnumType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.DOUBLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.DOUBLE: &#x27;double&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.STRING: &#x27;string&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.ENUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.ENUM: &#x27;enum&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.BIT_FIELD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.BIT_FIELD: &#x27;bit_field&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.BOOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.BOOL: &#x27;bool&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.FLOAT: &#x27;float&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.INT_32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.INT_32: &#x27;int32&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.INT_64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.INT_64: &#x27;int64&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.UINT_32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.UINT_32: &#x27;uint32&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.UINT_64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataTypeStrRep.UINT_64: &#x27;uint64&#x27;&gt;"}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"fullname": "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataTypeStrRep.from_api_format", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataTypeStrRep</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelDataType": {"fullname": "sift_py.ingestion.channel.ChannelDataType", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType", "kind": "class", "doc": "<p>Utility enum class to simplify working with channel data-types generated from protobuf</p>\n", "bases": "enum.Enum"}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"fullname": "sift_py.ingestion.channel.ChannelDataType.DOUBLE", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.DOUBLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.DOUBLE: 1&gt;"}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"fullname": "sift_py.ingestion.channel.ChannelDataType.STRING", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.STRING: 2&gt;"}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"fullname": "sift_py.ingestion.channel.ChannelDataType.ENUM", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.ENUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.ENUM: 3&gt;"}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"fullname": "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.BIT_FIELD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.BIT_FIELD: 4&gt;"}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"fullname": "sift_py.ingestion.channel.ChannelDataType.BOOL", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.BOOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.BOOL: 5&gt;"}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"fullname": "sift_py.ingestion.channel.ChannelDataType.FLOAT", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.FLOAT: 6&gt;"}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"fullname": "sift_py.ingestion.channel.ChannelDataType.INT_32", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.INT_32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.INT_32: 7&gt;"}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"fullname": "sift_py.ingestion.channel.ChannelDataType.INT_64", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.INT_64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.INT_64: 9&gt;"}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"fullname": "sift_py.ingestion.channel.ChannelDataType.UINT_32", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.UINT_32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.UINT_32: 8&gt;"}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"fullname": "sift_py.ingestion.channel.ChannelDataType.UINT_64", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.UINT_64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ChannelDataType.UINT_64: 10&gt;"}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"fullname": "sift_py.ingestion.channel.ChannelDataType.from_pb", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.from_pb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataType</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"fullname": "sift_py.ingestion.channel.ChannelDataType.from_str", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"fullname": "sift_py.ingestion.channel.ChannelDataType.as_human_str", "modulename": "sift_py.ingestion.channel", "qualname": "ChannelDataType.as_human_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">api_format</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.channel_fqn": {"fullname": "sift_py.ingestion.channel.channel_fqn", "modulename": "sift_py.ingestion.channel", "qualname": "channel_fqn", "kind": "function", "doc": "<p>Computes the fully qualified channel name.</p>\n\n<p>NOTE: Component field of Channel is deprecated and should not be used. Function is left for code compatibility.</p>\n\n<p>The fully-qualified channel name of a channel called 'voltage' is simply <code>voltage'. The\nfully qualified name of a channel called 'temperature' of component 'motor' is a</code>motor.temperature'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">ChannelConfig</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelValue</span><span class=\"p\">,</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">v3</span><span class=\"o\">.</span><span class=\"n\">channels_pb2</span><span class=\"o\">.</span><span class=\"n\">Channel</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">_AbstractChannel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.string_value": {"fullname": "sift_py.ingestion.channel.string_value", "modulename": "sift_py.ingestion.channel", "qualname": "string_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.double_value": {"fullname": "sift_py.ingestion.channel.double_value", "modulename": "sift_py.ingestion.channel", "qualname": "double_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.float_value": {"fullname": "sift_py.ingestion.channel.float_value", "modulename": "sift_py.ingestion.channel", "qualname": "float_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.bool_value": {"fullname": "sift_py.ingestion.channel.bool_value", "modulename": "sift_py.ingestion.channel", "qualname": "bool_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.int32_value": {"fullname": "sift_py.ingestion.channel.int32_value", "modulename": "sift_py.ingestion.channel", "qualname": "int32_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.uint32_value": {"fullname": "sift_py.ingestion.channel.uint32_value", "modulename": "sift_py.ingestion.channel", "qualname": "uint32_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.int64_value": {"fullname": "sift_py.ingestion.channel.int64_value", "modulename": "sift_py.ingestion.channel", "qualname": "int64_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.uint64_value": {"fullname": "sift_py.ingestion.channel.uint64_value", "modulename": "sift_py.ingestion.channel", "qualname": "uint64_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.bit_field_value": {"fullname": "sift_py.ingestion.channel.bit_field_value", "modulename": "sift_py.ingestion.channel", "qualname": "bit_field_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.enum_value": {"fullname": "sift_py.ingestion.channel.enum_value", "modulename": "sift_py.ingestion.channel", "qualname": "enum_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.empty_value": {"fullname": "sift_py.ingestion.channel.empty_value", "modulename": "sift_py.ingestion.channel", "qualname": "empty_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.channel.is_data_type": {"fullname": "sift_py.ingestion.channel.is_data_type", "modulename": "sift_py.ingestion.channel", "qualname": "is_data_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span>,</span><span class=\"param\">\t<span class=\"n\">target_type</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelDataType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.config": {"fullname": "sift_py.ingestion.config", "modulename": "sift_py.ingestion.config", "kind": "module", "doc": "<p>Contains the in memory representation of a telemetry config used to configure ingestion.</p>\n"}, "sift_py.ingestion.config.telemetry": {"fullname": "sift_py.ingestion.config.telemetry", "modulename": "sift_py.ingestion.config.telemetry", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig", "kind": "class", "doc": "<p>Configurations necessary to start ingestion.</p>\n\n<ul>\n<li><code>asset_name</code>: The name of the asset that you wish to telemeter data for.</li>\n<li><code>ingestion_client_key</code>: An arbitrary string chosen by the user to uniquely identify this ingestion configuration.</li>\n<li><code>flows</code>: A single flow can specify a single channel value or a set of channel values that are ingested together.</li>\n<li><code>organization_id</code>: ID of your organization in Sift. This field is only required if your user belongs to multiple organizations.</li>\n<li><code>rules</code>: Rules to evaluate during ingestion.</li>\n</ul>\n"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.__init__", "kind": "function", "doc": "<p>Will raise a <code>TelemetryConfigValidationError</code> under the following conditions:</p>\n\n<ul>\n<li>Multiple flows with the same name</li>\n<li>Multiple rules with the same name</li>\n<li>Identical channels in the same flow</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">asset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ingestion_client_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">organization_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">rules</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.asset_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.ingestion_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.organization_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.flows", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.flows", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.ingestion.flow.FlowConfig]"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.rules", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.rules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.rule.config.RuleConfig]"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.validate_rules", "kind": "function", "doc": "<p>Ensure that there are no rules with identical names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rules</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.validate_flows", "kind": "function", "doc": "<p>Ensures no duplicate channels and flows with the same name, otherwise raises a <code>TelemetryConfigValidationError</code> exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfig.try_from_yaml", "kind": "function", "doc": "<p>Initializes a telemetry config from a YAML file found at the provided <code>path</code> as well as optional\npaths to named expression modules if named expressions are leveraged.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">named_expression_modules</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">named_rule_modules</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfigValidationError", "kind": "class", "doc": "<p>When the telemetry config has invalid properties</p>\n", "bases": "builtins.Exception"}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfigValidationError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"fullname": "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message", "modulename": "sift_py.ingestion.config.telemetry", "qualname": "TelemetryConfigValidationError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml": {"fullname": "sift_py.ingestion.config.yaml", "modulename": "sift_py.ingestion.config.yaml", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.config.yaml.error": {"fullname": "sift_py.ingestion.config.yaml.error", "modulename": "sift_py.ingestion.config.yaml.error", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"fullname": "sift_py.ingestion.config.yaml.error.YamlConfigError", "modulename": "sift_py.ingestion.config.yaml.error", "qualname": "YamlConfigError", "kind": "class", "doc": "<p>When the YAML config has missing or invalid properties.</p>\n", "bases": "builtins.Exception"}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"fullname": "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__", "modulename": "sift_py.ingestion.config.yaml.error", "qualname": "YamlConfigError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"fullname": "sift_py.ingestion.config.yaml.error.YamlConfigError.message", "modulename": "sift_py.ingestion.config.yaml.error", "qualname": "YamlConfigError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.load": {"fullname": "sift_py.ingestion.config.yaml.load", "modulename": "sift_py.ingestion.config.yaml.load", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"fullname": "sift_py.ingestion.config.yaml.load.load_named_expression_modules", "modulename": "sift_py.ingestion.config.yaml.load", "qualname": "load_named_expression_modules", "kind": "function", "doc": "<p>Takes in a list of paths to YAML files which contains named expressions and processes them into a <code>dict</code>.\nThe key is the name of the expression and the value is the expression itself. For more information on\nnamed expression modules see <code>sift_py/yaml/service_example_betterproto.py</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"fullname": "sift_py.ingestion.config.yaml.load.read_and_validate", "modulename": "sift_py.ingestion.config.yaml.load", "qualname": "read_and_validate", "kind": "function", "doc": "<p>Reads in the telemetry config YAML file found at <code>path</code> and validates it. Any errors that may occur at the parsing\nstep will return an error whose source is the <code>yaml</code> package. Any errors that may occur during the\nvalidation step will return a <code>sift_py.ingestion.config.yaml.error.YamlConfigError</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">TelemetryConfigYamlSpec</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.config.yaml.spec": {"fullname": "sift_py.ingestion.config.yaml.spec", "modulename": "sift_py.ingestion.config.yaml.spec", "kind": "module", "doc": "<p>Formal specification of the types that <code>sift_py</code> expects when loading a telemetry config from a YAML file.</p>\n"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec", "kind": "class", "doc": "<p>The formal definition of what a single rule looks like in YAML.</p>\n\n<p><code>name</code>: Name of the rule.\n<code>rule_client_key</code>: User-defined string-key that uniquely identifies this rule config.\n<code>description</code>: Description of rule.\n<code>expression</code>:\n    Either an expression-string or a <code>sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec</code> referencing a named expression.\n<code>type</code>: Determines the action to perform if a rule gets evaluated to true.\n<code>assignee</code>: If <code>type</code> is <code>review</code>, determines who to notify. Expects an email.\n<code>tags</code>: Tags to associate with the rule.\n<code>channel_references</code>: A list of channel references that maps to an actual channel. More below.\n<code>sub_expressions</code>: A list of sub-expressions which is a mapping of place-holders to sub-expressions. Only used if using named expressions.\n<code>asset_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.\n<code>tag_names</code>: A list of tag names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</p>\n\n<p>Channel references:\nA channel reference is a string containing a numerical value prefixed with \"$\". Examples include \"$1\", \"$2\", \"$11\", and so on.\nThe channel reference is mapped to an actual channel config. In YAML it would look something like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*vehicle_state_channel</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*voltage_channel</span>\n</code></pre>\n</div>\n\n<p>Sub-expressions:\nA sub-expression is made up of two components: A reference and the actual sub-expression. The sub-expression reference is\na string with a \"$\" prepended to another string comprised of characters in the following character set: <code>[a-zA-Z0-9_]</code>.\nThis reference should be mapped to the actual sub-expression. For example, say you have kinematic equations in <code>kinematics.yml</code>,\nand the equation you're interested in using looks like the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">kinetic_energy_gt</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"l l-Scalar l-Scalar-Plain\">0.5 * $mass * $1 * $1 &gt; $threshold</span>\n</code></pre>\n</div>\n\n<p>To properly use <code>kinetic_energy_gt</code> in your rule, it would look like the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">rules</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Tracks high energy output while in motion</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">review</span>\n<span class=\"w\">    </span><span class=\"nt\">assignee</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">bob@example.com</span>\n<span class=\"w\">    </span><span class=\"nt\">expression</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy_gt</span>\n<span class=\"w\">    </span><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*velocity_channel</span>\n<span class=\"w\">    </span><span class=\"nt\">sub_expressions</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">10</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$threshold</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">470</span>\n<span class=\"w\">    </span><span class=\"nt\">tags</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">nostromo</span>\n</code></pre>\n</div>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.rule_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, sift_py.yaml.rule.NamedExpressionYamlSpec]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Literal[&#x27;phase&#x27;], Literal[&#x27;review&#x27;]]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.assignee", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[typing.Dict[str, sift_py.yaml.channel.ChannelConfigYamlSpec]]]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.sub_expressions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[typing.Dict[str, str]]]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.asset_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"fullname": "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "RuleYamlSpec.tag_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "NamedExpressionYamlSpec", "kind": "class", "doc": "<p>A named expression. This class is the formal definition of what a named expression\nshould look like in YAML. The value of <code>name</code> may contain a mix of channel references\nand channel identifiers.</p>\n\n<p>For a formal definition of channel references and channel identifiers see the following:\n<code>sift_py.ingestion.config.yaml.spec.RuleYamlSpec</code>.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"fullname": "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "NamedExpressionYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a channel should look like in YAML.</p>\n\n<p><code>name</code>: Name of channel.\n<code>description</code>: Optional channel description.\n<code>unit</code>: Unit of measurement.\n<code>component</code>: Name of component that channel belongs to.\n<code>data_type</code>: Type of the data associated with the channel.\n<code>enum_types</code>: Required if <code>data_type</code> is <code>enum.\n</code>bit_field_elements<code>: Required if</code>data_type<code>is</code>bit_field`.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.component", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Literal[&#x27;double&#x27;], Literal[&#x27;string&#x27;], Literal[&#x27;enum&#x27;], Literal[&#x27;bit_field&#x27;], Literal[&#x27;bool&#x27;], Literal[&#x27;float&#x27;], Literal[&#x27;int32&#x27;], Literal[&#x27;int64&#x27;], Literal[&#x27;uint32&#x27;], Literal[&#x27;uint64&#x27;]]"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.enum_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[sift_py.yaml.channel.ChannelEnumTypeYamlSpec]]"}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelConfigYamlSpec.bit_field_elements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[sift_py.yaml.channel.ChannelBitFieldElementYamlSpec]]"}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelEnumTypeYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a channel enum type should look like in YAML.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelEnumTypeYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelEnumTypeYamlSpec.key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelBitFieldElementYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a bit-field element should look like in YAML.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelBitFieldElementYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelBitFieldElementYamlSpec.index", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"fullname": "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "ChannelBitFieldElementYamlSpec.bit_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what the telemetry config should look like in YAML.</p>\n\n<p><code>asset_name</code>: The name of the asset to telemeter.\n<code>ingestion_client_key</code>: User-defined string-key that uniquely identifies this telemetry config.\n<code>organization_id</code>: Optional ID of user's organization. Required if user belongs to multiple orgs.\n<code>channels</code>: Sensors that send the data.\n<code>rules</code>: Rules that, when evaluated to a true, will perform some sort of acction.\n<code>flows</code>: A list of named groups of channels that send data together.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec.asset_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec.ingestion_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec.organization_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec.channels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, sift_py.yaml.channel.ChannelConfigYamlSpec]"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec.rules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[sift_py.yaml.rule.RuleYamlSpec]]"}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"fullname": "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "TelemetryConfigYamlSpec.flows", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[sift_py.ingestion.config.yaml.spec.FlowYamlSpec]]"}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"fullname": "sift_py.ingestion.config.yaml.spec.FlowYamlSpec", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "FlowYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a flow should look like in YAML.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"fullname": "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "FlowYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"fullname": "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "FlowYamlSpec.channels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.yaml.channel.ChannelConfigYamlSpec]"}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"fullname": "sift_py.ingestion.config.yaml.spec.YamlConfigError", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "YamlConfigError", "kind": "class", "doc": "<p>When the YAML config has missing or invalid properties.</p>\n", "bases": "builtins.Exception"}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"fullname": "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "YamlConfigError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"fullname": "sift_py.ingestion.config.yaml.spec.YamlConfigError.message", "modulename": "sift_py.ingestion.config.yaml.spec", "qualname": "YamlConfigError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.config.yaml.test_load": {"fullname": "sift_py.ingestion.config.yaml.test_load", "modulename": "sift_py.ingestion.config.yaml.test_load", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"fullname": "sift_py.ingestion.config.yaml.test_load.test__validate_flow", "modulename": "sift_py.ingestion.config.yaml.test_load", "qualname": "test__validate_flow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.flow": {"fullname": "sift_py.ingestion.flow", "modulename": "sift_py.ingestion.flow", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.flow.FlowConfig": {"fullname": "sift_py.ingestion.flow.FlowConfig", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig", "kind": "class", "doc": "<p>Describes a flow which is a set of channels whose values are often ingested together, allowing\nusers to send multiple data points for multiple channels in a single request.</p>\n\n<p><code>channel_by_fqn</code>:\n    A mapping of a channel's fully-qualified name to the index of the <code>sift_py.ingestion.channel.ChannelConfig</code>\n    as it appears in the <code>channels</code> attribute.</p>\n", "bases": "abc.ABC, typing.Generic[~T]"}, "sift_py.ingestion.flow.FlowConfig.__init__": {"fullname": "sift_py.ingestion.flow.FlowConfig.__init__", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">channels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelConfig</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.ingestion.flow.FlowConfig.name": {"fullname": "sift_py.ingestion.flow.FlowConfig.name", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.flow.FlowConfig.channels": {"fullname": "sift_py.ingestion.flow.FlowConfig.channels", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig.channels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.ingestion.channel.ChannelConfig]"}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"fullname": "sift_py.ingestion.flow.FlowConfig.channel_by_fqn", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig.channel_by_fqn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"fullname": "sift_py.ingestion.flow.FlowConfig.as_pb", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig.as_pb", "kind": "function", "doc": "<p>Performs the conversion into a sub-type of <code>ProtobufMessage</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"fullname": "sift_py.ingestion.flow.FlowConfig.from_pb", "modulename": "sift_py.ingestion.flow", "qualname": "FlowConfig.from_pb", "kind": "function", "doc": "<p>Converts a protobuf object to the type of the sub-class class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">ingestion_configs_pb2</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.flow.Flow": {"fullname": "sift_py.ingestion.flow.Flow", "modulename": "sift_py.ingestion.flow", "qualname": "Flow", "kind": "class", "doc": "<p>Represents a single flow that will be sent to Sift. Because this class uses <code>sift_py.ingestion.channel.ChannelValue</code>\nwhich is a fully qualified channel value, a specific ordering of items in <code>channel_values</code> is not required. If a\nparticular flow has 5 channels, it is okay to send only data for 3 channels using this class.</p>\n", "bases": "builtins.dict"}, "sift_py.ingestion.flow.Flow.flow_name": {"fullname": "sift_py.ingestion.flow.Flow.flow_name", "modulename": "sift_py.ingestion.flow", "qualname": "Flow.flow_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.flow.Flow.timestamp": {"fullname": "sift_py.ingestion.flow.Flow.timestamp", "modulename": "sift_py.ingestion.flow", "qualname": "Flow.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, "sift_py.ingestion.flow.Flow.channel_values": {"fullname": "sift_py.ingestion.flow.Flow.channel_values", "modulename": "sift_py.ingestion.flow", "qualname": "Flow.channel_values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.ingestion.channel.ChannelValue]"}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"fullname": "sift_py.ingestion.flow.FlowOrderedChannelValues", "modulename": "sift_py.ingestion.flow", "qualname": "FlowOrderedChannelValues", "kind": "class", "doc": "<p>Represents a single flow that will be sent to Sift. Unlike <code>sift_py.ingestion.flow.Flow</code>, this class requires\nthat the ordering of channel values in <code>channel_values</code> match what the flow associated with <code>flow_name</code> expects.\nIf a channel doesn't have particular data to send for a particular time, <code>sift_py.ingestion.channel.empty_value</code> should be used</p>\n", "bases": "builtins.dict"}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"fullname": "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name", "modulename": "sift_py.ingestion.flow", "qualname": "FlowOrderedChannelValues.flow_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"fullname": "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp", "modulename": "sift_py.ingestion.flow", "qualname": "FlowOrderedChannelValues.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"fullname": "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values", "modulename": "sift_py.ingestion.flow", "qualname": "FlowOrderedChannelValues.channel_values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift.ingest.v1.ingest_pb2.IngestWithConfigDataChannelValue]"}, "sift_py.ingestion.manager": {"fullname": "sift_py.ingestion.manager", "modulename": "sift_py.ingestion.manager", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"fullname": "sift_py.ingestion.manager.IngestionServiceBuilder", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServiceBuilder", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.TypeAlias", "default_value": "typing.Callable[[grpc.Channel], sift_py.ingestion.service.IngestionService]"}, "sift_py.ingestion.manager.IngestionServicesManager": {"fullname": "sift_py.ingestion.manager.IngestionServicesManager", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServicesManager", "kind": "class", "doc": "<p>Allows for the initialization of multiple instances of <code>sift_py.ingestion.service.IngestionService</code> from\neither telemetry configs or builders under a single wrapper class that assists in managing data-ingestion\nfor multiple telemetry configs.</p>\n\n<p>The initializer of this class can be used directly, but prefer to use either <code>from_builders</code> or <code>from_telemetry_configs</code>.\nPrefer to use <code>from_builders</code> if you have custom options that you want to provide to <code>sift_py.ingestion.service.IngestionService.__init__</code>.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">IngestionServicesManager</span><span class=\"o\">.</span><span class=\"n\">from_telementry_configs</span><span class=\"p\">(</span><span class=\"n\">grpc_channel</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;config_a&quot;</span><span class=\"p\">:</span> <span class=\"n\">config_a</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;config_b&quot;</span><span class=\"p\">:</span> <span class=\"n\">config_b</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"k\">with</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">ingestion_service</span><span class=\"p\">(</span><span class=\"s2\">&quot;config_a&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">config_a</span><span class=\"p\">:</span>\n    <span class=\"n\">config_a</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flow</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">ingestion_service</span><span class=\"p\">(</span><span class=\"s2\">&quot;config_b&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">config_b</span><span class=\"p\">:</span>\n    <span class=\"n\">config_b</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flow</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"fullname": "sift_py.ingestion.manager.IngestionServicesManager.__init__", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServicesManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transport_channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">ingestion_services</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">IngestionService</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"fullname": "sift_py.ingestion.manager.IngestionServicesManager.from_builders", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServicesManager.from_builders", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">builders</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span><span class=\"p\">],</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">IngestionService</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"fullname": "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServicesManager.from_telemetry_configs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">telemetry_configs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">telemetry</span><span class=\"o\">.</span><span class=\"n\">TelemetryConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"fullname": "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServicesManager.get_ingestion_service_by_identifier", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">IngestionService</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"fullname": "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServicesManager.ingestion_service", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">IngestionService</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"fullname": "sift_py.ingestion.manager.IngestionServiceManagerError", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServiceManagerError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"fullname": "sift_py.ingestion.manager.IngestionServiceManagerError.__init__", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionServiceManagerError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"fullname": "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap", "modulename": "sift_py.ingestion.manager", "qualname": "TelemetryConfigByIdentifierMap", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"fullname": "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier", "modulename": "sift_py.ingestion.manager", "qualname": "TelemetryConfigByIdentifierMap.identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"fullname": "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config", "modulename": "sift_py.ingestion.manager", "qualname": "TelemetryConfigByIdentifierMap.telemetry_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift_py.ingestion.config.telemetry.TelemetryConfig"}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"fullname": "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionConfigServiceBuilderIdentifierMap", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"fullname": "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionConfigServiceBuilderIdentifierMap.identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"fullname": "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder", "modulename": "sift_py.ingestion.manager", "qualname": "IngestionConfigServiceBuilderIdentifierMap.builder", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[grpc.Channel], sift_py.ingestion.service.IngestionService]"}, "sift_py.ingestion.rule": {"fullname": "sift_py.ingestion.rule", "modulename": "sift_py.ingestion.rule", "kind": "module", "doc": "<p>This module is deprecated and exists only to re-export members\nof <code>sift_py.rule</code>. Prefer to use that module.</p>\n"}, "sift_py.ingestion.rule.config": {"fullname": "sift_py.ingestion.rule.config", "modulename": "sift_py.ingestion.rule.config", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.rule.config.RuleConfig": {"fullname": "sift_py.ingestion.rule.config.RuleConfig", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig", "kind": "class", "doc": "<p>Defines a rule to be used during ingestion. If a rule's expression validates to try, then\na specific action will take place as specified by the <code>kind</code> attribute.</p>\n\n<ul>\n<li><code>name</code>: Name of the rule.</li>\n<li><code>description</code>: Description of the rule.</li>\n<li><code>expression</code>: A CEL string expression that executes the <code>action</code> when evaluated to a truthy value.</li>\n<li><code>action</code>: The action to execute if the result of an <code>expression</code> evaluates to a truthy value.</li>\n<li><code>channel_references</code>: Reference to channel. If an expression is \"$1 &lt; 10\", then \"$1\" is the reference and thus should the key in the dict.</li>\n<li><code>rule_client_key</code>: User defined unique string that uniquely identifies this rule.</li>\n<li><code>asset_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</li>\n<li><code>tag_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</li>\n</ul>\n", "bases": "sift_py._internal.convert.json.AsJson"}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.__init__", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">channel_references</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReference</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReferenceChannelConfig</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleAction</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rule_client_key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">asset_names</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tag_names</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sub_expressions</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span>)</span>"}, "sift_py.ingestion.rule.config.RuleConfig.name": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.name", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.rule.config.RuleConfig.description": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.description", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.expression", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.rule.config.RuleConfig.action": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.action", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.action", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[sift_py.rule.config.RuleAction, NoneType]"}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.channel_references", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.rule.config.ExpressionChannelReference]"}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.rule_client_key", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.rule_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.asset_names", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.asset_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.as_json", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.as_json", "kind": "function", "doc": "<p>Produces the appropriate JSON structure that's suitable for the Rules API.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"fullname": "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleConfig.interpolate_sub_expressions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sub_expressions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleAction": {"fullname": "sift_py.ingestion.rule.config.RuleAction", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleAction", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, "sift_py.ingestion.rule.config.RuleAction.kind": {"fullname": "sift_py.ingestion.rule.config.RuleAction.kind", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleAction.kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation", "kind": "class", "doc": "<p>Action to create a data-review annotation when a rule evaluates to a truthy value.</p>\n\n<ul>\n<li><code>tags</code>: List of tag names to associate with the newly created data-review annotation.</li>\n<li><code>assignee</code>: Email of user in organization to assign the newly created data-review annotation.</li>\n</ul>\n", "bases": "sift_py.rule.config.RuleAction"}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assignee</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.assignee", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreatePhaseAnnotation", "kind": "class", "doc": "<p>Action to create a phase annotation when a rule evaluates to a truthy value.</p>\n\n<ul>\n<li><code>tags</code>: List of tag names to associate with the newly created data-review annotation.</li>\n</ul>\n", "bases": "sift_py.rule.config.RuleAction"}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreatePhaseAnnotation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreatePhaseAnnotation.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"fullname": "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionCreatePhaseAnnotation.kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"fullname": "sift_py.ingestion.rule.config.RuleActionAnnotationKind", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionAnnotationKind", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"fullname": "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionAnnotationKind.REVIEW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionAnnotationKind.REVIEW: &#x27;review&#x27;&gt;"}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"fullname": "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionAnnotationKind.PHASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionAnnotationKind.PHASE: &#x27;phase&#x27;&gt;"}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"fullname": "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionAnnotationKind.from_annotation_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_type</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">internal</span><span class=\"o\">.</span><span class=\"n\">enum_type_wrapper</span><span class=\"o\">.</span><span class=\"n\">EnumTypeWrapper</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionAnnotationKind</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"fullname": "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionAnnotationKind.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionAnnotationKind</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleActionKind": {"fullname": "sift_py.ingestion.rule.config.RuleActionKind", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKind", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"fullname": "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKind.NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKind.NOTIFICATION: 1&gt;"}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"fullname": "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKind.ANNOTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKind.ANNOTATION: 2&gt;"}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"fullname": "sift_py.ingestion.rule.config.RuleActionKind.from_str", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKind.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"fullname": "sift_py.ingestion.rule.config.RuleActionKindStrRep", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKindStrRep", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"fullname": "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKindStrRep.NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKindStrRep.NOTIFICATION: &#x27;notification&#x27;&gt;"}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"fullname": "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION", "modulename": "sift_py.ingestion.rule.config", "qualname": "RuleActionKindStrRep.ANNOTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKindStrRep.ANNOTATION: &#x27;annotation&#x27;&gt;"}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"fullname": "sift_py.ingestion.rule.config.ExpressionChannelReference", "modulename": "sift_py.ingestion.rule.config", "qualname": "ExpressionChannelReference", "kind": "class", "doc": "<p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression.\n<code>channel_identifier</code>: The channel name.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"fullname": "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference", "modulename": "sift_py.ingestion.rule.config", "qualname": "ExpressionChannelReference.channel_reference", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"fullname": "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier", "modulename": "sift_py.ingestion.rule.config", "qualname": "ExpressionChannelReference.channel_identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"fullname": "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig", "modulename": "sift_py.ingestion.rule.config", "qualname": "ExpressionChannelReferenceChannelConfig", "kind": "class", "doc": "<p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression.\n<code>channel_config</code>: Instance of <code>sift_py.ingestion.channel.ChannelConfig</code>.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"fullname": "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference", "modulename": "sift_py.ingestion.rule.config", "qualname": "ExpressionChannelReferenceChannelConfig.channel_reference", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"fullname": "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config", "modulename": "sift_py.ingestion.rule.config", "qualname": "ExpressionChannelReferenceChannelConfig.channel_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift_py.ingestion.channel.ChannelConfig"}, "sift_py.ingestion.service": {"fullname": "sift_py.ingestion.service", "modulename": "sift_py.ingestion.service", "kind": "module", "doc": "<p></p>\n"}, "sift_py.ingestion.service.IngestionService": {"fullname": "sift_py.ingestion.service.IngestionService", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService", "kind": "class", "doc": "<p>A fully configured service that, when instantiated, is ready to start ingesting data.</p>\n\n<ul>\n<li><code>transport_channel</code>: A gRPC transport channel. Prefer to use <code>SiftChannel</code>.</li>\n<li><code>ingestion_config</code>: The underlying strongly-typed ingestion config. Users of this service don't need to be concerned with this.</li>\n<li><code>asset_name</code>: The name of the asset to telemeter.</li>\n<li><code>flow_configs_by_name</code>: A mapping of flow config name to the actual flow config.</li>\n<li><code>run_id</code>: The ID of the optional run to associated ingested data with.</li>\n<li><code>organization_id</code>: ID of the organization of the user.</li>\n<li><code>end_stream_on_error</code>:\nBy default any errors that may occur during ingestion API-side are produced asynchronously and ingestion\nwon't be interrupted. The errors produced are surfaced on the user errors page. Setting this field to <code>True</code>\nwill ensure that any errors that occur during ingestion is returned immediately, terminating the stream. This\nis useful for debugging purposes.</li>\n</ul>\n", "bases": "sift_py.ingestion._internal.ingest._IngestionServiceImpl"}, "sift_py.ingestion.service.IngestionService.__init__": {"fullname": "sift_py.ingestion.service.IngestionService.__init__", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">telemetry</span><span class=\"o\">.</span><span class=\"n\">TelemetryConfig</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_stream_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "sift_py.ingestion.service.IngestionService.transport_channel": {"fullname": "sift_py.ingestion.service.IngestionService.transport_channel", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.transport_channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": grpc.Channel"}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"fullname": "sift_py.ingestion.service.IngestionService.ingestion_config", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.ingestion_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift.ingestion_configs.v2.ingestion_configs_pb2.IngestionConfig"}, "sift_py.ingestion.service.IngestionService.asset_name": {"fullname": "sift_py.ingestion.service.IngestionService.asset_name", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.asset_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"fullname": "sift_py.ingestion.service.IngestionService.flow_configs_by_name", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.flow_configs_by_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, sift_py.ingestion.flow.FlowConfig]"}, "sift_py.ingestion.service.IngestionService.run_id": {"fullname": "sift_py.ingestion.service.IngestionService.run_id", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.run_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.service.IngestionService.organization_id": {"fullname": "sift_py.ingestion.service.IngestionService.organization_id", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.organization_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"fullname": "sift_py.ingestion.service.IngestionService.end_stream_on_error", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.end_stream_on_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "sift_py.ingestion.service.IngestionService.ingest": {"fullname": "sift_py.ingestion.service.IngestionService.ingest", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.ingest", "kind": "function", "doc": "<p>This method performs the actual data ingestion given a list of data ingestion requests.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">requests</span><span class=\"p\">:</span> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataStreamRequest</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.attach_run": {"fullname": "sift_py.ingestion.service.IngestionService.attach_run", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.attach_run", "kind": "function", "doc": "<p>Retrieve an existing run or create one to use during this period of ingestion.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span>,</span><span class=\"param\">\t<span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">organization_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.detach_run": {"fullname": "sift_py.ingestion.service.IngestionService.detach_run", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.detach_run", "kind": "function", "doc": "<p>Detach run from this period of ingestion. Subsequent data ingested won't be associated with\nthe run being detached.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"fullname": "sift_py.ingestion.service.IngestionService.try_create_ingestion_request", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.try_create_ingestion_request", "kind": "function", "doc": "<p>Creates an <code>IngestWithConfigDataStreamRequest</code>, i.e. a flow, given a <code>flow_name</code> and a\nlist of <code>ChannelValue</code> objects. Channels that appear in the flow config but not in the\n<code>channel_values</code> will be assigned an empty value.</p>\n\n<p>This function will perform validation checks to ensure that the values provided in the dictionary; this\nincludes:</p>\n\n<ul>\n<li>Making sure the flow exists</li>\n<li>Making sure that the there are no unexpected channels provided for the given flow</li>\n<li>Making sure the channel value is the expected type</li>\n<li>Making sure that the timestamp is in UTC</li>\n</ul>\n\n<p>If any of the above validations fail then a <code>IngestionValidationError</code> will be raised.</p>\n\n<p>If for performance reasons you'd prefer to skip the validation checks, or perhaps you did the\nvalidations on your own, prefer to use <code>create_ingestion_request</code>. Any errors that occur during\ningestion will be handled by the Sift API.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">flow_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">channel_values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">ChannelValue</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataStreamRequest</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"fullname": "sift_py.ingestion.service.IngestionService.create_ingestion_request", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.create_ingestion_request", "kind": "function", "doc": "<p>Unlike <code>try_create_ingestion_request</code>, this skips argument validations. Useful for when user has already done their own\nargument validation or if they require low-latency execution time client-side.</p>\n\n<p>If there are errors that occur during ingestion and the <code>end_stream_on_error</code> attribute is set to <code>False</code>,\nthe data ingestion stream will skip over them and errors instead will be produced asynchronously and become\navailable in the UI application in the errors page. If <code>end_stream_on_error</code> is set to <code>True</code>, then the\ndata ingestion stream will be terminated if an error is encountered during ingestion.</p>\n\n<p>These are some things to look out for when using this method instead of <code>try_create_ingestion_request</code>:</p>\n\n<ul>\n<li>Values in <code>channel_values</code> must appear in the same order its corresponding channel appears in the flow config\nassociated with the <code>flow_name</code>.</li>\n<li>The length of <code>channel_values</code> is expected to match the length of the channel configs list of the flow config\nassociated with <code>flow_name</code>. <code>sift_py.ingestion.channel.empty_value()</code> may be used if you require empty values.</li>\n<li>The <code>timestamp</code> must be in UTC.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">flow_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">channel_values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataChannelValue</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataStreamRequest</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"fullname": "sift_py.ingestion.service.IngestionService.ingest_flows", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.ingest_flows", "kind": "function", "doc": "<p>Combines the requests creation step and ingestion into a single call.\nSee <code>create_ingestion_request</code> for information about how client-side validations are handled.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowOrderedChannelValues</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"fullname": "sift_py.ingestion.service.IngestionService.try_ingest_flows", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.try_ingest_flows", "kind": "function", "doc": "<p>Combines the requests creation step and ingestion into a single call.\nSee <code>try_create_ingestion_request</code> for information about how client-side validations are handled.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">flows</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">Flow</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"fullname": "sift_py.ingestion.service.IngestionService.buffered_ingestion", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.buffered_ingestion", "kind": "function", "doc": "<p>This method automates buffering requests and streams them in batches. It is recommended to be used\nin a with-block. Failure to put this in a with-block may result in some data not being ingested unless\nthe caller explicitly calls <code>sift_py.ingestion.buffer.BufferedIngestionService.flush</code> before the returned\ninstance of <code>sift_py.ingestion.buffer.BufferedIngestionService</code> goes out of scope. Once the with-block\nis exited then a final call to the aforementioned <code>flush</code> method  will be made to ingest the remaining data.</p>\n\n<p>Buffered ingestion works by automatically flushing and ingesting data into Sift whenever the buffer is filled.\nThe size of the buffer is configured via the <code>buffer_size</code> argument and defaults to <code>sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE</code>.</p>\n\n<p>It is also possible to configure buffered ingestion to periodically flush the buffer regardless of whether or not the buffer\nis filled. The interval between flushes is set via the <code>flush_interval_sec</code> argument which is the number of seconds between each flush.\nIf a flush were to occur due to the buffer being filled, then the timer will restart. If <code>flush_interval_sec</code> is <code>None</code>, then flushes will only\noccur once the buffer is filled and at the end of the scope of the with-block.</p>\n\n<p>If an error were to occur that would cause the context manager to call <code>__exit__</code>, one last attempt to flush the buffer will be made\nbefore the error is re-raised for the caller to handle. If the caller would instead like to customize <code>__exit__</code> behavior in the case\nof an error, they can make use of the <code>on_error</code> argument whose type signature is a function where the first argument is the error,\nthe second is the buffer containing the uningested request, and the third argument being a function where, when called, will attempt\nto flush the buffer.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># With client-side validations</span>\n<span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10_000</span><span class=\"p\">):</span>\n        <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">try_ingest_flows</span><span class=\"p\">({</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;channel_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my-channel&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">})</span>\n\n<span class=\"c1\"># Without client-side validations and a custom buffer size</span>\n<span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">(</span><span class=\"mi\">2_000</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6_000</span><span class=\"p\">):</span>\n        <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">ingest_flows</span><span class=\"p\">({</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n        <span class=\"p\">})</span>\n\n<span class=\"c1\"># With default buffer size and periodic flushes of 3.2 seconds</span>\n<span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">(</span><span class=\"n\">flush_interval_sec</span><span class=\"o\">=</span><span class=\"mf\">3.2</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6_000</span><span class=\"p\">):</span>\n        <span class=\"n\">buffered_ingestion</span><span class=\"o\">.</span><span class=\"n\">ingest_flows</span><span class=\"p\">({</span>\n            <span class=\"s2\">&quot;flow_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;readings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;channel_values&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">double_value</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n        <span class=\"p\">})</span>\n\n<span class=\"c1\"># Custom code to run when error</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">on_error_calback</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Save contents of buffer to disk</span>\n    <span class=\"o\">...</span>\n    <span class=\"c1\"># Try once more to flush the buffer</span>\n    <span class=\"n\">flush</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ingestion_service</span><span class=\"o\">.</span><span class=\"n\">buffered_ingestion</span><span class=\"p\">(</span><span class=\"n\">on_error</span><span class=\"o\">=</span><span class=\"n\">on_error_calback</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">buffered_ingestion</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flush_interval_sec</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_error</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"ne\">BaseException</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift</span><span class=\"o\">.</span><span class=\"n\">ingest</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">ingest_pb2</span><span class=\"o\">.</span><span class=\"n\">IngestWithConfigDataStreamRequest</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">BufferedIngestionService</span>:</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.create_flow": {"fullname": "sift_py.ingestion.service.IngestionService.create_flow", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.create_flow", "kind": "function", "doc": "<p>Like <code>try_create_new_flow</code> but will automatically overwrite any existing flow config with <code>flow_config</code> if they\nshare the same name. If you'd an exception to be raise in the case of a name collision then see <code>try_create_new_flow</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flow_config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"fullname": "sift_py.ingestion.service.IngestionService.try_create_flow", "modulename": "sift_py.ingestion.service", "qualname": "IngestionService.try_create_flow", "kind": "function", "doc": "<p>Tries to create a new flow at runtime. Will raise an <code>IngestionValidationError</code> if there already exists\na flow with the name of the <code>flow_config</code> argument. If you'd like to overwrite any flow configs with that\nhave the same name as the provided <code>flow_config</code>, then see <code>create_new_flow</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flow_config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">ingestion</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"o\">.</span><span class=\"n\">FlowConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.report_templates": {"fullname": "sift_py.report_templates", "modulename": "sift_py.report_templates", "kind": "module", "doc": "<p></p>\n"}, "sift_py.report_templates.config": {"fullname": "sift_py.report_templates.config", "modulename": "sift_py.report_templates.config", "kind": "module", "doc": "<p></p>\n"}, "sift_py.report_templates.config.ReportTemplateConfig": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig", "kind": "class", "doc": "<p>Configuration for a report template.</p>\n\n<ul>\n<li><code>name</code>: Name of the report template.</li>\n<li><code>template_client_key</code>: Unique client key to identify the report template.</li>\n<li><code>organization_id</code>: Organization ID that the report template belongs to.</li>\n<li><code>tags</code>: Tags to associate with the report template.</li>\n<li><code>description</code>: Description of the report template.</li>\n<li><code>rule_client_keys</code>: List of rule client keys associated with the report template.</li>\n<li><code>archived_date</code>: Date when the report template was archived. Setting this field\nwill archive the report template, and unsetting it will unarchive the report template.</li>\n<li><code>archived</code>: True if the report template is archived, False otherwise.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel, sift_py._internal.convert.json.AsJson"}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.model_config", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.name", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.template_client_key", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.template_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.template_id", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.tags", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.description", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.rule_client_keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.archived_date", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.archived_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[datetime.datetime, NoneType]"}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.archived", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.archived", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"fullname": "sift_py.report_templates.config.ReportTemplateConfig.as_json", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateConfig.as_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.report_templates.config.ReportTemplateUpdate": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate", "kind": "class", "doc": "<p>Represents a dictionary for updating properties of a report template. All fields are optional\nand only the provided fields will be updated.</p>\n\n<ul>\n<li><code>name</code>: Updated name of the report template.</li>\n<li><code>template_client_key</code>: Updated unique client key to identify the report template.</li>\n<li><code>organization_id</code>: Updated organization ID that the report template belongs to.</li>\n<li><code>tags</code>: Updated tags to associate with the report template.</li>\n<li><code>description</code>: Updated description of the report template.</li>\n<li><code>rule_client_keys</code>: Updated list of rule client keys associated with the report template.</li>\n<li><code>archived</code>: True if the report template is archived, False otherwise.</li>\n</ul>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate.name", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate.template_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate.tags", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate.description", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate.rule_client_keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"fullname": "sift_py.report_templates.config.ReportTemplateUpdate.archived", "modulename": "sift_py.report_templates.config", "qualname": "ReportTemplateUpdate.archived", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[bool]"}, "sift_py.report_templates.service": {"fullname": "sift_py.report_templates.service", "modulename": "sift_py.report_templates.service", "kind": "module", "doc": "<p></p>\n"}, "sift_py.report_templates.service.ReportTemplateService": {"fullname": "sift_py.report_templates.service.ReportTemplateService", "modulename": "sift_py.report_templates.service", "qualname": "ReportTemplateService", "kind": "class", "doc": "<p>A service for managing report templates. Allows for creating, updating, and retrieving report\ntemplates.</p>\n"}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"fullname": "sift_py.report_templates.service.ReportTemplateService.__init__", "modulename": "sift_py.report_templates.service", "qualname": "ReportTemplateService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span></span>)</span>"}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"fullname": "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template", "modulename": "sift_py.report_templates.service", "qualname": "ReportTemplateService.create_or_update_report_template", "kind": "function", "doc": "<p>Create or update a report template via a ReportTemplateConfig. The config must contain a\ntemplate_client_key, otherwise an exception will be raised. If a report template with the\nsame client key exists, it will be updated. Otherwise, a new report template will be created.\nSee <code>sift_py.report_templates.config.ReportTemplateConfig</code> for more information on available\nfields to configure.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">report_templates</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ReportTemplateConfig</span>,</span><span class=\"param\">\t<span class=\"n\">updates</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">report_templates</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ReportTemplateUpdate</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"fullname": "sift_py.report_templates.service.ReportTemplateService.get_report_template", "modulename": "sift_py.report_templates.service", "qualname": "ReportTemplateService.get_report_template", "kind": "function", "doc": "<p>Retrieve a report template by client key or id. Only one of client_key or id should be\nprovided, otherwise an exception will be raised. If a report template is found, it will be\nreturned as a ReportTemplateConfig object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">client_key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">report_templates</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ReportTemplateConfig</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"fullname": "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml", "modulename": "sift_py.report_templates.service", "qualname": "ReportTemplateService.load_report_templates_from_yaml", "kind": "function", "doc": "<p>Load report templates from YAML definitions. The YAML defined report template must have\na client key. If the report template with the given client key exists, it will be updated,\notherwise a new report template will be created.\nSee <code>sift_py.yaml.report_templates.load_report_templates</code> for more information on the YAML\nspec for report templates.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">report_templates</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ReportTemplateConfig</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.rest": {"fullname": "sift_py.rest", "modulename": "sift_py.rest", "kind": "module", "doc": "<p></p>\n"}, "sift_py.rest.SiftRestConfig": {"fullname": "sift_py.rest.SiftRestConfig", "modulename": "sift_py.rest", "qualname": "SiftRestConfig", "kind": "class", "doc": "<p>Config class used to to interact with services that use Sift's REST API.`.</p>\n\n<ul>\n<li><code>uri</code>: The URI of Sift's REST API. The scheme portion of the URI i.e. <code>https://</code> should be ommitted.</li>\n<li><code>apikey</code>: User-generated API key generated via the Sift application.</li>\n<li><code>retry</code>: Urllib3 Retry configuration. If not provided, a default of 3 retries is used.</li>\n<li><code>use_ssl</code>: INTERNAL USE. Meant to be used for local development.</li>\n</ul>\n", "bases": "builtins.dict"}, "sift_py.rest.SiftRestConfig.uri": {"fullname": "sift_py.rest.SiftRestConfig.uri", "modulename": "sift_py.rest", "qualname": "SiftRestConfig.uri", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rest.SiftRestConfig.apikey": {"fullname": "sift_py.rest.SiftRestConfig.apikey", "modulename": "sift_py.rest", "qualname": "SiftRestConfig.apikey", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rest.SiftRestConfig.retry": {"fullname": "sift_py.rest.SiftRestConfig.retry", "modulename": "sift_py.rest", "qualname": "SiftRestConfig.retry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[urllib3.util.retry.Retry]"}, "sift_py.rest.SiftRestConfig.use_ssl": {"fullname": "sift_py.rest.SiftRestConfig.use_ssl", "modulename": "sift_py.rest", "qualname": "SiftRestConfig.use_ssl", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[bool]"}, "sift_py.rest.compute_uri": {"fullname": "sift_py.rest.compute_uri", "modulename": "sift_py.rest", "qualname": "compute_uri", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">restconf</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">SiftRestConfig</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.rule": {"fullname": "sift_py.rule", "modulename": "sift_py.rule", "kind": "module", "doc": "<p></p>\n"}, "sift_py.rule.config": {"fullname": "sift_py.rule.config", "modulename": "sift_py.rule.config", "kind": "module", "doc": "<p></p>\n"}, "sift_py.rule.config.RuleConfig": {"fullname": "sift_py.rule.config.RuleConfig", "modulename": "sift_py.rule.config", "qualname": "RuleConfig", "kind": "class", "doc": "<p>Defines a rule to be used during ingestion. If a rule's expression validates to try, then\na specific action will take place as specified by the <code>kind</code> attribute.</p>\n\n<ul>\n<li><code>name</code>: Name of the rule.</li>\n<li><code>description</code>: Description of the rule.</li>\n<li><code>expression</code>: A CEL string expression that executes the <code>action</code> when evaluated to a truthy value.</li>\n<li><code>action</code>: The action to execute if the result of an <code>expression</code> evaluates to a truthy value.</li>\n<li><code>channel_references</code>: Reference to channel. If an expression is \"$1 &lt; 10\", then \"$1\" is the reference and thus should the key in the dict.</li>\n<li><code>rule_client_key</code>: User defined unique string that uniquely identifies this rule.</li>\n<li><code>asset_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</li>\n<li><code>tag_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</li>\n</ul>\n", "bases": "sift_py._internal.convert.json.AsJson"}, "sift_py.rule.config.RuleConfig.__init__": {"fullname": "sift_py.rule.config.RuleConfig.__init__", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">channel_references</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReference</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ExpressionChannelReferenceChannelConfig</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleAction</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rule_client_key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">asset_names</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tag_names</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sub_expressions</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span>)</span>"}, "sift_py.rule.config.RuleConfig.name": {"fullname": "sift_py.rule.config.RuleConfig.name", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.config.RuleConfig.description": {"fullname": "sift_py.rule.config.RuleConfig.description", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.config.RuleConfig.expression": {"fullname": "sift_py.rule.config.RuleConfig.expression", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.config.RuleConfig.action": {"fullname": "sift_py.rule.config.RuleConfig.action", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.action", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[sift_py.rule.config.RuleAction, NoneType]"}, "sift_py.rule.config.RuleConfig.channel_references": {"fullname": "sift_py.rule.config.RuleConfig.channel_references", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.rule.config.ExpressionChannelReference]"}, "sift_py.rule.config.RuleConfig.rule_client_key": {"fullname": "sift_py.rule.config.RuleConfig.rule_client_key", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.rule_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.rule.config.RuleConfig.asset_names": {"fullname": "sift_py.rule.config.RuleConfig.asset_names", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.asset_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, "sift_py.rule.config.RuleConfig.as_json": {"fullname": "sift_py.rule.config.RuleConfig.as_json", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.as_json", "kind": "function", "doc": "<p>Produces the appropriate JSON structure that's suitable for the Rules API.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"fullname": "sift_py.rule.config.RuleConfig.interpolate_sub_expressions", "modulename": "sift_py.rule.config", "qualname": "RuleConfig.interpolate_sub_expressions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sub_expressions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleAction": {"fullname": "sift_py.rule.config.RuleAction", "modulename": "sift_py.rule.config", "qualname": "RuleAction", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, "sift_py.rule.config.RuleAction.kind": {"fullname": "sift_py.rule.config.RuleAction.kind", "modulename": "sift_py.rule.config", "qualname": "RuleAction.kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"fullname": "sift_py.rule.config.RuleActionCreateDataReviewAnnotation", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation", "kind": "class", "doc": "<p>Action to create a data-review annotation when a rule evaluates to a truthy value.</p>\n\n<ul>\n<li><code>tags</code>: List of tag names to associate with the newly created data-review annotation.</li>\n<li><code>assignee</code>: Email of user in organization to assign the newly created data-review annotation.</li>\n</ul>\n", "bases": "RuleAction"}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"fullname": "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assignee</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"fullname": "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"fullname": "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.assignee", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, NoneType]"}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"fullname": "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreateDataReviewAnnotation.kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"fullname": "sift_py.rule.config.RuleActionCreatePhaseAnnotation", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreatePhaseAnnotation", "kind": "class", "doc": "<p>Action to create a phase annotation when a rule evaluates to a truthy value.</p>\n\n<ul>\n<li><code>tags</code>: List of tag names to associate with the newly created data-review annotation.</li>\n</ul>\n", "bases": "RuleAction"}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"fullname": "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreatePhaseAnnotation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"fullname": "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreatePhaseAnnotation.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[List[str], NoneType]"}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"fullname": "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind", "modulename": "sift_py.rule.config", "qualname": "RuleActionCreatePhaseAnnotation.kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleActionKind": {"fullname": "sift_py.rule.config.RuleActionKind", "modulename": "sift_py.rule.config", "qualname": "RuleActionKind", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"fullname": "sift_py.rule.config.RuleActionKind.NOTIFICATION", "modulename": "sift_py.rule.config", "qualname": "RuleActionKind.NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKind.NOTIFICATION: 1&gt;"}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"fullname": "sift_py.rule.config.RuleActionKind.ANNOTATION", "modulename": "sift_py.rule.config", "qualname": "RuleActionKind.ANNOTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKind.ANNOTATION: 2&gt;"}, "sift_py.rule.config.RuleActionKind.from_str": {"fullname": "sift_py.rule.config.RuleActionKind.from_str", "modulename": "sift_py.rule.config", "qualname": "RuleActionKind.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionKind</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleActionAnnotationKind": {"fullname": "sift_py.rule.config.RuleActionAnnotationKind", "modulename": "sift_py.rule.config", "qualname": "RuleActionAnnotationKind", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"fullname": "sift_py.rule.config.RuleActionAnnotationKind.REVIEW", "modulename": "sift_py.rule.config", "qualname": "RuleActionAnnotationKind.REVIEW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionAnnotationKind.REVIEW: &#x27;review&#x27;&gt;"}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"fullname": "sift_py.rule.config.RuleActionAnnotationKind.PHASE", "modulename": "sift_py.rule.config", "qualname": "RuleActionAnnotationKind.PHASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionAnnotationKind.PHASE: &#x27;phase&#x27;&gt;"}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"fullname": "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type", "modulename": "sift_py.rule.config", "qualname": "RuleActionAnnotationKind.from_annotation_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_type</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">protobuf</span><span class=\"o\">.</span><span class=\"n\">internal</span><span class=\"o\">.</span><span class=\"n\">enum_type_wrapper</span><span class=\"o\">.</span><span class=\"n\">EnumTypeWrapper</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionAnnotationKind</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"fullname": "sift_py.rule.config.RuleActionAnnotationKind.from_str", "modulename": "sift_py.rule.config", "qualname": "RuleActionAnnotationKind.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleActionAnnotationKind</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.config.RuleActionKindStrRep": {"fullname": "sift_py.rule.config.RuleActionKindStrRep", "modulename": "sift_py.rule.config", "qualname": "RuleActionKindStrRep", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"fullname": "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION", "modulename": "sift_py.rule.config", "qualname": "RuleActionKindStrRep.NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKindStrRep.NOTIFICATION: &#x27;notification&#x27;&gt;"}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"fullname": "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION", "modulename": "sift_py.rule.config", "qualname": "RuleActionKindStrRep.ANNOTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuleActionKindStrRep.ANNOTATION: &#x27;annotation&#x27;&gt;"}, "sift_py.rule.config.ExpressionChannelReference": {"fullname": "sift_py.rule.config.ExpressionChannelReference", "modulename": "sift_py.rule.config", "qualname": "ExpressionChannelReference", "kind": "class", "doc": "<p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression.\n<code>channel_identifier</code>: The channel name.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"fullname": "sift_py.rule.config.ExpressionChannelReference.channel_reference", "modulename": "sift_py.rule.config", "qualname": "ExpressionChannelReference.channel_reference", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"fullname": "sift_py.rule.config.ExpressionChannelReference.channel_identifier", "modulename": "sift_py.rule.config", "qualname": "ExpressionChannelReference.channel_identifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"fullname": "sift_py.rule.config.ExpressionChannelReferenceChannelConfig", "modulename": "sift_py.rule.config", "qualname": "ExpressionChannelReferenceChannelConfig", "kind": "class", "doc": "<p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression.\n<code>channel_config</code>: Instance of <code>sift_py.ingestion.channel.ChannelConfig</code>.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"fullname": "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference", "modulename": "sift_py.rule.config", "qualname": "ExpressionChannelReferenceChannelConfig.channel_reference", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"fullname": "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config", "modulename": "sift_py.rule.config", "qualname": "ExpressionChannelReferenceChannelConfig.channel_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sift_py.ingestion.channel.ChannelConfig"}, "sift_py.rule.service": {"fullname": "sift_py.rule.service", "modulename": "sift_py.rule.service", "kind": "module", "doc": "<p></p>\n"}, "sift_py.rule.service.RuleService": {"fullname": "sift_py.rule.service.RuleService", "modulename": "sift_py.rule.service", "qualname": "RuleService", "kind": "class", "doc": "<p>A service for managing rules. Allows for loading rules from YAML and creating or updating them in the Sift API.</p>\n"}, "sift_py.rule.service.RuleService.__init__": {"fullname": "sift_py.rule.service.RuleService.__init__", "modulename": "sift_py.rule.service", "qualname": "RuleService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">Channel</span></span>)</span>"}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"fullname": "sift_py.rule.service.RuleService.load_rules_from_yaml", "modulename": "sift_py.rule.service", "qualname": "RuleService.load_rules_from_yaml", "kind": "function", "doc": "<p>Loads rules from a YAML spec, and creates or updates the rules in the Sift API.\nFor more on rule YAML definitions, see <code>sift_py.ingestion.config.yaml.spec.RuleYamlSpec</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">named_expressions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.service.RuleService.create_or_update_rules": {"fullname": "sift_py.rule.service.RuleService.create_or_update_rules", "modulename": "sift_py.rule.service", "qualname": "RuleService.create_or_update_rules", "kind": "function", "doc": "<p>Create or update a list of rules via a list of RuleConfigs.\nSee <code>sift_py.rule.config.RuleConfig</code> for more information on configuation parameters for rules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule_configs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.rule.service.RuleService.attach_asset": {"fullname": "sift_py.rule.service.RuleService.attach_asset", "modulename": "sift_py.rule.service", "qualname": "RuleService.attach_asset", "kind": "function", "doc": "<p>Associates a rule with an asset by name. The asset must already exist in the Sift API.\nThe provided rule may either be a rule client key, rule id, or a RuleConfig.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">asset_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.service.RuleService.detach_asset": {"fullname": "sift_py.rule.service.RuleService.detach_asset", "modulename": "sift_py.rule.service", "qualname": "RuleService.detach_asset", "kind": "function", "doc": "<p>Disassociates a rule from an asset by name. The asset must already exist in the Sift API.\nThe provided rule may either be a rule client key, rule id, or a RuleConfig.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">asset_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.service.RuleService.create_or_update_rule": {"fullname": "sift_py.rule.service.RuleService.create_or_update_rule", "modulename": "sift_py.rule.service", "qualname": "RuleService.create_or_update_rule", "kind": "function", "doc": "<p>Create or update a rule via a RuleConfig. The config must contain a rule_client_key or an exception will be raised.\nIf a rule with the given client key already exists it will be updated, otherwise it will be created.\nSee <code>sift_py.rule.config.RuleConfig</code> for more information on configuation parameters for rules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "sift_py.rule.service.RuleService.get_rule": {"fullname": "sift_py.rule.service.RuleService.get_rule", "modulename": "sift_py.rule.service", "qualname": "RuleService.get_rule", "kind": "function", "doc": "<p>Get a rule by rule id or client key. Returns a RuleConfig if the rule exists, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RuleConfig</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.rule.service.RuleChannelReference": {"fullname": "sift_py.rule.service.RuleChannelReference", "modulename": "sift_py.rule.service", "qualname": "RuleChannelReference", "kind": "class", "doc": "<p>Convenient wrapper to map rule names to relevant channel references\nwhen creating rules from yaml.</p>\n"}, "sift_py.rule.service.RuleChannelReference.__init__": {"fullname": "sift_py.rule.service.RuleChannelReference.__init__", "modulename": "sift_py.rule.service", "qualname": "RuleChannelReference.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rule_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">channel_references</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, "sift_py.rule.service.RuleChannelReference.rule_name": {"fullname": "sift_py.rule.service.RuleChannelReference.rule_name", "modulename": "sift_py.rule.service", "qualname": "RuleChannelReference.rule_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.rule.service.RuleChannelReference.channel_references": {"fullname": "sift_py.rule.service.RuleChannelReference.channel_references", "modulename": "sift_py.rule.service", "qualname": "RuleChannelReference.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, "sift_py.yaml": {"fullname": "sift_py.yaml", "modulename": "sift_py.yaml", "kind": "module", "doc": "<p></p>\n"}, "sift_py.yaml.calculated_channels": {"fullname": "sift_py.yaml.calculated_channels", "modulename": "sift_py.yaml.calculated_channels", "kind": "module", "doc": "<p></p>\n"}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"fullname": "sift_py.yaml.calculated_channels.load_calculated_channels", "modulename": "sift_py.yaml.calculated_channels", "qualname": "load_calculated_channels", "kind": "function", "doc": "<p>Takes in a list of paths to YAML files which contains calculated channel configs and processes them into a list of\n<code>CalculatedChannelConfig</code> objects. For more information on report templates see\n<code>sift_py.report_templates.config.CalculatedChannelConfig</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">calculated_channels</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CalculatedChannelConfig</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.yaml.channel": {"fullname": "sift_py.yaml.channel", "modulename": "sift_py.yaml.channel", "kind": "module", "doc": "<p></p>\n"}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a channel should look like in YAML.</p>\n\n<p><code>name</code>: Name of channel.\n<code>description</code>: Optional channel description.\n<code>unit</code>: Unit of measurement.\n<code>component</code>: Name of component that channel belongs to.\n<code>data_type</code>: Type of the data associated with the channel.\n<code>enum_types</code>: Required if <code>data_type</code> is <code>enum.\n</code>bit_field_elements<code>: Required if</code>data_type<code>is</code>bit_field`.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.name", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.description", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.unit", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.component", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.component", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Literal[&#x27;double&#x27;], Literal[&#x27;string&#x27;], Literal[&#x27;enum&#x27;], Literal[&#x27;bit_field&#x27;], Literal[&#x27;bool&#x27;], Literal[&#x27;float&#x27;], Literal[&#x27;int32&#x27;], Literal[&#x27;int64&#x27;], Literal[&#x27;uint32&#x27;], Literal[&#x27;uint64&#x27;]]"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.enum_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[sift_py.yaml.channel.ChannelEnumTypeYamlSpec]]"}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"fullname": "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements", "modulename": "sift_py.yaml.channel", "qualname": "ChannelConfigYamlSpec.bit_field_elements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[sift_py.yaml.channel.ChannelBitFieldElementYamlSpec]]"}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"fullname": "sift_py.yaml.channel.ChannelEnumTypeYamlSpec", "modulename": "sift_py.yaml.channel", "qualname": "ChannelEnumTypeYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a channel enum type should look like in YAML.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"fullname": "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name", "modulename": "sift_py.yaml.channel", "qualname": "ChannelEnumTypeYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"fullname": "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key", "modulename": "sift_py.yaml.channel", "qualname": "ChannelEnumTypeYamlSpec.key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"fullname": "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec", "modulename": "sift_py.yaml.channel", "qualname": "ChannelBitFieldElementYamlSpec", "kind": "class", "doc": "<p>Formal spec that defines what a bit-field element should look like in YAML.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"fullname": "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name", "modulename": "sift_py.yaml.channel", "qualname": "ChannelBitFieldElementYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"fullname": "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index", "modulename": "sift_py.yaml.channel", "qualname": "ChannelBitFieldElementYamlSpec.index", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"fullname": "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count", "modulename": "sift_py.yaml.channel", "qualname": "ChannelBitFieldElementYamlSpec.bit_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "sift_py.yaml.report_templates": {"fullname": "sift_py.yaml.report_templates", "modulename": "sift_py.yaml.report_templates", "kind": "module", "doc": "<p></p>\n"}, "sift_py.yaml.report_templates.load_report_templates": {"fullname": "sift_py.yaml.report_templates.load_report_templates", "modulename": "sift_py.yaml.report_templates", "qualname": "load_report_templates", "kind": "function", "doc": "<p>Takes in a list of paths to YAML files which contains report templates and processes them into a list of\n<code>ReportTemplateConfig</code> objects. For more information on report templates see\n<code>sift_py.report_templates.config.ReportTemplateConfig</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">report_templates</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">ReportTemplateConfig</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec", "kind": "class", "doc": "<p>Formal spec for a report template.</p>\n\n<p><code>name</code>: Name of the report template.\n<code>template_client_key</code>: Unique client key to identify the report template.\n<code>organization_id</code>: Organization ID that the report template belongs to.\n<code>tags</code>: Tags to associate with the report template.\n<code>description</code>: Description of the report template.\n<code>rule_client_keys</code>: List of rule client keys associated with the report template.\n<code>archived_date</code>: Date when the report template was archived. Setting this field\n  will archive the report template, and unsetting it will unarchive the report template.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.template_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.organization_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.rule_client_keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"fullname": "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date", "modulename": "sift_py.yaml.report_templates", "qualname": "ReportTemplateYamlSpec.archived_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[datetime.datetime]"}, "sift_py.yaml.rule": {"fullname": "sift_py.yaml.rule", "modulename": "sift_py.yaml.rule", "kind": "module", "doc": "<p></p>\n"}, "sift_py.yaml.rule.load_named_expression_modules": {"fullname": "sift_py.yaml.rule.load_named_expression_modules", "modulename": "sift_py.yaml.rule", "qualname": "load_named_expression_modules", "kind": "function", "doc": "<p>Takes in a list of paths to YAML files which contains named expressions and processes them into a <code>dict</code>.\nThe key is the name of the expression and the value is the expression itself. For more information on\nnamed expression modules see <code>sift_py/yaml/service_example_betterproto.py</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.yaml.rule.load_rule_modules": {"fullname": "sift_py.yaml.rule.load_rule_modules", "modulename": "sift_py.yaml.rule", "qualname": "load_rule_modules", "kind": "function", "doc": "<p>Takes in a list of paths which may either be directories or files containing rule module YAML files,\nand processes them into a <code>list</code>. For more information on rule modules see\nRulemoduleYamlSpec in <code>sift_py/yaml/service_example_betterproto.py</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sift_py</span><span class=\"o\">.</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">RuleYamlSpec</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"fullname": "sift_py.yaml.rule.RuleModuleYamlSpec", "modulename": "sift_py.yaml.rule", "qualname": "RuleModuleYamlSpec", "kind": "class", "doc": "<p>The formal definition of what a rule module looks like in YAML.</p>\n\n<p><code>rules</code>: A list of rules that belong to the module.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"fullname": "sift_py.yaml.rule.RuleModuleYamlSpec.rules", "modulename": "sift_py.yaml.rule", "qualname": "RuleModuleYamlSpec.rules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sift_py.yaml.rule.RuleYamlSpec]"}, "sift_py.yaml.rule.RuleYamlSpec": {"fullname": "sift_py.yaml.rule.RuleYamlSpec", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec", "kind": "class", "doc": "<p>The formal definition of what a single rule looks like in YAML.</p>\n\n<p><code>name</code>: Name of the rule.\n<code>rule_client_key</code>: User-defined string-key that uniquely identifies this rule config.\n<code>description</code>: Description of rule.\n<code>expression</code>:\n    Either an expression-string or a <code>sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec</code> referencing a named expression.\n<code>type</code>: Determines the action to perform if a rule gets evaluated to true.\n<code>assignee</code>: If <code>type</code> is <code>review</code>, determines who to notify. Expects an email.\n<code>tags</code>: Tags to associate with the rule.\n<code>channel_references</code>: A list of channel references that maps to an actual channel. More below.\n<code>sub_expressions</code>: A list of sub-expressions which is a mapping of place-holders to sub-expressions. Only used if using named expressions.\n<code>asset_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.\n<code>tag_names</code>: A list of tag names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</p>\n\n<p>Channel references:\nA channel reference is a string containing a numerical value prefixed with \"$\". Examples include \"$1\", \"$2\", \"$11\", and so on.\nThe channel reference is mapped to an actual channel config. In YAML it would look something like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*vehicle_state_channel</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*voltage_channel</span>\n</code></pre>\n</div>\n\n<p>Sub-expressions:\nA sub-expression is made up of two components: A reference and the actual sub-expression. The sub-expression reference is\na string with a \"$\" prepended to another string comprised of characters in the following character set: <code>[a-zA-Z0-9_]</code>.\nThis reference should be mapped to the actual sub-expression. For example, say you have kinematic equations in <code>kinematics.yml</code>,\nand the equation you're interested in using looks like the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">kinetic_energy_gt</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"l l-Scalar l-Scalar-Plain\">0.5 * $mass * $1 * $1 &gt; $threshold</span>\n</code></pre>\n</div>\n\n<p>To properly use <code>kinetic_energy_gt</code> in your rule, it would look like the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">rules</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy</span>\n<span class=\"w\">    </span><span class=\"nt\">description</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Tracks high energy output while in motion</span>\n<span class=\"w\">    </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">review</span>\n<span class=\"w\">    </span><span class=\"nt\">assignee</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">bob@example.com</span>\n<span class=\"w\">    </span><span class=\"nt\">expression</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">kinetic_energy_gt</span>\n<span class=\"w\">    </span><span class=\"nt\">channel_references</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">*velocity_channel</span>\n<span class=\"w\">    </span><span class=\"nt\">sub_expressions</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">10</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">$threshold</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">470</span>\n<span class=\"w\">    </span><span class=\"nt\">tags</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">nostromo</span>\n</code></pre>\n</div>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.rule.RuleYamlSpec.name": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.name", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.rule_client_key", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.rule_client_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.rule.RuleYamlSpec.description": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.description", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.expression", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.expression", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, sift_py.yaml.rule.NamedExpressionYamlSpec]"}, "sift_py.yaml.rule.RuleYamlSpec.type": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.type", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Literal[&#x27;phase&#x27;], Literal[&#x27;review&#x27;]]"}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.assignee", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.assignee", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[str]"}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.tags", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.channel_references", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.channel_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[typing.Dict[str, sift_py.yaml.channel.ChannelConfigYamlSpec]]]"}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.sub_expressions", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.sub_expressions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[typing.Dict[str, str]]]"}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.asset_names", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.asset_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"fullname": "sift_py.yaml.rule.RuleYamlSpec.tag_names", "modulename": "sift_py.yaml.rule", "qualname": "RuleYamlSpec.tag_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing_extensions.NotRequired[typing.List[str]]"}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"fullname": "sift_py.yaml.rule.NamedExpressionYamlSpec", "modulename": "sift_py.yaml.rule", "qualname": "NamedExpressionYamlSpec", "kind": "class", "doc": "<p>A named expression. This class is the formal definition of what a named expression\nshould look like in YAML. The value of <code>name</code> may contain a mix of channel references\nand channel identifiers.</p>\n\n<p>For a formal definition of channel references and channel identifiers see the following:\n<code>sift_py.ingestion.config.yaml.spec.RuleYamlSpec</code>.</p>\n", "bases": "typing_extensions.TypedDict"}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"fullname": "sift_py.yaml.rule.NamedExpressionYamlSpec.name", "modulename": "sift_py.yaml.rule", "qualname": "NamedExpressionYamlSpec.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "sift_py.yaml.utils": {"fullname": "sift_py.yaml.utils", "modulename": "sift_py.yaml.utils", "kind": "module", "doc": "<p></p>\n"}}, "docInfo": {"sift_py": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10541}, "sift_py._internal.cel": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "sift_py._internal.cel.cel_in": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 95}, "sift_py._internal.channel": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.channel.channel_fqn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 3}, "sift_py._internal.channel.get_channels": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 16}, "sift_py._internal.convert": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "sift_py._internal.convert.json": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.convert.json.AsJson": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 45}, "sift_py._internal.convert.json.AsJson.as_json": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py._internal.convert.json.to_json": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 22}, "sift_py._internal.convert.protobuf": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 11, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.convert.protobuf.AsProtobuf": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 48}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 14}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 15}, "sift_py._internal.convert.timestamp": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py._internal.test_util": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel.SerializingFunction": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel.DeserializingFunction": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel.DoneCallbackType": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel.RequestIterableType": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel.ResponseIterableType": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.channel.MockChannel": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 8}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 93}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 93}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 90}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 90}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 124}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 32}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 85}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 85}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 85}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 85}, "sift_py._internal.test_util.channel.MockChannel.close": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 47}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 36}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 91}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 73}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 128}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 13}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 86}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 86}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 86}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 86}, "sift_py._internal.test_util.fn": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.server_interceptor": {"qualname": 0, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"qualname": 1, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 11}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"qualname": 2, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"qualname": 3, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 153}, "sift_py._internal.time": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.time.to_timestamp_nanos": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 18}, "sift_py._internal.time.to_timestamp_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 28}, "sift_py._internal.user": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py._internal.user.get_active_users": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 127, "bases": 0, "doc": 21}, "sift_py.calculated_channels": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 179}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 18}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"qualname": 3, "fullname": 8, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"qualname": 4, "fullname": 9, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 170}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"qualname": 3, "fullname": 8, "annotation": 15, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"qualname": 3, "fullname": 8, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"qualname": 3, "fullname": 8, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"qualname": 3, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.service": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.calculated_channels.service.CalculatedChannelService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 19}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 171, "bases": 0, "doc": 37}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 234, "bases": 0, "doc": 38}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 30}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 147, "bases": 0, "doc": 46}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"qualname": 8, "fullname": 13, "annotation": 0, "default_value": 0, "signature": 108, "bases": 0, "doc": 12}, "sift_py.data": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 2035}, "sift_py.data.error": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.error.DataError": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 11}, "sift_py.data.error.DataError.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.data.error.DataError.msg": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 57}, "sift_py.data.query.DataQuery": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 143}, "sift_py.data.query.DataQuery.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 281, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.asset_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.start_time": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.end_time": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.sample_ms": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.page_size": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQuery.channels": {"qualname": 2, "fullname": 6, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ChannelLookupInfo": {"qualname": 1, "fullname": 5, "annotation": 4, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQueryResult": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "sift_py.data.query.DataQueryResult.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 3}, "sift_py.data.query.DataQueryResult.channel": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 14}, "sift_py.data.query.DataQueryResult.channels": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 107}, "sift_py.data.query.DataQueryResult.all_channels": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 7}, "sift_py.data.query.DataQueryResultSet": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 59}, "sift_py.data.query.DataQueryResultSet.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 3}, "sift_py.data.query.DataQueryResultSet.identifier": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQueryResultSet.timestamps": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQueryResultSet.values": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.DataQueryResultSet.value_column": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 34}, "sift_py.data.query.DataQueryResultSet.time_column": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 34}, "sift_py.data.query.DataQueryResultSet.columns": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 17}, "sift_py.data.query.ChannelQuery": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "sift_py.data.query.ChannelQuery.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 3}, "sift_py.data.query.ChannelQuery.channel_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ChannelQuery.component": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ChannelQuery.run_name": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ChannelQuery.fqn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.data.query.ExpressionChannelReference": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 3}, "sift_py.data.query.ExpressionChannelReference.reference": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ExpressionChannelReference.component": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.ExpressionChannelReference.data_type": {"qualname": 3, "fullname": 7, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.CalculatedChannelQuery": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 19}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 3}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.CalculatedChannelQuery.expression": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"qualname": 4, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.service": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.service.DataService": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 37}, "sift_py.data.service.DataService.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 3}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.service.DataService.AssetName": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.service.DataService.ChannelFqn": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.service.DataService.RunName": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data.service.DataService.execute": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 10}, "sift_py.data_import": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 1563}, "sift_py.data_import.ch10": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.ch10.BaseCh10File": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 402}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"qualname": 5, "fullname": 10, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 37}, "sift_py.data_import.ch10.Ch10UploadService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 8}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 200, "bases": 0, "doc": 73}, "sift_py.data_import.config": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.config.CsvConfig": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "sift_py.data_import.config.CsvConfig.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "sift_py.data_import.config.CsvConfig.to_json": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.data_import.config.CsvConfig.to_dict": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "sift_py.data_import.csv": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.csv.CsvUploadService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 10}, "sift_py.data_import.csv.CsvUploadService.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.csv.CsvUploadService.upload": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 18}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 18}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 330, "bases": 0, "doc": 198}, "sift_py.data_import.status": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportStatusType": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 8}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 14, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportStatusType.from_str": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 8}, "sift_py.data_import.status.DataImport.model_config": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 18, "signature": 0, "bases": 0, "doc": 18}, "sift_py.data_import.status.DataImport.data_import_id": {"qualname": 4, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.created_date": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.modified_date": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.source_url": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.status": {"qualname": 2, "fullname": 7, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.error_message": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.csv_config": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImport.convert_status": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 13}, "sift_py.data_import.status.DataImportService.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.status.DataImportService.get_data_import": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 9}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 22}, "sift_py.data_import.tdms": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 164, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.tdms.TdmsUploadService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 194, "bases": 0, "doc": 112}, "sift_py.data_import.tempfile": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 39}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 15, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 15, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 15, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 15, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.error": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.error.SiftError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 39}, "sift_py.error.SiftError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.error.SiftError.msg": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.error.SiftAPIDeprecationWarning": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "sift_py.file_attachment": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 1176}, "sift_py.file_attachment._internal.download": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment._internal.download.download_remote_file": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 3}, "sift_py.file_attachment._internal.upload": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment._internal.upload.UploadService": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 8}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 179, "bases": 0, "doc": 3}, "sift_py.file_attachment.entity": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "sift_py.file_attachment.entity.Entity": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "sift_py.file_attachment.entity.Entity.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 3}, "sift_py.file_attachment.entity.Entity.entity_id": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.entity.Entity.entity_type": {"qualname": 3, "fullname": 8, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.entity.EntityType": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sift_py.file_attachment.entity.EntityType.RUN": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 11, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 32}, "sift_py.file_attachment.metadata.Metadata": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 45}, "sift_py.file_attachment.metadata.VideoMetadata": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 14}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 15}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.ImageMetadata": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 14}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 15}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.file_attachment.service": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.file_attachment.service.FileAttachmentService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 31}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 13}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 195, "bases": 0, "doc": 102}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 63}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 27}, "sift_py.grpc": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 160}, "sift_py.grpc._async_interceptors.base": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._async_interceptors.base.Continuation": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 16, "doc": 8}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 114, "bases": 0, "doc": 132}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 114, "bases": 0, "doc": 166}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 135, "bases": 0, "doc": 177}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 135, "bases": 0, "doc": 214}, "sift_py.grpc._async_interceptors.metadata": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 8}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"qualname": 2, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.base": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.base.Continuation": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 8}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 204}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 209}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 183}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 188}, "sift_py.grpc._interceptors.context": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 80}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 138, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"qualname": 2, "fullname": 7, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"qualname": 4, "fullname": 9, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.metadata": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.metadata.Metadata": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 8}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 9}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 11}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 8}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive.KeepaliveConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 25}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"qualname": 4, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"qualname": 4, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"qualname": 5, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"qualname": 5, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 31, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 44}, "sift_py.grpc.transport.SiftChannel": {"qualname": 1, "fullname": 5, "annotation": 4, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport.SiftAsyncChannel": {"qualname": 1, "fullname": 5, "annotation": 4, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport.get_ssl_credentials": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 17}, "sift_py.grpc.transport.use_sift_channel": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 84}, "sift_py.grpc.transport.use_sift_async_channel": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 29}, "sift_py.grpc.transport.SiftChannelConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 178}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"qualname": 3, "fullname": 7, "annotation": 10, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"qualname": 3, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"qualname": 4, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.DataService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 10}, "sift_py.grpc.transport_test.DataService.GetData": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 4}, "sift_py.grpc.transport_test.AuthInterceptor": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 11}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 39}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"qualname": 4, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "sift_py.grpc.transport_test.test_sift_channel": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "sift_py.ingestion": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 48}, "sift_py.ingestion._internal.channel": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.error": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.error.IngestionValidationError": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 17}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.ingest": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.ingest_test": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"qualname": 8, "fullname": 14, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 29}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"qualname": 10, "fullname": 16, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 20}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"qualname": 12, "fullname": 18, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 29}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"qualname": 8, "fullname": 14, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 17}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"qualname": 6, "fullname": 12, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 24}, "sift_py.ingestion._internal.ingestion_config": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"qualname": 6, "fullname": 12, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 20}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 129, "bases": 0, "doc": 7}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 13}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 11}, "sift_py.ingestion._internal.run": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 3}, "sift_py.ingestion._internal.run.create_run": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 3}, "sift_py.ingestion.buffer": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.buffer.FlushCallback": {"qualname": 1, "fullname": 5, "annotation": 4, "default_value": 3, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.buffer.OnErrorCallback": {"qualname": 1, "fullname": 5, "annotation": 4, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.buffer.BufferedIngestionService": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 22}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 3}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 28}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 34}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "sift_py.ingestion.channel": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelValue": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 11}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelValue.component": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelValue.value": {"qualname": 2, "fullname": 6, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 7}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 216, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.description": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.unit": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.component": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"qualname": 4, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 29}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 74}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 14}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 15}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 50}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 48}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 14}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 15}, "sift_py.ingestion.channel.ChannelEnumType": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 48}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelEnumType.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelEnumType.key": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 14}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 15}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 11, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 15}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.channel_fqn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 143, "bases": 0, "doc": 63}, "sift_py.ingestion.channel.string_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.double_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.float_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.bool_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.int32_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.uint32_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.int64_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.uint64_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.bit_field_value": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.enum_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.empty_value": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 3}, "sift_py.ingestion.channel.is_data_type": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "sift_py.ingestion.config": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "sift_py.ingestion.config.telemetry": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 113}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 140, "bases": 0, "doc": 40}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"qualname": 4, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"qualname": 2, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 11}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 20}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 119, "bases": 0, "doc": 32}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 9}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.error": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.load": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 52}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 60}, "sift_py.ingestion.config.yaml.spec": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 23}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 641}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"qualname": 4, "fullname": 10, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"qualname": 2, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"qualname": 2, "fullname": 8, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"qualname": 2, "fullname": 8, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"qualname": 2, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"qualname": 2, "fullname": 8, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"qualname": 3, "fullname": 9, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"qualname": 3, "fullname": 9, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"qualname": 3, "fullname": 9, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"qualname": 3, "fullname": 9, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 63}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 83}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"qualname": 2, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"qualname": 2, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"qualname": 2, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"qualname": 3, "fullname": 9, "annotation": 52, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"qualname": 3, "fullname": 9, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"qualname": 4, "fullname": 10, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 17}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 17}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 100}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"qualname": 3, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"qualname": 4, "fullname": 10, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"qualname": 3, "fullname": 9, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"qualname": 2, "fullname": 8, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"qualname": 2, "fullname": 8, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"qualname": 2, "fullname": 8, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 15}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"qualname": 2, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 12}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"qualname": 2, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.test_load": {"qualname": 0, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"qualname": 3, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "sift_py.ingestion.flow": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 70}, "sift_py.ingestion.flow.FlowConfig.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowConfig.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowConfig.channels": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"qualname": 4, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 14}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 15}, "sift_py.ingestion.flow.Flow": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 64}, "sift_py.ingestion.flow.Flow.flow_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.Flow.timestamp": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.Flow.channel_values": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 70}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"qualname": 3, "fullname": 7, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.manager": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"qualname": 1, "fullname": 5, "annotation": 4, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServicesManager": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 283}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 11}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 3}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"qualname": 3, "fullname": 7, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 3}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"qualname": 2, "fullname": 6, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 25}, "sift_py.ingestion.rule.config": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 208}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 296, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.name": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.description": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.action": {"qualname": 2, "fullname": 7, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"qualname": 3, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"qualname": 4, "fullname": 9, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 15}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleAction": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "sift_py.ingestion.rule.config.RuleAction.kind": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 60}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 40}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionKind": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 24}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 30}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"qualname": 3, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"qualname": 3, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 195}, "sift_py.ingestion.service.IngestionService.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.transport_channel": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"qualname": 3, "fullname": 7, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.asset_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"qualname": 5, "fullname": 9, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.run_id": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.organization_id": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"qualname": 5, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.ingestion.service.IngestionService.ingest": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 17}, "sift_py.ingestion.service.IngestionService.attach_run": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 135, "bases": 0, "doc": 17}, "sift_py.ingestion.service.IngestionService.detach_run": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 22}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 177}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 103, "bases": 0, "doc": 230}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 29}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 30}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 178, "bases": 0, "doc": 955}, "sift_py.ingestion.service.IngestionService.create_flow": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 52}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 62}, "sift_py.report_templates": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 9, "doc": 141}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 18}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"qualname": 4, "fullname": 9, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"qualname": 3, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"qualname": 2, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"qualname": 4, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"qualname": 3, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateUpdate": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 134}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"qualname": 4, "fullname": 9, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"qualname": 2, "fullname": 7, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"qualname": 4, "fullname": 9, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.service": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.report_templates.service.ReportTemplateService": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 87, "bases": 0, "doc": 65}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 105, "bases": 0, "doc": 42}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 62}, "sift_py.rest": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rest.SiftRestConfig": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 99}, "sift_py.rest.SiftRestConfig.uri": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rest.SiftRestConfig.apikey": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rest.SiftRestConfig.retry": {"qualname": 2, "fullname": 5, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rest.SiftRestConfig.use_ssl": {"qualname": 3, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rest.compute_uri": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.rule": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 208}, "sift_py.rule.config.RuleConfig.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 296, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.description": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.expression": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.action": {"qualname": 2, "fullname": 6, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.channel_references": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.rule_client_key": {"qualname": 4, "fullname": 8, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.asset_names": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleConfig.as_json": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 15}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleAction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "sift_py.rule.config.RuleAction.kind": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 60}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 40}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionKind": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionKind.from_str": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionAnnotationKind": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionKindStrRep": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.ExpressionChannelReference": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 24}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 30}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.service": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.service.RuleService": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 23}, "sift_py.rule.service.RuleService.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 35}, "sift_py.rule.service.RuleService.create_or_update_rules": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 31}, "sift_py.rule.service.RuleService.attach_asset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 35}, "sift_py.rule.service.RuleService.detach_asset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 35}, "sift_py.rule.service.RuleService.create_or_update_rule": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 60}, "sift_py.rule.service.RuleService.get_rule": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 21}, "sift_py.rule.service.RuleChannelReference": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "sift_py.rule.service.RuleChannelReference.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 3}, "sift_py.rule.service.RuleChannelReference.rule_name": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.rule.service.RuleChannelReference.channel_references": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.calculated_channels": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 43}, "sift_py.yaml.channel": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 83}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"qualname": 3, "fullname": 7, "annotation": 52, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"qualname": 3, "fullname": 7, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"qualname": 4, "fullname": 8, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 17}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 17}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.load_report_templates": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 42}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 105}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"qualname": 2, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"qualname": 4, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"qualname": 3, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"qualname": 2, "fullname": 7, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"qualname": 2, "fullname": 7, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"qualname": 4, "fullname": 9, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"qualname": 3, "fullname": 8, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.load_named_expression_modules": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 52}, "sift_py.yaml.rule.load_rule_modules": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 43}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 30}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 641}, "sift_py.yaml.rule.RuleYamlSpec.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"qualname": 4, "fullname": 8, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.description": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"qualname": 2, "fullname": 6, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.type": {"qualname": 2, "fullname": 6, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"qualname": 2, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"qualname": 3, "fullname": 7, "annotation": 11, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"qualname": 3, "fullname": 7, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"qualname": 3, "fullname": 7, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"qualname": 3, "fullname": 7, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 63}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "sift_py.yaml.utils": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}}, "length": 741, "save": true}, "index": {"qualname": {"root": {"3": {"2": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {"sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 45, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 1}}}, "h": {"1": {"0": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 39, "s": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 9}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}}, "df": 1}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}}, "df": 6}}}}}, "f": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.service.DataService.ChannelFqn": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}}, "df": 15, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 16}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}}, "df": 7, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}}, "df": 6, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}}, "df": 14, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 12}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}}, "df": 14, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 6}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 8, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}}, "df": 15}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}}, "df": 10}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}}, "df": 8}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}}, "df": 16, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}}, "df": 4}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}}, "df": 2}}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.rest.compute_uri": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 15, "d": {"docs": {"sift_py.data_import.status.DataImport.created_date": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}}, "df": 2, "t": {"3": {"2": {"docs": {"sift_py.ingestion.channel.int32_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.channel.int64_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 16}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 46, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 17, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 19, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 6}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}}, "df": 7}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}}, "df": 7}}}}}}}}}}}}, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}}, "df": 2}, "f": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 28}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}}, "df": 2}}, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 12, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 9}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}}, "df": 3}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 7}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.ingestion.buffer.FlushCallback": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 15, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}}, "df": 1}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 16, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}}, "df": 12, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.AssetName": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}}, "df": 4}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 5}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}}, "df": 6}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 8}}}}}}}}, "d": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 1, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 8}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 7}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}}, "df": 16}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}}, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}}, "df": 10}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}}, "df": 10, "s": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}}, "df": 7}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}}, "df": 10, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}}, "df": 7}}}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 7}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 17}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 8}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 16}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannel": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 6}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.sample_ms": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.source_url": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}}, "df": 12}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}}, "df": 7}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}}, "df": 3}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}}, "df": 9, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}}, "df": 9}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}}, "df": 10, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}}, "df": 7}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "e": {"docs": {"sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}}, "df": 1}}, "r": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 9}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}}, "df": 7}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"sift_py.rest.SiftRestConfig.retry": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}}, "df": 11}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}}, "df": 7}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}}, "df": 5}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 8, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.RunName": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}}, "df": 11, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 8}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 24}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}}, "df": 22}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}}, "df": 8, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "c": {"3": {"3": {"3": {"9": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}}, "df": 12}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImport.modified_date": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {"sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}}, "df": 5, "g": {"docs": {"sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}}, "df": 6, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}}, "df": 15}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}}, "df": 2}}, "x": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 10, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}}, "df": 3}, "i": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"sift_py.ingestion.channel.uint32_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.channel.uint64_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 4}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 37, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 11}, "d": {"docs": {"sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}}, "df": 10, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}}, "df": 4}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.execute": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1.4142135623730951}}, "df": 4, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.channel.empty_value": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}}, "df": 15, "s": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 8, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}}, "df": 6}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}}, "df": 15, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}}, "df": 9}}}}}}}}}}}, "a": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 7}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}}, "df": 4}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"1": {"0": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 4}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {"sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}}, "df": 3}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}}, "df": 2}}}}}}}}, "fullname": {"root": {"3": {"2": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {"sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 45, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.cel": {"tf": 1}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py._internal.channel": {"tf": 1}, "sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert": {"tf": 1}, "sift_py._internal.convert.json": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.convert.timestamp": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.test_util": {"tf": 1}, "sift_py._internal.test_util.channel": {"tf": 1}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.fn": {"tf": 1}, "sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.time": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels": {"tf": 1}, "sift_py.calculated_channels.config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.calculated_channels.service": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.error": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data.service": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.config": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.csv": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}, "sift_py.data_import.time_format": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.error": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment._internal.download": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.service": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.context": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.grpc._interceptors.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.keepalive": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.grpc.transport_test": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1.4142135623730951}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.channel": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.error": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion._internal.ingest": {"tf": 1}, "sift_py.ingestion._internal.ingest_test": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.buffer": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.error": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.load": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.ingestion.flow": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.manager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates": {"tf": 1}, "sift_py.report_templates.config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.report_templates.service": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}, "sift_py.rule": {"tf": 1}, "sift_py.rule.config": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.service": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml": {"tf": 1}, "sift_py.yaml.calculated_channels": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.report_templates": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}, "sift_py.yaml.rule": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.yaml.utils": {"tf": 1}}, "df": 741, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannel": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 6}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.service": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.service": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.file_attachment.service": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.service": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}}, "df": 71}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 16}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 23}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.sample_ms": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.source_url": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}}, "df": 43}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.cel": {"tf": 1}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py._internal.channel": {"tf": 1}, "sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert": {"tf": 1}, "sift_py._internal.convert.json": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.convert.timestamp": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.test_util": {"tf": 1}, "sift_py._internal.test_util.channel": {"tf": 1}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.fn": {"tf": 1}, "sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.time": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels": {"tf": 1}, "sift_py.calculated_channels.config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.calculated_channels.service": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.error": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data.service": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.config": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.csv": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}, "sift_py.data_import.time_format": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.error": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment._internal.download": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.service": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.context": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.grpc._interceptors.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.keepalive": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.grpc.transport_test": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.channel": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.error": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion._internal.ingest": {"tf": 1}, "sift_py.ingestion._internal.ingest_test": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.buffer": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.error": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.load": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.ingestion.flow": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.manager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates": {"tf": 1}, "sift_py.report_templates.config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.report_templates.service": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}, "sift_py.rule": {"tf": 1}, "sift_py.rule.config": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.service": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml": {"tf": 1}, "sift_py.yaml.calculated_channels": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.report_templates": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}, "sift_py.yaml.rule": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.yaml.utils": {"tf": 1}}, "df": 741}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.protobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}}, "df": 5, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 17}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}}, "df": 2, "t": {"3": {"2": {"docs": {"sift_py.ingestion.channel.int32_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.channel.int64_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py._internal.channel": {"tf": 1}, "sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert": {"tf": 1}, "sift_py._internal.convert.json": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.convert.timestamp": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.test_util": {"tf": 1}, "sift_py._internal.test_util.channel": {"tf": 1}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.fn": {"tf": 1}, "sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.time": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.file_attachment._internal.download": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.ingestion._internal.channel": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.error": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion._internal.ingest": {"tf": 1}, "sift_py.ingestion._internal.ingest_test": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}}, "df": 85}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 16, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py.grpc._async_interceptors.base": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.context": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.grpc._interceptors.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}}, "df": 36}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 46, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion._internal.ingest": {"tf": 1}, "sift_py.ingestion._internal.ingest_test": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.channel": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.error": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion._internal.ingest": {"tf": 1}, "sift_py.ingestion._internal.ingest_test": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.run": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.buffer": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.error": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.load": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.ingestion.flow": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.manager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 266, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 19, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 6}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}}, "df": 7}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.config": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.csv": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}, "sift_py.data_import.time_format": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}}, "df": 72}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}}, "df": 7}}}}}}}}}}}}, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}}, "df": 2}, "f": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py._internal.cel.cel_in": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 1}}}, "h": {"1": {"0": {"docs": {"sift_py.data_import.ch10": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}}, "df": 7, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.channel": {"tf": 1}, "sift_py._internal.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.test_util.channel": {"tf": 1}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.channel": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.channel": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 154, "s": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py.calculated_channels": {"tf": 1}, "sift_py.calculated_channels.config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.calculated_channels.service": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.yaml.calculated_channels": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}}, "df": 45}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}}, "df": 1}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}}, "df": 6}}}}}, "f": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.service.DataService.ChannelFqn": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}}, "df": 15, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 16}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}}, "df": 7, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}}, "df": 6, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}}, "df": 14, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 12}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.convert": {"tf": 1}, "sift_py._internal.convert.json": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.convert.timestamp": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}}, "df": 14}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.config": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.error": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.load": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.rule.config": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.report_templates.config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.rule.config": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1.4142135623730951}}, "df": 214, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc._interceptors.context": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 8}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.rest.compute_uri": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}}, "df": 14, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 6}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels": {"tf": 1}, "sift_py.calculated_channels.config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.calculated_channels.service": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}}, "df": 38, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}}, "df": 15}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}}, "df": 10}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}}, "df": 8}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 15, "d": {"docs": {"sift_py.data_import.status.DataImport.created_date": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.csv": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 28}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.time_format": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 18}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}, "n": {"docs": {"sift_py._internal.test_util.fn": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}}, "df": 2}}, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment._internal.download": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.service": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1.4142135623730951}}, "df": 44, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.ingestion.flow": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 23, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 9}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}}, "df": 3}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 7}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.ingestion.buffer.FlushCallback": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 15, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}}, "df": 1}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.context": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.grpc._interceptors.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.keepalive": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.grpc.transport_test": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}}, "df": 72}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.to_json": {"tf": 1.4142135623730951}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 10}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 16, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}}, "df": 12, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.AssetName": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}}, "df": 4}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc._async_interceptors.base": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 15}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 5}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}}, "df": 6}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment._internal.download": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.service": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 43, "s": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 8}}}}}}}}, "d": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 1, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 7}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.time": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data_import.time_format": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}}, "df": 25, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py._internal.convert.timestamp": {"tf": 1}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1.4142135623730951}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}}, "df": 7, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}}, "df": 16}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util": {"tf": 1}, "sift_py._internal.test_util.channel": {"tf": 1}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.fn": {"tf": 1}, "sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc.transport_test": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1.4142135623730951}}, "df": 53}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tempfile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.report_templates": {"tf": 1}, "sift_py.report_templates.config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.report_templates.service": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 36}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.config.telemetry": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}}, "df": 16, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}}, "df": 10, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}}, "df": 7}}}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}}, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}}, "df": 10}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}}, "df": 10, "s": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.tdms": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 5, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.grpc.transport_test": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}}, "df": 25}}}}}}}, "y": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 7}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util": {"tf": 1}, "sift_py._internal.test_util.channel": {"tf": 1}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.fn": {"tf": 1}, "sift_py._internal.test_util.server_interceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 33, "s": {"docs": {"sift_py.yaml.utils": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}}, "df": 15}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}}, "df": 2}}, "x": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 4, "r": {"docs": {"sift_py._internal.user": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 13, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}}, "df": 3}, "i": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"sift_py.ingestion.channel.uint32_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.channel.uint64_value": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}}, "df": 12}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}}, "df": 7}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment._internal.download": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 3}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.data.error": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data.service": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.config": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.csv": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}, "sift_py.data_import.time_format": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 132, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}}, "df": 3}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}}, "df": 9, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}}, "df": 9}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}}, "df": 10, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}}, "df": 7}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "e": {"docs": {"sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}}, "df": 1}}, "r": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "t": {"docs": {"sift_py.rest": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}}, "df": 7}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 9}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}}, "df": 7}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"sift_py.rest.SiftRestConfig.retry": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.report_templates": {"tf": 1}, "sift_py.report_templates.config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.report_templates.service": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 36, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}}, "df": 11}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}}, "df": 7}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}}, "df": 5}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.ingestion._internal.run": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.run.create_run": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 9, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.RunName": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.rule": {"tf": 1}, "sift_py.rule.config": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.service": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.rule": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 120, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 8}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 24}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}}, "df": 22}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}}, "df": 8, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "c": {"3": {"3": {"3": {"9": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}}, "df": 12}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImport.modified_date": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {"sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}}, "df": 5, "g": {"docs": {"sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}}, "df": 31, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 16}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 37, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 11}, "d": {"docs": {"sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}}, "df": 10, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}}, "df": 4}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.execute": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.error": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.error": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.ingestion._internal.error": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.error": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 19}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 9, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}}, "df": 6}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.channel.empty_value": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}}, "df": 15, "s": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.keepalive": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 12, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}}, "df": 6}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}}, "df": 15, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}}, "df": 9}}}}}}}}}}}, "a": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.yaml.load": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 11}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}}, "df": 4}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.error": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.load": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml": {"tf": 1}, "sift_py.yaml.calculated_channels": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.report_templates": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}, "sift_py.yaml.rule": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.yaml.utils": {"tf": 1}}, "df": 106, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}}, "df": 41}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._async_interceptors.base": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 16, "c": {"docs": {}, "df": 0, "h": {"1": {"0": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 4}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.buffer": {"tf": 1}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {"sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}}, "df": 3}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}}, "df": 2}}}}}}}}, "annotation": {"root": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 3.3166247903554}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 3.3166247903554}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 243, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1}, "sift_py.data.error.DataError.msg": {"tf": 1}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1}, "sift_py.error.SiftError.msg": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1}, "sift_py.rule.config.RuleConfig.name": {"tf": 1}, "sift_py.rule.config.RuleConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1}}, "df": 71, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImport.status": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 20}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.data.query.DataQuery.channels": {"tf": 1}}, "df": 2}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}}, "df": 18}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQueryResultSet.values": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 3}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 3}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}}, "df": 4}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 38}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}}, "df": 2}}}}}, "b": {"2": {"docs": {"sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.rest.SiftRestConfig.retry": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}}, "df": 9, "s": {"docs": {"sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 18, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery.channels": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}}, "df": 2}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}}, "df": 3, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery.channels": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1}}, "df": 5, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 65}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}}, "df": 23}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}}, "df": 7}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1}}, "df": 4}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.rest.SiftRestConfig.retry": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1}, "sift_py.data.query.ChannelQuery.component": {"tf": 1}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.rule.config.RuleConfig.action": {"tf": 1}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1}}, "df": 34}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}}, "df": 24}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 23}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"3": {"docs": {"sift_py.rest.SiftRestConfig.retry": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 6}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1}}, "df": 65}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 9}}}}}}}}, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.data.query.DataQuery.start_time": {"tf": 1}, "sift_py.data.query.DataQuery.end_time": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1}}, "df": 3}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"sift_py.data.query.DataQuery.sample_ms": {"tf": 1}, "sift_py.data.query.DataQuery.page_size": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1}}, "df": 22}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelValue.value": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1}}, "df": 14, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.status.DataImport.status": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.data.query.DataQuery.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}, "sift_py.data_import.status.DataImport.status": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.status": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.created_date": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1}}, "df": 8}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1}}, "df": 3}}, "w": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1}}, "df": 2}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1}}, "df": 3}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "v": {"1": {"docs": {"sift_py.ingestion.channel.ChannelValue.value": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1}}, "df": 2}, "2": {"docs": {"sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1}}, "df": 13}}}}, "x": {"2": {"7": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 4.47213595499958}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 4.47213595499958}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 2}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "default_value": {"root": {"0": {"docs": {"sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 2}, "1": {"0": {"0": {"0": {"0": {"0": {"docs": {"sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 2}, "docs": {"sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}}, "df": 7}, "2": {"0": {"0": {"0": {"0": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}}, "df": 3}, "3": {"2": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 2.449489742783178}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}}, "df": 5}, "docs": {"sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}}, "df": 1}, "4": {"docs": {"sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}}, "df": 1}, "5": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}}, "df": 2}, "6": {"4": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 5}, "docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}}, "df": 2}, "7": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}}, "df": 2}, "8": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}}, "df": 2}, "9": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}}, "df": 2}, "docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.AssetName": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.RunName": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 3.605551275463989}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 2.23606797749979}, "sift_py.grpc.transport.SiftChannel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.4142135623730951}}, "df": 69, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 4.69041575982343}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 60}, "o": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 3.3166247903554}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 3}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 4, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 3.3166247903554}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 12, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}}}}}}}}, "x": {"2": {"7": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.AssetName": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.RunName": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.model_config": {"tf": 2}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 4.69041575982343}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 2.8284271247461903}, "sift_py.grpc.transport.SiftChannel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.4142135623730951}}, "df": 55}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}, "sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 4.69041575982343}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}, "sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 60}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc.transport.SiftChannel": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "y": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 1}}}}, "b": {"2": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1.4142135623730951}}, "df": 1}, "a": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 12}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 3.3166247903554}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}}, "df": 3}}}}}}}}, "o": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 13, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}}, "df": 12}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1.4142135623730951}}, "df": 5}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "v": {"0": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}}, "df": 2}}}}}}}}, "1": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}}, "df": 3}}}}}}, "docs": {}, "df": 0}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 3.3166247903554}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1.4142135623730951}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"1": {"6": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "3": {"2": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "8": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}, "docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 2}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1}}, "df": 5}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {"sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1.4142135623730951}}, "df": 1, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 1}}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"1": {"6": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "3": {"2": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "8": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}, "docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 2}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1}}, "df": 1, ":": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.ChannelLookupInfo": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.service.DataService.AssetName": {"tf": 1}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1}, "sift_py.data.service.DataService.RunName": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.status.DataImport.model_config": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1}}, "df": 12}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1}}, "df": 1, ":": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1}}, "df": 3, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "c": {"3": {"3": {"3": {"9": {"docs": {"sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "e": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1}}, "df": 2}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "v": {"1": {"docs": {"sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "signature": {"root": {"0": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}}, "df": 1}, "1": {"0": {"0": {"0": {"0": {"0": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}, "2": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}, "3": {"9": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 2}}, "df": 8}, "docs": {}, "df": 0}, "docs": {"sift_py._internal.cel.cel_in": {"tf": 5.385164807134504}, "sift_py._internal.channel.channel_fqn": {"tf": 6.324555320336759}, "sift_py._internal.channel.get_channels": {"tf": 9.746794344808963}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 3.4641016151377544}, "sift_py._internal.convert.json.to_json": {"tf": 4}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 5.385164807134504}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 4.898979485566356}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 5.656854249492381}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 3.7416573867739413}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 3.7416573867739413}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 3.7416573867739413}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 3.7416573867739413}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 4.69041575982343}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 3.7416573867739413}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 6.6332495807108}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 6.6332495807108}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 6.6332495807108}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 6.6332495807108}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 3.1622776601683795}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 5.830951894845301}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 5.477225575051661}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 4.898979485566356}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 11.269427669584644}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 11.269427669584644}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 11.269427669584644}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 11.269427669584644}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 7.280109889280518}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 4.242640687119285}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 9.591663046625438}, "sift_py._internal.time.to_timestamp_pb": {"tf": 6.928203230275509}, "sift_py._internal.user.get_active_users": {"tf": 9.9498743710662}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 3.7416573867739413}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 8.717797887081348}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 3.1622776601683795}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 4}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 8.660254037844387}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 11.74734012447073}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 13.711309200802088}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 8.48528137423857}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 10.488088481701515}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 9.16515138991168}, "sift_py.data.error.DataError.__init__": {"tf": 3.4641016151377544}, "sift_py.data.query.DataQuery.__init__": {"tf": 15}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 6.244997998398398}, "sift_py.data.query.DataQueryResult.channel": {"tf": 8.602325267042627}, "sift_py.data.query.DataQueryResult.channels": {"tf": 8.426149773176359}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 5.385164807134504}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 7.615773105863909}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 7}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 7}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 8.717797887081348}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 7.937253933193772}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 3.4641016151377544}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 8.54400374531753}, "sift_py.data.service.DataService.__init__": {"tf": 5}, "sift_py.data.service.DataService.execute": {"tf": 7.810249675906654}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 3.4641016151377544}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 12.165525060596439}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 4.69041575982343}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 3.4641016151377544}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 4.69041575982343}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 4.47213595499958}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 8.306623862918075}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 7.416198487095663}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 15.968719422671311}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 5.830951894845301}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 3.4641016151377544}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 7.483314773547883}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 5.291502622129181}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 4.898979485566356}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 4.898979485566356}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 4.47213595499958}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 12.328828005937952}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 4.242640687119285}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 5.830951894845301}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 3.4641016151377544}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 3.4641016151377544}, "sift_py.error.SiftError.__init__": {"tf": 3.4641016151377544}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 5.0990195135927845}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 4.47213595499958}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 12}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 5.830951894845301}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 7.745966692414834}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 7.681145747868608}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 6.48074069840786}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 3.4641016151377544}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 4.47213595499958}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 7.681145747868608}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 6.48074069840786}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 3.4641016151377544}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 5.656854249492381}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 7.416198487095663}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 12.409673645990857}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 9.273618495495704}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 6.928203230275509}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 7.280109889280518}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 9.591663046625438}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 9.591663046625438}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 10.392304845413264}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 10.392304845413264}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 5}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 7.14142842854285}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 7.810249675906654}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 7.810249675906654}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 8.12403840463596}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 7.810249675906654}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 8.12403840463596}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 10.583005244258363}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 5}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 7.810249675906654}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 4.47213595499958}, "sift_py.grpc.transport.use_sift_channel": {"tf": 8.12403840463596}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 8.660254037844387}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 7}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 7.280109889280518}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 3.4641016151377544}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 7.280109889280518}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 4.69041575982343}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 5.656854249492381}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 3.4641016151377544}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 4.69041575982343}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 4.69041575982343}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 4.69041575982343}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 4.69041575982343}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 4.69041575982343}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 7.483314773547883}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 10}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 5.744562646538029}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 7.14142842854285}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 7.3484692283495345}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 6.164414002968976}, "sift_py.ingestion._internal.run.create_run": {"tf": 7.874007874011811}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 10.677078252031311}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 5.656854249492381}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 5.656854249492381}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 3.1622776601683795}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 13.228756555322953}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 8.54400374531753}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 7.937253933193772}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 7.681145747868608}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 6.48074069840786}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 3.4641016151377544}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 5.291502622129181}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 8.18535277187245}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 6.782329983125268}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 4.47213595499958}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 8.18535277187245}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 6.782329983125268}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 6.244997998398398}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 6.6332495807108}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 5.0990195135927845}, "sift_py.ingestion.channel.channel_fqn": {"tf": 10.535653752852738}, "sift_py.ingestion.channel.string_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.double_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.float_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.bool_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.int32_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.uint32_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.int64_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.uint64_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.bit_field_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.enum_value": {"tf": 5.656854249492381}, "sift_py.ingestion.channel.empty_value": {"tf": 5}, "sift_py.ingestion.channel.is_data_type": {"tf": 7.3484692283495345}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 10.63014581273465}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 5.5677643628300215}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 5.5677643628300215}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 9.695359714832659}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 5.916079783099616}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 6.4031242374328485}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 2.6457513110645907}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 6.082762530298219}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 7.681145747868608}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 6.48074069840786}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 6.928203230275509}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 8.54400374531753}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 8.06225774829855}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 6.6332495807108}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 6.244997998398398}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 3.4641016151377544}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 15.394804318340652}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 3.4641016151377544}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 6.48074069840786}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 4.898979485566356}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 7.54983443527075}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 4.898979485566356}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 5.5677643628300215}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 4.898979485566356}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 7.615773105863909}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 5.656854249492381}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 6.48074069840786}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 9.055385138137417}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 6.164414002968976}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 10.535653752852738}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 3.1622776601683795}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 8.774964387392123}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 9}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 5.656854249492381}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 5.656854249492381}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 11.916375287812984}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 5.477225575051661}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 5.477225575051661}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 3.4641016151377544}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 4}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 8.306623862918075}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 9.219544457292887}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 6.928203230275509}, "sift_py.rest.compute_uri": {"tf": 4.898979485566356}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 15.394804318340652}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 3.4641016151377544}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 6.48074069840786}, "sift_py.rule.config.RuleAction.kind": {"tf": 4.898979485566356}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 7.54983443527075}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 4.898979485566356}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 5.5677643628300215}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 4.898979485566356}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 6.48074069840786}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 7.615773105863909}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 5.656854249492381}, "sift_py.rule.service.RuleService.__init__": {"tf": 4}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 9}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 5.916079783099616}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 8.366600265340756}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 8.366600265340756}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 5.477225575051661}, "sift_py.rule.service.RuleService.get_rule": {"tf": 6.48074069840786}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 5.477225575051661}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 6.557438524302}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 6.557438524302}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 5.916079783099616}, "sift_py.yaml.rule.load_rule_modules": {"tf": 6.48074069840786}}, "df": 236, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 2}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 2}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1.4142135623730951}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 9}}, "w": {"docs": {"sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 7}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 9}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}}, "df": 3}}}}}, "q": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1.7320508075688772}, "sift_py._internal.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 2.449489742783178}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.23606797749979}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 2}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 2}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.run.create_run": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 2}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 2.6457513110645907}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 2}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.rest.compute_uri": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 2.6457513110645907}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 2}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.4142135623730951}}, "df": 112, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 7, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 4}}}}}}}}, "s": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 127}}, "c": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 123, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}}, "df": 6}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}}, "df": 4}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}}}, "v": {"1": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 33}, "2": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 13}, "3": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 2}, "docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 19, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 12}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 2}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 23, "o": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}}, "df": 6}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 2}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.string_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.double_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.float_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.bool_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.int32_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.uint32_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.int64_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.uint64_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.enum_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.empty_value": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.is_data_type": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 19, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 2}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 2}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 36, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 4}}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 15}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}}, "df": 18, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}}, "df": 3}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 9}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.4142135623730951}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 27, "d": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 2}, "s": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 2.449489742783178}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.4142135623730951}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.23606797749979}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 45, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 2.449489742783178}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.4142135623730951}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.23606797749979}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 2}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.23606797749979}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 56}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}}, "df": 5}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}}}}}}}}, "f": {"docs": {"sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 47, "s": {"docs": {"sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 2}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 2}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}}, "df": 11}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}}, "df": 1}}}}, "h": {"1": {"0": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.run.create_run": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 49, "s": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 2.23606797749979}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}}, "df": 1}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 2}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 1}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.DataQueryResult.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}}, "df": 6, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}}, "df": 3}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 23}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 20, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1.4142135623730951}}, "df": 12}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}}, "df": 13, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 22}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 2.449489742783178}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.7320508075688772}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 7, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 7}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.service.DataService.execute": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.channel.channel_fqn": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 2}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 2.449489742783178}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.4142135623730951}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.449489742783178}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 2}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 2}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 2.23606797749979}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 2.23606797749979}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 2.23606797749979}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 70}}, "x": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}}, "df": 1}, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "b": {"2": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.string_value": {"tf": 1}, "sift_py.ingestion.channel.double_value": {"tf": 1}, "sift_py.ingestion.channel.float_value": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.int32_value": {"tf": 1}, "sift_py.ingestion.channel.uint32_value": {"tf": 1}, "sift_py.ingestion.channel.int64_value": {"tf": 1}, "sift_py.ingestion.channel.uint64_value": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}, "sift_py.ingestion.channel.enum_value": {"tf": 1}, "sift_py.ingestion.channel.empty_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 50}, "docs": {}, "df": 0}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1.4142135623730951}}, "df": 4}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 2}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 17, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 8}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 17}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 87, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 6}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.__init__": {"tf": 1}}, "df": 45}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "t": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}}, "df": 3, "o": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 3, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 4}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1.4142135623730951}}, "df": 15, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}}, "df": 11}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.23606797749979}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1.7320508075688772}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 2}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 2.449489742783178}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 8, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}}, "df": 10}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.is_data_type": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}}, "df": 2, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 4}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}}, "df": 50}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.convert.json.AsJson.as_json": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 37}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 12}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 10}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1}}, "df": 2}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}}, "df": 7}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 10}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 11}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1.4142135623730951}}, "df": 20}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 7}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data.query.DataQueryResult.__init__": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}}, "df": 1, "g": {"docs": {"sift_py.data.error.DataError.__init__": {"tf": 1}, "sift_py.error.SiftError.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 6, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport_test.test_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 6}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1.4142135623730951}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1.4142135623730951}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery.__init__": {"tf": 2}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "a": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}}, "df": 18, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.service.DataService.execute": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.service.DataService.execute": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 5}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImport.convert_status": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 7, "s": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}}, "df": 13}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResult.__init__": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}}, "df": 19}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 24, "s": {"docs": {"sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}, "t": {"docs": {"sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}}, "df": 6, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"sift_py.data_import.status.DataImportService.__init__": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1}, "sift_py.rest.compute_uri": {"tf": 1}}, "df": 3}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}}, "df": 4}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 2}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 2}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1.4142135623730951}}, "df": 8, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 2}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 26, "s": {"docs": {"sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 8}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 2, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleAction.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {"sift_py.data.query.ChannelQuery.__init__": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1}, "sift_py.ingestion.channel.bool_value": {"tf": 1}, "sift_py.ingestion.channel.is_data_type": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}}, "df": 16}}}, "y": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.data.service.DataService.__init__": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 10, "c": {"docs": {}, "df": 0, "h": {"1": {"0": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}}, "df": 1}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.service.DataService.execute": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.run.create_run": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}}, "df": 6}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}}, "df": 6, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.4142135623730951}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 5}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1}}, "df": 11}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}}, "df": 4, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.entity.Entity.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query.DataQuery.__init__": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1.7320508075688772}}, "df": 6}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1}}, "df": 2}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 2}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleAction": {"tf": 1.4142135623730951}}, "df": 10}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 2}}, "df": 2}}, "s": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 4}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 28}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 20}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 8}}}}}}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 2}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 2}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 9}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 4}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 17}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 16}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 15, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}}, "df": 3}}}}}}}, "b": {"2": {"docs": {"sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 20}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.error.DataError": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}}, "df": 7}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.data_import.status.DataImportStatusType": {"tf": 1.4142135623730951}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKind": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1.4142135623730951}}, "df": 11}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.ExpressionChannelReference": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 9}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 7}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 2}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}}, "df": 2}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}}, "df": 3}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 4}}}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 2}}}}, "v": {"2": {"docs": {"sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "doc": {"root": {"0": {"0": {"0": {"0": {"1": {"0": {"0": {"1": {"docs": {"sift_py": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}}, "df": 1}, "docs": {}, "df": 0}, "4": {"7": {"5": {"1": {"2": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 2.8284271247461903}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "t": {"1": {"8": {"docs": {}, "df": 0, ":": {"0": {"9": {"docs": {}, "df": 0, ":": {"0": {"8": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "1": {"1": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "7": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2.449489742783178}}, "df": 2, ":": {"0": {"0": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2.449489742783178}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}, "1": {"0": {"docs": {"sift_py": {"tf": 3}, "sift_py.data": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 8, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}}}}}, "1": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 4}, "2": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "v": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}}, "df": 2}}, "6": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}, "7": {"2": {"0": {"1": {"4": {"1": {"7": {"4": {"8": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 2.8284271247461903}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}, "docs": {"sift_py": {"tf": 4.58257569495584}, "sift_py.data": {"tf": 2}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}}, "df": 13}, "2": {"0": {"2": {"4": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2.449489742783178}, "sift_py.file_attachment": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"6": {"0": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"docs": {"sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"sift_py": {"tf": 3.7416573867739413}, "sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 8}, "3": {"2": {"7": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "docs": {"sift_py": {"tf": 1}}, "df": 1}, "8": {"4": {"0": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"docs": {"sift_py": {"tf": 4.58257569495584}, "sift_py.grpc": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 4}, "4": {"0": {"0": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "2": {"6": {"docs": {"sift_py": {"tf": 3.7416573867739413}}, "df": 1}, "docs": {}, "df": 0}, "7": {"0": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "docs": {"sift_py": {"tf": 1}}, "df": 1}, "5": {"5": {"5": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}}, "df": 2}, "6": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}, "6": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 1}, "7": {"5": {"0": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py": {"tf": 1}}, "df": 1}, "9": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}, "docs": {"sift_py": {"tf": 81.44937077718895}, "sift_py._internal.cel": {"tf": 1.7320508075688772}, "sift_py._internal.cel.cel_in": {"tf": 8.18535277187245}, "sift_py._internal.channel": {"tf": 1.7320508075688772}, "sift_py._internal.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py._internal.channel.get_channels": {"tf": 1.7320508075688772}, "sift_py._internal.convert": {"tf": 1.7320508075688772}, "sift_py._internal.convert.json": {"tf": 1.7320508075688772}, "sift_py._internal.convert.json.AsJson": {"tf": 3}, "sift_py._internal.convert.json.AsJson.as_json": {"tf": 1.7320508075688772}, "sift_py._internal.convert.json.to_json": {"tf": 2.6457513110645907}, "sift_py._internal.convert.protobuf": {"tf": 1.7320508075688772}, "sift_py._internal.convert.protobuf.ProtobufMessage": {"tf": 1.7320508075688772}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 3.1622776601683795}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 2.23606797749979}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1.7320508075688772}, "sift_py._internal.convert.timestamp": {"tf": 1.7320508075688772}, "sift_py._internal.convert.timestamp.to_pb_timestamp": {"tf": 1.7320508075688772}, "sift_py._internal.test_util": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.SerializingFunction": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.DeserializingFunction": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.DoneCallbackType": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.RequestIterableType": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.ResponseIterableType": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 3}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 3}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 3.872983346207417}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 4.242640687119285}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 3.3166247903554}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 3.3166247903554}, "sift_py._internal.test_util.fn": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 3.4641016151377544}, "sift_py._internal.time": {"tf": 1.7320508075688772}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1.7320508075688772}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1.7320508075688772}, "sift_py._internal.user": {"tf": 1.7320508075688772}, "sift_py._internal.user.get_active_users": {"tf": 1.7320508075688772}, "sift_py.calculated_channels": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 7.615773105863909}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 2}, "sift_py.calculated_channels.config.CalculatedChannelConfig.name": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.description": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.expression": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.units": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.client_key": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 7.483314773547883}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.name": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.description": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.units": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.expression": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate.archived": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.__init__": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 2.6457513110645907}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 3.1622776601683795}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 3.1622776601683795}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 3}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 3.7416573867739413}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 36.53765181289022}, "sift_py.data.error": {"tf": 1.7320508075688772}, "sift_py.data.error.DataError": {"tf": 1.7320508075688772}, "sift_py.data.error.DataError.__init__": {"tf": 1.7320508075688772}, "sift_py.data.error.DataError.msg": {"tf": 1.7320508075688772}, "sift_py.data.query": {"tf": 3.1622776601683795}, "sift_py.data.query.DataQuery": {"tf": 6.324555320336759}, "sift_py.data.query.DataQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.asset_name": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.start_time": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.end_time": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.sample_ms": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.page_size": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery.channels": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelLookupInfo": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult.channel": {"tf": 2.6457513110645907}, "sift_py.data.query.DataQueryResult.channels": {"tf": 4.898979485566356}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet": {"tf": 5.656854249492381}, "sift_py.data.query.DataQueryResultSet.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.identifier": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.timestamps": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.values": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 2.23606797749979}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 2.23606797749979}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery": {"tf": 2.23606797749979}, "sift_py.data.query.ChannelQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery.channel_name": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery.component": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery.run_name": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery.fqn": {"tf": 1.7320508075688772}, "sift_py.data.query.ExpressionChannelReference": {"tf": 1.7320508075688772}, "sift_py.data.query.ExpressionChannelReference.reference": {"tf": 1.7320508075688772}, "sift_py.data.query.ExpressionChannelReference.channel_name": {"tf": 1.7320508075688772}, "sift_py.data.query.ExpressionChannelReference.component": {"tf": 1.7320508075688772}, "sift_py.data.query.ExpressionChannelReference.data_type": {"tf": 1.7320508075688772}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 2.23606797749979}, "sift_py.data.query.CalculatedChannelQuery.__init__": {"tf": 1.7320508075688772}, "sift_py.data.query.CalculatedChannelQuery.channel_key": {"tf": 1.7320508075688772}, "sift_py.data.query.CalculatedChannelQuery.expression": {"tf": 1.7320508075688772}, "sift_py.data.query.CalculatedChannelQuery.expression_channel_references": {"tf": 1.7320508075688772}, "sift_py.data.query.CalculatedChannelQuery.run_name": {"tf": 1.7320508075688772}, "sift_py.data.service": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService": {"tf": 2.23606797749979}, "sift_py.data.service.DataService.__init__": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService.REQUEST_BATCH_SIZE": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService.AssetName": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService.ChannelFqn": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService.RunName": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService.execute": {"tf": 1.7320508075688772}, "sift_py.data_import": {"tf": 30.805843601498726}, "sift_py.data_import.ch10": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 16}, "sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File.gzip": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 2.8284271247461903}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 3.7416573867739413}, "sift_py.data_import.config": {"tf": 1.7320508075688772}, "sift_py.data_import.config.CsvConfig": {"tf": 1.7320508075688772}, "sift_py.data_import.config.CsvConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.config.CsvConfig.to_json": {"tf": 1.7320508075688772}, "sift_py.data_import.config.CsvConfig.to_dict": {"tf": 1.7320508075688772}, "sift_py.data_import.csv": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.URL_PATH": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 2.23606797749979}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 2.23606797749979}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 5.291502622129181}, "sift_py.data_import.status": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType.SUCCEEDED": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType.PENDING": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType.IN_PROGRESS": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType.FAILED": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType.from_str": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportStatusType.as_human_str": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.model_config": {"tf": 2}, "sift_py.data_import.status.DataImport.data_import_id": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.created_date": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.modified_date": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.source_url": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.status": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.error_message": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.csv_config": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImport.convert_status": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService.STATUS_PATH": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TdmsUploadService.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 4.69041575982343}, "sift_py.data_import.tempfile": {"tf": 1.7320508075688772}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 3.3166247903554}, "sift_py.data_import.tempfile.NamedTemporaryFile.__init__": {"tf": 1.7320508075688772}, "sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir": {"tf": 1.7320508075688772}, "sift_py.data_import.tempfile.NamedTemporaryFile.name": {"tf": 1.7320508075688772}, "sift_py.data_import.tempfile.NamedTemporaryFile.file": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.from_str": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.as_human_str": {"tf": 1.7320508075688772}, "sift_py.data_import.time_format.TimeFormatType.is_relative": {"tf": 1.7320508075688772}, "sift_py.error": {"tf": 1.7320508075688772}, "sift_py.error.SiftError": {"tf": 1.7320508075688772}, "sift_py.error.SiftError.__init__": {"tf": 1.7320508075688772}, "sift_py.error.SiftError.msg": {"tf": 1.7320508075688772}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 25.514701644346147}, "sift_py.file_attachment._internal.download": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.download.download_remote_file": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.upload": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.upload.UploadService.__init__": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_PATH": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.upload.UploadService.UPLOAD_BULK_PATH": {"tf": 1.7320508075688772}, "sift_py.file_attachment._internal.upload.UploadService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.Entity": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.Entity.__init__": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.Entity.entity_id": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.Entity.entity_type": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.EntityType": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.EntityType.RUN": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.EntityType.ANNOTATION": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.Metadata": {"tf": 3}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 2.23606797749979}, "sift_py.file_attachment.metadata.VideoMetadata.__init__": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.width": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.height": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.duration_seconds": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.timestamp": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 2.23606797749979}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.as_json": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 2.23606797749979}, "sift_py.file_attachment.metadata.ImageMetadata.__init__": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.ImageMetadata.width": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.ImageMetadata.height": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 2.23606797749979}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.ImageMetadata.as_json": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 2.23606797749979}, "sift_py.file_attachment.service.FileAttachmentService.__init__": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 2.23606797749979}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 6}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 4.358898943540674}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 2}, "sift_py.grpc": {"tf": 9.219544457292887}, "sift_py.grpc._async_interceptors.base": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.Continuation": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 4.123105625617661}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 4.47213595499958}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 4.69041575982343}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 5}, "sift_py.grpc._async_interceptors.metadata": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.Metadata": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.__init__": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.Continuation": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 3.7416573867739413}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 3.7416573867739413}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 4}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 4}, "sift_py.grpc._interceptors.context": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2.8284271247461903}, "sift_py.grpc._interceptors.context.ClientCallDetails.__init__": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails.method": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails.timeout": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails.metadata": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails.credentials": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails.wait_for_ready": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.Metadata": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.__init__": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.metadata": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG": {"tf": 1.7320508075688772}, "sift_py.grpc.transport": {"tf": 2.23606797749979}, "sift_py.grpc.transport.SiftChannel": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftAsyncChannel": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 2}, "sift_py.grpc.transport.use_sift_channel": {"tf": 2.8284271247461903}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 2.23606797749979}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 6.782329983125268}, "sift_py.grpc.transport.SiftChannelConfig.uri": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftChannelConfig.apikey": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftChannelConfig.enable_keepalive": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftChannelConfig.use_ssl": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.DataService": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.AuthInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 3}, "sift_py.grpc.transport_test.ForceFailInterceptor.__init__": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.ForceFailInterceptor.intercept": {"tf": 1.7320508075688772}, "sift_py.grpc.transport_test.test_sift_channel": {"tf": 1.7320508075688772}, "sift_py.ingestion": {"tf": 3.7416573867739413}, "sift_py.ingestion._internal.channel": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.channel.channel_reference_from_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.error": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.error.IngestionValidationError.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.error.IngestionValidationError.message": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 2.23606797749979}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 2.449489742783178}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flows": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.run": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.run.get_run_id_by_name": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.run.create_run": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.FlushCallback": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.OnErrorCallback": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 2.23606797749979}, "sift_py.ingestion.buffer.BufferedIngestionService.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 2.23606797749979}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 2.23606797749979}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelValue.channel_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelValue.component": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelValue.value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.data_type": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.description": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.unit": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.component": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.bit_field_elements": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.enum_types": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.identifier": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 2.6457513110645907}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 3.3166247903554}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 2.8284271247461903}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 3.1622776601683795}, "sift_py.ingestion.channel.ChannelBitFieldElement.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.index": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.bit_count": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 3.1622776601683795}, "sift_py.ingestion.channel.ChannelEnumType.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelEnumType.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelEnumType.key": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 2.23606797749979}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType.DOUBLE": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.STRING": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.ENUM": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.BIT_FIELD": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.BOOL": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.FLOAT": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.INT_32": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.INT_64": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.UINT_32": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.UINT_64": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.from_pb": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.from_str": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelDataType.as_human_str": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.channel_fqn": {"tf": 3.1622776601683795}, "sift_py.ingestion.channel.string_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.double_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.float_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.bool_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.int32_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.uint32_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.int64_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.uint64_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.bit_field_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.enum_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.empty_value": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.is_data_type": {"tf": 1.7320508075688772}, "sift_py.ingestion.config": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 5.656854249492381}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 3.7416573867739413}, "sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.flows": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.rules": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 2.23606797749979}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 2.23606797749979}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.error": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.error.YamlConfigError.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.error.YamlConfigError.message": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.load": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 2.6457513110645907}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 3}, "sift_py.ingestion.config.yaml.spec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 16.941074346097416}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.rule_client_key": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.description": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.expression": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.type": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.assignee": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tags": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.channel_references": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.sub_expressions": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.asset_names": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec.tag_names": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 3.1622776601683795}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 4.795831523312719}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.description": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.unit": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.component": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.data_type": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.enum_types": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec.key": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.index": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 4.242640687119285}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.YamlConfigError.message": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.test_load": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.test_load.test__validate_flow": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig": {"tf": 3.4641016151377544}, "sift_py.ingestion.flow.FlowConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig.channels": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig.channel_by_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 2.23606797749979}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow": {"tf": 2.6457513110645907}, "sift_py.ingestion.flow.Flow.flow_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow.timestamp": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow.channel_values": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 3.1622776601683795}, "sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServiceBuilder": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 12.409673645990857}, "sift_py.ingestion.manager.IngestionServicesManager.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager.from_builders": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager.ingestion_service": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServiceManagerError.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule": {"tf": 2.23606797749979}, "sift_py.ingestion.rule.config": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 7.280109889280518}, "sift_py.ingestion.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.name": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.description": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.expression": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.action": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.channel_references": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.rule_client_key": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.asset_names": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleAction.kind": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 4.123105625617661}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 3.4641016151377544}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKind.ANNOTATION": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKind.from_str": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 2.6457513110645907}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 3}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1.7320508075688772}, "sift_py.ingestion.service": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 6.782329983125268}, "sift_py.ingestion.service.IngestionService.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.transport_channel": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.ingestion_config": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.asset_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.flow_configs_by_name": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.run_id": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.organization_id": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.end_stream_on_error": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 5.916079783099616}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 6.782329983125268}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 21.307275752662516}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 3}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 3.3166247903554}, "sift_py.report_templates": {"tf": 1.7320508075688772}, "sift_py.report_templates.config": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 6.855654600401044}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 2}, "sift_py.report_templates.config.ReportTemplateConfig.name": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.template_client_key": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.template_id": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.tags": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.description": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.archived_date": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.archived": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.as_json": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 6.48074069840786}, "sift_py.report_templates.config.ReportTemplateUpdate.name": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate.template_client_key": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate.tags": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate.description": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate.archived": {"tf": 1.7320508075688772}, "sift_py.report_templates.service": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.__init__": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 2.23606797749979}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 2.23606797749979}, "sift_py.rest": {"tf": 1.7320508075688772}, "sift_py.rest.SiftRestConfig": {"tf": 5.477225575051661}, "sift_py.rest.SiftRestConfig.uri": {"tf": 1.7320508075688772}, "sift_py.rest.SiftRestConfig.apikey": {"tf": 1.7320508075688772}, "sift_py.rest.SiftRestConfig.retry": {"tf": 1.7320508075688772}, "sift_py.rest.SiftRestConfig.use_ssl": {"tf": 1.7320508075688772}, "sift_py.rest.compute_uri": {"tf": 1.7320508075688772}, "sift_py.rule": {"tf": 1.7320508075688772}, "sift_py.rule.config": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig": {"tf": 7.280109889280518}, "sift_py.rule.config.RuleConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.name": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.description": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.expression": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.action": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.channel_references": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.rule_client_key": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.asset_names": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.interpolate_sub_expressions": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleAction": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleAction.kind": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 4.123105625617661}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 3.4641016151377544}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKind": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKind.NOTIFICATION": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKind.ANNOTATION": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKind.from_str": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionAnnotationKind.REVIEW": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionAnnotationKind.PHASE": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionAnnotationKind.from_str": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionKindStrRep.ANNOTATION": {"tf": 1.7320508075688772}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 2.6457513110645907}, "sift_py.rule.config.ExpressionChannelReference.channel_reference": {"tf": 1.7320508075688772}, "sift_py.rule.config.ExpressionChannelReference.channel_identifier": {"tf": 1.7320508075688772}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 3}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference": {"tf": 1.7320508075688772}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config": {"tf": 1.7320508075688772}, "sift_py.rule.service": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 2.23606797749979}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 2.23606797749979}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 2.23606797749979}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference.__init__": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference.rule_name": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference.channel_references": {"tf": 1.7320508075688772}, "sift_py.yaml": {"tf": 1.7320508075688772}, "sift_py.yaml.calculated_channels": {"tf": 1.7320508075688772}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 2.6457513110645907}, "sift_py.yaml.channel": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 4.795831523312719}, "sift_py.yaml.channel.ChannelConfigYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec.description": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec.unit": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec.component": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec.data_type": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 2.6457513110645907}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 4.47213595499958}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.description": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date": {"tf": 1.7320508075688772}, "sift_py.yaml.rule": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 2.6457513110645907}, "sift_py.yaml.rule.load_rule_modules": {"tf": 2.6457513110645907}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 2.8284271247461903}, "sift_py.yaml.rule.RuleModuleYamlSpec.rules": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 16.941074346097416}, "sift_py.yaml.rule.RuleYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.rule_client_key": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.description": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.expression": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.type": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.assignee": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.tags": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.channel_references": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.sub_expressions": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.asset_names": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec.tag_names": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 3.1622776601683795}, "sift_py.yaml.rule.NamedExpressionYamlSpec.name": {"tf": 1.7320508075688772}, "sift_py.yaml.utils": {"tf": 1.7320508075688772}}, "df": 741, "s": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 29, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 9}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 4}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 4.242640687119285}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment": {"tf": 5.0990195135927845}, "sift_py.file_attachment.metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 3.1622776601683795}, "sift_py.grpc.transport": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 2.23606797749979}, "sift_py.ingestion": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 61, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.data": {"tf": 2}, "sift_py.file_attachment": {"tf": 1.7320508075688772}, "sift_py.grpc": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import": {"tf": 2.449489742783178}, "sift_py.file_attachment": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 2.6457513110645907}}, "df": 2}, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.channel.ChannelDataType": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 16}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 10}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.23606797749979}}, "df": 2}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2}}, "df": 4}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {"sift_py": {"tf": 3}, "sift_py._internal.convert.json.AsJson": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 3}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 3}}, "df": 22, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 2, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 3}}, "s": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 5}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 2}, "e": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 6.557438524302}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.data": {"tf": 2.8284271247461903}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 3.872983346207417}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.file_attachment": {"tf": 3.7416573867739413}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}}, "df": 30, "d": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 9}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}}, "df": 1}, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}}, "df": 8}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 3.872983346207417}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}}, "df": 3}}, "c": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 30, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}}, "df": 1}}, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 17, "u": {"docs": {}, "df": 0, "p": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 3.1622776601683795}}, "df": 1}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.csv.CsvUploadService": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 7}}}, "y": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.8284271247461903}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}}, "df": 8}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data_import": {"tf": 2.23606797749979}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService": {"tf": 1}}, "df": 3}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}}, "df": 2, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 2}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}}, "df": 21, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 5.744562646538029}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}}, "df": 10}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 3.1622776601683795}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 7, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 11}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 8}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 3}}}, "o": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 8, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 6, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py._internal.convert.json.AsJson": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 38}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.7320508075688772}}, "df": 4, "s": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 3}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 7.14142842854285}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 3}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.7320508075688772}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 3.7416573867739413}, "sift_py.file_attachment": {"tf": 3.605551275463989}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 44, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}}}}}, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}}}}}}, "/": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 3}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 11, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}}, "df": 10}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 2}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 6}, "d": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}}, "df": 6}}}, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 4, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 15}, "s": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 3}, "d": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 5, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "x": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}, "d": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}}, "df": 10}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 2}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 9, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 6}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 3}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 2.23606797749979}}, "df": 1, "s": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}}, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "g": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 3}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 2.6457513110645907}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}}, "df": 3}, "b": {"2": {"docs": {"sift_py.file_attachment": {"tf": 2}}, "df": 1}, "docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}, "i": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 7, "s": {"docs": {"sift_py": {"tf": 5.477225575051661}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data": {"tf": 2.23606797749979}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.7320508075688772}, "sift_py.data_import": {"tf": 2}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 3.3166247903554}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}, "sift_py.error.SiftError": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 2}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.449489742783178}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 3.7416573867739413}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.449489742783178}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 74, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 2}}, "n": {"docs": {"sift_py": {"tf": 5.5677643628300215}, "sift_py._internal.cel.cel_in": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.6457513110645907}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2.449489742783178}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.8284271247461903}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.6457513110645907}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 85, "t": {"3": {"2": {"docs": {"sift_py": {"tf": 2.6457513110645907}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.cel": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}}, "df": 6}}}, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}}, "df": 10, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "o": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 23}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 5}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 9.643650760992955}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1.7320508075688772}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 2}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2.23606797749979}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2.6457513110645907}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 4.47213595499958}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 41, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 4.358898943540674}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 5}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}}, "df": 8, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}}, "df": 3, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}}, "df": 3}, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 2}, "s": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}}, "df": 3}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 8}}}, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 7, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "s": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}}, "df": 3}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 2}}, "df": 1, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 27}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 8}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}}, "df": 3}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import": {"tf": 1.7320508075688772}}, "df": 1}}}}, "f": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 2.23606797749979}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}}, "df": 64}, "t": {"docs": {"sift_py": {"tf": 3.605551275463989}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 2.23606797749979}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 34, "e": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 3}, "sift_py.ingestion.flow.Flow": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2.449489742783178}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2.8284271247461903}}, "df": 6}}}}}}, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 5.196152422706632}, "sift_py.data": {"tf": 3.4641016151377544}, "sift_py.data_import": {"tf": 5.744562646538029}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 3.7416573867739413}, "sift_py.grpc": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"sift_py.data_import.config.CsvConfig": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 9}}}}}, "s": {"docs": {"sift_py.data_import.csv.CsvUploadService": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 5}}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1.4142135623730951}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 2.23606797749979}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 2}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}}, "df": 18, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 7}, "r": {"docs": {"sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 2}}}}, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 9}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}, "/": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 1}}}, "a": {"docs": {"sift_py": {"tf": 7.483314773547883}, "sift_py._internal.cel": {"tf": 1}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 2.23606797749979}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 2}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1.4142135623730951}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 2.449489742783178}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2.23606797749979}, "sift_py.data.query": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 2.449489742783178}, "sift_py.data.query.DataQueryResultSet": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1.7320508075688772}, "sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 2.449489742783178}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.file_attachment": {"tf": 2.449489742783178}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2.6457513110645907}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2.6457513110645907}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2.23606797749979}, "sift_py.grpc.transport": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 4.358898943540674}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 2.23606797749979}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 2}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2.449489742783178}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 3.1622776601683795}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.6457513110645907}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 2.23606797749979}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 3.1622776601683795}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 2}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 4.358898943540674}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 2}}, "df": 164, "p": {"docs": {}, "df": 0, "i": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1.7320508075688772}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 21, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 2.449489742783178}, "sift_py.file_attachment": {"tf": 2}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 7}}}, "s": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}, "p": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 1}, "d": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {"sift_py": {"tf": 4.123105625617661}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2.23606797749979}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2.23606797749979}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 61, "d": {"docs": {"sift_py": {"tf": 5.291502622129181}, "sift_py._internal.convert": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2.23606797749979}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data": {"tf": 2.23606797749979}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment": {"tf": 2.6457513110645907}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.6457513110645907}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 70}, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 15}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.605551275463989}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}}, "df": 27}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 3}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 25}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 4}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 4}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 2, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 2}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 4.898979485566356}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py": {"tf": 2}, "sift_py.file_attachment": {"tf": 2.8284271247461903}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity": {"tf": 1}}, "df": 2}, "s": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 5, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"sift_py": {"tf": 4}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.data": {"tf": 2.449489742783178}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 24, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 3.1622776601683795}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 19, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 2}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 5}, "d": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 10, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 12}, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.data": {"tf": 2.8284271247461903}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 7}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.service.DataService": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 9}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 14, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 2}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 9}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor": {"tf": 1}, "sift_py.grpc._interceptors.metadata.MetadataInterceptor": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}}, "df": 6}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 7}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}}, "df": 5}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {"sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.data.query": {"tf": 1}, "sift_py.data_import": {"tf": 2}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 8}}, "l": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 2}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.file_attachment": {"tf": 2}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}}, "df": 21, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}}, "df": 7}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2}}, "df": 1}}}, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 2.449489742783178}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}}, "df": 9}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 4}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 13, "s": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 25}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py._internal.test_util.channel.MockChannel": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 2.449489742783178}, "sift_py.data": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 23, "s": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}}, "df": 12}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 10}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}}, "df": 11, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.rule": {"tf": 1}}, "df": 1, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data": {"tf": 1.4142135623730951}, "sift_py.ingestion.config": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 2}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {"sift_py": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 3}}}, "s": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 8}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 3}}, "y": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 21}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}}, "df": 4}}}}}, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1.4142135623730951}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2.23606797749979}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 1}}}}}}}}}, "x": {"docs": {"sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}}, "df": 13}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 10}}}, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4}, "s": {"docs": {"sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery": {"tf": 1}}, "df": 2}, "p": {"4": {"docs": {"sift_py.file_attachment": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {}, "df": 0}}, "b": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2.23606797749979}}, "df": 1, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 4.358898943540674}}, "df": 3, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 4.242640687119285}, "sift_py.data": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 3.605551275463989}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 11}}, "e": {"docs": {"sift_py": {"tf": 3.4641016151377544}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data_import": {"tf": 2.449489742783178}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 2}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 68, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 9}}}, "w": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.flow.Flow": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 10}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}}, "df": 9, "d": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "h": {"1": {"0": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1.4142135623730951}}, "df": 1}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 10}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "@": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 4.795831523312719}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}}, "df": 5}}, "y": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 38, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 2.449489742783178}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}}, "df": 4, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 8}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 40, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.data": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 4}}, "e": {"docs": {"sift_py": {"tf": 2}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "f": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 13}}}, "f": {"docs": {"sift_py": {"tf": 7.416198487095663}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 2.6457513110645907}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 2.449489742783178}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 2.6457513110645907}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 2}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1.7320508075688772}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 2}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 2}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2.6457513110645907}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 2.449489742783178}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 3.3166247903554}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig": {"tf": 2.6457513110645907}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 2}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 2}}, "df": 120, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 46, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 3}}}}}}}}}}, "s": {"docs": {"sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 3, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2}}, "df": 1}}}}, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.8284271247461903}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}}, "df": 6}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 10}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 2}, "sift_py.file_attachment": {"tf": 2.23606797749979}}, "df": 2}, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 7, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}}, "df": 20}}, "s": {"docs": {"sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 3}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}}, "df": 25, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}}, "df": 6}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 6, "s": {"docs": {"sift_py.error.SiftError": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 8, "a": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.flow.Flow": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 6, "o": {"docs": {"sift_py": {"tf": 8.660254037844387}, "sift_py._internal.cel": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1.7320508075688772}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 3}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 2}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 3.1622776601683795}, "sift_py.data.query": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery": {"tf": 2.8284271247461903}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import": {"tf": 3.4641016151377544}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 2.6457513110645907}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 3.605551275463989}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 3.1622776601683795}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1.4142135623730951}, "sift_py.error.SiftError": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 3}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 3.1622776601683795}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 2.23606797749979}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2.23606797749979}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2.23606797749979}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 2}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 2.449489742783178}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1.4142135623730951}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 2.23606797749979}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2}, "sift_py.ingestion.rule": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2.8284271247461903}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 2}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 2.6457513110645907}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 4.242640687119285}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.7320508075688772}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig": {"tf": 2.8284271247461903}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 2}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 3.4641016151377544}}, "df": 132, "p": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}, "o": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.file_attachment": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.error.SiftError": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 10.770329614269007}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.to_json": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 2.23606797749979}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 2.8284271247461903}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 2.449489742783178}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 2.449489742783178}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 3.4641016151377544}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 3.3166247903554}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 3.1622776601683795}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 3.605551275463989}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 3.7416573867739413}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 3}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 2}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 2}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1.4142135623730951}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import": {"tf": 3}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 2}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 2.23606797749979}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 2.6457513110645907}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 3.3166247903554}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 2.8284271247461903}, "sift_py.error.SiftError": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 3.3166247903554}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 2.449489742783178}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 2.23606797749979}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 4.123105625617661}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 4.69041575982343}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 4.69041575982343}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 5.196152422706632}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 5}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 4.898979485566356}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 4.242640687119285}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 4.123105625617661}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2.449489742783178}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 2.449489742783178}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}, "sift_py.ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 2}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 2}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 3}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 3.3166247903554}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 3.7416573867739413}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 3.605551275463989}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 5.916079783099616}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 2}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 3.1622776601683795}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 2.8284271247461903}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 2}, "sift_py.rest.SiftRestConfig": {"tf": 2}, "sift_py.rule.config.RuleConfig": {"tf": 3}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1.7320508075688772}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 3}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 2.23606797749979}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.7320508075688772}}, "df": 166, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 2}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4}}, "n": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}}, "df": 15}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 5}}, "m": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 10}, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 6}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 4.242640687119285}, "sift_py._internal.cel": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.7320508075688772}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 2}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 76}, "n": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 3.605551275463989}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 2}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService": {"tf": 2}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 57}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment.entity.Entity": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 2.6457513110645907}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 8.366600265340756}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 21, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 4}, "sift_py.ingestion": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 4}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 3.4641016151377544}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 3}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 3.3166247903554}}, "df": 6, "s": {"docs": {"sift_py.report_templates.service.ReportTemplateService": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 2}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}}, "df": 3, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}}}}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.data": {"tf": 3.3166247903554}, "sift_py.data.query.DataQuery": {"tf": 2.449489742783178}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 14, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.7416573867739413}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 2}}}}, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1.7320508075688772}}, "df": 5, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 8}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 3}}}}}}}}}}, "r": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}}, "df": 6}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}, "y": {"docs": {"sift_py": {"tf": 4.47213595499958}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 13, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data_import": {"tf": 2}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 12}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 7.615773105863909}, "sift_py._internal.convert": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 2}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 31, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.AsJson": {"tf": 1.4142135623730951}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}}, "df": 17}, "d": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.data": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 12}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}}, "df": 3}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}}, "df": 7}}}}, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 2.8284271247461903}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}}, "df": 3, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "e": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}}, "df": 11, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 3}}, "df": 5, "s": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.7320508075688772}}, "df": 8}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc": {"tf": 1}}, "df": 1}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 2, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 6}, "s": {"docs": {"sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 6}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3, "t": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}}, "df": 2, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 5.0990195135927845}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 2}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.8284271247461903}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2.23606797749979}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 2.23606797749979}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.8284271247461903}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 20, "s": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.449489742783178}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.449489742783178}}, "df": 6}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.rule": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 12, "s": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.data": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 6}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 6}}}, "s": {"docs": {"sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 7}}}, "t": {"docs": {"sift_py.data.error.DataError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 10, "s": {"docs": {"sift_py.data.error.DataError": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.data.service.DataService": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 3.872983346207417}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.time_format.TimeFormatType": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataTypeStrRep": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKind": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionKindStrRep": {"tf": 1}, "sift_py.rule.config.RuleActionKind": {"tf": 1}, "sift_py.rule.config.RuleActionAnnotationKind": {"tf": 1}, "sift_py.rule.config.RuleActionKindStrRep": {"tf": 1}}, "df": 8}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 7, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}}, "df": 4}}}, "y": {"docs": {"sift_py.file_attachment": {"tf": 3.1622776601683795}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.7320508075688772}}, "df": 4, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}}, "df": 1}, "d": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 6}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 12}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 4.358898943540674}, "sift_py._internal.cel": {"tf": 1}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 2.449489742783178}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 3.1622776601683795}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 70, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}}, "df": 8}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.7320508075688772}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}}, "df": 43}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 4}}}, "n": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 3, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 28, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 11}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 3}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data.query": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 26}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2}, "sift_py.data": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 19}}, "o": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"sift_py": {"tf": 3}, "sift_py.file_attachment": {"tf": 2.23606797749979}, "sift_py.file_attachment.entity.Entity": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}}, "df": 3}}}}}, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 9}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 7}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}}, "df": 2}}}}}}}, "g": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}}, "df": 5, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 2.449489742783178}, "sift_py.grpc": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}, "sift_py.grpc.transport": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 14}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 2.23606797749979}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQuery": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 1, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.4142135623730951}}, "df": 7}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc.transport": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"sift_py": {"tf": 3.872983346207417}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 5}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 16}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py.data": {"tf": 1.7320508075688772}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 1}, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}}}}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 6, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import.status.DataImport": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"sift_py": {"tf": 3}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1.4142135623730951}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}}, "df": 11, "s": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 11}}}}}, "s": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 3.7416573867739413}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 2}}}}, "y": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 4, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}}, "df": 9}, "s": {"docs": {"sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 29, "s": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 9}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 37}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}}, "df": 8}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}}, "df": 8, "s": {"docs": {"sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.4142135623730951}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 7}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 3.3166247903554}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 2.8284271247461903}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 2.6457513110645907}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 3.1622776601683795}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.error.SiftError": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.file_attachment.entity": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 10}}}, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}}, "df": 11}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.config": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "d": {"docs": {"sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 3.7416573867739413}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1.4142135623730951}}, "df": 3, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 8}}}}}}}, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2.23606797749979}}, "df": 13}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 10, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"sift_py.data_import": {"tf": 3}, "sift_py.data_import.csv.CsvUploadService": {"tf": 1}, "sift_py.file_attachment": {"tf": 2.6457513110645907}, "sift_py.rest.SiftRestConfig": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.rule.service.RuleChannelReference": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.872983346207417}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 3.1622776601683795}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2.8284271247461903}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 2.8284271247461903}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 2}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 2}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 2}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 3.1622776601683795}}, "df": 23, "s": {"docs": {"sift_py": {"tf": 3.4641016151377544}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 18}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 3}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "n": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.data": {"tf": 3.1622776601683795}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 2}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 2}, "sift_py.file_attachment": {"tf": 3.7416573867739413}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 11, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1, "@": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1.7320508075688772}, "sift_py.data.service.DataService": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 8, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 8}, "s": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.449489742783178}}, "df": 3}}, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 2.6457513110645907}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2.23606797749979}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 3}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 3}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 3}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 3}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 3.3166247903554}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 3.3166247903554}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 3}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 3}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2.23606797749979}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 25, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 2}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport_test.AuthInterceptor": {"tf": 1}}, "df": 8}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "b": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}, "d": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py": {"tf": 7.0710678118654755}, "sift_py.data": {"tf": 4.69041575982343}, "sift_py.data.query": {"tf": 2}, "sift_py.data.query.DataQuery": {"tf": 2.6457513110645907}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 5.291502622129181}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 2.6457513110645907}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.6457513110645907}, "sift_py.data_import.status.DataImportStatusType": {"tf": 1}, "sift_py.data_import.status.DataImport": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.status.DataImportService.get_data_import": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 2}}, "df": 47, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2.23606797749979}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}}, "df": 5, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data.query.DataQueryResult.channel": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 2.449489742783178}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}}, "df": 4}}}}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 2.6457513110645907}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 4.123105625617661}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}, "o": {"docs": {"sift_py": {"tf": 2.23606797749979}}, "df": 1, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 2}, "sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.7320508075688772}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 1.7320508075688772}}, "df": 2}}}, "s": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.7416573867739413}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 7, "n": {"docs": {"sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {"sift_py": {"tf": 2}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}}, "df": 12}, "d": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 5}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.8284271247461903}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 8, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 7}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}}, "df": 17, "s": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.7320508075688772}}, "df": 4}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 2}, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 13}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.rule": {"tf": 1}}, "df": 4}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 10}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.file_attachment": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.yaml.rule.load_rule_modules": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}}, "df": 4}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}}, "df": 8}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.rule.service.RuleService.detach_asset": {"tf": 1}}, "df": 1}}}}}}}}}}, "k": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}, "d": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "f": {"docs": {"sift_py.data": {"tf": 2}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 8.06225774829855}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data_import": {"tf": 4.358898943540674}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.file_attachment": {"tf": 2.449489742783178}, "sift_py.grpc": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1.7320508075688772}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 3.1622776601683795}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2.23606797749979}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 55, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}}, "df": 5, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 8, "s": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {"sift_py": {"tf": 3.605551275463989}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 9}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 5, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}}, "df": 11}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data.query": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 7}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}}, "df": 9}}}}}, "e": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.data.query": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.as_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.as_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.as_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.as_pb": {"tf": 1}}, "df": 8}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}}, "df": 5}}, "s": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1}, "sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1}}, "df": 8}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.rule.service.RuleChannelReference": {"tf": 1}}, "df": 1}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py.grpc": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.4142135623730951}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {"sift_py": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py.data": {"tf": 2}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data_import": {"tf": 1}, "sift_py.ingestion": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1.7320508075688772}}, "df": 1, "d": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}}, "df": 1}, "s": {"docs": {"sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 3}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport_test.DataService": {"tf": 1}}, "df": 1}}}}, "/": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"2": {"3": {"2": {"1": {"2": {"4": {"3": {"5": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"2": {"9": {"6": {"8": {"2": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 5}}}}}}, "e": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1.4142135623730951}}, "df": 7}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 3.4641016151377544}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 2}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 2}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 2}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 35, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf.from_pb": {"tf": 1.4142135623730951}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.file_attachment.metadata.VideoMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata.ImageMetadata.from_pb": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig.from_pb": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 23, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}, "h": {"1": {"0": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 2.449489742783178}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 10.392304845413264}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 2.23606797749979}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 3}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 3.1622776601683795}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data": {"tf": 5.0990195135927845}, "sift_py.data.query.DataQueryResult.channels": {"tf": 2.23606797749979}, "sift_py.data.query.DataQueryResult.all_channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data_import": {"tf": 3.1622776601683795}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 3.3166247903554}, "sift_py.grpc": {"tf": 2.23606797749979}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.7320508075688772}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 2}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 2.23606797749979}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 2}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 2}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 2}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2.23606797749979}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 2}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 2}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 2.23606797749979}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 3.4641016151377544}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 2}}, "df": 73, "s": {"docs": {"sift_py": {"tf": 4.58257569495584}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.data": {"tf": 3.605551275463989}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 2}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 20}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2.6457513110645907}}, "df": 1}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.449489742783178}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 2}, "sift_py.data": {"tf": 2.8284271247461903}, "sift_py.data.query.DataQuery": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 2}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 2}}, "df": 2, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 9}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data_import": {"tf": 3}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 32, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 4}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}}, "df": 14, "s": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.convert": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 2.23606797749979}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 2.6457513110645907}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 3}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 3.1622776601683795}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 3}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 3}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2.6457513110645907}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2.6457513110645907}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 14, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 5}, "r": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 4}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}, "c": {"docs": {"sift_py.data": {"tf": 3.4641016151377544}}, "df": 1, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 2, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 2.6457513110645907}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 2.6457513110645907}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}}, "df": 12, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 5, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}}, "df": 2}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "d": {"docs": {"sift_py": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 28, "d": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 14}, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 14}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.ingestion._internal.error.IngestionValidationError": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}}, "df": 7}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.data_import": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1}}, "df": 6}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 10, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "@": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"sift_py": {"tf": 2}, "sift_py.data": {"tf": 2.449489742783178}, "sift_py.data_import": {"tf": 5.385164807134504}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 2.449489742783178}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}}, "df": 9, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.data_import": {"tf": 2.449489742783178}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 2.449489742783178}}, "df": 1}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py._internal.cel.cel_in": {"tf": 1.4142135623730951}, "sift_py._internal.channel.get_channels": {"tf": 1}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 6}, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {}, "df": 0, "u": {"docs": {"sift_py": {"tf": 5.0990195135927845}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 2}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 17, "r": {"docs": {"sift_py": {"tf": 3}, "sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 8, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 4.358898943540674}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 2}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1.7320508075688772}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 29, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 3.605551275463989}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}, "f": {"1": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"sift_py.data_import": {"tf": 2.23606797749979}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 5.916079783099616}, "sift_py.file_attachment.entity.EntityType": {"tf": 1}, "sift_py.file_attachment.metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1.4142135623730951}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 2.449489742783178}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 2}, "sift_py.grpc.transport_test.DataService": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}}, "df": 20, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.file_attachment": {"tf": 3}, "sift_py.file_attachment.entity": {"tf": 1}, "sift_py.file_attachment.entity.Entity": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}}, "df": 14}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.file_attachment": {"tf": 2.449489742783178}}, "df": 1}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1.4142135623730951}, "sift_py._internal.user.get_active_users": {"tf": 1.4142135623730951}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 4.123105625617661}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 11, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 6}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"sift_py": {"tf": 5.477225575051661}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.7320508075688772}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.data": {"tf": 2.6457513110645907}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data_import": {"tf": 3.3166247903554}, "sift_py.file_attachment": {"tf": 3.872983346207417}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.detach_run": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}}, "df": 32}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 2}, "sift_py.data.query": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}}, "df": 4, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.ingestion": {"tf": 1}}, "df": 3}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 18}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2.6457513110645907}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2.6457513110645907}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}}, "df": 7}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.data": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}}, "df": 2, "y": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 7}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 4.69041575982343}, "sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 11}}}}}}, "k": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"sift_py": {"tf": 5.5677643628300215}, "sift_py._internal.convert": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 2}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelConfig.model_config": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.7320508075688772}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.config.CsvConfig": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.status.DataImport.model_config": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment": {"tf": 2.23606797749979}, "sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1}, "sift_py.file_attachment.metadata.ImageMetadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.7320508075688772}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 2}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig.model_config": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 108, "m": {"docs": {"sift_py": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 16}, "t": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.7320508075688772}}, "df": 3, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import": {"tf": 1.7320508075688772}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 8}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}, "sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1}}, "df": 3}}}, "o": {"docs": {"sift_py._internal.cel.cel_in": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py": {"tf": 5.291502622129181}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_flow_configs": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 2.23606797749979}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 2.23606797749979}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 2.449489742783178}}, "df": 19, "s": {"docs": {"sift_py": {"tf": 6.164414002968976}, "sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 8}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 3.1622776601683795}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService.flush": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 3.605551275463989}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "s": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 1}}, "q": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.create_ingestion_config": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}}, "df": 11, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}}, "df": 4}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 13}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 8.888194417315589}, "sift_py._internal.cel.cel_in": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 4.58257569495584}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 3.3166247903554}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1.4142135623730951}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}, "sift_py.grpc._interceptors.context.ClientCallDetails": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 2}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 2}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.7320508075688772}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 55, "d": {"docs": {"sift_py": {"tf": 3}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1.4142135623730951}}, "df": 17, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_flow_names": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 2}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 2}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleChannelReference": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 15}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 6, "t": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 25, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 6, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "v": {"4": {"2": {"6": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.data": {"tf": 3.3166247903554}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "s": {"docs": {"sift_py": {"tf": 2.23606797749979}}, "df": 1}}}}}}}, "w": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 3}, "n": {"docs": {"sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data.error.DataError": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1.4142135623730951}, "sift_py.ingestion.manager.IngestionServiceManagerError": {"tf": 1}}, "df": 11, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 2.23606797749979}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}}, "df": 19}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 2}}}}}}}}}, "v": {"1": {"docs": {"sift_py.file_attachment": {"tf": 2}}, "df": 1}, "docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2}}, "df": 1}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 8}, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {"sift_py.file_attachment.metadata.VideoMetadata": {"tf": 1.4142135623730951}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 7.280109889280518}, "sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.get_state": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.columns": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 2.23606797749979}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 2.23606797749979}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 40, "s": {"docs": {"sift_py": {"tf": 3.4641016151377544}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 2}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 2.23606797749979}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 2}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 12}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 7, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.4142135623730951}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.config.yaml.load.read_and_validate": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.time.to_timestamp_nanos": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.6457513110645907}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py.data": {"tf": 3.1622776601683795}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.try_value_from": {"tf": 1}}, "df": 2, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py.data": {"tf": 3.1622776601683795}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 6}}}, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 18.973665961010276}, "sift_py._internal.cel.cel_in": {"tf": 3.1622776601683795}, "sift_py.data": {"tf": 10.770329614269007}, "sift_py.data_import": {"tf": 7.483314773547883}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 3.7416573867739413}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 2.8284271247461903}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 5.291502622129181}}, "df": 8}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 3.605551275463989}, "sift_py.data.query": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResult": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data.query.ChannelQuery": {"tf": 1}, "sift_py.data.query.CalculatedChannelQuery": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.data.service.DataService.execute": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.grpc.transport_test.DataService.GetData": {"tf": 1}}, "df": 13}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.channel.get_channels": {"tf": 1}}, "df": 1}, "d": {"docs": {"sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.ingestion.channel.ChannelValue": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1.7320508075688772}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 4, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 2}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6, "d": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 2}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_init_with_rules": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 2.6457513110645907}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1}}, "df": 6}, "s": {"docs": {"sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import": {"tf": 4.47213595499958}, "sift_py.data_import.ch10.Ch10UploadService": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py.data_import.ch10.BaseCh10File": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}, "sift_py.file_attachment.metadata": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1.4142135623730951}}, "df": 2}}, "s": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}}, "df": 6}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 3.872983346207417}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.data_import": {"tf": 2}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 2}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.grpc": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.attach_run": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 31, "d": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py._internal.convert.protobuf.AsProtobuf": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel": {"tf": 1}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.data_import.status.DataImportService": {"tf": 1}, "sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.error.SiftAPIDeprecationWarning": {"tf": 1}, "sift_py.file_attachment._internal.upload.UploadService": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.grpc.transport": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.channel.ChannelBitFieldElement": {"tf": 1}, "sift_py.ingestion.channel.ChannelEnumType": {"tf": 1}, "sift_py.ingestion.channel.channel_fqn": {"tf": 1}, "sift_py.ingestion.config": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReference": {"tf": 1}, "sift_py.rule.config.ExpressionChannelReferenceChannelConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 40}, "r": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data.service.DataService": {"tf": 1}, "sift_py.error.SiftError": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.upload_attachment": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_update_flow_configs_updates_flows": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 19, "s": {"docs": {"sift_py._internal.user.get_active_users": {"tf": 1}, "sift_py.ingestion.flow.FlowConfig": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 3}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"sift_py._internal.convert.json.to_json": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 3.1622776601683795}, "sift_py._internal.time.to_timestamp_pb": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.4142135623730951}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}}, "df": 3}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 8}}}}}, "x": {"docs": {"sift_py.data_import.ch10.Ch10UploadService.upload": {"tf": 1}, "sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.7320508075688772}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1.7320508075688772}, "sift_py.ingestion.config.telemetry.TelemetryConfig.__init__": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}}, "df": 6, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion.service.IngestionService": {"tf": 1}}, "df": 10}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.take_stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.channel_ready": {"tf": 1}, "sift_py.data_import": {"tf": 2.23606797749979}, "sift_py.data_import.status.DataImportService.wait_until_complete": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 11}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.take_stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 2}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_unary_stream": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor": {"tf": 1.4142135623730951}, "sift_py.grpc._async_interceptors.metadata.MetadataAsyncInterceptor.metadata": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_unary": {"tf": 1.4142135623730951}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._interceptors.base.ClientInterceptor.intercept_unary_stream": {"tf": 1}}, "df": 18, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_unary": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"sift_py._internal.test_util.channel.MockChannel.take_unary_stream": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.subscribe": {"tf": 1}}, "df": 1}, "s": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.stream_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.unary_stream": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_unary": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.stream_stream": {"tf": 1}}, "df": 8}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"sift_py.error.SiftError": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {"sift_py": {"tf": 2.8284271247461903}, "sift_py.data": {"tf": 2}, "sift_py.data_import": {"tf": 2.449489742783178}, "sift_py.file_attachment": {"tf": 2.23606797749979}, "sift_py.grpc": {"tf": 1.7320508075688772}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.7320508075688772}, "sift_py.rest.SiftRestConfig": {"tf": 1.7320508075688772}}, "df": 7}, "l": {"docs": {"sift_py.data_import.csv.CsvUploadService.upload_from_url": {"tf": 1}, "sift_py.grpc": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"3": {"docs": {"sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 3.3166247903554}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1.7320508075688772}}, "df": 4}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.cel": {"tf": 1}, "sift_py._internal.convert": {"tf": 1}, "sift_py.data.query": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1}, "sift_py.ingestion.channel.ChannelDataType": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.data.query": {"tf": 1}}, "df": 1}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 4.47213595499958}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1}, "sift_py.data": {"tf": 2}, "sift_py.data.query.DataQueryResult.channels": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.value_column": {"tf": 1}, "sift_py.data.query.DataQueryResultSet.time_column": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_retrieves_existing": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_get_or_create_ingestion_config_create_if_not_exist": {"tf": 1}, "sift_py.ingestion._internal.ingestion_config.get_ingestion_config_by_client_key": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.get_report_template": {"tf": 1.4142135623730951}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}, "sift_py.rest.SiftRestConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.attach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.detach_asset": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rule": {"tf": 1.4142135623730951}, "sift_py.rule.service.RuleService.get_rule": {"tf": 1}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 30, "s": {"docs": {"sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1.4142135623730951}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1.4142135623730951}}, "df": 3}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS": {"tf": 1}, "sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS": {"tf": 1}, "sift_py.grpc.keepalive.KeepaliveConfig": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1.4142135623730951}}, "df": 4, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "s": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 3}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 3}}}}, "d": {"docs": {"sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py._internal.cel": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.ingestion.flow.FlowOrderedChannelValues": {"tf": 1}, "sift_py.ingestion.manager.IngestionServicesManager": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 9, "n": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}, "sift_py._internal.test_util.channel.MockChannel.unsubscribe": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion._internal.ingest_test.test_ingestion_service_try_create_ingestion_request_validations": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "r": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 2}}, "df": 1, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "d": {"docs": {"sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"sift_py.ingestion.channel.ChannelConfig.fqn": {"tf": 1}, "sift_py.ingestion.config.telemetry.TelemetryConfigValidationError": {"tf": 1}, "sift_py.ingestion.config.yaml.error.YamlConfigError": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.YamlConfigError": {"tf": 1}, "sift_py.ingestion.flow.Flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 6}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py": {"tf": 2.449489742783178}, "sift_py.data": {"tf": 1}, "sift_py.data_import": {"tf": 1}, "sift_py.data_import.csv.CsvUploadService.simple_upload": {"tf": 1}, "sift_py.file_attachment": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService": {"tf": 1}, "sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1.4142135623730951}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest_flows": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_ingest_flows": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "t": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.grpc.transport.use_sift_channel": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data_import": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"sift_py._internal.test_util.channel.MockChannel.close": {"tf": 1}, "sift_py._internal.test_util.channel.MockAsyncChannel.close": {"tf": 1}}, "df": 2}, "p": {"docs": {"sift_py.file_attachment.metadata": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.ingestion.rule.config.RuleAction": {"tf": 1}, "sift_py.rule.config.RuleAction": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"sift_py.file_attachment": {"tf": 1}}, "df": 1, "s": {"docs": {"sift_py.file_attachment": {"tf": 1}, "sift_py.grpc": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 4, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"sift_py.data_import.tempfile.NamedTemporaryFile": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"sift_py.grpc.transport.get_ssl_credentials": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 2}}}}}}}}}}, "/": {"2": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1}, "v": {"docs": {"sift_py": {"tf": 3.7416573867739413}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"sift_py": {"tf": 1}, "sift_py.data": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py._internal.test_util.channel.MockAsyncChannel.wait_for_state_change": {"tf": 1.7320508075688772}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data_import.tdms.TdmsUploadService.upload": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"sift_py": {"tf": 1.7320508075688772}, "sift_py.data": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 15, "s": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1.4142135623730951}}, "df": 4}, "u": {"docs": {}, "df": 0, "p": {"docs": {"sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}, "sift_py.data.query.DataQueryResult.channels": {"tf": 2}}, "df": 2}}}, "p": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}, "g": {"docs": {"sift_py": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py._internal.test_util.server_interceptor.ServerInterceptor.intercept_service": {"tf": 1}}, "df": 2}}, "s": {"docs": {"sift_py": {"tf": 3.4641016151377544}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 1}, "sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.ingestion.config.yaml.spec": {"tf": 1}, "sift_py.rule.service.RuleService": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"sift_py.rule.service.RuleService.load_rules_from_yaml": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"sift_py": {"tf": 2.23606797749979}}, "df": 1}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"sift_py.grpc.transport.SiftChannelConfig": {"tf": 1}, "sift_py.rest.SiftRestConfig": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py": {"tf": 1}, "sift_py.file_attachment.service.FileAttachmentService.download_attachment": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {"sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"sift_py.data.query.DataQuery": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 2.23606797749979}, "sift_py.data": {"tf": 1}, "sift_py.data.query.DataQueryResult.channel": {"tf": 1}, "sift_py.data.query.DataQueryResultSet": {"tf": 1}, "sift_py.data_import": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_unary": {"tf": 1}, "sift_py.grpc._async_interceptors.base.ClientAsyncInterceptor.intercept_stream_stream": {"tf": 1}, "sift_py.grpc.transport.use_sift_async_channel": {"tf": 1}, "sift_py.ingestion.channel.ChannelConfig.value_from": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.FlowYamlSpec": {"tf": 1}, "sift_py.ingestion.service.IngestionService.buffered_ingestion": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_flow": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_flow": {"tf": 1}, "sift_py.yaml.channel.ChannelConfigYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelEnumTypeYamlSpec": {"tf": 1}, "sift_py.yaml.channel.ChannelBitFieldElementYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}, "sift_py.yaml.rule.NamedExpressionYamlSpec": {"tf": 1}}, "df": 26, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.error.SiftError": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 2}, "sift_py._internal.cel.cel_in": {"tf": 1}, "sift_py.calculated_channels.config.CalculatedChannelConfig": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.config.CalculatedChannelUpdate": {"tf": 1.7320508075688772}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions": {"tf": 1.4142135623730951}, "sift_py.data.query.DataQuery": {"tf": 1}, "sift_py.ingestion.config.yaml.load.load_named_expression_modules": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 2}, "sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec": {"tf": 1}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.ingestion.service.IngestionService.ingest": {"tf": 1}, "sift_py.ingestion.service.IngestionService.try_create_ingestion_request": {"tf": 1}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateConfig": {"tf": 1}, "sift_py.report_templates.config.ReportTemplateUpdate": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1.4142135623730951}, "sift_py.rule.config.RuleActionCreateDataReviewAnnotation": {"tf": 1}, "sift_py.rule.config.RuleActionCreatePhaseAnnotation": {"tf": 1}, "sift_py.rule.service.RuleService.create_or_update_rules": {"tf": 1.4142135623730951}, "sift_py.yaml.calculated_channels.load_calculated_channels": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.load_report_templates": {"tf": 1.4142135623730951}, "sift_py.yaml.report_templates.ReportTemplateYamlSpec": {"tf": 1}, "sift_py.yaml.rule.load_named_expression_modules": {"tf": 1}, "sift_py.yaml.rule.load_rule_modules": {"tf": 1.4142135623730951}, "sift_py.yaml.rule.RuleModuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 2}}, "df": 29}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"sift_py.data": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"sift_py.error.SiftError": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.rule.config.RuleConfig": {"tf": 1}, "sift_py.rule.config.RuleConfig": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"sift_py": {"tf": 2}}, "df": 1}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}, "sift_py.grpc.transport.use_sift_channel": {"tf": 1}, "sift_py.ingestion": {"tf": 1}, "sift_py.ingestion.buffer.BufferedIngestionService": {"tf": 1}}, "df": 5, "d": {"docs": {"sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.ingestion.service.IngestionService.create_ingestion_request": {"tf": 1.4142135623730951}}, "df": 2}}}}, "d": {"docs": {"sift_py": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"sift_py": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"sift_py.grpc.transport_test.ForceFailInterceptor": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"sift_py.ingestion.channel.channel_fqn": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.file_attachment": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"sift_py": {"tf": 2.6457513110645907}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"sift_py._internal.convert.json.AsJson": {"tf": 1.7320508075688772}, "sift_py._internal.convert.json.to_json": {"tf": 1.4142135623730951}, "sift_py.data_import": {"tf": 2}, "sift_py.file_attachment.metadata.Metadata": {"tf": 1.7320508075688772}, "sift_py.ingestion.rule.config.RuleConfig.as_json": {"tf": 1}, "sift_py.rule.config.RuleConfig.as_json": {"tf": 1}}, "df": 6}}}}, "z": {"0": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0, "a": {"docs": {"sift_py": {"tf": 1}, "sift_py.ingestion.config.yaml.spec.RuleYamlSpec": {"tf": 1}, "sift_py.yaml.rule.RuleYamlSpec": {"tf": 1}}, "df": 3}}, "x": {"docs": {"sift_py": {"tf": 1.4142135623730951}, "sift_py.data": {"tf": 1.4142135623730951}}, "df": 2}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();