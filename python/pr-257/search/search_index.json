{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sift Python Client Library","text":"<p>Welcome to the official Python client library for Sift! This library provides a high-level Python API on top of Sift's protocol buffers, designed to ergonomically interface with the Sift gRPC API and simplify the process of streaming data.</p> <p>Sift provides official client libraries for select languages, designed to simplify the process of streaming data over gRPC. These client libraries utilize ingestion-config-based streaming to facilitate data transmission.</p> <p>Check out the repository for a list of all available client libraries.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install the Sift Python library:</p> <pre><code>pip install sift-stack-py\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>This documentation covers two Python APIs for interacting with Sift:</p>"},{"location":"#sift-py-api","title":"Sift Py API","text":"<p>The original low-level Python API that provides direct access to Sift's protocol buffer interfaces. </p> <p>Browse the Sift Py API section for complete reference documentation.</p> <p>Use this API if you need:</p> <ul> <li>Direct protocol buffer access</li> <li>Fine-grained control over gRPC connections  </li> <li>Legacy compatibility with existing code</li> </ul>"},{"location":"#sift-client-api-new","title":"Sift Client API (New)","text":"<p>Warning</p> <p>The Sift Client is experimental and is subject to change.</p> <p>The modern, high-level client library that provides all the ergonomic features missing from the original API. This new client offers intuitive Python interfaces, strong type safety, automatic connection management, and both synchronous and asynchronous support. </p> <p>Explore the Sift Client API (New) section for the complete API reference.</p> <p>Key improvements over Sift Py:</p> <ul> <li>Ergonomic Design - Pythonic interfaces instead of raw protocol buffers</li> <li>Type Safety - Full type hints and Pydantic model validation</li> <li>Dual APIs - Both sync and async support for all operations</li> <li>Auto Connection Management - No manual gRPC connection handling</li> <li>Rich Object Models - Immutable types with convenient methods</li> <li>Modern Patterns - Context managers, iterators, and Python best practices</li> </ul>"},{"location":"#getting-help","title":"Getting help","text":"<ul> <li>API Reference - Browse the complete API documentation in the navigation</li> <li>Examples - Check out code examples throughout the documentation</li> <li>GitHub - Visit our repository for issues and contributions</li> </ul>"},{"location":"#whats-next","title":"What's next?","text":"<p>Ready to dive deeper? Explore the API documentation to learn about:</p> <ul> <li>Sift Resources - Creating, updating, and organizing your assets and other data</li> <li>Data Streaming - Efficient methods for ingesting data</li> <li>Advanced Filtering - Powerful query capabilities</li> <li>Error Handling - Best practices for robust applications</li> <li>Performance Optimization - Tips for high-throughput scenarios</li> </ul> <p>Get started by exploring the API reference in the navigation menu!</p>"},{"location":"reference/sift_py/","title":"sift_py","text":""},{"location":"reference/sift_py/#sift_py","title":"sift_py","text":"<p><code>sift_py</code> is a Python module built on top of Sift's protocol buffers to ergonomically interface with Sift's gRPC API, especially with regard to data ingestion and and rule evaluation. If there are any words or concepts that you find yourself needing to familiarize yourself with, be sure to visit the official Sift documentation.</p> <ul> <li>Introduction<ul> <li>Quickstart</li> </ul> </li> <li>Telemetry Config<ul> <li>Telemetry Config from YAML</li> <li>Telemetry Config YAML Schema</li> <li>Named Expression Modules</li> </ul> </li> <li>Updating a Telemetry Config<ul> <li>Ingestion Client Key</li> </ul> </li> <li>Ingestion Service<ul> <li>Sending data to Sift</li> </ul> </li> <li>Ingestion Performance<ul> <li>Buffered Ingestion</li> </ul> </li> <li>Downloading Telemetry</li> <li>File attachments</li> <li>More Examples</li> </ul>"},{"location":"reference/sift_py/#sift_py--introduction","title":"Introduction","text":"<p>The two fundamental components of this module are the following: - <code>sift_py.ingestion.config.telemetry.TelemetryConfig</code> (telemetry config) - <code>sift_py.ingestion.service.IngestionService</code> (ingestion service)</p> <p>The telemetry config defines the schema of your telemetry. It is where you will declare your asset, channels and their components, flows, and rules: - <code>sift_py.ingestion.channel.ChannelConfig</code> - <code>sift_py.ingestion.rule.config.RuleConfig</code> - <code>sift_py.ingestion.flow.FlowConfig</code></p> <p>Once you have a telemetry config instantiated, you can then proceed to instantiate <code>sift_py.ingestion.service.IngestionService</code> which is what's used to actually send Data to Sift.</p>"},{"location":"reference/sift_py/#sift_py--quickstart","title":"Quickstart","text":"<p>The following example demonstrates how to create a simple telemetry config for an asset with a single channel and a single rule, afterwhich we'll send a single data point to Sift for that channel.</p> <pre><code>from datetime import datetime, timezone\n\nfrom sift_py.grpc.transport import SiftChannelConfig, use_sift_channel\nfrom sift_py.ingestion.channel import (\n    ChannelBitFieldElement,\n    ChannelConfig,\n    ChannelDataType,\n    ChannelEnumType,\n    double_value\n)\nfrom sift_py.ingestion.service import IngestionService\nfrom sift_py.ingestion.config.telemetry import FlowConfig, TelemetryConfig\nfrom sift_py.ingestion.rule.config import (\n    RuleActionCreateDataReviewAnnotation,\n    RuleConfig,\n)\n\n# Create a channel config\ntemperature_channel = ChannelConfig(\n    name=\"temperature\",\n    component=\"thruster\",\n    data_type=ChannelDataType.DOUBLE,\n    description=\"temperature of thruster\",\n    unit=\"Kelvin\",\n)\n\n# Create a rule config referencing the above channel\noverheating_rule = RuleConfig(\n    name=\"overheating\",\n    description=\"Notify Ripley if thrusters get too hot\",\n    expression='$1 &gt; 400',\n    channel_references=[\n        {\n            \"channel_reference\": \"$1\",\n            \"channel_config\": temperature_channel,\n        },\n    ],\n    action=RuleActionCreateDataReviewAnnotation(\n        assignee=\"ellen.ripley@weylandcorp.com\",\n        tags=[\"warning\", \"thruster\"],\n    ),\n),\n\n# Creating the telemetry config using the rules and channels\n# described above\ntelemetry_config = TelemetryConfig(\n    asset_name=\"NostromoLV426\",\n    rules=[overheating_rule],\n    flows=[\n        FlowConfig(\n            name=\"temperature_reading\",\n            channels=[temperature_channel],\n        ),\n    ],\n)\n\n\n# Create a gRPC transport channel configured specifically for the Sift API\nsift_channel_config = SiftChannelConfig(uri=SIFT_BASE_URI, apikey=SIFT_API_KEY)\n\nwith use_sift_channel(sift_channel_config) as channel:\n    # Create ingestion service using the telemetry config we just created\n    ingestion_service = IngestionService(\n        channel,\n        telemetry_config,\n    )\n\n    # Send data to Sift for the 'temperature_reading' flow\n    ingestion_service.try_ingest_flows({\n        \"flow_name\": \"temperature_reading\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            {\n                \"channel_name\": \"temperature\",\n                \"component\": \"thruster\",\n                \"value\": double_value(327)\n            },\n        ],\n    })\n</code></pre>"},{"location":"reference/sift_py/#sift_py--telemetry-config","title":"Telemetry Config","text":"<p>There are currently two methods with which to initialize a telemetry config: - <code>sift_py.ingestion.config.telemetry.TelemetryConfig.__init__</code> - <code>sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml</code></p> <p>Both are equally valid and your choice to use one or the other largely depends on you and your team's preferred workflow. The following sections will cover each initialization method.</p>"},{"location":"reference/sift_py/#sift_py--telemetry-config-from-yaml","title":"Telemetry Config From Yaml","text":"<p>While the telemetry config can be declaratively initialized using using the telemetry config's initializer, <code>sift_py</code> also exposes an API to initialize a telemetry config from a YAML file. The following is a simple demonstration.</p> <p>Say that we had the following project structure:</p> <pre><code> example\n \u251c\u2500 telemetry_configs\n \u2502  \u2514\u2500 nostromo_lv_426.yml\n \u251c\u2500 main.py\n \u251c\u2500 telemetry_config.py\n \u2514\u2500 requirements.txt\n ```\n\nIf our telemetry config is defined in the YAML file, `nostromo_lv_426.yml`, one of the ways in which\nwe might read that YAML file in as a `sift_py.ingestion.config.telemetry.TelemetryConfig` is to do the following:\n\n```python\nfrom pathlib import Path\n\nTELEMETRY_CONFIGS_DIR = Path().joinpath(\"telemetry_configs\")\n\ndef nostromos_lv_426() -&gt; TelemetryConfig:\n    telemetry_config_path = TELEMETRY_CONFIGS_DIR.joinpath(\"nostromo_lv_426.yml\")\n    return TelemetryConfig.try_from_yaml(telemetry_config_path)\n</code></pre> <p>As for the contents of the <code>nostromo_lv_426.yml</code>, file it might look something like this:</p> <pre><code>asset_name: NostromoLV426\n\nchannels:\n  temperature_channel: &amp;temperature_channel\n    name: temperature\n    component: thruster\n    data_type: double\n    description: temperature of the thruster\n    unit: Kelvin\n\nrules:\n  - name: overheating\n    description: Notify Ripley if thrusters get too hot\n    expression: $1 &gt; 400\n    channel_references:\n      - $1: *temperature_channel\n    type: review\n    assignee: ellen.ripley@weylandcorp.com\n    tags:\n        - warning\n        - thruster\n\nflows:\n  - name: temperature_reading\n    channels:\n      - &lt;&lt;: *temperature_channel\n</code></pre> <p>And with the telemetry config that we just created, we can then proceed to create an ingestion service and begin data ingestion.</p>"},{"location":"reference/sift_py/#sift_py--telemetry-config-yaml-schema","title":"Telemetry Config YAML Schema","text":"<p>The following is the formal schema for a valid telemetry config in YAML. You can also see the <code>sift_py.ingestion.ingestion.config.yaml.spec</code> module to see the schema in the for of Python classes.</p> <pre><code>schema:\n  description: |\n    A formal specification to create a telemetry config which is used\n    to stream data and evaluate rules using Sift's gRPC API.\n\n  asset_name:\n    type: string\n    description: The name of the asset to telemeter.\n\n  ingestion_client_key:\n    type: string\n    description: Optional user-defined string-key that uniquely identifies this telemetry config.\n\n  organization_id:\n    type: string\n    description: Optional ID of user's organization. Required if user belongs to multiple organizations.\n\n  channels:\n    type: array\n    description: Sensors that send the data.\n    items:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the channel.\n        description:\n          type: string\n          description: Description of the channel.\n        unit:\n          type: string\n          description: Unit of measurement.\n        component:\n          type: string\n          description: Name of the component that the channel belongs to.\n        data_type:\n          type: string\n          enum: [\"double\", \"string\", \"enum\", \"bit_field\", \"bool\", \"float\", \"int32\", \"int64\", \"uint32\", \"uint64\"]\n          description: Type of the data associated with the channel.\n        enum_types:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: Name of the enum type.\n              key:\n                type: integer\n                description: Key of the enum type.\n          description: Required if `data_type` is `enum`.\n        bit_field_elements:\n          type: array\n          description: Required if `data_type` is `bit_field`.\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: Name of the bit-field element.\n              index:\n                type: integer\n                description: Index of the bit-field element.\n              bit_count:\n                type: integer\n                description: Bit count of the bit-field element.\n\n  rules:\n    type: array\n    description: Rules that, when evaluated to a true, will perform some sort of action.\n    items:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the rule.\n        description:\n          type: string\n          description: Description of the rule.\n        expression:\n          oneOf:\n            - type: string\n              description: A string expression defining the rule logic.\n            - type: object\n              description: A reference to a named expression.\n              properties:\n                name:\n                  type: string\n                  description: Name of the named expression.\n        type:\n          type: string\n          enum: [phase, review]\n          description: Determines the action to perform if a rule gets evaluated to true.\n        assignee:\n          type: string\n          description: If 'type' is 'review', determines who to notify. Expects an email.\n        tags:\n          type: array\n          items:\n            type: string\n          description: Tags to associate with the rule.\n        channel_references:\n          type: array\n          description: A list of channel references that map to an actual channel. Use YAML anchors to reference channels.\n          items:\n            type: object\n            description: |\n              Key-value pair of string to channel. The channel should be a YAML anchor to a previously declared channel\n              in the top-level 'channels' property. The key should take the form of '$1', '$2', '$11', and do on. In YAML\n              it would look something like this:\n\n              ------------------------------------\n              channel_references:\n                - $1: *vehicle_state_channel\n                - $2: *voltage_channel\n              ------------------------------------\n        sub_expressions:\n          type: array\n          description: A list of sub-expressions which is a mapping of place-holders to sub-expressions.\n          items:\n            type: object\n            description: |\n              A sub-expression is made up of two components: A reference and the actual sub-expression. The sub-expression reference is\n              a string with a \"$\" prepended to another string comprised of characters in the following character set: `[a-zA-Z0-9_]`.\n              This reference should be mapped to the actual sub-expression. For example, say you have kinematic equations in `kinematics.yml`,\n              and the equation you're interested in using looks like the following:\n\n              ------------------------------------\n              kinetic_energy_gt:\n                0.5 * $mass * $1 * $1 &gt; $threshold\n              ------------------------------------\n\n              To properly use `kinetic_energy_gt` in your rule, it would look like the following:\n\n              ------------------------------------\n              rules:\n                - name: kinetic_energy\n                  description: Tracks high energy output while in motion\n                  type: review\n                  assignee: bob@example.com\n                  expression:\n                    name: kinetic_energy_gt\n                  channel_references:\n                    - $1: *velocity_channel\n                  sub_expressions:\n                    - $mass: 10\n                    - $threshold: 470\n                  tags:\n                      - nostromo\n              ------------------------------------\n  flows:\n    type: array\n    description: A list of named groups of channels that send data together.\n    items:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the flow.\n        channels:\n          type: array\n          items:\n            type: object\n            description: |\n              List of channels included in the flow. Should be a YAML anchor from a previously declared channel\n              in the top-level 'channels' property.\n</code></pre>"},{"location":"reference/sift_py/#sift_py--named-expression-modules","title":"Named Expression Modules","text":"<p>Often times you may find yourself needing to re-using more complex rule expressions across different telemetry configs. If this is the case you might consider leveraging <code>named expressions</code> which allow you to reference the name of an expression defined in another YAML file rather than defining it repeatedly across different telemetry configs.</p> <p>As an example, say this is our current rule in our YAML telemetry config:</p> <pre><code>rules:\n  - name: kinetic_energy_gt\n    description: Tracks high energy output while in motion\n    type: review\n    assignee: cthulhu@rlyeh.com\n    expression: 0.5 * 10 * $1 * $1 &gt; 470\n    channel_references:\n      - $1: *velocity_channel\n</code></pre> <p>Instead of repeatedly writing that kinetic energy expression across different telemetry configs, you can move that expression over to it's own named expression module YAML file which we'll call <code>kinematics.yml</code>, and then reference it by name in the telemetry configs:</p> <p><code>kinematics.yml</code> <pre><code>kinetic_energy_gt:\n  0.5 * $mass * $1 * $1 &gt; $threshold\nrod_torque_gt:\n  (1 / 12) * $mass * $rod_length * $rod_length * $1\n</code></pre></p> <p><code>telemetry_config.py</code> <pre><code>rules:\n  - name: kinetic_energy\n    description: Tracks high energy output while in motion\n    type: review\n    expression:\n      name: kinetic_energy_gt\n    channel_references:\n      - $1: *velocity_channel\n    sub_expressions:\n      - $mass: 10\n      - $threshold: 470\n</code></pre></p> <p>In order for the telemetry configs to load in the named expression modules at run-time, all you need to do is provide the path to the named expression module(s) wherever it may be. For example, given the following project structure:</p> <pre><code> example\n \u251c\u2500 telemetry_configs\n \u2502  \u2514\u2500 nostromo_lv_426.yml\n \u251c\u2500 main.py\n \u251c\u2500 telemetry_config.py\n \u2514\u2500 expression_modules\n    \u251c\u2500 string.yml\n    \u2514\u2500 kinematics.yml\n</code></pre> <p>Here is how we might load our telemetry config:</p> <pre><code>from pathlib import Path\n\nfrom sift_py.ingestion.service import TelemetryConfig\n\nTELEMETRY_CONFIGS_DIR = Path().joinpath(\"telemetry_configs\")\nEXPRESSION_MODULES_DIR = Path().joinpath(\"expression_modules\")\n\n\ndef nostromos_lv_426() -&gt; TelemetryConfig:\n    telemetry_config_path = TELEMETRY_CONFIGS_DIR.joinpath(\"nostromo_lv_426.yml\")\n\n    return TelemetryConfig.try_from_yaml(\n        telemetry_config_path,\n        [\n            EXPRESSION_MODULES_DIR.joinpath(\"kinematics.yml\"),\n            EXPRESSION_MODULES_DIR.joinpath(\"string.yml\"),\n        ],\n    )\n</code></pre>"},{"location":"reference/sift_py/#sift_py--updating-a-telemetry-config","title":"Updating a Telemetry Config","text":"<p>The following section covers the situation where you would like to maintain your config using an <code>ingestion_client_key</code>. Note that this is not required and only necessary if you are updating your telemetry config dynamically.</p>"},{"location":"reference/sift_py/#sift_py--ingestion-client-key","title":"Ingestion Client Key","text":"<p>A <code>sift_py.ingestion.config.telemetry.TelemetryConfig</code> contains a field called <code>ingestion_client_key</code> which is used by Sift to uniquely identify an existing telemetry config for an asset. For a given telemetry config you are free to make the following changes and Sift will be able to pick it up without changing the <code>ingestion_client_key</code>: - Adding new channels - Removing existing channels (Need to also remove channel reference in the flow) - Adding new flows - Removing existing flows - Adding new rules - Updating existing rules</p> <p>These can even be done on the fly at run-time.</p> <p>The following changes, however, would require you to also update the <code>ingestion_client_key</code>, otherwise an exception will be raised when a <code>sift_py.ingestion.service.IngestionService</code> is initialized. - Updating an existing channel - Adding a new channel to an existing flow</p>"},{"location":"reference/sift_py/#sift_py--ingestion-service","title":"Ingestion Service","text":"<p>As mentioned previously, whereas a telemetry config defines the schema of your telemetry, <code>sift_py.ingestion.service.IngestionService</code> is what's actually responsible for sending your data to Sift.</p> <p>The two methods most folks will use to send data to Sift are the following: - <code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code> - <code>sift_py.ingestion.service.IngestionService.ingest_flows</code></p> <p>Visit the function definitions to understand the differences between each.</p> <p>Once you have generated a request using either of those methods data is then sent to Sift using <code>sift_py.ingestion.service.IngestionService.ingest</code>. The following are some examples illustrating generating data ingestion requests and sending them to Sift.</p>"},{"location":"reference/sift_py/#sift_py--sending-data-to-sift","title":"Sending Data to Sift","text":"<p>Suppose we have the following telemetry config with four configured instances of <code>sift_py.ingestion.flow.FlowConfig</code>.</p> <pre><code>def nostromos_lv_426() -&gt; TelemetryConfig:\n    log_channel = ChannelConfig(\n        name=\"log\",\n        data_type=ChannelDataType.STRING,\n        description=\"asset logs\",\n    )\n    velocity_channel = ChannelConfig(\n        name=\"velocity\",\n        data_type=ChannelDataType.DOUBLE,\n        description=\"speed\",\n        unit=\"Miles Per Hour\",\n        component=\"mainmotor\",\n    )\n    voltage_channel = ChannelConfig(\n        name=\"voltage\",\n        data_type=ChannelDataType.INT_32,\n        description=\"voltage at source\",\n        unit=\"Volts\",\n    )\n    vehicle_state_channel = ChannelConfig(\n        name=\"vehicle_state\",\n        data_type=ChannelDataType.ENUM,\n        description=\"vehicle state\",\n        enum_types=[\n            ChannelEnumType(name=\"Accelerating\", key=0),\n            ChannelEnumType(name=\"Decelerating\", key=1),\n            ChannelEnumType(name=\"Stopped\", key=2),\n        ],\n    )\n    gpio_channel = ChannelConfig(\n        name=\"gpio\",\n        data_type=ChannelDataType.BIT_FIELD,\n        description=\"on/off values for pins on gpio\",\n        bit_field_elements=[\n            ChannelBitFieldElement(name=\"12v\", index=0, bit_count=1),\n            ChannelBitFieldElement(name=\"charge\", index=1, bit_count=2),\n            ChannelBitFieldElement(name=\"led\", index=3, bit_count=4),\n            ChannelBitFieldElement(name=\"heater\", index=7, bit_count=1),\n        ],\n    )\n\n    return TelemetryConfig(\n        asset_name=\"NostromoLV426\",\n        flows=[\n            FlowConfig(\n                name=\"readings\",\n                channels=[\n                    velocity_channel,\n                    voltage_channel,\n                    vehicle_state_channel,\n                    gpio_channel,\n                ],\n            ),\n            FlowConfig(\n                name=\"voltage\",\n                channels=[voltage_channel],\n            ),\n            FlowConfig(\n                name=\"gpio_channel\",\n                channels=[gpio_channel],\n            ),\n            FlowConfig(name=\"logs\", channels=[log_channel]),\n        ],\n    )\n</code></pre> <p>The following is an example of ingesting data for each flow using <code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code>:</p> <pre><code>import time\nfrom datetime import datetime, timezone\n\nfrom sift_py.grpc.transport import SiftChannelConfig, use_sift_channel\nfrom sift_py.ingestion.channel import (\n    ChannelBitFieldElement,\n    ChannelConfig,\n    ChannelDataType,\n    ChannelEnumType,\n    bit_field_value,\n    double_value,\n    enum_value,\n    int32_value,\n    string_value,\n)\nfrom sift_py.ingestion.service import IngestionService\nfrom sift_py.ingestion.config.telemetry import FlowConfig, TelemetryConfig\n\n\ntelemetry_config = nostromos_lv_426()\n\nsift_channel_config = SiftChannelConfig(uri=base_uri, apikey=apikey)\n\nwith use_sift_channel(sift_channel_config) as channel:\n    ingestion_service = IngestionService(\n        channel,\n        telemetry_config,\n    )\n\n    # Send data for the readings flow\n    ingestion_service.try_ingest_flows({\n        \"flow_name\": \"readings\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            {\n                \"channel_name\": \"velocity\",\n                \"component\": \"mainmotor\",\n                \"value\": double_value(10),\n            },\n            {\n                \"channel_name\": \"voltage\",\n                \"value\": int32_value(5),\n            },\n            {\n                \"channel_name\": \"vehicle_state\",\n                \"value\": enum_value(2),\n            },\n            {\n                \"channel_name\": \"gpio\",\n                \"value\": bit_field_value(bytes(int(\"00001001\", 2)),\n            },\n        ],\n    })\n\n    # Send partial data for the readings flow\n    ingestion_service.try_ingest_flows({\n        \"flow_name\": \"readings\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            {\n                \"channel_name\": \"velocity\",\n                \"component\": \"mainmotor\",\n                \"value\": double_value(10),\n            },\n            {\n                \"channel_name\": \"gpio\",\n                \"value\": bit_field_value(bytes(int(\"00001001\", 2)),\n            },\n        ],\n    })\n\n    # Send partial data for the logs flow\n    ingestion_service.try_ingest_flows({\n        \"flow_name\": \"readings\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            {\n                \"channel_name\": \"logs\",\n                \"value\": string_value(\"INFO: some message\")\n            },\n        ],\n    })\n\n    # Send data for both logs and readings\n    ingestion_service.try_ingest_flows(\n        {\n            \"flow_name\": \"readings\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [\n                {\n                    \"channel_name\": \"velocity\",\n                    \"component\": \"mainmotor\",\n                    \"value\": double_value(10),\n                },\n                {\n                    \"channel_name\": \"voltage\",\n                    \"value\": int32_value(5),\n                },\n                {\n                    \"channel_name\": \"vehicle_state\",\n                    \"value\": enum_value(2),\n                },\n                {\n                    \"channel_name\": \"gpio\",\n                    \"value\": bit_field_value(bytes(int(\"00001001\", 2)),\n                },\n            ],\n        },\n        {\n            \"flow_name\": \"logs\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [\n                {\n                    \"channel_name\": \"logs\",\n                    \"value\": string_value(\"INFO: some message\")\n                },\n            ],\n        },\n    )\n</code></pre> <p>Alternatively, you may also use <code>sift_py.ingestion.service.IngestionService.ingest_flows</code>, but be sure to read the documentation for that method to understand how to leverage it correctly. Unlike <code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code>, it will not perform any client-side validations. This is useful when performance is critical. Do note, however, that the client-side validations done in <code>sift_py.ingestion.service.IngestionService.try_ingest_flows</code> are pretty minimal and should not incur noticeable overhead.</p> <pre><code>import time\nfrom datetime import datetime, timezone\n\nfrom sift_py.grpc.transport import SiftChannelConfig, use_sift_channel\nfrom sift_py.ingestion.channel import (\n    ChannelBitFieldElement,\n    ChannelConfig,\n    ChannelDataType,\n    ChannelEnumType,\n    bit_field_value,\n    empty_value,\n    double_value,\n    enum_value,\n    int32_value,\n    string_value,\n)\nfrom sift_py.ingestion.service import IngestionService\nfrom sift_py.ingestion.config.telemetry import FlowConfig, TelemetryConfig\n\n\ntelemetry_config = nostromos_lv_426()\n\nsift_channel_config = SiftChannelConfig(uri=base_uri, apikey=apikey)\n\nwith use_sift_channel(sift_channel_config) as channel:\n    ingestion_service = IngestionService(\n        channel,\n        telemetry_config,\n    )\n\n    # Send data for the readings flow\n    ingestion_service.ingest_flows({\n        \"flow_name\": \"readings\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            double_value(10),\n            int32_value(5),\n            enum_value(2),\n            bit_field_value(bytes(int(\"00001001\", 2)),\n        ],\n    })\n\n    # Send partial data for the readings flow\n    ingestion_service.ingest_flows({\n        \"flow_name\": \"readings\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            double_value(10),\n            empty_value(),\n            empty_value(),\n            bit_field_value(bytes(int(\"00001001\", 2)),\n        ],\n    })\n\n    # Send data for logs flow\n    ingestion_service.ingest_flows({\n        \"flow_name\": \"logs\",\n        \"timestamp\": datetime.now(timezone.utc),\n        \"channel_values\": [\n            string_value(\"INFO: some message\"),\n        ],\n    })\n\n    # Send data for both logs and readings flow\n    ingestion_service.ingest_flows(\n        {\n            \"flow_name\": \"readings\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [\n                double_value(10),\n                int32_value(5),\n                enum_value(2),\n                bit_field_value(bytes(int(\"00001001\", 2)),\n            ],\n        },\n        {\n            \"flow_name\": \"logs\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [\n                string_value(\"INFO: some message\"),\n            ],\n        },\n    )\n</code></pre>"},{"location":"reference/sift_py/#sift_py--ingestion-performance","title":"Ingestion Performance","text":"<p>Depending on your ingestion setup there are some very common Python gotchas as it relates to gRPC that hinders performance. The following are some examples of things you may want to avoid when ingesting data into Sift:</p> <ol> <li>Avoid ingesting a high volume of data points in a hot loop. Prefer to ingest the data as a batch so that serializing all outgoing requests can happen in one-fell swoop.</li> </ol> <pre><code># Avoid this:\nfor flow in flows:\n    ingestion_service.try_ingest_flows(flow)\n\n# Do this:\ningestion_service.try_ingest_flows(*flows)\n</code></pre> <ol> <li>Avoid sending too much data at once, otherwise you may encounter CPU-bound bottlenecks caused by serializing a large amount of messages.</li> </ol> <pre><code># Avoid this:\ningestion_service.try_ingest_flows(*a_very_large_amount_of_flows)\n</code></pre> <p>To avoid having to deal with these pitfalls, prefer to leverage buffered ingestion.</p>"},{"location":"reference/sift_py/#sift_py--buffered-ingestion","title":"Buffered Ingestion","text":"<p><code>sift_py</code> offers an API to automatically buffer requests and send them in batches when the buffer threshold is met. This ensures the following: - You are not serializing, streaming, serializing, streaming, and so on, one record at a time. - You are not spending too much time serializing a large amount of requests, and likewise, spending too much time streaming a high volume of messages.</p> <p>This API is available via the following: - <code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code></p> <p>The buffered ingestion mechanism simply handles the buffering logic and streams the data only after the buffer threshold is met. The following is an example of how it might be used:</p> <pre><code># Defaults to a buffer size of `sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE` requests.\nwith ingestion_service.buffered_ingestion() as buffered_ingestion:\n    buffered_ingestion.try_ingest_flows(*lots_of_flows)\n    buffered_ingestion.try_ingest_flows(*lots_more_flows)\n\n# Custom buffer size of 750 requests\nwith ingestion_service.buffered_ingestion(750) as buffered_ingestion:\n    buffered_ingestion.try_ingest_flows(*lots_of_flows)\n    buffered_ingestion.try_ingest_flows(*lots_more_flows)\n</code></pre> <p>Once the with-block ends, the remaining requests will be flushed from the buffer automatically, but you may manually flush as well:</p> <pre><code>with ingestion_service.buffered_ingestion() as buffered_ingestion:\n    buffered_ingestion.try_ingest_flows(*lots_of_flows)\n    buffered_ingestion.flush()\n</code></pre> <p>Visit the <code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code> function definition for further details.</p>"},{"location":"reference/sift_py/#sift_py--downloading-telemetry","title":"Downloading Telemetry","text":"<p>To download your telemetry locally you'll want to make use of the <code>sift_py.data</code> module. Them module-level documentation contains more details, but here is an example script demonstrating how to download data for multiple channels, putting them into a <code>pandas</code> data frame, and writing the results out to a CSV:</p> <pre><code>import asyncio\nimport functools\nimport pandas as pd\nfrom sift_py.data.query import ChannelQuery, DataQuery\nfrom sift_py.grpc.transport import SiftChannelConfig, use_sift_async_channel\nfrom sift_py.data.service import DataService\n\n\nasync def channel_demo():\n    channel_config: SiftChannelConfig = {\n        \"apikey\": \"my-key\"\n        \"uri\": \"sift-uri\"\n    }\n\n    async with use_sift_async_channel(channel_config) as channel:\n        data_service = DataService(channel)\n\n        query = DataQuery(\n            asset_name=\"NostromoLV426\",\n            start_time=\"2024-07-04T18:09:08.555-07:00\",\n            end_time=\"2024-07-04T18:09:11.556-07:00\",\n            channels=[\n                ChannelQuery(\n                    channel_name=\"voltage\",\n                    run_name=\"[NostromoLV426].1720141748.047512\"\n                ),\n                ChannelQuery(\n                    channel_name=\"velocity\",\n                    component=\"mainmotors\",\n                    run_name=\"[NostromoLV426].1720141748.047512\",\n                ),\n                ChannelQuery(\n                    channel_name=\"gpio\",\n                    run_name=\"[NostromoLV426].1720141748.047512\",\n                ),\n            ],\n        )\n\n        result = await data_service.execute(query)\n\n        data_frames = [\n            pd.DataFrame(data.columns())\n            for data in result.channels(\"voltage\", \"mainmotors.velocity\", \"gpio.12v\")\n        ]\n\n        merged_frame = functools.reduce(\n            lambda x, y: pd.merge_asof(x, y, on=\"time\"), data_frames\n        )\n\n        merged_frame.to_csv(\"my_csv.csv\")\n\nif __name__ == \"__main__\":\n    asyncio.run(example())\n</code></pre>"},{"location":"reference/sift_py/#sift_py--file-attachments","title":"File attachments","text":"<p>See the module-level documentation for <code>sift_py.file_attachment</code> to learn uploading and downloading file attachments to various entities such as runs, annotations, and annotation logs. Once file attachments are created they become viewable in the Sift application.</p>"},{"location":"reference/sift_py/#sift_py--more-examples","title":"More Examples","text":"<p>For more comphrensive examples demonstrating a little bit of everything, you may visit the examples directory in the project repo.</p> MODULE DESCRIPTION <code>asset</code> <code>calculated_channels</code> <code>data</code> <p>This module contains tools to download telemetry from the Sift data API. The</p> <code>data_import</code> <p>This module contains services to facilitate importing data.</p> <code>error</code> <code>file_attachment</code> <p>This module contains services to facilitate uploading and downloading file attachments.</p> <code>grpc</code> <p>This module is primarily concerned with configuring and initializing gRPC connections to the Sift API.</p> <code>ingestion</code> <p>Module containing components necessary to leverage Sift's data ingestion and rule evaluation API.</p> <code>report_templates</code> <code>rest</code> <code>rule</code> <code>yaml</code>"},{"location":"reference/sift_py/asset/","title":"sift_py.asset","text":""},{"location":"reference/sift_py/asset/#sift_py.asset","title":"sift_py.asset","text":"MODULE DESCRIPTION <code>config</code> <code>service</code>"},{"location":"reference/sift_py/asset/config/","title":"sift_py.asset.config","text":""},{"location":"reference/sift_py/asset/config/#sift_py.asset.config","title":"sift_py.asset.config","text":"CLASS DESCRIPTION <code>AssetConfig</code> <p>Thin wrapper class for an Asset that can be created from an Asset protobuf object.</p>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig","title":"AssetConfig","text":"<p>Thin wrapper class for an Asset that can be created from an Asset protobuf object. This provides a more Python-friendly interface than the generated protobuf object.</p> METHOD DESCRIPTION <code>from_asset</code> <p>Creates an AssetConfig from an Asset protobuf object.</p> <code>to_asset</code> <p>Converts this AssetConfig to an Asset protobuf object.</p> ATTRIBUTE DESCRIPTION <code>asset_id</code> <p> TYPE: <code>str</code> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>metadata</code> <p> TYPE: <code>Optional[Dict[str, Union[str, float, bool]]]</code> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>tags</code> <p> TYPE: <code>Optional[List[str]]</code> </p>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.asset_id","title":"asset_id  <code>instance-attribute</code>","text":"<pre><code>asset_id: str\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Optional[Dict[str, Union[str, float, bool]]] = (\n    None\n)\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: Optional[List[str]] = None\n</code></pre>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.from_asset","title":"from_asset  <code>classmethod</code>","text":"<pre><code>from_asset(asset: Asset) -&gt; AssetConfig\n</code></pre> <p>Creates an AssetConfig from an Asset protobuf object.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset protobuf object to convert.</p> <p> TYPE: <code>Asset</code> </p> RETURNS DESCRIPTION <code>AssetConfig</code> <p>An AssetConfig instance with the data from the Asset.</p>"},{"location":"reference/sift_py/asset/config/#sift_py.asset.config.AssetConfig.to_asset","title":"to_asset","text":"<pre><code>to_asset() -&gt; Asset\n</code></pre> <p>Converts this AssetConfig to an Asset protobuf object.</p> RETURNS DESCRIPTION <code>Asset</code> <p>An Asset protobuf object with the data from this config.</p>"},{"location":"reference/sift_py/asset/service/","title":"sift_py.asset.service","text":""},{"location":"reference/sift_py/asset/service/#sift_py.asset.service","title":"sift_py.asset.service","text":"CLASS DESCRIPTION <code>AssetService</code> <p>A service for managing assets. Allows for creating, updating, and retrieving assets in the Sift API.</p>"},{"location":"reference/sift_py/asset/service/#sift_py.asset.service.AssetService","title":"AssetService","text":"<pre><code>AssetService(channel: SiftChannel)\n</code></pre> <p>A service for managing assets. Allows for creating, updating, and retrieving assets in the Sift API.</p> METHOD DESCRIPTION <code>delete_asset</code> <p>Deletes an asset by its ID.</p> <code>get_asset</code> <p>Retrieves an asset by its ID.</p> <code>list_assets</code> <p>Lists assets in an organization.</p> <code>update_asset</code> <p>Updates an existing asset.</p>"},{"location":"reference/sift_py/asset/service/#sift_py.asset.service.AssetService.delete_asset","title":"delete_asset","text":"<pre><code>delete_asset(asset_id: str) -&gt; None\n</code></pre> <p>Deletes an asset by its ID.</p>"},{"location":"reference/sift_py/asset/service/#sift_py.asset.service.AssetService.get_asset","title":"get_asset","text":"<pre><code>get_asset(asset_id: str) -&gt; Optional[AssetConfig]\n</code></pre> <p>Retrieves an asset by its ID.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset to retrieve.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[AssetConfig]</code> <p>The Asset if found, None otherwise.</p>"},{"location":"reference/sift_py/asset/service/#sift_py.asset.service.AssetService.list_assets","title":"list_assets","text":"<pre><code>list_assets(\n    names: Optional[List[str]] = None,\n    ids: Optional[List[str]] = None,\n) -&gt; List[AssetConfig]\n</code></pre> <p>Lists assets in an organization.</p> PARAMETER DESCRIPTION <code>names</code> <p>Optional list of names to filter by.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>ids</code> <p>Optional list of IDs to filter by.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[AssetConfig]</code> <p>A list of assets matching the criteria.</p>"},{"location":"reference/sift_py/asset/service/#sift_py.asset.service.AssetService.update_asset","title":"update_asset","text":"<pre><code>update_asset(\n    asset: AssetConfig,\n    update_tags: bool = True,\n    update_metadata: bool = True,\n) -&gt; AssetConfig\n</code></pre> <p>Updates an existing asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The asset to update.</p> <p> TYPE: <code>AssetConfig</code> </p> <code>update_tags</code> <p>Whether to update the tags.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>update_metadata</code> <p>Whether to update the metadata.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>AssetConfig</code> <p>The updated AssetConfig.</p>"},{"location":"reference/sift_py/calculated_channels/","title":"sift_py.calculated_channels","text":""},{"location":"reference/sift_py/calculated_channels/#sift_py.calculated_channels","title":"sift_py.calculated_channels","text":"MODULE DESCRIPTION <code>config</code> <code>service</code>"},{"location":"reference/sift_py/calculated_channels/config/","title":"sift_py.calculated_channels.config","text":""},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config","title":"sift_py.calculated_channels.config","text":"CLASS DESCRIPTION <code>CalculatedChannelConfig</code> <p>Configuration for a calculated channel.</p> <code>CalculatedChannelUpdate</code> <p>Represents a dictionary for updating properties of a calculated channel. All fields are optional</p>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig","title":"CalculatedChannelConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for a calculated channel.</p> <ul> <li><code>name</code>: Name of the calculated channel.</li> <li><code>description</code>: Description of the calculated channel.</li> <li><code>expression</code>: The expression to calculate the value of the calculated channel.</li> <li><code>channel_references</code>: A list of channel references that are used in the expression. Each reference can either   be an <code>ExpressionChannelReference</code> or <code>ExpressionChannelReferenceChannelConfig</code>.</li> <li><code>units</code>: Units of the calculated channel.</li> <li><code>client_key</code>: A user defined string that uniquely identifies the calculated channel. Name is unique, but may be changed.</li> <li><code>asset_names</code>: A list of asset names to make the calculation available for.</li> <li><code>tags</code>: A list of tags on assets to make the calculation available for. NOTE: Not yet supported.</li> <li><code>all_assets</code>: A flag that, when set to <code>True</code>, associates the calculated channel with all assets.</li> </ul> METHOD DESCRIPTION <code>check_for_unsupported_tags</code> <code>convert_channel_references</code> <code>validate_assets</code> ATTRIBUTE DESCRIPTION <code>all_assets</code> <p> TYPE: <code>bool</code> </p> <code>asset_names</code> <p> TYPE: <code>Optional[List[str]]</code> </p> <code>calculated_channel_id</code> <p> TYPE: <code>Optional[str]</code> </p> <code>channel_references</code> <p> TYPE: <code>List[Union[ExpressionChannelReference, ExpressionChannelReferenceChannelConfig]]</code> </p> <code>client_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>model_config</code> <p> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>tag_names</code> <p> TYPE: <code>Optional[List[str]]</code> </p> <code>units</code> <p> TYPE: <code>Optional[str]</code> </p>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.all_assets","title":"all_assets  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>all_assets: bool = False\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.asset_names","title":"asset_names  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asset_names: Optional[List[str]] = None\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.calculated_channel_id","title":"calculated_channel_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>calculated_channel_id: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: List[\n    Union[\n        ExpressionChannelReference,\n        ExpressionChannelReferenceChannelConfig,\n    ]\n]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.client_key","title":"client_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_key: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str = ''\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.tag_names","title":"tag_names  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag_names: Optional[List[str]] = None\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.units","title":"units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>units: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.check_for_unsupported_tags","title":"check_for_unsupported_tags  <code>classmethod</code>","text":"<pre><code>check_for_unsupported_tags(v)\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.convert_channel_references","title":"convert_channel_references  <code>classmethod</code>","text":"<pre><code>convert_channel_references(\n    raw: List[\n        Union[\n            ExpressionChannelReference,\n            ExpressionChannelReferenceChannelConfig,\n        ]\n    ],\n) -&gt; List[ExpressionChannelReference]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelConfig.validate_assets","title":"validate_assets","text":"<pre><code>validate_assets()\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate","title":"CalculatedChannelUpdate","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a dictionary for updating properties of a calculated channel. All fields are optional and only the provided fields will be updated.</p> <ul> <li><code>name</code>: Updated name of the calculated channel.</li> <li><code>description</code>: Updated description of the calculated channel.</li> <li><code>units</code>: String representing the units for the calculated channel.</li> <li><code>expression</code>: Updated expression used to calculate channel values.</li> <li><code>channel_references</code>: A list of channel references which can either be <code>ExpressionChannelReference</code>    or <code>ExpressionChannelReferenceChannelConfig</code> used in the expression.</li> <li><code>asset_names</code>: List of assets associated with the calculation.</li> <li><code>tags</code>: List of tags for associating the calculated channel to assets.</li> <li><code>all_assets</code>: Boolean flag indicating if the calculated channel applies to all assets.</li> <li><code>archived</code>: Boolean flag indicating if the calculated channel is archived.</li> </ul> ATTRIBUTE DESCRIPTION <code>all_assets</code> <p> TYPE: <code>NotRequired[bool]</code> </p> <code>archived</code> <p> TYPE: <code>NotRequired[bool]</code> </p> <code>asset_names</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>channel_references</code> <p> TYPE: <code>NotRequired[List[Union[ExpressionChannelReference, ExpressionChannelReferenceChannelConfig]]]</code> </p> <code>description</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>expression</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>name</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>tag_names</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>units</code> <p> TYPE: <code>NotRequired[str]</code> </p>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.all_assets","title":"all_assets  <code>instance-attribute</code>","text":"<pre><code>all_assets: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.archived","title":"archived  <code>instance-attribute</code>","text":"<pre><code>archived: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.asset_names","title":"asset_names  <code>instance-attribute</code>","text":"<pre><code>asset_names: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: NotRequired[\n    List[\n        Union[\n            ExpressionChannelReference,\n            ExpressionChannelReferenceChannelConfig,\n        ]\n    ]\n]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.tag_names","title":"tag_names  <code>instance-attribute</code>","text":"<pre><code>tag_names: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/config/#sift_py.calculated_channels.config.CalculatedChannelUpdate.units","title":"units  <code>instance-attribute</code>","text":"<pre><code>units: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/calculated_channels/service/","title":"sift_py.calculated_channels.service","text":""},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service","title":"sift_py.calculated_channels.service","text":"CLASS DESCRIPTION <code>CalculatedChannelService</code> <p>A service for managing reusable Calculated Channels. Allows for creating, updating, and retrieving Calculated Channels.</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService","title":"CalculatedChannelService","text":"<pre><code>CalculatedChannelService(channel: SiftChannel)\n</code></pre> <p>A service for managing reusable Calculated Channels. Allows for creating, updating, and retrieving Calculated Channels.</p> METHOD DESCRIPTION <code>create_calculated_channel</code> <p>Create a <code>CalculatedChannel</code> from a <code>CalculatedChannelConfig</code>. See</p> <code>create_or_update_calculated_channel_from_yaml</code> <p>Creates or updates calculated channel from provided yaml files.</p> <code>get_calculated_channel</code> <p>Get a <code>CalculatedChannel</code>.  See <code>Sift docs</code>_</p> <code>list_calculated_channel_versions</code> <p>List versions of Calculated Channel. See <code>Sift docs</code>_</p> <code>list_calculated_channels</code> <p>List available Calculated Channels. See <code>Sift docs</code>_</p> <code>update_calculated_channel</code> <p>Revise a <code>CalculatedChannel</code> from a <code>CalculatedChannelUpdate</code>.  See</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService.create_calculated_channel","title":"create_calculated_channel","text":"<pre><code>create_calculated_channel(\n    config: CalculatedChannelConfig,\n) -&gt; Tuple[\n    CalculatedChannelConfig,\n    CalculatedChannelValidationResult,\n]\n</code></pre> <p>Create a <code>CalculatedChannel</code> from a <code>CalculatedChannelConfig</code>. See <code>sift_py.calculated_channels.config.CalculatedChannelConfig</code> for more information on available fields to configure.</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService.create_or_update_calculated_channel_from_yaml","title":"create_or_update_calculated_channel_from_yaml","text":"<pre><code>create_or_update_calculated_channel_from_yaml(\n    paths: Union[Path, List[Path]],\n) -&gt; List[\n    Tuple[\n        CalculatedChannelConfig,\n        CalculatedChannelValidationResult,\n    ]\n]\n</code></pre> <p>Creates or updates calculated channel from provided yaml files.</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService.get_calculated_channel","title":"get_calculated_channel","text":"<pre><code>get_calculated_channel(\n    calculated_channel_id: Optional[str] = None,\n    client_key: Optional[str] = None,\n) -&gt; CalculatedChannelConfig\n</code></pre> <p>Get a <code>CalculatedChannel</code>.  See <code>Sift docs</code>_ for more information on available arguments.</p> <p>.. _Sift docs: https://docs.siftstack.com/docs/api/grpc/protocol-buffers/calculated_channels</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channel_versions","title":"list_calculated_channel_versions","text":"<pre><code>list_calculated_channel_versions(\n    calculated_channel_id: Optional[str] = None,\n    client_key: Optional[str] = None,\n    page_size: Optional[int] = None,\n    page_token: Optional[str] = None,\n    filter: Optional[str] = None,\n    order_by: Optional[str] = None,\n) -&gt; Tuple[List[CalculatedChannelConfig], str]\n</code></pre> <p>List versions of Calculated Channel. See <code>Sift docs</code>_ for more information on available arguments.</p> <p>Returns a tuple of a list of <code>CalculatedChannel</code> objects and a next page token.</p> <p>.. _Sift docs: https://docs.siftstack.com/docs/api/grpc/protocol-buffers/calculated_channels</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService.list_calculated_channels","title":"list_calculated_channels","text":"<pre><code>list_calculated_channels(\n    page_size: Optional[int] = None,\n    page_token: Optional[str] = None,\n    filter: Optional[str] = None,\n    order_by: Optional[str] = None,\n) -&gt; Tuple[List[CalculatedChannelConfig], str]\n</code></pre> <p>List available Calculated Channels. See <code>Sift docs</code>_ for more information on available arguments.</p> <p>Returns a tuple of a list of <code>CalculatedChannel</code> objects and a next page token.</p> <p>.. _Sift docs: https://docs.siftstack.com/docs/api/grpc/protocol-buffers/calculated_channels</p>"},{"location":"reference/sift_py/calculated_channels/service/#sift_py.calculated_channels.service.CalculatedChannelService.update_calculated_channel","title":"update_calculated_channel","text":"<pre><code>update_calculated_channel(\n    calculated_channel_config: CalculatedChannelConfig,\n    updates: CalculatedChannelUpdate,\n    update_notes: str = \"\",\n) -&gt; Tuple[\n    CalculatedChannelConfig,\n    CalculatedChannelValidationResult,\n]\n</code></pre> <p>Revise a <code>CalculatedChannel</code> from a <code>CalculatedChannelUpdate</code>.  See <code>sift_py.calculated_channels.config.CalculatedChannelUpdate</code> for more information on available fields to update.</p> <p><code>revision_notes</code> may be provided to document the reason for revision.</p>"},{"location":"reference/sift_py/data/","title":"sift_py.data","text":""},{"location":"reference/sift_py/data/#sift_py.data","title":"sift_py.data","text":"<p>This module contains tools to download telemetry from the Sift data API. The core component of this module is the <code>sift_py.data.service.DataService</code> and the <code>sift_py.data.query</code> module. The former is what's used to execute a data query, while the latter is what's used to actually construct the query. A typical query could look something like this:</p> <pre><code>query = DataQuery(\n    asset_name=\"NostromoLV426\",\n    start_time=\"2024-07-04T18:09:08.555-07:00\",\n    end_time=\"2024-07-04T18:09:11.556-07:00\",\n    sample_ms=16,\n    channels=[\n        ChannelQuery(\n            channel_name=\"voltage\",\n            run_name=\"[NostromoLV426].1720141748.047512\"\n        ),\n        ChannelQuery(\n            channel_name=\"velocity\",\n            component=\"mainmotors\",\n            run_name=\"[NostromoLV426].1720141748.047512\",\n        ),\n        ChannelQuery(\n            channel_name=\"gpio\",\n            run_name=\"[NostromoLV426].1720141748.047512\",\n        ),\n    ],\n)\n</code></pre> <p>This query, once passed to the <code>sift_py.data.service.DataService.execute</code> method, will fetch data between <code>start_time</code> and <code>end_time</code> at the sampling rate given by <code>sample_ms</code>.</p> <p>\u26a0\ufe0f Warning: Note on Performance</p> <p>Currently the results of a query are all buffered in memory, so it it best to be mindful about your memory limitations and overall performance requirements when requesting data within a large time range and a slow sampling rate. Full-fidelity data is returned when the <code>sample_ms</code> is set to <code>0</code>.</p> <p>The data API allows you to download telemetry for both channels as well as calculated channels. The following examples demonstrate how to download data for both channels and calculated channels, respectively.</p> <ul> <li>Regular Channels</li> <li>Calculated Channels</li> </ul>"},{"location":"reference/sift_py/data/#sift_py.data--regular-channels","title":"Regular Channels","text":"<pre><code>import asyncio\nimport functools\nimport pandas as pd\nfrom sift_py.data.query import ChannelQuery, DataQuery\nfrom sift_py.grpc.transport import SiftChannelConfig, use_sift_async_channel\nfrom sift_py.data.service import DataService\n\n\nasync def channel_demo():\n    channel_config: SiftChannelConfig = {\n        \"apikey\": \"my-key\"\n        \"uri\": \"sift-uri\"\n    }\n\n    async with use_sift_async_channel(channel_config) as channel:\n        data_service = DataService(channel)\n\n        query = DataQuery(\n            asset_name=\"NostromoLV426\",\n            start_time=\"2024-07-04T18:09:08.555-07:00\",\n            end_time=\"2024-07-04T18:09:11.556-07:00\",\n            channels=[\n                ChannelQuery(\n                    channel_name=\"voltage\",\n                    run_name=\"[NostromoLV426].1720141748.047512\"\n                ),\n                ChannelQuery(\n                    channel_name=\"velocity\",\n                    component=\"mainmotors\",\n                    run_name=\"[NostromoLV426].1720141748.047512\",\n                ),\n                ChannelQuery(\n                    channel_name=\"gpio\",\n                    run_name=\"[NostromoLV426].1720141748.047512\",\n                ),\n            ],\n        )\n\n        result = await data_service.execute(query)\n\n        data_frames = [\n            pd.DataFrame(data.columns())\n            for data in result.channels(\"voltage\", \"mainmotors.velocity\", \"gpio.12v\")\n        ]\n\n        merged_frame = functools.reduce(\n            lambda x, y: pd.merge_asof(x, y, on=\"time\"), data_frames\n        )\n\n        merged_frame.to_csv(\"my_csv.csv\")\n\nif __name__ == \"__main__\":\n    asyncio.run(example())\n</code></pre>"},{"location":"reference/sift_py/data/#sift_py.data--calculated-channels","title":"Calculated Channels","text":"<pre><code>import asyncio\nimport functools\nimport pandas as pd\nfrom sift_py.data.query import ChannelQuery, DataQuery\nfrom sift_py.grpc.transport import SiftChannelConfig, use_sift_async_channel\nfrom sift_py.data.service import DataService\n\n\nasync def channel_demo():\n    channel_config: SiftChannelConfig = {\n        \"apikey\": \"my-key\"\n        \"uri\": \"sift-uri\"\n    }\n\n    async with use_sift_async_channel(channel_config) as channel:\n        data_service = DataService(channel)\n\n        query = DataQuery(\n            asset_name=\"NostromoLV426\",\n            start_time=\"2024-07-04T18:09:08.555-07:00\",\n            end_time=\"2024-07-04T18:09:11.556-07:00\",\n            channels=[\n                CalculatedChannelQuery(\n                    channel_key=\"calc-voltage\",\n                    expression=\"$1 + 10\",\n                    expression_channel_references=[\n                        {\n                            \"reference\": \"$1\",\n                            \"channel_name\": \"voltage\",\n                        },\n                    ],\n                    run_name=\"[NostromoLV426].1720141748.047512\",\n                ),\n                CalculatedChannelQuery(\n                    channel_key=\"calc-velocity\",\n                    expression=\"$1 * 2\",\n                    expression_channel_references=[\n                        {\n                            \"reference\": \"$1\",\n                            \"channel_name\": \"velocity\",\n                            \"component\": \"mainmotors\",\n                        },\n                    ],\n                    run_name=\"[NostromoLV426].1720141748.047512\",\n                ),\n            ],\n        )\n\n        result = await data_service.execute(query)\n        calc_voltage, calc_velocity = result.channels(\"calc-voltage\", \"calc-velocity\")\n\n        calc_voltage_df = pd.DataFrame(calc_voltage.columns())\n        calc_velocity_df = pd.DataFrame(calc_velocity.columns())\n\n        merged_frame = pd.merge_asof(calc_voltage_df, calc_velocity_df, on=\"time\")\n\n        merged_frame.to_csv(\"my_csv.csv\")\n\nif __name__ == \"__main__\":\n    asyncio.run(example())\n</code></pre> MODULE DESCRIPTION <code>error</code> <code>query</code> <p>Module containing utilities to construct a data query which is ultimately</p> <code>service</code>"},{"location":"reference/sift_py/data/error/","title":"sift_py.data.error","text":""},{"location":"reference/sift_py/data/error/#sift_py.data.error","title":"sift_py.data.error","text":"CLASS DESCRIPTION <code>DataError</code>"},{"location":"reference/sift_py/data/error/#sift_py.data.error.DataError","title":"DataError","text":"<pre><code>DataError(msg: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> ATTRIBUTE DESCRIPTION <code>msg</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/data/error/#sift_py.data.error.DataError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>"},{"location":"reference/sift_py/data/query/","title":"sift_py.data.query","text":""},{"location":"reference/sift_py/data/query/#sift_py.data.query","title":"sift_py.data.query","text":"<p>Module containing utilities to construct a data query which is ultimately passed to <code>sift_py.data.service.DataService.execute</code> to download telemetry.</p> <p>This module also contains types that represent the result of a data query which can be easily converted into a <code>pandas</code> data frame or series.</p> CLASS DESCRIPTION <code>CalculatedChannelQuery</code> <p>Represents a single calculated channel to include in the <code>sift_py.data.query.DataQuery</code>.</p> <code>ChannelQuery</code> <p>Represents a single channel to include in the <code>sift_py.data.query.DataQuery</code>.</p> <code>DataQuery</code> <p>A query that is meant to be passed to <code>sift_py.data.service.DataService.execute</code> to</p> <code>DataQueryResult</code> <p>The result of a data query which can contain multiple channels.</p> <code>DataQueryResultSet</code> <p>Represents time series data for a single channel. Can easily be converted into a <code>pandas</code> data frame like so:</p> <code>ExpressionChannelReference</code> ATTRIBUTE DESCRIPTION <code>ChannelLookupInfo</code> <p> TYPE: <code>TypeAlias</code> </p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ChannelLookupInfo","title":"ChannelLookupInfo  <code>module-attribute</code>","text":"<pre><code>ChannelLookupInfo: TypeAlias = Union[\n    str, Tuple[str, ChannelDataType]\n]\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.CalculatedChannelQuery","title":"CalculatedChannelQuery","text":"<pre><code>CalculatedChannelQuery(\n    channel_key: str,\n    expression: str,\n    expression_channel_references: List[\n        ExpressionChannelReference\n    ],\n    run_name: Optional[str] = None,\n)\n</code></pre> <p>Represents a single calculated channel to include in the <code>sift_py.data.query.DataQuery</code>.</p> ATTRIBUTE DESCRIPTION <code>channel_key</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>expression_channel_references</code> <p> TYPE: <code>List[ExpressionChannelReference]</code> </p> <code>run_name</code> <p> TYPE: <code>Optional[str]</code> </p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.CalculatedChannelQuery.channel_key","title":"channel_key  <code>instance-attribute</code>","text":"<pre><code>channel_key: str = channel_key\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.CalculatedChannelQuery.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str = expression\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.CalculatedChannelQuery.expression_channel_references","title":"expression_channel_references  <code>instance-attribute</code>","text":"<pre><code>expression_channel_references: List[\n    ExpressionChannelReference\n] = expression_channel_references\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.CalculatedChannelQuery.run_name","title":"run_name  <code>instance-attribute</code>","text":"<pre><code>run_name: Optional[str] = run_name\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ChannelQuery","title":"ChannelQuery","text":"<pre><code>ChannelQuery(\n    channel_name: str,\n    component: Optional[str] = None,\n    run_name: Optional[str] = None,\n)\n</code></pre> <p>Represents a single channel to include in the <code>sift_py.data.query.DataQuery</code>.</p> METHOD DESCRIPTION <code>fqn</code> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p> TYPE: <code>str</code> </p> <code>component</code> <p> TYPE: <code>Optional[str]</code> </p> <code>run_name</code> <p> TYPE: <code>Optional[str]</code> </p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ChannelQuery.channel_name","title":"channel_name  <code>instance-attribute</code>","text":"<pre><code>channel_name: str = channel_name\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ChannelQuery.component","title":"component  <code>instance-attribute</code>","text":"<pre><code>component: Optional[str]\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ChannelQuery.run_name","title":"run_name  <code>instance-attribute</code>","text":"<pre><code>run_name: Optional[str] = run_name\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ChannelQuery.fqn","title":"fqn","text":"<pre><code>fqn() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery","title":"DataQuery","text":"<pre><code>DataQuery(\n    asset_name: str,\n    start_time: Union[\n        Timestamp, Timestamp, datetime, str, int\n    ],\n    end_time: Union[\n        Timestamp, Timestamp, datetime, str, int\n    ],\n    channels: List[\n        Union[ChannelQuery, CalculatedChannelQuery]\n    ],\n    sample_ms: int = 0,\n    _: int = DEFAULT_PAGE_SIZE,\n)\n</code></pre> <p>A query that is meant to be passed to <code>sift_py.data.service.DataService.execute</code> to retrieve telemetry.</p> <ul> <li><code>asset_name</code>: The name of the asset to query telemetry for.</li> <li><code>start_time</code>: The start time of the time range of the data to request.</li> <li><code>end_time</code>: The end time of the time range of the data to request.</li> <li><code>sample_ms</code>:     The sampling rate to use when retrieving data. The lower the sampling rate, the     greater the data-fidelity. A sampling rate of <code>0</code> retrieves full-fidelity data.</li> <li><code>channels</code>:     List of either <code>ChannelQuery</code> or <code>CalculatedChannelQuery</code>, but not both. Represents the     channels to retrieve data from.</li> </ul> ATTRIBUTE DESCRIPTION <code>DEFAULT_PAGE_SIZE</code> <p> </p> <code>asset_name</code> <p> TYPE: <code>str</code> </p> <code>channels</code> <p> TYPE: <code>List[Union[ChannelQuery, CalculatedChannelQuery]]</code> </p> <code>end_time</code> <p> TYPE: <code>Timestamp</code> </p> <code>page_size</code> <p> TYPE: <code>int</code> </p> <code>sample_ms</code> <p> TYPE: <code>int</code> </p> <code>start_time</code> <p> TYPE: <code>Timestamp</code> </p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.DEFAULT_PAGE_SIZE","title":"DEFAULT_PAGE_SIZE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEFAULT_PAGE_SIZE = 100000\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.asset_name","title":"asset_name  <code>instance-attribute</code>","text":"<pre><code>asset_name: str = asset_name\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.channels","title":"channels  <code>instance-attribute</code>","text":"<pre><code>channels: List[\n    Union[ChannelQuery, CalculatedChannelQuery]\n] = channels\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.end_time","title":"end_time  <code>instance-attribute</code>","text":"<pre><code>end_time: Timestamp = to_timestamp_nanos(end_time)\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.page_size","title":"page_size  <code>instance-attribute</code>","text":"<pre><code>page_size: int = DEFAULT_PAGE_SIZE\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.sample_ms","title":"sample_ms  <code>instance-attribute</code>","text":"<pre><code>sample_ms: int = sample_ms\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQuery.start_time","title":"start_time  <code>instance-attribute</code>","text":"<pre><code>start_time: Timestamp = to_timestamp_nanos(start_time)\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResult","title":"DataQueryResult","text":"<pre><code>DataQueryResult(\n    merged_channel_data: Dict[str, List[ChannelTimeSeries]],\n)\n</code></pre> <p>The result of a data query which can contain multiple channels.</p> METHOD DESCRIPTION <code>all_channels</code> <p>Returns all channel data.</p> <code>channel</code> <p>Like <code>channels</code> but returns a single <code>DataQueryResultSet</code>.</p> <code>channels</code> <p>Returns a <code>sift_py.data.channel.ChannelTimeSeries</code> given the <code>lookup</code> argument.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResult.all_channels","title":"all_channels","text":"<pre><code>all_channels() -&gt; List[DataQueryResultSet]\n</code></pre> <p>Returns all channel data.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResult.channel","title":"channel","text":"<pre><code>channel(\n    lookup: ChannelLookupInfo,\n) -&gt; Optional[DataQueryResultSet]\n</code></pre> <p>Like <code>channels</code> but returns a single <code>DataQueryResultSet</code>.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResult.channels","title":"channels","text":"<pre><code>channels(\n    *lookup: ChannelLookupInfo,\n) -&gt; List[DataQueryResultSet]\n</code></pre> <p>Returns a <code>sift_py.data.channel.ChannelTimeSeries</code> given the <code>lookup</code> argument. If a <code>lookup</code> is a fully qualified name (FQN) <code>str</code> and there are multiple channels with the same FQN, this will raise a <code>ValueError</code>. In these situations, <code>lookup</code> must be a tuple where the first item is the channel FQN and the second the <code>sift_py.ingestion.channel.ChannelDataType</code>.</p> <p>If <code>lookup</code> is a tuple, then the channel data-type will be appended to the key referencing the <code>sift_py.data.channel.ChannelTimeSeries</code>.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet","title":"DataQueryResultSet","text":"<pre><code>DataQueryResultSet(\n    identifier: str,\n    timestamps: List[Timestamp],\n    values: List[Any],\n)\n</code></pre> <p>Represents time series data for a single channel. Can easily be converted into a <code>pandas</code> data frame like so:</p> <pre><code>pd.DataFrame(data_query_result_set.all_columns())\n</code></pre> METHOD DESCRIPTION <code>columns</code> <p>Returns both the time and value columns with options to override the column names.</p> <code>time_column</code> <p>Returns a single key-value pair dictionary meant to represent the time column of the data-set.</p> <code>value_column</code> <p>Returns a single key-value pair dictionary meant to represent the value column of the data-set.</p> ATTRIBUTE DESCRIPTION <code>identifier</code> <p> TYPE: <code>str</code> </p> <code>timestamps</code> <p> TYPE: <code>List[Timestamp]</code> </p> <code>values</code> <p> TYPE: <code>List[Any]</code> </p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet.identifier","title":"identifier  <code>instance-attribute</code>","text":"<pre><code>identifier: str = identifier\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet.timestamps","title":"timestamps  <code>instance-attribute</code>","text":"<pre><code>timestamps: List[Timestamp] = timestamps\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values: List[Any] = values\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet.columns","title":"columns","text":"<pre><code>columns(\n    time_column_name: Optional[str] = None,\n    value_column_name: Optional[str] = None,\n) -&gt; Dict[str, List[Any]]\n</code></pre> <p>Returns both the time and value columns with options to override the column names.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet.time_column","title":"time_column","text":"<pre><code>time_column(\n    column_name: Optional[str] = None,\n) -&gt; Dict[str, List[Any]]\n</code></pre> <p>Returns a single key-value pair dictionary meant to represent the time column of the data-set. <code>column_name</code> can be used to override the name of the column.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.DataQueryResultSet.value_column","title":"value_column","text":"<pre><code>value_column(\n    column_name: Optional[str] = None,\n) -&gt; Dict[str, List[Any]]\n</code></pre> <p>Returns a single key-value pair dictionary meant to represent the value column of the data-set. <code>column_name</code> can be used to override the name of the column.</p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ExpressionChannelReference","title":"ExpressionChannelReference","text":"<p>               Bases: <code>TypedDict</code></p> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p> TYPE: <code>str</code> </p> <code>component</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>data_type</code> <p> TYPE: <code>NotRequired[ChannelDataType]</code> </p> <code>reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ExpressionChannelReference.channel_name","title":"channel_name  <code>instance-attribute</code>","text":"<pre><code>channel_name: str\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ExpressionChannelReference.component","title":"component  <code>instance-attribute</code>","text":"<pre><code>component: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ExpressionChannelReference.data_type","title":"data_type  <code>instance-attribute</code>","text":"<pre><code>data_type: NotRequired[ChannelDataType]\n</code></pre>"},{"location":"reference/sift_py/data/query/#sift_py.data.query.ExpressionChannelReference.reference","title":"reference  <code>instance-attribute</code>","text":"<pre><code>reference: str\n</code></pre>"},{"location":"reference/sift_py/data/service/","title":"sift_py.data.service","text":""},{"location":"reference/sift_py/data/service/#sift_py.data.service","title":"sift_py.data.service","text":"CLASS DESCRIPTION <code>DataService</code> <p>A service that asynchronously executes a <code>sift_py.data.query.DataQuery</code> to retrieve telemetry</p>"},{"location":"reference/sift_py/data/service/#sift_py.data.service.DataService","title":"DataService","text":"<pre><code>DataService(channel: SiftAsyncChannel)\n</code></pre> <p>A service that asynchronously executes a <code>sift_py.data.query.DataQuery</code> to retrieve telemetry for an arbitrary amount of channels (or calculated channels) within a user-specified time-range and sampling rate.</p> METHOD DESCRIPTION <code>execute</code> <p>Performs the actual query to retrieve telemetry.</p> ATTRIBUTE DESCRIPTION <code>AssetName</code> <p> TYPE: <code>TypeAlias</code> </p> <code>ChannelFqn</code> <p> TYPE: <code>TypeAlias</code> </p> <code>REQUEST_BATCH_SIZE</code> <p> </p> <code>RunName</code> <p> TYPE: <code>TypeAlias</code> </p>"},{"location":"reference/sift_py/data/service/#sift_py.data.service.DataService.AssetName","title":"AssetName  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AssetName: TypeAlias = str\n</code></pre>"},{"location":"reference/sift_py/data/service/#sift_py.data.service.DataService.ChannelFqn","title":"ChannelFqn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ChannelFqn: TypeAlias = str\n</code></pre>"},{"location":"reference/sift_py/data/service/#sift_py.data.service.DataService.REQUEST_BATCH_SIZE","title":"REQUEST_BATCH_SIZE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REQUEST_BATCH_SIZE = 1\n</code></pre>"},{"location":"reference/sift_py/data/service/#sift_py.data.service.DataService.RunName","title":"RunName  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RunName: TypeAlias = str\n</code></pre>"},{"location":"reference/sift_py/data/service/#sift_py.data.service.DataService.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(\n    query: DataQuery, bust_cache: bool = False\n) -&gt; DataQueryResult\n</code></pre> <p>Performs the actual query to retrieve telemetry.</p>"},{"location":"reference/sift_py/data_import/","title":"sift_py.data_import","text":""},{"location":"reference/sift_py/data_import/#sift_py.data_import","title":"sift_py.data_import","text":"<p>This module contains services to facilitate importing data. It also provides utilities to easily query the import status.</p> <p>The fundamental components of this module are the following: - <code>sift_py.data_import.config.CsvConfig</code> - <code>sift_py.data_import.csv.CsvUploadService</code> - <code>sift_py.data_import.status.DataImportService</code></p>"},{"location":"reference/sift_py/data_import/#sift_py.data_import--simple-csv-upload","title":"Simple CSV Upload","text":"<p>A simple CSV upload without needing to craft a custom CSV config can be done like so: <pre><code>from sift_py.data_import.csv import CsvUploadService\nfrom sift_py.data_import.status import DataImportService\nfrom sift_py.rest import SiftRestConfig\n\nrest_config: SiftRestConfig = {\n    \"uri\": sift_uri,\n    \"apikey\": apikey,\n}\n\nasset_name = \"Your Asset Name\"\ncsv_upload_service = CsvUploadService(rest_config)\nimport_service: DataImportService  = csv_upload_service.simple_upload(asset_name, \"sample_data.csv\")\n\n# Blocks until the import is completed.\nimport_service.wait_until_complete()\n</code></pre></p> <p>This example assumes several things about how the data is formatted. For example, that first column contains datetime formatted time stamps. See docstring for <code>simple_upload</code> to see what can be overridden.</p>"},{"location":"reference/sift_py/data_import/#sift_py.data_import--tdms-upload","title":"TDMS Upload","text":"<p>Specify <code>sift-stack-py[tdms]</code> in your dependencies to use the TDMS upload service. TDMS files can be uploaded like so: <pre><code>from sift_py.data_import.csv import TdmsUploadService\nfrom sift_py.data_import.status import DataImportService\nfrom sift_py.rest import SiftRestConfig\n\nrest_config: SiftRestConfig = {\n    \"uri\": sift_uri,\n    \"apikey\": apikey,\n}\n\nasset_name = \"Your Asset Name\"\ncsv_upload_service = CsvUploadService(rest_config)\nimport_service: DataImportService  = csv_upload_service.simple_upload(asset_name, \"sample_data.tdms\")\n\n# Blocks until the import is completed.\nimport_service.wait_until_complete()\n</code></pre> If you want to upload TDMS groups prefixes to channel names set <code>prefix_channel_with_group</code> to True: <pre><code>csv_upload_service.simple_upload(asset_name, \"sample_data.tdms\", prefix_channel_with_group=True)\n</code></pre></p> <p>Some times there are TDMS channels without valid data or timing information, you can skip these channels by setting <code>ignore_errors</code> to True: <pre><code>csv_upload_service.simple_upload(asset_name, \"sample_data.tdms\", ignore_errors=True)\n</code></pre> The channels being skipped will be printed out to stdout.</p>"},{"location":"reference/sift_py/data_import/#sift_py.data_import--csv-upload-with-custom-csv-config","title":"CSV Upload with custom CSV config","text":"<p>If your data is formatted a specific way you can create a CsvConfig that will be used to properly parse your data: <pre><code>from sift_py.data_import.csv import CsvUploadService\nfrom sift_py.data_import.status import DataImportService\nfrom sift_py.rest import SiftRestConfig\nfrom sift_py.data_import.config import CsvConfig\n\nrest_config: SiftRestConfig = {\n    \"uri\": sift_uri,\n    \"apikey\": apikey,\n}\n\ncsv_upload_service = CsvUploadService(rest_config)\n\n# Create CSV config.\ninput_csv = \"sample_data.csv\"\n\n# Parse CSV to get channel names.\ndata_config = {}\nwith open(input_csv, \"r\") as f:\n    reader = csv.DictReader(f)\n    headers = next(reader)\n    for i, channel in enumerate(headers):\n        if channel == \"timestamp\":\n            continue\n        data_config[i + 1] = {\n            \"name\": channel,\n            # This example assumes all channels are doubles.\n            # Can also use `ChannelDoubleType.DOUBLE` or `double`\n            \"data_type\": \"CHANNEL_DATA_TYPE_DOUBLE\",\n            \"description\": f\"Example channel {channel}\",\n        }\n\ncsv_config = CsvConfig(\n    {\n        \"asset_name\": asset_name,\n        \"first_data_row\": 2,\n        \"time_column\": {\n            \"format\": \"TIME_FORMAT_ABSOLUTE_DATETIME\",\n            # Can also use `TimeFormatType.ABSOLUTE_DATETIME`\n            \"column_number\": 1,\n        },\n        \"data_columns\": data_config,\n    }\n)\n\nimport_service: DataImportService = csv_upload_service.upload(input_csv, csv_config)\nimport_service.wait_until_complete()\n</code></pre></p> <p>In this example the CSV can be created programmatically. You can also import use a json file directly: <pre><code>import json\nfrom sift_py.data_import.config import CsvConfig\n\nwith open(\"config.json\") as f:\n    csv_config = CsvConfig(json.load(f))\n</code></pre></p> MODULE DESCRIPTION <code>ch10</code> <code>config</code> <code>csv</code> <code>hdf5</code> <code>rosbags</code> <p>Service to upload ROS2 bag files.</p> <code>status</code> <code>tdms</code> <code>tempfile</code> <code>time_format</code>"},{"location":"reference/sift_py/data_import/ch10/","title":"sift_py.data_import.ch10","text":""},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10","title":"sift_py.data_import.ch10","text":"CLASS DESCRIPTION <code>BaseCh10File</code> <p>Base class for uploading IRIG Chapter 10/Chapter 11 files.</p> <code>Ch10UploadService</code> <p>Service to upload ch10 files.</p>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.BaseCh10File","title":"BaseCh10File","text":"<p>Base class for uploading IRIG Chapter 10/Chapter 11 files.</p> <p>Implement a concrete version of this class that parses a ch10 stream and returns a csv row of data on each iteration.</p> <p>Set <code>gzip</code> to <code>True</code> if sending a compressed stream.</p> <p>Example: <pre><code>class Ch10(BaseCh10File):\n\n    def __init__(self, path):\n        self.file = open(path, \"rb\")\n        self.initialize_csv_data_columns = None\n\n    def initialize_csv_data_columns(self):\n        self.csv_config_data_columns = self.process_ch10_computer_f1_packet()\n\n    def process_ch10_computer_f1_packet(self) -&gt; Dict[int, dict]:\n        # Processes the first Computer F1 packet\n        # and returns the measurements as a dict.\n        ...\n\n    def process_ch10_pcm_packet(self) -&gt; str:\n        # Processed the data packets and returns\n        # a CSV row.\n        ...\n\n    def __next__(self) -&gt; str:\n        # On all iterations, return data for the CSV file.\n        if end_of_file:\n            raise StopIteration()\n        else:\n            return self.process_ch10_data_packet()\n</code></pre></p> METHOD DESCRIPTION <code>__iter__</code> <code>__next__</code> <code>initialize_csv_data_columns</code> <p>Must populate the <code>csv_config_data_columns</code> attribute</p> ATTRIBUTE DESCRIPTION <code>csv_config_data_columns</code> <p> TYPE: <code>Dict[int, dict]</code> </p> <code>gzip</code> <p> TYPE: <code>bool</code> </p>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.BaseCh10File.csv_config_data_columns","title":"csv_config_data_columns  <code>instance-attribute</code>","text":"<pre><code>csv_config_data_columns: Dict[int, dict]\n</code></pre>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.BaseCh10File.gzip","title":"gzip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gzip: bool = False\n</code></pre>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.BaseCh10File.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.BaseCh10File.__next__","title":"__next__","text":"<pre><code>__next__() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.BaseCh10File.initialize_csv_data_columns","title":"initialize_csv_data_columns","text":"<pre><code>initialize_csv_data_columns() -&gt; None\n</code></pre> <p>Must populate the <code>csv_config_data_columns</code> attribute that is the data_columns entry in the CsvConfig.</p> <p>See the Sift data_import module or API docs for the schema.</p>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.Ch10UploadService","title":"Ch10UploadService","text":"<pre><code>Ch10UploadService(rest_conf: SiftRestConfig)\n</code></pre> <p>               Bases: <code>CsvUploadService</code></p> <p>Service to upload ch10 files.</p> METHOD DESCRIPTION <code>upload</code> <p>Uploads the ch10 file to the specified asset.</p>"},{"location":"reference/sift_py/data_import/ch10/#sift_py.data_import.ch10.Ch10UploadService.upload","title":"upload","text":"<pre><code>upload(\n    ch10_file: BaseCh10File,\n    asset_name: str,\n    time_format: TimeFormatType = ABSOLUTE_UNIX_NANOSECONDS,\n    run_name: Optional[str] = None,\n    run_id: Optional[str] = None,\n) -&gt; DataImportService\n</code></pre> <p>Uploads the ch10 file to the specified asset.</p> <p>Override <code>time_format</code> to specify the time data format. Default is <code>TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS</code>. Override <code>run_name</code> to specify the name of the run to create for this data. Default is None. Override <code>run_id</code> to specify the id of the run to add this data to. Default is None.</p>"},{"location":"reference/sift_py/data_import/config/","title":"sift_py.data_import.config","text":""},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config","title":"sift_py.data_import.config","text":"CLASS DESCRIPTION <code>CsvConfig</code> <p>Defines the CSV config for data imports.</p> <code>Hdf5Config</code> <p>Defines the HDF5 config for data imports.</p>"},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config.CsvConfig","title":"CsvConfig","text":"<pre><code>CsvConfig(config_info: Dict[str, Any])\n</code></pre> <p>Defines the CSV config for data imports.</p> METHOD DESCRIPTION <code>to_dict</code> <code>to_json</code>"},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config.CsvConfig.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict[str, Any]\n</code></pre>"},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config.CsvConfig.to_json","title":"to_json","text":"<pre><code>to_json() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config.Hdf5Config","title":"Hdf5Config","text":"<pre><code>Hdf5Config(config_info: Dict[str, Any])\n</code></pre> <p>Defines the HDF5 config for data imports.</p> METHOD DESCRIPTION <code>to_dict</code> <code>to_json</code>"},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config.Hdf5Config.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict[str, Any]\n</code></pre>"},{"location":"reference/sift_py/data_import/config/#sift_py.data_import.config.Hdf5Config.to_json","title":"to_json","text":"<pre><code>to_json() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/data_import/csv/","title":"sift_py.data_import.csv","text":""},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv","title":"sift_py.data_import.csv","text":"CLASS DESCRIPTION <code>CsvUploadService</code>"},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv.CsvUploadService","title":"CsvUploadService","text":"<pre><code>CsvUploadService(rest_conf: SiftRestConfig)\n</code></pre> <p>               Bases: <code>_RestService</code></p> METHOD DESCRIPTION <code>simple_upload</code> <p>Uploads the CSV file pointed to by <code>path</code> to the specified asset. This function will</p> <code>upload</code> <p>Uploads the CSV file pointed to by <code>path</code> using a custom CSV config.</p> <code>upload_from_url</code> <p>Uploads the CSV file pointed to by <code>url</code> using a custom CSV config.</p> ATTRIBUTE DESCRIPTION <code>UPLOAD_PATH</code> <p> </p> <code>URL_PATH</code> <p> </p>"},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv.CsvUploadService.UPLOAD_PATH","title":"UPLOAD_PATH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UPLOAD_PATH = '/api/v1/data-imports:upload'\n</code></pre>"},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv.CsvUploadService.URL_PATH","title":"URL_PATH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>URL_PATH = '/api/v1/data-imports:url'\n</code></pre>"},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv.CsvUploadService.simple_upload","title":"simple_upload","text":"<pre><code>simple_upload(\n    asset_name: str,\n    path: Union[str, Path],\n    first_data_row: int = 2,\n    time_column: int = 1,\n    time_format: TimeFormatType = ABSOLUTE_DATETIME,\n    run_name: Optional[str] = None,\n    run_id: Optional[str] = None,\n    units_row: Optional[int] = None,\n    descriptions_row: Optional[int] = None,\n    relative_start_time: Optional[str] = None,\n) -&gt; DataImportService\n</code></pre> <p>Uploads the CSV file pointed to by <code>path</code> to the specified asset. This function will infer the data types and assume certain things about how the data is formatted. See the options below for what parameters can be overridden. Use <code>upload</code> if you need to specify a custom CSV config.</p> <p>Override <code>first_data_row</code> to specify which is the first row with data. Default is 2. Override <code>time_column</code> to specify which column contains timestamp information. Default is 1. Override <code>time_format</code> to specify the time data format. Default is <code>TimeFormatType.ABSOLUTE_DATETIME</code>. Override <code>run_name</code> to specify the name of the run to create for this data. Default is None. Override <code>run_id</code> to specify the id of the run to add this data to. Default is None. Override <code>units_row</code> to specify which row contains unit information. Default is None. Override <code>descriptions_row</code> to specify which row contains channel description information. Default is None. Override <code>relative_start_time</code> if a relative time format is used. Default is None.</p>"},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv.CsvUploadService.upload","title":"upload","text":"<pre><code>upload(\n    path: Union[str, Path],\n    csv_config: CsvConfig,\n    show_progress: bool = True,\n) -&gt; DataImportService\n</code></pre> <p>Uploads the CSV file pointed to by <code>path</code> using a custom CSV config.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the CSV file.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>csv_config</code> <p>The CSV config.</p> <p> TYPE: <code>CsvConfig</code> </p> <code>show_progress</code> <p>Whether to show the status bar or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"reference/sift_py/data_import/csv/#sift_py.data_import.csv.CsvUploadService.upload_from_url","title":"upload_from_url","text":"<pre><code>upload_from_url(\n    url: str, csv_config: CsvConfig\n) -&gt; DataImportService\n</code></pre> <p>Uploads the CSV file pointed to by <code>url</code> using a custom CSV config.</p>"},{"location":"reference/sift_py/data_import/hdf5/","title":"sift_py.data_import.hdf5","text":""},{"location":"reference/sift_py/data_import/hdf5/#sift_py.data_import.hdf5","title":"sift_py.data_import.hdf5","text":"CLASS DESCRIPTION <code>Hdf5UploadService</code> <p>Service to upload HDF5 files.</p>"},{"location":"reference/sift_py/data_import/hdf5/#sift_py.data_import.hdf5.Hdf5UploadService","title":"Hdf5UploadService","text":"<pre><code>Hdf5UploadService(rest_conf: SiftRestConfig)\n</code></pre> <p>Service to upload HDF5 files.</p> METHOD DESCRIPTION <code>get_previous_upload_run_id</code> <p>Return the run_id used in the previous upload</p> <code>upload</code> <p>Uploads the HDF5 file pointed to by <code>path</code> using a custom HDF5 config.</p>"},{"location":"reference/sift_py/data_import/hdf5/#sift_py.data_import.hdf5.Hdf5UploadService.get_previous_upload_run_id","title":"get_previous_upload_run_id","text":"<pre><code>get_previous_upload_run_id() -&gt; str\n</code></pre> <p>Return the run_id used in the previous upload</p>"},{"location":"reference/sift_py/data_import/hdf5/#sift_py.data_import.hdf5.Hdf5UploadService.upload","title":"upload","text":"<pre><code>upload(\n    path: Union[str, Path],\n    hdf5_config: Hdf5Config,\n    show_progress: bool = True,\n) -&gt; DataImportService\n</code></pre> <p>Uploads the HDF5 file pointed to by <code>path</code> using a custom HDF5 config.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the HDF5 file.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>hdf5_config</code> <p>The HDF5 config.</p> <p> TYPE: <code>Hdf5Config</code> </p> <code>show_progress</code> <p>Whether to show the status bar or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataImportService</code> <p>DataImportService used to get the status of the import</p>"},{"location":"reference/sift_py/data_import/rosbags/","title":"sift_py.data_import.rosbags","text":""},{"location":"reference/sift_py/data_import/rosbags/#sift_py.data_import.rosbags","title":"sift_py.data_import.rosbags","text":"<p>Service to upload ROS2 bag files.</p> <p>ROS organizes data exchange through topics, messages, and fields:     * topics: Named messages that facilitate communication between ROS nodes.     * messages: Data structures published and subscribed to on topics. Each message type defines a specific schema.     * fields: Individual data elements within a message, such as integers, floats, strings, or nested structures.</p> <p>This class extracts messages from a ROS bag, flattens their fields, and prepares them for uploading to Sift.</p> CLASS DESCRIPTION <code>RosbagsUploadService</code> <p>Service to upload ROS2 bag files.</p>"},{"location":"reference/sift_py/data_import/rosbags/#sift_py.data_import.rosbags.RosbagsUploadService","title":"RosbagsUploadService","text":"<pre><code>RosbagsUploadService(rest_conf: SiftRestConfig)\n</code></pre> <p>Service to upload ROS2 bag files.</p> METHOD DESCRIPTION <code>upload</code> <p>Uploads the ROS2 bag file pointed to by <code>path</code> to the specified asset.</p>"},{"location":"reference/sift_py/data_import/rosbags/#sift_py.data_import.rosbags.RosbagsUploadService.upload","title":"upload","text":"<pre><code>upload(\n    path: Union[str, Path],\n    msg_dirs: List[Union[str, Path]],\n    store: Stores,\n    asset_name: str,\n    ignore_errors: bool = False,\n    run_name: Optional[str] = None,\n    run_id: Optional[str] = None,\n    handlers: Optional[Dict[str, Callable]] = None,\n    show_progress: bool = True,\n) -&gt; DataImportService\n</code></pre> <p>Uploads the ROS2 bag file pointed to by <code>path</code> to the specified asset.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the ROS2 bag file.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>msg_dirs</code> <p>List of directories containing message definitions. Each entry should be a path the root directory of the msg definitions (e.g, <code>/path/to/std_msgs</code>). Inspect your topics and verify that the 'type' matches the directory structure of your message definitions. For example if the type is <code>custom_msgs/msg/MyCustomMessage</code> your directory structure should match that and you should include <code>/path/to/custom_msgs</code> in the <code>msg_dirs</code> list passed into this function.</p> <p> TYPE: <code>List[Union[str, Path]]</code> </p> <code>store</code> <p>The Store type to use for the message definitions.</p> <p> TYPE: <code>Stores</code> </p> <code>asset_name</code> <p>Name of the asset to upload the data to.</p> <p> TYPE: <code>str</code> </p> <code>ignore_errors</code> <p>If True, will skip messages without definitions.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>run_name</code> <p>Name of the run to create for this data.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>run_id</code> <p>ID of the run to add this data to.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>handlers</code> <p>Dictionary of messages to callbacks for custom processing or sequence data (e.g, images or videos). Keys should be the ROS topic, value is a callable with the following signature:     def callback(topic: str, timestamp: int, msg: object)         ...</p> <p> TYPE: <code>Optional[Dict[str, Callable]]</code> DEFAULT: <code>None</code> </p> <code>show_progress</code> <p>Whether to show the status bar or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"reference/sift_py/data_import/status/","title":"sift_py.data_import.status","text":""},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status","title":"sift_py.data_import.status","text":"CLASS DESCRIPTION <code>DataImport</code> <p>Metadata regarding the data import.</p> <code>DataImportService</code> <p>Service used to retrieve information about a particular data import.</p> <code>DataImportStatusType</code> <p>Status of the data import.</p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport","title":"DataImport","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata regarding the data import.</p> METHOD DESCRIPTION <code>convert_status</code> ATTRIBUTE DESCRIPTION <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>csv_config</code> <p> TYPE: <code>dict</code> </p> <code>data_import_id</code> <p> TYPE: <code>str</code> </p> <code>error_message</code> <p> TYPE: <code>str</code> </p> <code>model_config</code> <p> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>source_url</code> <p> TYPE: <code>str</code> </p> <code>status</code> <p> TYPE: <code>Union[str, DataImportStatusType]</code> </p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.csv_config","title":"csv_config  <code>instance-attribute</code>","text":"<pre><code>csv_config: dict\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.data_import_id","title":"data_import_id  <code>instance-attribute</code>","text":"<pre><code>data_import_id: str\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.error_message","title":"error_message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error_message: str = ''\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    alias_generator=to_camel, populate_by_name=True\n)\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.source_url","title":"source_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_url: str = ''\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: Union[str, DataImportStatusType]\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImport.convert_status","title":"convert_status  <code>classmethod</code>","text":"<pre><code>convert_status(\n    raw: Union[str, DataImportStatusType],\n) -&gt; DataImportStatusType\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService","title":"DataImportService","text":"<pre><code>DataImportService(\n    restconf: SiftRestConfig, data_import_id: str\n)\n</code></pre> <p>               Bases: <code>_RestService</code></p> <p>Service used to retrieve information about a particular data import.</p> METHOD DESCRIPTION <code>extend</code> <p>Add an existing data import service to track a batch data import</p> <code>get_data_import</code> <p>Returns information about the data import. Provides the first data import if multiple provided through <code>extend</code> and <code>idx</code> not passed</p> <code>get_data_imports</code> <code>wait_until_all_complete</code> <p>Blocks until all data imports are complete.</p> <code>wait_until_complete</code> <p>Blocks until the data import is completed. Check the status to determine</p> ATTRIBUTE DESCRIPTION <code>STATUS_PATH</code> <p> </p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService.STATUS_PATH","title":"STATUS_PATH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STATUS_PATH = '/api/v1/data-imports'\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService.extend","title":"extend","text":"<pre><code>extend(other: Self)\n</code></pre> <p>Add an existing data import service to track a batch data import</p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService.get_data_import","title":"get_data_import","text":"<pre><code>get_data_import(idx: int = 0) -&gt; DataImport\n</code></pre> <p>Returns information about the data import. Provides the first data import if multiple provided through <code>extend</code> and <code>idx</code> not passed</p> <ul> <li><code>idx</code>: Optional idx of the desired DataImport to access</li> </ul>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService.get_data_imports","title":"get_data_imports","text":"<pre><code>get_data_imports() -&gt; Generator[DataImport, None, None]\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService.wait_until_all_complete","title":"wait_until_all_complete","text":"<pre><code>wait_until_all_complete() -&gt; List[DataImport]\n</code></pre> <p>Blocks until all data imports are complete.</p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportService.wait_until_complete","title":"wait_until_complete","text":"<pre><code>wait_until_complete(idx: int = 0) -&gt; DataImport\n</code></pre> <p>Blocks until the data import is completed. Check the status to determine if the import was successful or not. Waits on only the first data import if multiple provided through <code>add_data_import_id</code> and <code>idx</code> not passed</p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType","title":"DataImportStatusType","text":"<p>               Bases: <code>Enum</code></p> <p>Status of the data import.</p> METHOD DESCRIPTION <code>as_human_str</code> <code>from_str</code> ATTRIBUTE DESCRIPTION <code>FAILED</code> <p> </p> <code>IN_PROGRESS</code> <p> </p> <code>PENDING</code> <p> </p> <code>SUCCEEDED</code> <p> </p>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType.FAILED","title":"FAILED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FAILED = 'DATA_IMPORT_STATUS_FAILED'\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType.IN_PROGRESS","title":"IN_PROGRESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IN_PROGRESS = 'DATA_IMPORT_STATUS_IN_PROGRESS'\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType.PENDING","title":"PENDING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PENDING = 'DATA_IMPORT_STATUS_PENDING'\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType.SUCCEEDED","title":"SUCCEEDED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUCCEEDED = 'DATA_IMPORT_STATUS_SUCCEEDED'\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType.as_human_str","title":"as_human_str","text":"<pre><code>as_human_str() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/data_import/status/#sift_py.data_import.status.DataImportStatusType.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(val: str) -&gt; Optional[Self]\n</code></pre>"},{"location":"reference/sift_py/data_import/tdms/","title":"sift_py.data_import.tdms","text":""},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms","title":"sift_py.data_import.tdms","text":"CLASS DESCRIPTION <code>TdmsTimeFormat</code> <code>TdmsUploadService</code> <p>Service to upload TDMS files.</p> FUNCTION DESCRIPTION <code>sanitize_string</code> <p>Removes the characters \", \\, `, ~, and | from the input string.</p> ATTRIBUTE DESCRIPTION <code>CHARACTER_REPLACEMENTS</code> <p> </p> <code>TDMS_TO_SIFT_TYPES</code> <p> </p> <code>TIME_CHANNEL_NAME</code> <p> </p>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.CHARACTER_REPLACEMENTS","title":"CHARACTER_REPLACEMENTS  <code>module-attribute</code>","text":"<pre><code>CHARACTER_REPLACEMENTS = {\n    '\"': \"_\",\n    \"\\\\\": \"_\",\n    \"`\": \"_\",\n    \"~\": \"_\",\n    \"|\": \"_\",\n}\n</code></pre>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TDMS_TO_SIFT_TYPES","title":"TDMS_TO_SIFT_TYPES  <code>module-attribute</code>","text":"<pre><code>TDMS_TO_SIFT_TYPES = {\n    Boolean: BOOL,\n    Int8: INT_32,\n    Int16: INT_32,\n    Int32: INT_32,\n    Int64: INT_64,\n    Uint8: UINT_32,\n    Uint16: UINT_32,\n    Uint32: UINT_32,\n    Uint64: UINT_64,\n    SingleFloat: FLOAT,\n    DoubleFloat: DOUBLE,\n    String: STRING,\n}\n</code></pre>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TIME_CHANNEL_NAME","title":"TIME_CHANNEL_NAME  <code>module-attribute</code>","text":"<pre><code>TIME_CHANNEL_NAME = 'Time'\n</code></pre>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TdmsTimeFormat","title":"TdmsTimeFormat","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>TIME_CHANNEL</code> <p> </p> <code>WAVEFORM</code> <p> </p>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TdmsTimeFormat.TIME_CHANNEL","title":"TIME_CHANNEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TIME_CHANNEL = 'time_channel'\n</code></pre>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TdmsTimeFormat.WAVEFORM","title":"WAVEFORM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WAVEFORM = 'waveform'\n</code></pre>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TdmsUploadService","title":"TdmsUploadService","text":"<pre><code>TdmsUploadService(rest_conf: SiftRestConfig)\n</code></pre> <p>Service to upload TDMS files.</p> METHOD DESCRIPTION <code>upload</code> <p>Uploads the TDMS file pointed to by <code>path</code> to the specified asset.</p>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.TdmsUploadService.upload","title":"upload","text":"<pre><code>upload(\n    path: Union[str, Path],\n    asset_name: str,\n    prefix_channel_with_group: bool = False,\n    group_into_components: bool = False,\n    ignore_errors: bool = False,\n    run_name: Optional[str] = None,\n    run_id: Optional[str] = None,\n    tdms_time_format: TdmsTimeFormat = WAVEFORM,\n) -&gt; DataImportService\n</code></pre> <p>Uploads the TDMS file pointed to by <code>path</code> to the specified asset.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file to upload.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>asset_name</code> <p>The name of the asset to upload to.</p> <p> TYPE: <code>str</code> </p> <code>prefix_channel_with_group</code> <p>Set to True if you want to prefix the channel name with TDMS group. This can later be used to group into folders in the Sift UI. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore_errors</code> <p>If True will skip channels without timing information. Default is False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>run_name</code> <p>The name of the run to create for this data. Default is None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>run_id</code> <p>The id of the run to add this data to. Default is None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>tdms_time_format</code> <p>Specify how timing information is encoded in the file. Default is WAVEFORM. If using the TIME_CHANNEL format, timestamps should use the LabVIEW/TDMS epoch (number of seconds since 01/01/1904 00:00:00.00 UTC).</p> <p> TYPE: <code>TdmsTimeFormat</code> DEFAULT: <code>WAVEFORM</code> </p> RETURNS DESCRIPTION <code>DataImportService</code> <p>The DataImportService used to get the status of the import.</p>"},{"location":"reference/sift_py/data_import/tdms/#sift_py.data_import.tdms.sanitize_string","title":"sanitize_string","text":"<pre><code>sanitize_string(input_string: str) -&gt; str\n</code></pre> <p>Removes the characters \", \\, `, ~, and | from the input string.</p> <p>See https://docs.siftstack.com/docs/data-model/assets-channels-runs#assets-and-channels</p> PARAMETER DESCRIPTION <code>input_string</code> <p>The string to sanitize.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The sanitized string.</p>"},{"location":"reference/sift_py/data_import/tempfile/","title":"sift_py.data_import.tempfile","text":""},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile","title":"sift_py.data_import.tempfile","text":"CLASS DESCRIPTION <code>NamedTemporaryFile</code> <p>Created a named temporary file.</p>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile","title":"NamedTemporaryFile","text":"<pre><code>NamedTemporaryFile(mode, suffix='')\n</code></pre> <p>Created a named temporary file.</p> <p>Works on both Windows and Unix systems.</p> <p>See https://stackoverflow.com/questions/23212435/permission-denied-to-write-to-my-temporary-file for more information on Windows compatibility.</p> METHOD DESCRIPTION <code>__enter__</code> <code>__exit__</code> <code>close</code> ATTRIBUTE DESCRIPTION <code>file</code> <p> </p> <code>name</code> <p> </p> <code>temp_dir</code> <p> </p>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file = open(name, mode, newline='')\n</code></pre>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = Path(temp_dir) / f'tempfile{suffix}'\n</code></pre>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile.temp_dir","title":"temp_dir  <code>instance-attribute</code>","text":"<pre><code>temp_dir = mkdtemp()\n</code></pre>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre>"},{"location":"reference/sift_py/data_import/tempfile/#sift_py.data_import.tempfile.NamedTemporaryFile.close","title":"close","text":"<pre><code>close()\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/","title":"sift_py.data_import.time_format","text":""},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format","title":"sift_py.data_import.time_format","text":"CLASS DESCRIPTION <code>TimeFormatType</code>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType","title":"TimeFormatType","text":"<p>               Bases: <code>Enum</code></p> METHOD DESCRIPTION <code>as_human_str</code> <code>from_str</code> <code>is_relative</code> ATTRIBUTE DESCRIPTION <code>ABSOLUTE_DATETIME</code> <p> </p> <code>ABSOLUTE_RFC3339</code> <p> </p> <code>ABSOLUTE_UNIX_MICROSECONDS</code> <p> </p> <code>ABSOLUTE_UNIX_MILLISECONDS</code> <p> </p> <code>ABSOLUTE_UNIX_NANOSECONDS</code> <p> </p> <code>ABSOLUTE_UNIX_SECONDS</code> <p> </p> <code>RELATIVE_HOURS</code> <p> </p> <code>RELATIVE_MICROSECONDS</code> <p> </p> <code>RELATIVE_MILLISECONDS</code> <p> </p> <code>RELATIVE_MINUTES</code> <p> </p> <code>RELATIVE_NANOSECONDS</code> <p> </p> <code>RELATIVE_SECONDS</code> <p> </p>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_DATETIME","title":"ABSOLUTE_DATETIME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE_DATETIME = 'TIME_FORMAT_ABSOLUTE_DATETIME'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_RFC3339","title":"ABSOLUTE_RFC3339  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE_RFC3339 = 'TIME_FORMAT_ABSOLUTE_RFC3339'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MICROSECONDS","title":"ABSOLUTE_UNIX_MICROSECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE_UNIX_MICROSECONDS = (\n    \"TIME_FORMAT_ABSOLUTE_UNIX_MICROSECONDS\"\n)\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_MILLISECONDS","title":"ABSOLUTE_UNIX_MILLISECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE_UNIX_MILLISECONDS = (\n    \"TIME_FORMAT_ABSOLUTE_UNIX_MILLISECONDS\"\n)\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_NANOSECONDS","title":"ABSOLUTE_UNIX_NANOSECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE_UNIX_NANOSECONDS = (\n    \"TIME_FORMAT_ABSOLUTE_UNIX_NANOSECONDS\"\n)\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.ABSOLUTE_UNIX_SECONDS","title":"ABSOLUTE_UNIX_SECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ABSOLUTE_UNIX_SECONDS = 'TIME_FORMAT_ABSOLUTE_UNIX_SECONDS'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.RELATIVE_HOURS","title":"RELATIVE_HOURS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELATIVE_HOURS = 'TIME_FORMAT_RELATIVE_HOURS'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.RELATIVE_MICROSECONDS","title":"RELATIVE_MICROSECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELATIVE_MICROSECONDS = 'TIME_FORMAT_RELATIVE_MICROSECONDS'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.RELATIVE_MILLISECONDS","title":"RELATIVE_MILLISECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELATIVE_MILLISECONDS = 'TIME_FORMAT_RELATIVE_MILLISECONDS'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.RELATIVE_MINUTES","title":"RELATIVE_MINUTES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELATIVE_MINUTES = 'TIME_FORMAT_RELATIVE_MINUTES'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.RELATIVE_NANOSECONDS","title":"RELATIVE_NANOSECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELATIVE_NANOSECONDS = 'TIME_FORMAT_RELATIVE_NANOSECONDS'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.RELATIVE_SECONDS","title":"RELATIVE_SECONDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELATIVE_SECONDS = 'TIME_FORMAT_RELATIVE_SECONDS'\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.as_human_str","title":"as_human_str","text":"<pre><code>as_human_str() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(val: str) -&gt; Optional[Self]\n</code></pre>"},{"location":"reference/sift_py/data_import/time_format/#sift_py.data_import.time_format.TimeFormatType.is_relative","title":"is_relative","text":"<pre><code>is_relative() -&gt; bool\n</code></pre>"},{"location":"reference/sift_py/error/","title":"sift_py.error","text":""},{"location":"reference/sift_py/error/#sift_py.error","title":"sift_py.error","text":"CLASS DESCRIPTION <code>ProtobufMaxSizeExceededError</code> <p>The library limits the size of certain protobufs to prevent gRPC messages from being too big.</p> <code>SiftAPIDeprecationWarning</code> <p>Warning used for deprecated API features that may be removed in future updates.</p> <code>SiftError</code> <p>These exceptions are raised when something totally unexpected occurs and is</p> FUNCTION DESCRIPTION <code>raise_if_too_large</code> ATTRIBUTE DESCRIPTION <code>GRPC_MAX_MESSAGE_SIZE</code> <p> </p>"},{"location":"reference/sift_py/error/#sift_py.error.GRPC_MAX_MESSAGE_SIZE","title":"GRPC_MAX_MESSAGE_SIZE  <code>module-attribute</code>","text":"<pre><code>GRPC_MAX_MESSAGE_SIZE = 4194304\n</code></pre>"},{"location":"reference/sift_py/error/#sift_py.error.ProtobufMaxSizeExceededError","title":"ProtobufMaxSizeExceededError","text":"<p>               Bases: <code>Exception</code></p> <p>The library limits the size of certain protobufs to prevent gRPC messages from being too big.</p>"},{"location":"reference/sift_py/error/#sift_py.error.SiftAPIDeprecationWarning","title":"SiftAPIDeprecationWarning","text":"<p>               Bases: <code>FutureWarning</code></p> <p>Warning used for deprecated API features that may be removed in future updates.</p>"},{"location":"reference/sift_py/error/#sift_py.error.SiftError","title":"SiftError","text":"<pre><code>SiftError(msg: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>These exceptions are raised when something totally unexpected occurs and is meant to indicate that the error is likely not caused by the user, but rather, the library itself. These errors should be reported to Sift.</p> ATTRIBUTE DESCRIPTION <code>msg</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/error/#sift_py.error.SiftError.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>"},{"location":"reference/sift_py/error/#sift_py.error.raise_if_too_large","title":"raise_if_too_large","text":"<pre><code>raise_if_too_large(pb: Message)\n</code></pre>"},{"location":"reference/sift_py/file_attachment/","title":"sift_py.file_attachment","text":""},{"location":"reference/sift_py/file_attachment/#sift_py.file_attachment","title":"sift_py.file_attachment","text":"<p>This module contains services to facilitate uploading and downloading file attachments. It also provides utilities to easily query all file attachments for a given entity which could be a run, annotation, or annotation logs. File attachment deletion is also supported.</p> <p>Once files have been attached, they should be viewable on the Sift application, attached to their respective entities. Below are various examples on how to leverage the <code>sift_py.file_attachment.service.FileAttachmentService</code>.</p>"},{"location":"reference/sift_py/file_attachment/#sift_py.file_attachment--initializing-the-file-attachment-service","title":"Initializing the file attachment service","text":"<p>Unlike other services throughout <code>sift_py</code>, the <code>sift_py.file_attachment.service.FileAttachmentService</code> does rely on both REST and gRPC APIs, so with that in mind we can initialize our service like so:</p> <pre><code>from sift_py.grpc.transport import SiftChannelConfig, use_sift_channel\nfrom sift_py.file_attachment.service import FileAttachmentService\nfrom sift_py.file_attachment.entity import Entity, EntityType\nfrom sift_py.file_attachment.metadata import ImageMetadata\nfrom sift_py.rest import SiftRestConfig\n\nfrom sift.remote_files.v1.remote_files_pb2 import GetRemoteFileRequest\nfrom sift.remote_files.v1.remote_files_pb2_grpc import RemoteFileServiceStub\n\nrest_config: SiftRestConfig = {\n    # Be sure to exclude the \"https://\" or \"http://\" scheme out of the uri\n    \"uri\": rest_base_uri,\n    \"apikey\": apikey,\n}\n\nsift_channel_config = SiftChannelConfig(uri=grpc_base_uri, apikey=apikey)\n\nwith use_sift_channel(sift_channel_config) as channel:\n    file_attachment_service = FileAttachmentService(channel, rest_config)\n    ...\n</code></pre> <p>With the service initialized we can now interact with the file attachments API.</p>"},{"location":"reference/sift_py/file_attachment/#sift_py.file_attachment--various-examples","title":"Various Examples","text":"<p>For demonstrative purposes we will upload an <code>mp4</code> file and attach to a run of <code>run_id</code>. Once it is uploaded we will query all file attachments for a particular run and re-download what we just uploaded.</p> <pre><code>from sift_py.grpc.transport import SiftChannelConfig, use_sift_channel\nfrom sift_py.file_attachment.service import FileAttachmentService\nfrom sift_py.file_attachment.entity import Entity, EntityType\nfrom sift_py.file_attachment.metadata import VideoMetadata\nfrom sift_py.rest import SiftRestConfig\n\nfrom sift.remote_files.v1.remote_files_pb2 import GetRemoteFileRequest\nfrom sift.remote_files.v1.remote_files_pb2_grpc import RemoteFileServiceStub\n\n...\n\nwith use_sift_channel(sift_channel_config) as channel:\n    file_attachment_service = FileAttachmentService(channel, rest_config)\n\n    run = entity=Entity(\n        entity_id=run_id, # some arbitrary run ID that refers to an existing run\n        entity_type=EntityType.RUN,\n    )\n\n    # uploading the file attachment and attaching it to a run of `run_id`.\n    remote_file = file_attachment_service.upload_attachment(\n        path=\"path/to/foo.mp4\",\n        entity=run,\n        # Metatadata.. optional but recommended for optimal viewing in the application\n        metadata=VideoMetadata(height=2160, width=3840, duration_seconds=5.5, timestamp=datetime(2024, 10, 19, 2, 22, 22),\n        description=\"thrusters getting too hot\" ,\n    )\n\n    # retrieving all of the file attachments for our run\n    all_file_attachments = file_attachment_service.retrieve_attachments(run)\n\n    # downloading our file_attachment and saving it to our current working dir\n    file_attachment_service.download_attachment(remote_file)\n\n    # downloading our file_attachment and saving it somewhere else with a different name\n    file_attachment_service.download_attachment(remote_file, \"somewhere/else/foo.mp4\")\n\n    # deleting out file attachment from Sift\n    file_attachment_service.delete_file_attachments(remote_file_1, remote_file_2, remote_file_etc)\n</code></pre> MODULE DESCRIPTION <code>entity</code> <p>Entities represent things that files can be attached to.</p> <code>metadata</code> <p>Module containing optional metadata types to provide to Sift when uploading a file attachment.</p> <code>service</code>"},{"location":"reference/sift_py/file_attachment/entity/","title":"sift_py.file_attachment.entity","text":""},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity","title":"sift_py.file_attachment.entity","text":"<p>Entities represent things that files can be attached to.</p> CLASS DESCRIPTION <code>Entity</code> <p>An abstract entity that represents the thing that we want to attach files to.</p> <code>EntityType</code> <p>Represents the types of entities that supports file attachments.</p>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.Entity","title":"Entity","text":"<pre><code>Entity(entity_id: str, entity_type: EntityType)\n</code></pre> <p>An abstract entity that represents the thing that we want to attach files to.</p> ATTRIBUTE DESCRIPTION <code>entity_id</code> <p> TYPE: <code>str</code> </p> <code>entity_type</code> <p> TYPE: <code>EntityType</code> </p>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.Entity.entity_id","title":"entity_id  <code>instance-attribute</code>","text":"<pre><code>entity_id: str = entity_id\n</code></pre>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.Entity.entity_type","title":"entity_type  <code>instance-attribute</code>","text":"<pre><code>entity_type: EntityType = entity_type\n</code></pre>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.EntityType","title":"EntityType","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the types of entities that supports file attachments.</p> ATTRIBUTE DESCRIPTION <code>ANNOTATION</code> <p> </p> <code>ANNOTATION_LOG</code> <p> </p> <code>RUN</code> <p> </p>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.EntityType.ANNOTATION","title":"ANNOTATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANNOTATION = 'annotations'\n</code></pre>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.EntityType.ANNOTATION_LOG","title":"ANNOTATION_LOG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANNOTATION_LOG = 'annotation_logs'\n</code></pre>"},{"location":"reference/sift_py/file_attachment/entity/#sift_py.file_attachment.entity.EntityType.RUN","title":"RUN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RUN = 'runs'\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/","title":"sift_py.file_attachment.metadata","text":""},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata","title":"sift_py.file_attachment.metadata","text":"<p>Module containing optional metadata types to provide to Sift when uploading a file attachment. Though optional, providing this information could help improve quality of renders on the Sift app.</p> CLASS DESCRIPTION <code>ImageMetadata</code> <p>Metadata for image media-types i.e. any mimetypes of the following pattern: <code>image/*</code>.</p> <code>Metadata</code> <code>VideoMetadata</code> <p>Metadata for video media-types i.e. any mimetypes of the following pattern: <code>video/*</code>.</p>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.ImageMetadata","title":"ImageMetadata","text":"<pre><code>ImageMetadata(width: int, height: int)\n</code></pre> <p>               Bases: <code>AsProtobuf</code>, <code>Metadata</code></p> <p>Metadata for image media-types i.e. any mimetypes of the following pattern: <code>image/*</code>.</p> METHOD DESCRIPTION <code>as_json</code> <code>as_pb</code> <code>from_pb</code> ATTRIBUTE DESCRIPTION <code>height</code> <p> TYPE: <code>int</code> </p> <code>width</code> <p> TYPE: <code>int</code> </p>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.ImageMetadata.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: int = height\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.ImageMetadata.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: int = width\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.ImageMetadata.as_json","title":"as_json","text":"<pre><code>as_json() -&gt; Any\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.ImageMetadata.as_pb","title":"as_pb","text":"<pre><code>as_pb(klass: Type[ImageMetadata]) -&gt; ImageMetadata\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.ImageMetadata.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(message: ImageMetadata) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.Metadata","title":"Metadata","text":"<p>               Bases: <code>AsJson</code></p>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata","title":"VideoMetadata","text":"<pre><code>VideoMetadata(\n    width: int,\n    height: int,\n    duration_seconds: float,\n    timestamp: Optional[datetime] = None,\n)\n</code></pre> <p>               Bases: <code>AsProtobuf</code>, <code>Metadata</code></p> <p>Metadata for video media-types i.e. any mimetypes of the following pattern: <code>video/*</code>.</p> METHOD DESCRIPTION <code>as_json</code> <code>as_pb</code> <code>from_pb</code> ATTRIBUTE DESCRIPTION <code>duration_seconds</code> <p> TYPE: <code>float</code> </p> <code>height</code> <p> TYPE: <code>int</code> </p> <code>timestamp</code> <p> TYPE: <code>Optional[datetime]</code> </p> <code>width</code> <p> TYPE: <code>int</code> </p>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.duration_seconds","title":"duration_seconds  <code>instance-attribute</code>","text":"<pre><code>duration_seconds: float = duration_seconds\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: int = height\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: Optional[datetime] = timestamp\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: int = width\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.as_json","title":"as_json","text":"<pre><code>as_json() -&gt; Any\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.as_pb","title":"as_pb","text":"<pre><code>as_pb(klass: Type[VideoMetadata]) -&gt; VideoMetadata\n</code></pre>"},{"location":"reference/sift_py/file_attachment/metadata/#sift_py.file_attachment.metadata.VideoMetadata.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(message: VideoMetadata) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/file_attachment/service/","title":"sift_py.file_attachment.service","text":""},{"location":"reference/sift_py/file_attachment/service/#sift_py.file_attachment.service","title":"sift_py.file_attachment.service","text":"CLASS DESCRIPTION <code>FileAttachmentService</code> <p>Service used to retrieve, upload, download, and delete file attachments. Seee <code>sift_py.file_attachment</code></p>"},{"location":"reference/sift_py/file_attachment/service/#sift_py.file_attachment.service.FileAttachmentService","title":"FileAttachmentService","text":"<pre><code>FileAttachmentService(\n    channel: SiftChannel, restconf: SiftRestConfig\n)\n</code></pre> <p>Service used to retrieve, upload, download, and delete file attachments. Seee <code>sift_py.file_attachment</code> for more information and examples on how to use this service.</p> METHOD DESCRIPTION <code>delete_file_attachments</code> <p>Deletes remote files given a set of arguments that could either be instances of <code>RemoteFile</code> or the ID</p> <code>download_attachment</code> <p>Downloads a file attachment and saves it locally.</p> <code>retrieve_attachments</code> <p>Retrieves all file attachments for the provided <code>entity</code>.</p> <code>upload_attachment</code> <p>Uploads a file pointed to by <code>path</code> and attaches it to the provided <code>entity</code>.</p>"},{"location":"reference/sift_py/file_attachment/service/#sift_py.file_attachment.service.FileAttachmentService.delete_file_attachments","title":"delete_file_attachments","text":"<pre><code>delete_file_attachments(*to_delete: Union[str, RemoteFile])\n</code></pre> <p>Deletes remote files given a set of arguments that could either be instances of <code>RemoteFile</code> or the ID of remote files to delete</p>"},{"location":"reference/sift_py/file_attachment/service/#sift_py.file_attachment.service.FileAttachmentService.download_attachment","title":"download_attachment","text":"<pre><code>download_attachment(\n    file: Union[RemoteFile, str],\n    out: Optional[Union[str, Path]] = None,\n) -&gt; Path\n</code></pre> <p>Downloads a file attachment and saves it locally.</p> <ul> <li><code>remote_file</code>: Could either be an instance of <code>RemoteFile</code> or the ID of the remote file to download.</li> <li><code>out</code>: If unspecified, then the file will be downloaded to the current working directory with the original name.</li> </ul>"},{"location":"reference/sift_py/file_attachment/service/#sift_py.file_attachment.service.FileAttachmentService.retrieve_attachments","title":"retrieve_attachments","text":"<pre><code>retrieve_attachments(entity: Entity) -&gt; List[RemoteFile]\n</code></pre> <p>Retrieves all file attachments for the provided <code>entity</code>.</p>"},{"location":"reference/sift_py/file_attachment/service/#sift_py.file_attachment.service.FileAttachmentService.upload_attachment","title":"upload_attachment","text":"<pre><code>upload_attachment(\n    path: Union[str, Path],\n    entity: Entity,\n    metadata: Optional[Metadata],\n    description: Optional[str] = None,\n    organization_id: Optional[str] = None,\n) -&gt; RemoteFile\n</code></pre> <p>Uploads a file pointed to by <code>path</code> and attaches it to the provided <code>entity</code>.</p> <ul> <li><code>path</code>: A path to the file to upload to Sift as a file attachment.</li> <li><code>entity</code>: The entity to attach the file to.</li> <li><code>metadata</code>: Optional metadata to include with the specific file.</li> <li><code>description</code>: An optional description to provide for the file attachment.</li> <li><code>organization_id</code>: Only required if your user belongs to multiple organizations.</li> </ul>"},{"location":"reference/sift_py/grpc/","title":"sift_py.grpc","text":""},{"location":"reference/sift_py/grpc/#sift_py.grpc","title":"sift_py.grpc","text":"<p>This module is primarily concerned with configuring and initializing gRPC connections to the Sift API.</p> <p>Example of establishing a connection to Sift's gRPC APi:</p> <pre><code>from sift_py.grpc.transport import SiftChannelConfig, use_sift_channel\n\n# Be sure not to include the url scheme i.e. 'https://' in the uri.\nsift_channel_config = SiftChannelConfig(uri=SIFT_BASE_URI, apikey=SIFT_API_KEY)\n\nwith use_sift_channel(sift_channel_config) as channel:\n    # Connect to Sift\n</code></pre> MODULE DESCRIPTION <code>keepalive</code> <code>transport</code> <p>This module is concerned with creating a gRPC transport channel specifically for</p> <code>transport_test</code>"},{"location":"reference/sift_py/grpc/keepalive/","title":"sift_py.grpc.keepalive","text":""},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive","title":"sift_py.grpc.keepalive","text":"CLASS DESCRIPTION <code>KeepaliveConfig</code> <p>Make make this public in the future to allow folks to configure their own keepalive settings</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_KEEPALIVE_CONFIG</code> <p> TYPE: <code>KeepaliveConfig</code> </p> <code>DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS</code> <p>Allows connection without any active RPCs</p> <p> </p> <code>DEFAULT_KEEPALIVE_TIMEOUT_MS</code> <p>Timeout while waiting for server to acknowledge keepalive ping</p> <p> </p> <code>DEFAULT_KEEPALIVE_TIME_MS</code> <p>Interval with which to send keepalive pings</p> <p> </p> <code>DEFAULT_MAX_PINGS_WITHOUT_DATA</code> <p>Disabled</p> <p> </p>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_CONFIG","title":"DEFAULT_KEEPALIVE_CONFIG  <code>module-attribute</code>","text":"<pre><code>DEFAULT_KEEPALIVE_CONFIG: KeepaliveConfig = {\n    \"keepalive_time_ms\": DEFAULT_KEEPALIVE_TIME_MS,\n    \"keepalive_timeout_ms\": DEFAULT_KEEPALIVE_TIMEOUT_MS,\n    \"keepalive_permit_without_calls\": DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS,\n    \"max_pings_without_data\": DEFAULT_MAX_PINGS_WITHOUT_DATA,\n}\n</code></pre>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS","title":"DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS  <code>module-attribute</code>","text":"<pre><code>DEFAULT_KEEPALIVE_PERMIT_WITHOUT_CALLS = 1\n</code></pre> <p>Allows connection without any active RPCs</p>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIMEOUT_MS","title":"DEFAULT_KEEPALIVE_TIMEOUT_MS  <code>module-attribute</code>","text":"<pre><code>DEFAULT_KEEPALIVE_TIMEOUT_MS = 20000\n</code></pre> <p>Timeout while waiting for server to acknowledge keepalive ping</p>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.DEFAULT_KEEPALIVE_TIME_MS","title":"DEFAULT_KEEPALIVE_TIME_MS  <code>module-attribute</code>","text":"<pre><code>DEFAULT_KEEPALIVE_TIME_MS = 20000\n</code></pre> <p>Interval with which to send keepalive pings</p>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.DEFAULT_MAX_PINGS_WITHOUT_DATA","title":"DEFAULT_MAX_PINGS_WITHOUT_DATA  <code>module-attribute</code>","text":"<pre><code>DEFAULT_MAX_PINGS_WITHOUT_DATA = 0\n</code></pre> <p>Disabled</p>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.KeepaliveConfig","title":"KeepaliveConfig","text":"<p>               Bases: <code>TypedDict</code></p> <p>Make make this public in the future to allow folks to configure their own keepalive settings if there is demand for it.</p> ATTRIBUTE DESCRIPTION <code>keepalive_permit_without_calls</code> <p> TYPE: <code>int</code> </p> <code>keepalive_time_ms</code> <p> TYPE: <code>int</code> </p> <code>keepalive_timeout_ms</code> <p> TYPE: <code>int</code> </p> <code>max_pings_without_data</code> <p> TYPE: <code>int</code> </p>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.KeepaliveConfig.keepalive_permit_without_calls","title":"keepalive_permit_without_calls  <code>instance-attribute</code>","text":"<pre><code>keepalive_permit_without_calls: int\n</code></pre>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.KeepaliveConfig.keepalive_time_ms","title":"keepalive_time_ms  <code>instance-attribute</code>","text":"<pre><code>keepalive_time_ms: int\n</code></pre>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.KeepaliveConfig.keepalive_timeout_ms","title":"keepalive_timeout_ms  <code>instance-attribute</code>","text":"<pre><code>keepalive_timeout_ms: int\n</code></pre>"},{"location":"reference/sift_py/grpc/keepalive/#sift_py.grpc.keepalive.KeepaliveConfig.max_pings_without_data","title":"max_pings_without_data  <code>instance-attribute</code>","text":"<pre><code>max_pings_without_data: int\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/","title":"sift_py.grpc.transport","text":""},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport","title":"sift_py.grpc.transport","text":"<p>This module is concerned with creating a gRPC transport channel specifically for interacting with Sift's gRPC API. the <code>use_sift_channel</code> method creates said channel and should generally be used within a with-block for correct resource management.</p> CLASS DESCRIPTION <code>SiftChannelConfig</code> <p>Config class used to instantiate a <code>SiftChannel</code> via <code>use_sift_channel</code>.</p> FUNCTION DESCRIPTION <code>get_ssl_credentials</code> <p>Returns SSL credentials for use with gRPC.</p> <code>use_sift_async_channel</code> <p>Like <code>use_sift_channel</code> but returns a channel meant to be used within the context</p> <code>use_sift_channel</code> <p>Returns an intercepted channel that is meant to be used across all services that</p> ATTRIBUTE DESCRIPTION <code>SiftAsyncChannel</code> <p> TYPE: <code>TypeAlias</code> </p> <code>SiftChannel</code> <p> TYPE: <code>TypeAlias</code> </p>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftAsyncChannel","title":"SiftAsyncChannel  <code>module-attribute</code>","text":"<pre><code>SiftAsyncChannel: TypeAlias = Channel\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannel","title":"SiftChannel  <code>module-attribute</code>","text":"<pre><code>SiftChannel: TypeAlias = Channel\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannelConfig","title":"SiftChannelConfig","text":"<p>               Bases: <code>TypedDict</code></p> <p>Config class used to instantiate a <code>SiftChannel</code> via <code>use_sift_channel</code>. - <code>uri</code>: The URI of Sift's gRPC API. The scheme portion of the URI i.e. <code>https://</code> should be ommitted. - <code>apikey</code>: User-generated API key generated via the Sift application. - <code>enable_keepalive</code>: Enabled by default, but can be disabled by passing in <code>False</code>. HTTP/2 keep-alive prevents connections from being terminated during idle periods. A custom <code>sift_py.grpc.keepalive.KeepaliveConfig</code> may also be provided. - <code>use_ssl</code>: INTERNAL USE. Meant to be used for local development. - <code>cert_via_openssl</code>: Enable this if you want to use OpenSSL to load the certificates. Run <code>pip install sift-stack-py[openssl]</code> to install the dependencies required to use this option. This works around this issue with grpc loading SSL certificates: https://github.com/grpc/grpc/issues/29682. Default is False.</p> ATTRIBUTE DESCRIPTION <code>apikey</code> <p> TYPE: <code>str</code> </p> <code>cert_via_openssl</code> <p> TYPE: <code>NotRequired[bool]</code> </p> <code>enable_keepalive</code> <p> TYPE: <code>NotRequired[Union[bool, KeepaliveConfig]]</code> </p> <code>uri</code> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p> TYPE: <code>NotRequired[bool]</code> </p>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannelConfig.apikey","title":"apikey  <code>instance-attribute</code>","text":"<pre><code>apikey: str\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannelConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannelConfig.enable_keepalive","title":"enable_keepalive  <code>instance-attribute</code>","text":"<pre><code>enable_keepalive: NotRequired[Union[bool, KeepaliveConfig]]\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannelConfig.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.SiftChannelConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.get_ssl_credentials","title":"get_ssl_credentials","text":"<pre><code>get_ssl_credentials(\n    cert_via_openssl: bool,\n) -&gt; ChannelCredentials\n</code></pre> <p>Returns SSL credentials for use with gRPC. Workaround for this issue: https://github.com/grpc/grpc/issues/29682</p>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.use_sift_async_channel","title":"use_sift_async_channel","text":"<pre><code>use_sift_async_channel(\n    config: SiftChannelConfig,\n    metadata: Optional[Dict[str, Any]] = None,\n) -&gt; SiftAsyncChannel\n</code></pre> <p>Like <code>use_sift_channel</code> but returns a channel meant to be used within the context of an async runtime when asynchonous I/O is required.</p>"},{"location":"reference/sift_py/grpc/transport/#sift_py.grpc.transport.use_sift_channel","title":"use_sift_channel","text":"<pre><code>use_sift_channel(\n    config: SiftChannelConfig,\n    metadata: Optional[Dict[str, Any]] = None,\n) -&gt; SiftChannel\n</code></pre> <p>Returns an intercepted channel that is meant to be used across all services that make RPCs to Sift's API. It is highly encouraged to use this within a with-block for correct resource clean-up.</p> <p>Should an RPC fail for a reason that isn't explicitly controlled by Sift, <code>SiftChannel</code> will automatically leverage gRPC's retry mechanism to try and recover until the max-attempts are exceeded, after which the underlying exception will be raised.</p>"},{"location":"reference/sift_py/grpc/transport_test/","title":"sift_py.grpc.transport_test","text":""},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test","title":"sift_py.grpc.transport_test","text":"CLASS DESCRIPTION <code>AuthInterceptor</code> <code>DataService</code> <code>ForceFailInterceptor</code> <p>Force RPC to fail a few times before letting it pass.</p> FUNCTION DESCRIPTION <code>server_spy</code> <code>test_internal_error_retry</code> <code>test_sift_channel</code>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.AuthInterceptor","title":"AuthInterceptor","text":"<p>               Bases: <code>ServerInterceptor</code></p> METHOD DESCRIPTION <code>intercept</code> ATTRIBUTE DESCRIPTION <code>AUTH_REGEX</code> <p> </p>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.AuthInterceptor.AUTH_REGEX","title":"AUTH_REGEX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AUTH_REGEX = compile('^Bearer (.+)$')\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.AuthInterceptor.intercept","title":"intercept","text":"<pre><code>intercept(\n    method: Callable,\n    request_or_iterator: Any,\n    context: ServicerContext,\n    method_name: str,\n) -&gt; Any\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.DataService","title":"DataService","text":"<p>               Bases: <code>DataServiceServicer</code></p> METHOD DESCRIPTION <code>GetData</code>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.DataService.GetData","title":"GetData","text":"<pre><code>GetData(request: GetDataRequest, context: ServicerContext)\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.ForceFailInterceptor","title":"ForceFailInterceptor","text":"<pre><code>ForceFailInterceptor(\n    expected_num_fails: int,\n    failure_code: StatusCode = UNKNOWN,\n)\n</code></pre> <p>               Bases: <code>ServerInterceptor</code></p> <p>Force RPC to fail a few times before letting it pass.</p> <p><code>failed_attempts</code>: Count of how many times failed <code>expected_num_fails</code>: How many times you want call to fail</p> METHOD DESCRIPTION <code>intercept</code> ATTRIBUTE DESCRIPTION <code>expected_num_fails</code> <p> TYPE: <code>int</code> </p> <code>failed_attempts</code> <p> TYPE: <code>int</code> </p> <code>failure_code</code> <p> TYPE: <code>StatusCode</code> </p>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.ForceFailInterceptor.expected_num_fails","title":"expected_num_fails  <code>instance-attribute</code>","text":"<pre><code>expected_num_fails: int = expected_num_fails\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.ForceFailInterceptor.failed_attempts","title":"failed_attempts  <code>instance-attribute</code>","text":"<pre><code>failed_attempts: int = 0\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.ForceFailInterceptor.failure_code","title":"failure_code  <code>instance-attribute</code>","text":"<pre><code>failure_code: StatusCode = failure_code\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.ForceFailInterceptor.intercept","title":"intercept","text":"<pre><code>intercept(\n    method: Callable,\n    request_or_iterator: Any,\n    context: ServicerContext,\n    method_name: str,\n) -&gt; Any\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.server_spy","title":"server_spy","text":"<pre><code>server_spy(\n    mocker: MockFixture, *interceptors: ServerInterceptor\n) -&gt; Iterator[MockType]\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.test_internal_error_retry","title":"test_internal_error_retry","text":"<pre><code>test_internal_error_retry(mocker: MockFixture)\n</code></pre>"},{"location":"reference/sift_py/grpc/transport_test/#sift_py.grpc.transport_test.test_sift_channel","title":"test_sift_channel","text":"<pre><code>test_sift_channel(mocker: MockFixture)\n</code></pre>"},{"location":"reference/sift_py/ingestion/","title":"sift_py.ingestion","text":""},{"location":"reference/sift_py/ingestion/#sift_py.ingestion","title":"sift_py.ingestion","text":"<p>Module containing components necessary to leverage Sift's data ingestion and rule evaluation API. The fundamental components of this module are the following: - <code>sift_py.ingestion.config.telemetry.TelemetryConfig</code> - <code>sift_py.ingestion.service.IngestionService</code></p> MODULE DESCRIPTION <code>buffer</code> <code>channel</code> <code>config</code> <p>Contains the in memory representation of a telemetry config used to configure ingestion.</p> <code>flow</code> <code>manager</code> <code>rule</code> <p>This module is deprecated and exists only to re-export members</p> <code>service</code>"},{"location":"reference/sift_py/ingestion/buffer/","title":"sift_py.ingestion.buffer","text":""},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer","title":"sift_py.ingestion.buffer","text":"CLASS DESCRIPTION <code>BufferedIngestionService</code> <p>See <code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code></p> ATTRIBUTE DESCRIPTION <code>DEFAULT_BUFFER_SIZE</code> <p> </p> <code>FlushCallback</code> <p> TYPE: <code>TypeAlias</code> </p> <code>OnErrorCallback</code> <p> TYPE: <code>TypeAlias</code> </p> <code>T</code> <p> </p>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE","title":"DEFAULT_BUFFER_SIZE  <code>module-attribute</code>","text":"<pre><code>DEFAULT_BUFFER_SIZE = 1000\n</code></pre>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.FlushCallback","title":"FlushCallback  <code>module-attribute</code>","text":"<pre><code>FlushCallback: TypeAlias = Callable[[], None]\n</code></pre>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.OnErrorCallback","title":"OnErrorCallback  <code>module-attribute</code>","text":"<pre><code>OnErrorCallback: TypeAlias = Callable[\n    [\n        BaseException,\n        List[IngestWithConfigDataStreamRequest],\n        FlushCallback,\n    ],\n    None,\n]\n</code></pre>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T', bound=_IngestionServiceImpl)\n</code></pre>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.BufferedIngestionService","title":"BufferedIngestionService","text":"<pre><code>BufferedIngestionService(\n    ingestion_service: T,\n    buffer_size: Optional[int],\n    flush_interval_sec: Optional[float],\n    on_error: Optional[OnErrorCallback],\n)\n</code></pre> <p>               Bases: <code>Generic[T]</code></p> <p>See <code>sift_py.ingestion.service.IngestionService.buffered_ingestion</code> for more information and how to leverage buffered ingestion.</p> METHOD DESCRIPTION <code>__enter__</code> <code>__exit__</code> <code>flush</code> <p>Flush and ingest all requests in buffer.</p> <code>ingest_flows</code> <p>Ingests flows in batches for each request generated from a flow.</p> <code>try_ingest_flows</code> <p>Ingests flows in batches and performs client-side validations for each request</p>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.BufferedIngestionService.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.BufferedIngestionService.__exit__","title":"__exit__","text":"<pre><code>__exit__(\n    exc_type: Optional[Type[BaseException]],\n    exc_val: Optional[BaseException],\n    exc_tb: Optional[TracebackType],\n) -&gt; bool\n</code></pre>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.BufferedIngestionService.flush","title":"flush","text":"<pre><code>flush()\n</code></pre> <p>Flush and ingest all requests in buffer.</p>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.BufferedIngestionService.ingest_flows","title":"ingest_flows","text":"<pre><code>ingest_flows(*flows: FlowOrderedChannelValues)\n</code></pre> <p>Ingests flows in batches for each request generated from a flow. See <code>sift_py.ingestion.service.IngestionService.create_ingestion_request</code> for more information.</p>"},{"location":"reference/sift_py/ingestion/buffer/#sift_py.ingestion.buffer.BufferedIngestionService.try_ingest_flows","title":"try_ingest_flows","text":"<pre><code>try_ingest_flows(*flows: Flow)\n</code></pre> <p>Ingests flows in batches and performs client-side validations for each request generated from a flow. See <code>sift_py.ingestion.service.IngestionService.try_create_ingestion_request</code> for more information.</p>"},{"location":"reference/sift_py/ingestion/channel/","title":"sift_py.ingestion.channel","text":""},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel","title":"sift_py.ingestion.channel","text":"CLASS DESCRIPTION <code>ChannelBitFieldElement</code> <code>ChannelConfig</code> <p>A description for a channel</p> <code>ChannelDataType</code> <p>Utility enum class to simplify working with channel data-types generated from protobuf</p> <code>ChannelDataTypeStrRep</code> <code>ChannelEnumType</code> <code>ChannelValue</code> <p>Represents a fully qualified data point for a channel</p> FUNCTION DESCRIPTION <code>bit_field_value</code> <code>bool_value</code> <code>channel_fqn</code> <p>Computes the fully qualified channel name.</p> <code>double_value</code> <code>empty_value</code> <code>enum_value</code> <code>float_value</code> <code>int32_value</code> <code>int64_value</code> <code>is_data_type</code> <code>string_value</code> <code>uint32_value</code> <code>uint64_value</code>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelBitFieldElement","title":"ChannelBitFieldElement","text":"<pre><code>ChannelBitFieldElement(\n    name: str, index: int, bit_count: int\n)\n</code></pre> <p>               Bases: <code>AsProtobuf</code></p> METHOD DESCRIPTION <code>as_pb</code> <code>from_pb</code> ATTRIBUTE DESCRIPTION <code>bit_count</code> <p> TYPE: <code>int</code> </p> <code>index</code> <p> TYPE: <code>int</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelBitFieldElement.bit_count","title":"bit_count  <code>instance-attribute</code>","text":"<pre><code>bit_count: int = bit_count\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelBitFieldElement.index","title":"index  <code>instance-attribute</code>","text":"<pre><code>index: int = index\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelBitFieldElement.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelBitFieldElement.as_pb","title":"as_pb","text":"<pre><code>as_pb(\n    klass: Type[ChannelBitFieldElement],\n) -&gt; ChannelBitFieldElement\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelBitFieldElement.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(message: ChannelBitFieldElement) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig","title":"ChannelConfig","text":"<pre><code>ChannelConfig(\n    name: str,\n    data_type: ChannelDataType,\n    description: Optional[str] = None,\n    unit: Optional[str] = None,\n    component: Optional[str] = None,\n    bit_field_elements: List[ChannelBitFieldElement] = [],\n    enum_types: List[ChannelEnumType] = [],\n)\n</code></pre> <p>               Bases: <code>AsProtobuf</code></p> <p>A description for a channel</p> METHOD DESCRIPTION <code>as_pb</code> <code>fqn</code> <p>NOTE: Component field of Channel has been deprecated. Function kept for backwards compatibility.</p> <code>from_pb</code> <code>try_value_from</code> <p>Generate a channel value for this particular channel configuration. This will raise an exception</p> <code>value_from</code> <p>Like <code>try_value_from</code> except will return <code>None</code> there is a failure to produce a channel value due to a type mismatch.</p> ATTRIBUTE DESCRIPTION <code>bit_field_elements</code> <p> TYPE: <code>List[ChannelBitFieldElement]</code> </p> <code>component</code> <p> TYPE: <code>Optional[str]</code> </p> <code>data_type</code> <p> TYPE: <code>ChannelDataType</code> </p> <code>description</code> <p> TYPE: <code>Optional[str]</code> </p> <code>enum_types</code> <p> TYPE: <code>List[ChannelEnumType]</code> </p> <code>identifier</code> <p> TYPE: <code>str</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>unit</code> <p> TYPE: <code>Optional[str]</code> </p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.bit_field_elements","title":"bit_field_elements  <code>instance-attribute</code>","text":"<pre><code>bit_field_elements: List[ChannelBitFieldElement] = (\n    bit_field_elements\n)\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.component","title":"component  <code>instance-attribute</code>","text":"<pre><code>component: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.data_type","title":"data_type  <code>instance-attribute</code>","text":"<pre><code>data_type: ChannelDataType = data_type\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: Optional[str] = description\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.enum_types","title":"enum_types  <code>instance-attribute</code>","text":"<pre><code>enum_types: List[ChannelEnumType] = enum_types\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.identifier","title":"identifier  <code>instance-attribute</code>","text":"<pre><code>identifier: str = fqn()\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.unit","title":"unit  <code>instance-attribute</code>","text":"<pre><code>unit: Optional[str] = unit\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.as_pb","title":"as_pb","text":"<pre><code>as_pb(klass: Type[ChannelConfig]) -&gt; ChannelConfig\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.fqn","title":"fqn","text":"<pre><code>fqn() -&gt; str\n</code></pre> <p>NOTE: Component field of Channel has been deprecated. Function kept for backwards compatibility.</p> <p>The fully-qualified channel name of a channel called 'voltage' is simply <code>voltage</code>. The fully qualified name of a channel called 'temperature' of component 'motor' is a `motor.temperature'.</p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(message: ChannelConfig) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.try_value_from","title":"try_value_from","text":"<pre><code>try_value_from(\n    value: Optional[Union[int, float, bool, str]],\n) -&gt; IngestWithConfigDataChannelValue\n</code></pre> <p>Generate a channel value for this particular channel configuration. This will raise an exception if there is a type match, namely, if <code>value</code> isn't consistent with the channel's data-type. For a version of this function that does not raise an exception and simply ignores type mistmatches, see <code>value_from</code>. If <code>value</code> is <code>None</code> then an empty value will be generated.</p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelConfig.value_from","title":"value_from","text":"<pre><code>value_from(\n    value: Optional[Union[int, float, bool, str]],\n) -&gt; Optional[IngestWithConfigDataChannelValue]\n</code></pre> <p>Like <code>try_value_from</code> except will return <code>None</code> there is a failure to produce a channel value due to a type mismatch.</p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType","title":"ChannelDataType","text":"<p>               Bases: <code>Enum</code></p> <p>Utility enum class to simplify working with channel data-types generated from protobuf</p> METHOD DESCRIPTION <code>as_human_str</code> <code>from_pb</code> <code>from_str</code> ATTRIBUTE DESCRIPTION <code>BIT_FIELD</code> <p> </p> <code>BOOL</code> <p> </p> <code>DOUBLE</code> <p> </p> <code>ENUM</code> <p> </p> <code>FLOAT</code> <p> </p> <code>INT_32</code> <p> </p> <code>INT_64</code> <p> </p> <code>STRING</code> <p> </p> <code>UINT_32</code> <p> </p> <code>UINT_64</code> <p> </p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.BIT_FIELD","title":"BIT_FIELD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BIT_FIELD = CHANNEL_DATA_TYPE_BIT_FIELD\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.BOOL","title":"BOOL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOOL = CHANNEL_DATA_TYPE_BOOL\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.DOUBLE","title":"DOUBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOUBLE = CHANNEL_DATA_TYPE_DOUBLE\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.ENUM","title":"ENUM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENUM = CHANNEL_DATA_TYPE_ENUM\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.FLOAT","title":"FLOAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FLOAT = CHANNEL_DATA_TYPE_FLOAT\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.INT_32","title":"INT_32  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT_32 = CHANNEL_DATA_TYPE_INT_32\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.INT_64","title":"INT_64  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT_64 = CHANNEL_DATA_TYPE_INT_64\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.STRING","title":"STRING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STRING = CHANNEL_DATA_TYPE_STRING\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.UINT_32","title":"UINT_32  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UINT_32 = CHANNEL_DATA_TYPE_UINT_32\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.UINT_64","title":"UINT_64  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UINT_64 = CHANNEL_DATA_TYPE_UINT_64\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.as_human_str","title":"as_human_str","text":"<pre><code>as_human_str(api_format: bool = False) -&gt; str\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(val: ValueType) -&gt; 'ChannelDataType'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataType.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(raw: str) -&gt; Optional['ChannelDataType']\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep","title":"ChannelDataTypeStrRep","text":"<p>               Bases: <code>Enum</code></p> METHOD DESCRIPTION <code>from_api_format</code> ATTRIBUTE DESCRIPTION <code>BIT_FIELD</code> <p> </p> <code>BOOL</code> <p> </p> <code>DOUBLE</code> <p> </p> <code>ENUM</code> <p> </p> <code>FLOAT</code> <p> </p> <code>INT_32</code> <p> </p> <code>INT_64</code> <p> </p> <code>STRING</code> <p> </p> <code>UINT_32</code> <p> </p> <code>UINT_64</code> <p> </p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.BIT_FIELD","title":"BIT_FIELD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BIT_FIELD = 'bit_field'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.BOOL","title":"BOOL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOOL = 'bool'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.DOUBLE","title":"DOUBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOUBLE = 'double'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.ENUM","title":"ENUM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENUM = 'enum'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.FLOAT","title":"FLOAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FLOAT = 'float'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_32","title":"INT_32  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT_32 = 'int32'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.INT_64","title":"INT_64  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT_64 = 'int64'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.STRING","title":"STRING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STRING = 'string'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_32","title":"UINT_32  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UINT_32 = 'uint32'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.UINT_64","title":"UINT_64  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UINT_64 = 'uint64'\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelDataTypeStrRep.from_api_format","title":"from_api_format  <code>staticmethod</code>","text":"<pre><code>from_api_format(\n    val: str,\n) -&gt; Optional[\"ChannelDataTypeStrRep\"]\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelEnumType","title":"ChannelEnumType","text":"<pre><code>ChannelEnumType(\n    name: str, key: int, is_signed: Optional[bool] = None\n)\n</code></pre> <p>               Bases: <code>AsProtobuf</code></p> METHOD DESCRIPTION <code>as_pb</code> <code>from_pb</code> ATTRIBUTE DESCRIPTION <code>is_signed</code> <p> TYPE: <code>Optional[bool]</code> </p> <code>key</code> <p> TYPE: <code>int</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelEnumType.is_signed","title":"is_signed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_signed: Optional[bool] = is_signed\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelEnumType.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: int = key\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelEnumType.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelEnumType.as_pb","title":"as_pb","text":"<pre><code>as_pb(klass: Type[ChannelEnumType]) -&gt; ChannelEnumType\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelEnumType.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(message: ChannelEnumType) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelValue","title":"ChannelValue","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a fully qualified data point for a channel</p> ATTRIBUTE DESCRIPTION <code>channel_name</code> <p> TYPE: <code>str</code> </p> <code>component</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>value</code> <p> TYPE: <code>IngestWithConfigDataChannelValue</code> </p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelValue.channel_name","title":"channel_name  <code>instance-attribute</code>","text":"<pre><code>channel_name: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelValue.component","title":"component  <code>instance-attribute</code>","text":"<pre><code>component: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.ChannelValue.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.bit_field_value","title":"bit_field_value","text":"<pre><code>bit_field_value(\n    val: bytes,\n) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.bool_value","title":"bool_value","text":"<pre><code>bool_value(val: bool) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.channel_fqn","title":"channel_fqn","text":"<pre><code>channel_fqn(\n    channel: Union[\n        ChannelConfig,\n        ChannelConfig,\n        ChannelValue,\n        Channel,\n        _AbstractChannel,\n    ],\n) -&gt; str\n</code></pre> <p>Computes the fully qualified channel name.</p> <p>NOTE: Component field of Channel is deprecated and should not be used. Function is left for code compatibility.</p> <p>The fully-qualified channel name of a channel called 'voltage' is simply <code>voltage'. The fully qualified name of a channel called 'temperature' of component 'motor' is a</code>motor.temperature'.</p>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.double_value","title":"double_value","text":"<pre><code>double_value(\n    val: float,\n) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.empty_value","title":"empty_value","text":"<pre><code>empty_value() -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.enum_value","title":"enum_value","text":"<pre><code>enum_value(val: int) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.float_value","title":"float_value","text":"<pre><code>float_value(val: float) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.int32_value","title":"int32_value","text":"<pre><code>int32_value(val: int) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.int64_value","title":"int64_value","text":"<pre><code>int64_value(val: int) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.is_data_type","title":"is_data_type","text":"<pre><code>is_data_type(\n    val: IngestWithConfigDataChannelValue,\n    target_type: ChannelDataType,\n) -&gt; bool\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.string_value","title":"string_value","text":"<pre><code>string_value(val: str) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.uint32_value","title":"uint32_value","text":"<pre><code>uint32_value(val: int) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/channel/#sift_py.ingestion.channel.uint64_value","title":"uint64_value","text":"<pre><code>uint64_value(val: int) -&gt; IngestWithConfigDataChannelValue\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/","title":"sift_py.ingestion.config","text":""},{"location":"reference/sift_py/ingestion/config/#sift_py.ingestion.config","title":"sift_py.ingestion.config","text":"<p>Contains the in memory representation of a telemetry config used to configure ingestion.</p> MODULE DESCRIPTION <code>telemetry</code> <code>yaml</code>"},{"location":"reference/sift_py/ingestion/config/telemetry/","title":"sift_py.ingestion.config.telemetry","text":""},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry","title":"sift_py.ingestion.config.telemetry","text":"CLASS DESCRIPTION <code>TelemetryConfig</code> <p>Configurations necessary to start ingestion.</p> <code>TelemetryConfigValidationError</code> <p>When the telemetry config has invalid properties</p>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig","title":"TelemetryConfig","text":"<pre><code>TelemetryConfig(\n    asset_name: str,\n    ingestion_client_key: Optional[str] = None,\n    organization_id: Optional[str] = None,\n    flows: List[FlowConfig] = [],\n    rules: List[RuleConfig] = [],\n)\n</code></pre> <p>Configurations necessary to start ingestion. - <code>asset_name</code>: The name of the asset that you wish to telemeter data for. - <code>ingestion_client_key</code>: Optional string chosen by the user to uniquely identify this ingestion configuration. If this isn't    supplied a sha256 hash will be used as the client key. - <code>flows</code>: A single flow can specify a single channel value or a set of channel values that are ingested together. - <code>organization_id</code>: ID of your organization in Sift. This field is only required if your user belongs to multiple organizations. - <code>rules</code>: Rules to evaluate during ingestion.</p> <p>Will raise a <code>TelemetryConfigValidationError</code> under the following conditions: - Multiple flows with the same name - Multiple rules with the same name - Identical channels in the same flow</p> METHOD DESCRIPTION <code>hash</code> <code>try_from_yaml</code> <p>Initializes a telemetry config from a YAML file found at the provided <code>path</code> as well as optional</p> <code>validate_flows</code> <p>Ensures no duplicate channels and flows with the same name, otherwise raises a <code>TelemetryConfigValidationError</code> exception.</p> <code>validate_rules</code> <p>Ensure that there are no rules with identical names</p> ATTRIBUTE DESCRIPTION <code>asset_name</code> <p> TYPE: <code>str</code> </p> <code>flows</code> <p> TYPE: <code>List[FlowConfig]</code> </p> <code>ingestion_client_key</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>Optional[str]</code> </p> <code>rules</code> <p> TYPE: <code>List[RuleConfig]</code> </p>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.asset_name","title":"asset_name  <code>instance-attribute</code>","text":"<pre><code>asset_name: str = asset_name\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows: List[FlowConfig] = flows\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.ingestion_client_key","title":"ingestion_client_key  <code>instance-attribute</code>","text":"<pre><code>ingestion_client_key: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: Optional[str] = organization_id\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules: List[RuleConfig] = rules\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.hash","title":"hash","text":"<pre><code>hash() -&gt; str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.try_from_yaml","title":"try_from_yaml  <code>classmethod</code>","text":"<pre><code>try_from_yaml(\n    path: Path,\n    named_expression_modules: Optional[List[Path]] = None,\n    named_rule_modules: Optional[List[Path]] = None,\n) -&gt; Self\n</code></pre> <p>Initializes a telemetry config from a YAML file found at the provided <code>path</code> as well as optional paths to named expression modules if named expressions are leveraged.</p>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.validate_flows","title":"validate_flows  <code>staticmethod</code>","text":"<pre><code>validate_flows(flows: List[FlowConfig])\n</code></pre> <p>Ensures no duplicate channels and flows with the same name, otherwise raises a <code>TelemetryConfigValidationError</code> exception.</p>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfig.validate_rules","title":"validate_rules  <code>staticmethod</code>","text":"<pre><code>validate_rules(rules: List[RuleConfig])\n</code></pre> <p>Ensure that there are no rules with identical names</p>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfigValidationError","title":"TelemetryConfigValidationError","text":"<pre><code>TelemetryConfigValidationError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>When the telemetry config has invalid properties</p> ATTRIBUTE DESCRIPTION <code>message</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/config/telemetry/#sift_py.ingestion.config.telemetry.TelemetryConfigValidationError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/","title":"sift_py.ingestion.config.yaml","text":""},{"location":"reference/sift_py/ingestion/config/yaml/#sift_py.ingestion.config.yaml","title":"sift_py.ingestion.config.yaml","text":"MODULE DESCRIPTION <code>error</code> <code>load</code> <code>spec</code> <p>Formal specification of the types that <code>sift_py</code> expects when loading a telemetry config from a YAML file.</p> <code>test_load</code>"},{"location":"reference/sift_py/ingestion/config/yaml/error/","title":"sift_py.ingestion.config.yaml.error","text":""},{"location":"reference/sift_py/ingestion/config/yaml/error/#sift_py.ingestion.config.yaml.error","title":"sift_py.ingestion.config.yaml.error","text":"CLASS DESCRIPTION <code>YamlConfigError</code> <p>When the YAML config has missing or invalid properties.</p>"},{"location":"reference/sift_py/ingestion/config/yaml/error/#sift_py.ingestion.config.yaml.error.YamlConfigError","title":"YamlConfigError","text":"<pre><code>YamlConfigError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>When the YAML config has missing or invalid properties.</p> ATTRIBUTE DESCRIPTION <code>message</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/config/yaml/error/#sift_py.ingestion.config.yaml.error.YamlConfigError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/load/","title":"sift_py.ingestion.config.yaml.load","text":""},{"location":"reference/sift_py/ingestion/config/yaml/load/#sift_py.ingestion.config.yaml.load","title":"sift_py.ingestion.config.yaml.load","text":"FUNCTION DESCRIPTION <code>read_and_validate</code> <p>Reads in the telemetry config YAML file found at <code>path</code> and validates it. Any errors that may occur at the parsing</p> ATTRIBUTE DESCRIPTION <code>load_named_expression_modules</code> <p> </p>"},{"location":"reference/sift_py/ingestion/config/yaml/load/#sift_py.ingestion.config.yaml.load.load_named_expression_modules","title":"load_named_expression_modules  <code>module-attribute</code>","text":"<pre><code>load_named_expression_modules = (\n    load_named_expression_modules\n)\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/load/#sift_py.ingestion.config.yaml.load.read_and_validate","title":"read_and_validate","text":"<pre><code>read_and_validate(path: Path) -&gt; TelemetryConfigYamlSpec\n</code></pre> <p>Reads in the telemetry config YAML file found at <code>path</code> and validates it. Any errors that may occur at the parsing step will return an error whose source is the <code>yaml</code> package. Any errors that may occur during the validation step will return a <code>sift_py.ingestion.config.yaml.error.YamlConfigError</code>.</p>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/","title":"sift_py.ingestion.config.yaml.spec","text":""},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec","title":"sift_py.ingestion.config.yaml.spec","text":"<p>Formal specification of the types that <code>sift_py</code> expects when loading a telemetry config from a YAML file.</p> CLASS DESCRIPTION <code>FlowYamlSpec</code> <p>Formal spec that defines what a flow should look like in YAML.</p> <code>TelemetryConfigYamlSpec</code> <p>Formal spec that defines what the telemetry config should look like in YAML.</p> <code>YamlConfigError</code> <p>When the YAML config has missing or invalid properties.</p> ATTRIBUTE DESCRIPTION <code>ChannelBitFieldElementYamlSpec</code> <p> </p> <code>ChannelConfigYamlSpec</code> <p> </p> <code>ChannelEnumTypeYamlSpec</code> <p> </p> <code>NamedExpressionYamlSpec</code> <p> </p> <code>RuleYamlSpec</code> <p> </p>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.ChannelBitFieldElementYamlSpec","title":"ChannelBitFieldElementYamlSpec  <code>module-attribute</code>","text":"<pre><code>ChannelBitFieldElementYamlSpec = (\n    ChannelBitFieldElementYamlSpec\n)\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.ChannelConfigYamlSpec","title":"ChannelConfigYamlSpec  <code>module-attribute</code>","text":"<pre><code>ChannelConfigYamlSpec = ChannelConfigYamlSpec\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.ChannelEnumTypeYamlSpec","title":"ChannelEnumTypeYamlSpec  <code>module-attribute</code>","text":"<pre><code>ChannelEnumTypeYamlSpec = ChannelEnumTypeYamlSpec\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec","title":"NamedExpressionYamlSpec  <code>module-attribute</code>","text":"<pre><code>NamedExpressionYamlSpec = NamedExpressionYamlSpec\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.RuleYamlSpec","title":"RuleYamlSpec  <code>module-attribute</code>","text":"<pre><code>RuleYamlSpec = RuleYamlSpec\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.FlowYamlSpec","title":"FlowYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>Formal spec that defines what a flow should look like in YAML.</p> ATTRIBUTE DESCRIPTION <code>channels</code> <p> TYPE: <code>List[ChannelConfigYamlSpec]</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.FlowYamlSpec.channels","title":"channels  <code>instance-attribute</code>","text":"<pre><code>channels: List[ChannelConfigYamlSpec]\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.FlowYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec","title":"TelemetryConfigYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>Formal spec that defines what the telemetry config should look like in YAML.</p> <p><code>asset_name</code>: The name of the asset to telemeter. <code>ingestion_client_key</code>: Optional user-defined string-key that uniquely identifies this telemetry config. <code>organization_id</code>: Optional ID of user's organization. Required if user belongs to multiple orgs. <code>channels</code>: Sensors that send the data. <code>rules</code>: Rules that, when evaluated to a true, will perform some sort of acction. <code>flows</code>: A list of named groups of channels that send data together.</p> ATTRIBUTE DESCRIPTION <code>asset_name</code> <p> TYPE: <code>str</code> </p> <code>channels</code> <p> TYPE: <code>Dict[str, ChannelConfigYamlSpec]</code> </p> <code>flows</code> <p> TYPE: <code>NotRequired[List[FlowYamlSpec]]</code> </p> <code>ingestion_client_key</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>organization_id</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>rules</code> <p> TYPE: <code>NotRequired[List[RuleYamlSpec]]</code> </p>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.asset_name","title":"asset_name  <code>instance-attribute</code>","text":"<pre><code>asset_name: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.channels","title":"channels  <code>instance-attribute</code>","text":"<pre><code>channels: Dict[str, ChannelConfigYamlSpec]\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows: NotRequired[List[FlowYamlSpec]]\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.ingestion_client_key","title":"ingestion_client_key  <code>instance-attribute</code>","text":"<pre><code>ingestion_client_key: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.TelemetryConfigYamlSpec.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules: NotRequired[List[RuleYamlSpec]]\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.YamlConfigError","title":"YamlConfigError","text":"<pre><code>YamlConfigError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>When the YAML config has missing or invalid properties.</p> ATTRIBUTE DESCRIPTION <code>message</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/config/yaml/spec/#sift_py.ingestion.config.yaml.spec.YamlConfigError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/config/yaml/test_load/","title":"sift_py.ingestion.config.yaml.test_load","text":""},{"location":"reference/sift_py/ingestion/config/yaml/test_load/#sift_py.ingestion.config.yaml.test_load","title":"sift_py.ingestion.config.yaml.test_load","text":"FUNCTION DESCRIPTION <code>test__validate_flow</code>"},{"location":"reference/sift_py/ingestion/config/yaml/test_load/#sift_py.ingestion.config.yaml.test_load.test__validate_flow","title":"test__validate_flow","text":"<pre><code>test__validate_flow()\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/","title":"sift_py.ingestion.flow","text":""},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow","title":"sift_py.ingestion.flow","text":"CLASS DESCRIPTION <code>Flow</code> <p>Represents a single flow that will be sent to Sift. Because this class uses <code>sift_py.ingestion.channel.ChannelValue</code></p> <code>FlowConfig</code> <p>Describes a flow which is a set of channels whose values are often ingested together, allowing</p> <code>FlowOrderedChannelValues</code> <p>Represents a single flow that will be sent to Sift. Unlike <code>sift_py.ingestion.flow.Flow</code>, this class requires</p>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.Flow","title":"Flow","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a single flow that will be sent to Sift. Because this class uses <code>sift_py.ingestion.channel.ChannelValue</code> which is a fully qualified channel value, a specific ordering of items in <code>channel_values</code> is not required. If a particular flow has 5 channels, it is okay to send only data for 3 channels using this class.</p> ATTRIBUTE DESCRIPTION <code>channel_values</code> <p> TYPE: <code>List[ChannelValue]</code> </p> <code>flow_name</code> <p> TYPE: <code>str</code> </p> <code>timestamp</code> <p> TYPE: <code>datetime</code> </p>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.Flow.channel_values","title":"channel_values  <code>instance-attribute</code>","text":"<pre><code>channel_values: List[ChannelValue]\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.Flow.flow_name","title":"flow_name  <code>instance-attribute</code>","text":"<pre><code>flow_name: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.Flow.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: datetime\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowConfig","title":"FlowConfig","text":"<pre><code>FlowConfig(name: str, channels: List[ChannelConfig])\n</code></pre> <p>               Bases: <code>AsProtobuf</code></p> <p>Describes a flow which is a set of channels whose values are often ingested together, allowing users to send multiple data points for multiple channels in a single request.</p> <p><code>channel_by_fqn</code>:     A mapping of a channel's fully-qualified name to the index of the <code>sift_py.ingestion.channel.ChannelConfig</code>     as it appears in the <code>channels</code> attribute.</p> METHOD DESCRIPTION <code>as_pb</code> <code>from_pb</code> ATTRIBUTE DESCRIPTION <code>channel_by_fqn</code> <p> TYPE: <code>Dict[str, int]</code> </p> <code>channels</code> <p> TYPE: <code>List[ChannelConfig]</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowConfig.channel_by_fqn","title":"channel_by_fqn  <code>instance-attribute</code>","text":"<pre><code>channel_by_fqn: Dict[str, int] = {\n    (channel_fqn(c)): _Dfor(i, c)\n    in (enumerate(channels))\n}\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowConfig.channels","title":"channels  <code>instance-attribute</code>","text":"<pre><code>channels: List[ChannelConfig] = channels\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowConfig.as_pb","title":"as_pb","text":"<pre><code>as_pb(klass: Type[FlowConfig]) -&gt; FlowConfig\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowConfig.from_pb","title":"from_pb  <code>classmethod</code>","text":"<pre><code>from_pb(message: FlowConfig) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowOrderedChannelValues","title":"FlowOrderedChannelValues","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a single flow that will be sent to Sift. Unlike <code>sift_py.ingestion.flow.Flow</code>, this class requires that the ordering of channel values in <code>channel_values</code> match what the flow associated with <code>flow_name</code> expects. If a channel doesn't have particular data to send for a particular time, <code>sift_py.ingestion.channel.empty_value</code> should be used</p> ATTRIBUTE DESCRIPTION <code>channel_values</code> <p> TYPE: <code>List[IngestWithConfigDataChannelValue]</code> </p> <code>flow_name</code> <p> TYPE: <code>str</code> </p> <code>timestamp</code> <p> TYPE: <code>datetime</code> </p>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowOrderedChannelValues.channel_values","title":"channel_values  <code>instance-attribute</code>","text":"<pre><code>channel_values: List[IngestWithConfigDataChannelValue]\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowOrderedChannelValues.flow_name","title":"flow_name  <code>instance-attribute</code>","text":"<pre><code>flow_name: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/flow/#sift_py.ingestion.flow.FlowOrderedChannelValues.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: datetime\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/","title":"sift_py.ingestion.manager","text":""},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager","title":"sift_py.ingestion.manager","text":"CLASS DESCRIPTION <code>IngestionConfigServiceBuilderIdentifierMap</code> <code>IngestionServiceManagerError</code> <code>IngestionServicesManager</code> <p>Allows for the initialization of multiple instances of <code>sift_py.ingestion.service.IngestionService</code> from</p> <code>TelemetryConfigByIdentifierMap</code> ATTRIBUTE DESCRIPTION <code>IngestionServiceBuilder</code> <p> TYPE: <code>TypeAlias</code> </p>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServiceBuilder","title":"IngestionServiceBuilder  <code>module-attribute</code>","text":"<pre><code>IngestionServiceBuilder: TypeAlias = Callable[\n    [SiftChannel], IngestionService\n]\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap","title":"IngestionConfigServiceBuilderIdentifierMap","text":"<p>               Bases: <code>TypedDict</code></p> ATTRIBUTE DESCRIPTION <code>builder</code> <p> TYPE: <code>IngestionServiceBuilder</code> </p> <code>identifier</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.builder","title":"builder  <code>instance-attribute</code>","text":"<pre><code>builder: IngestionServiceBuilder\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionConfigServiceBuilderIdentifierMap.identifier","title":"identifier  <code>instance-attribute</code>","text":"<pre><code>identifier: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServiceManagerError","title":"IngestionServiceManagerError","text":"<pre><code>IngestionServiceManagerError(msg: str)\n</code></pre> <p>               Bases: <code>Exception</code></p>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServicesManager","title":"IngestionServicesManager","text":"<pre><code>IngestionServicesManager(\n    transport_channel: SiftChannel,\n    ingestion_services: Dict[str, IngestionService],\n)\n</code></pre> <p>Allows for the initialization of multiple instances of <code>sift_py.ingestion.service.IngestionService</code> from either telemetry configs or builders under a single wrapper class that assists in managing data-ingestion for multiple telemetry configs.</p> <p>The initializer of this class can be used directly, but prefer to use either <code>from_builders</code> or <code>from_telemetry_configs</code>. Prefer to use <code>from_builders</code> if you have custom options that you want to provide to <code>sift_py.ingestion.service.IngestionService.__init__</code>.</p> <p>Example usage:</p> <pre><code>manager = IngestionServicesManager.from_telementry_configs(grpc_channel, {\n    \"config_a\": config_a,\n    \"config_b\": config_b,\n})\n\nwith manager.ingestion_service(\"config_a\") as config_a:\n    config_a.try_ingest_flow(...)\n\nwith manager.ingestion_service(\"config_b\") as config_b:\n    config_b.try_ingest_flow(...)\n</code></pre> METHOD DESCRIPTION <code>__getitem__</code> <code>from_builders</code> <code>from_telemetry_configs</code> <code>get_ingestion_service_by_identifier</code> <code>ingestion_service</code>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServicesManager.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(identifier: str) -&gt; Optional[IngestionService]\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServicesManager.from_builders","title":"from_builders  <code>classmethod</code>","text":"<pre><code>from_builders(\n    channel: SiftChannel,\n    builders: Dict[str, IngestionServiceBuilder],\n) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServicesManager.from_telemetry_configs","title":"from_telemetry_configs  <code>classmethod</code>","text":"<pre><code>from_telemetry_configs(\n    channel: SiftChannel,\n    telemetry_configs: Dict[str, TelemetryConfig],\n) -&gt; Self\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServicesManager.get_ingestion_service_by_identifier","title":"get_ingestion_service_by_identifier","text":"<pre><code>get_ingestion_service_by_identifier(\n    identifier: str,\n) -&gt; Optional[IngestionService]\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.IngestionServicesManager.ingestion_service","title":"ingestion_service","text":"<pre><code>ingestion_service(\n    identifier: str,\n) -&gt; Iterator[IngestionService]\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.TelemetryConfigByIdentifierMap","title":"TelemetryConfigByIdentifierMap","text":"<p>               Bases: <code>TypedDict</code></p> ATTRIBUTE DESCRIPTION <code>identifier</code> <p> TYPE: <code>str</code> </p> <code>telemetry_config</code> <p> TYPE: <code>TelemetryConfig</code> </p>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.identifier","title":"identifier  <code>instance-attribute</code>","text":"<pre><code>identifier: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/manager/#sift_py.ingestion.manager.TelemetryConfigByIdentifierMap.telemetry_config","title":"telemetry_config  <code>instance-attribute</code>","text":"<pre><code>telemetry_config: TelemetryConfig\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/","title":"sift_py.ingestion.rule","text":""},{"location":"reference/sift_py/ingestion/rule/#sift_py.ingestion.rule","title":"sift_py.ingestion.rule","text":"<p>This module is deprecated and exists only to re-export members of <code>sift_py.rule</code>. Prefer to use that module.</p> MODULE DESCRIPTION <code>config</code>"},{"location":"reference/sift_py/ingestion/rule/config/","title":"sift_py.ingestion.rule.config","text":""},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config","title":"sift_py.ingestion.rule.config","text":"ATTRIBUTE DESCRIPTION <code>ExpressionChannelReference</code> <code>ExpressionChannelReferenceChannelConfig</code> <code>RuleAction</code> <code>RuleActionAnnotationKind</code> <code>RuleActionCreateDataReviewAnnotation</code> <code>RuleActionCreatePhaseAnnotation</code> <code>RuleActionKind</code> <code>RuleActionKindStrRep</code> <code>RuleConfig</code>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.ExpressionChannelReference","title":"ExpressionChannelReference  <code>module-attribute</code>","text":"<pre><code>ExpressionChannelReference = ExpressionChannelReference\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.ExpressionChannelReferenceChannelConfig","title":"ExpressionChannelReferenceChannelConfig  <code>module-attribute</code>","text":"<pre><code>ExpressionChannelReferenceChannelConfig = (\n    ExpressionChannelReferenceChannelConfig\n)\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleAction","title":"RuleAction  <code>module-attribute</code>","text":"<pre><code>RuleAction = RuleAction\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleActionAnnotationKind","title":"RuleActionAnnotationKind  <code>module-attribute</code>","text":"<pre><code>RuleActionAnnotationKind = RuleActionAnnotationKind\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleActionCreateDataReviewAnnotation","title":"RuleActionCreateDataReviewAnnotation  <code>module-attribute</code>","text":"<pre><code>RuleActionCreateDataReviewAnnotation = (\n    RuleActionCreateDataReviewAnnotation\n)\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleActionCreatePhaseAnnotation","title":"RuleActionCreatePhaseAnnotation  <code>module-attribute</code>","text":"<pre><code>RuleActionCreatePhaseAnnotation = (\n    RuleActionCreatePhaseAnnotation\n)\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleActionKind","title":"RuleActionKind  <code>module-attribute</code>","text":"<pre><code>RuleActionKind = RuleActionKind\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleActionKindStrRep","title":"RuleActionKindStrRep  <code>module-attribute</code>","text":"<pre><code>RuleActionKindStrRep = RuleActionKindStrRep\n</code></pre>"},{"location":"reference/sift_py/ingestion/rule/config/#sift_py.ingestion.rule.config.RuleConfig","title":"RuleConfig  <code>module-attribute</code>","text":"<pre><code>RuleConfig = RuleConfig\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/","title":"sift_py.ingestion.service","text":""},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service","title":"sift_py.ingestion.service","text":"CLASS DESCRIPTION <code>IngestionService</code> <p>A fully configured service that, when instantiated, is ready to start ingesting data.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService","title":"IngestionService","text":"<pre><code>IngestionService(\n    channel: SiftChannel,\n    config: TelemetryConfig,\n    run_id: Optional[str] = None,\n    end_stream_on_error: bool = False,\n    force_lazy_flow_creation: bool = False,\n)\n</code></pre> <p>               Bases: <code>_IngestionServiceImpl</code></p> <p>A fully configured service that, when instantiated, is ready to start ingesting data.</p> <ul> <li><code>transport_channel</code>: A gRPC transport channel. Prefer to use <code>SiftChannel</code>.</li> <li><code>ingestion_config</code>: The underlying strongly-typed ingestion config. Users of this service don't need to be concerned with this.</li> <li><code>asset_name</code>: The name of the asset to telemeter.</li> <li><code>flow_configs_by_name</code>: A mapping of flow config name to the actual flow config.</li> <li><code>run_id</code>: The ID of the optional run to associated ingested data with.</li> <li><code>organization_id</code>: ID of the organization of the user.</li> <li><code>end_stream_on_error</code>:     By default any errors that may occur during ingestion API-side are produced asynchronously and ingestion     won't be interrupted. The errors produced are surfaced on the user errors page. Setting this field to <code>True</code>     will ensure that any errors that occur during ingestion is returned immediately, terminating the stream. This     is useful for debugging purposes.</li> <li><code>lazy_flow_creation</code>:     By default, the entire telemetry config is processed when the service is initialized, and if needed, the config and all flow info     is sent to Sift. In the event a sufficiently large telemetry config is provided which is too large to send in one single     gRPC message, the ingestion service will instead use a lazy flow ingestion method, which sets this boolean to True. This method     registers individual flows the first time they are ingested. Initializing with <code>force_lazy_flow_creation</code> will force this behavior     for any telemetry flow size. If a sufficently large telemetry config is being sent, and lazy flow ingestion behavior is not desired,     the list of flows must be broken up beforehand and sent through the service's create flow methods.</li> </ul> METHOD DESCRIPTION <code>attach_run</code> <p>Retrieve an existing run or create one to use during this period of ingestion.</p> <code>buffered_ingestion</code> <p>This method automates buffering requests and streams them in batches. It is recommended to be used</p> <code>create_flow</code> <p>Like <code>try_create_new_flow</code> but will not raise an <code>IngestionValidationError</code> if there already exists</p> <code>create_flows</code> <p>See <code>create_flow</code>.</p> <code>create_ingestion_request</code> <p>Unlike <code>try_create_ingestion_request</code>, this skips argument validations. Useful for when user has already done their own</p> <code>detach_run</code> <p>Detach run from this period of ingestion. Subsequent data ingested won't be associated with</p> <code>ingest</code> <p>This method performs the actual data ingestion given a list of data ingestion requests.</p> <code>ingest_flows</code> <p>Combines the requests creation step and ingestion into a single call.</p> <code>try_create_flow</code> <p>Tries to create a new flow at runtime. Will raise an <code>IngestionValidationError</code> if there already exists</p> <code>try_create_flows</code> <p>See <code>try_create_flows</code>.</p> <code>try_create_ingestion_request</code> <p>Creates an <code>IngestWithConfigDataStreamRequest</code>, i.e. a flow, given a <code>flow_name</code> and a</p> <code>try_ingest_flows</code> <p>Combines the requests creation step and ingestion into a single call.</p> ATTRIBUTE DESCRIPTION <code>asset_name</code> <p> TYPE: <code>str</code> </p> <code>end_stream_on_error</code> <p> TYPE: <code>bool</code> </p> <code>flow_configs_by_name</code> <p> TYPE: <code>Dict[str, FlowConfig]</code> </p> <code>ingestion_config</code> <p> TYPE: <code>IngestionConfig</code> </p> <code>lazy_flow_creation</code> <p> TYPE: <code>bool</code> </p> <code>organization_id</code> <p> TYPE: <code>Optional[str]</code> </p> <code>run_id</code> <p> TYPE: <code>Optional[str]</code> </p> <code>transport_channel</code> <p> TYPE: <code>SiftChannel</code> </p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.asset_name","title":"asset_name  <code>instance-attribute</code>","text":"<pre><code>asset_name: str\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.end_stream_on_error","title":"end_stream_on_error  <code>instance-attribute</code>","text":"<pre><code>end_stream_on_error: bool\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.flow_configs_by_name","title":"flow_configs_by_name  <code>instance-attribute</code>","text":"<pre><code>flow_configs_by_name: Dict[str, FlowConfig]\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.ingestion_config","title":"ingestion_config  <code>instance-attribute</code>","text":"<pre><code>ingestion_config: IngestionConfig\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.lazy_flow_creation","title":"lazy_flow_creation  <code>instance-attribute</code>","text":"<pre><code>lazy_flow_creation: bool\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: Optional[str]\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.run_id","title":"run_id  <code>instance-attribute</code>","text":"<pre><code>run_id: Optional[str]\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.transport_channel","title":"transport_channel  <code>instance-attribute</code>","text":"<pre><code>transport_channel: SiftChannel\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.attach_run","title":"attach_run","text":"<pre><code>attach_run(\n    channel: SiftChannel,\n    run_name: str,\n    description: Optional[str] = None,\n    organization_id: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n    metadata: Optional[\n        Dict[str, Union[str, float, bool]]\n    ] = None,\n    force_new: bool = False,\n)\n</code></pre> <p>Retrieve an existing run or create one to use during this period of ingestion.</p> <p>Include <code>force_new=True</code> to force the creation of a new run, which will allow creation of a new run using an existing name.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.buffered_ingestion","title":"buffered_ingestion","text":"<pre><code>buffered_ingestion(\n    buffer_size: Optional[int] = None,\n    flush_interval_sec: Optional[float] = None,\n    on_error: Optional[OnErrorCallback] = None,\n) -&gt; BufferedIngestionService\n</code></pre> <p>This method automates buffering requests and streams them in batches. It is recommended to be used in a with-block. Failure to put this in a with-block may result in some data not being ingested unless the caller explicitly calls <code>sift_py.ingestion.buffer.BufferedIngestionService.flush</code> before the returned instance of <code>sift_py.ingestion.buffer.BufferedIngestionService</code> goes out of scope. Once the with-block is exited then a final call to the aforementioned <code>flush</code> method  will be made to ingest the remaining data.</p> <p>Buffered ingestion works by automatically flushing and ingesting data into Sift whenever the buffer is filled. The size of the buffer is configured via the <code>buffer_size</code> argument and defaults to <code>sift_py.ingestion.buffer.DEFAULT_BUFFER_SIZE</code>.</p> <p>It is also possible to configure buffered ingestion to periodically flush the buffer regardless of whether or not the buffer is filled. The interval between flushes is set via the <code>flush_interval_sec</code> argument which is the number of seconds between each flush. If a flush were to occur due to the buffer being filled, then the timer will restart. If <code>flush_interval_sec</code> is <code>None</code>, then flushes will only occur once the buffer is filled and at the end of the scope of the with-block.</p> <p>If an error were to occur that would cause the context manager to call <code>__exit__</code>, one last attempt to flush the buffer will be made before the error is re-raised for the caller to handle. If the caller would instead like to customize <code>__exit__</code> behavior in the case of an error, they can make use of the <code>on_error</code> argument whose type signature is a function where the first argument is the error, the second is the buffer containing the uningested request, and the third argument being a function where, when called, will attempt to flush the buffer.</p> <p>Example usage:</p> <pre><code># With client-side validations\nwith ingestion_service.buffered_ingestion() as buffered_ingestion:\n    for _ in range(10_000):\n        buffered_ingestion.try_ingest_flows({\n            \"flow_name\": \"readings\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [\n                {\n                    \"channel_name\": \"my-channel\",\n            ],\n        })\n\n# Without client-side validations and a custom buffer size\nwith ingestion_service.buffered_ingestion(2_000) as buffered_ingestion:\n    for _ in range(6_000):\n        buffered_ingestion.ingest_flows({\n            \"flow_name\": \"readings\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [double_value(3)]\n        })\n\n# With default buffer size and periodic flushes of 3.2 seconds\nwith ingestion_service.buffered_ingestion(flush_interval_sec=3.2) as buffered_ingestion:\n    for _ in range(6_000):\n        buffered_ingestion.ingest_flows({\n            \"flow_name\": \"readings\",\n            \"timestamp\": datetime.now(timezone.utc),\n            \"channel_values\": [double_value(3)]\n        })\n\n# Custom code to run when error\ndef on_error_calback(err, buffer, flush):\n    # Save contents of buffer to disk\n    ...\n    # Try once more to flush the buffer\n    flush()\n\nwith ingestion_service.buffered_ingestion(on_error=on_error_calback) as buffered_ingestion:\n    ...\n</code></pre>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.create_flow","title":"create_flow","text":"<pre><code>create_flow(*flow_config: FlowConfig)\n</code></pre> <p>Like <code>try_create_new_flow</code> but will not raise an <code>IngestionValidationError</code> if there already exists a flow with the name of the <code>flow_config</code> argument.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.create_flows","title":"create_flows","text":"<pre><code>create_flows(*flow_configs: FlowConfig)\n</code></pre> <p>See <code>create_flow</code>.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.create_ingestion_request","title":"create_ingestion_request","text":"<pre><code>create_ingestion_request(\n    flow_name: str,\n    timestamp: datetime,\n    channel_values: List[IngestWithConfigDataChannelValue],\n) -&gt; IngestWithConfigDataStreamRequest\n</code></pre> <p>Unlike <code>try_create_ingestion_request</code>, this skips argument validations. Useful for when user has already done their own argument validation or if they require low-latency execution time client-side.</p> <p>If there are errors that occur during ingestion and the <code>end_stream_on_error</code> attribute is set to <code>False</code>, the data ingestion stream will skip over them and errors instead will be produced asynchronously and become available in the UI application in the errors page. If <code>end_stream_on_error</code> is set to <code>True</code>, then the data ingestion stream will be terminated if an error is encountered during ingestion.</p> <p>These are some things to look out for when using this method instead of <code>try_create_ingestion_request</code>: - Values in <code>channel_values</code> must appear in the same order its corresponding channel appears in the flow config   associated with the <code>flow_name</code>. - The length of <code>channel_values</code> is expected to match the length of the channel configs list of the flow config   associated with <code>flow_name</code>. <code>sift_py.ingestion.channel.empty_value()</code> may be used if you require empty values. - The <code>timestamp</code> must be in UTC.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.detach_run","title":"detach_run","text":"<pre><code>detach_run()\n</code></pre> <p>Detach run from this period of ingestion. Subsequent data ingested won't be associated with the run being detached.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.ingest","title":"ingest","text":"<pre><code>ingest(*requests: IngestWithConfigDataStreamRequest)\n</code></pre> <p>This method performs the actual data ingestion given a list of data ingestion requests.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.ingest_flows","title":"ingest_flows","text":"<pre><code>ingest_flows(*flows: FlowOrderedChannelValues)\n</code></pre> <p>Combines the requests creation step and ingestion into a single call. See <code>create_ingestion_request</code> for information about how client-side validations are handled.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.try_create_flow","title":"try_create_flow","text":"<pre><code>try_create_flow(*flow_config: FlowConfig)\n</code></pre> <p>Tries to create a new flow at runtime. Will raise an <code>IngestionValidationError</code> if there already exists a flow with the name of the <code>flow_config</code> argument.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.try_create_flows","title":"try_create_flows","text":"<pre><code>try_create_flows(*flow_configs: FlowConfig)\n</code></pre> <p>See <code>try_create_flows</code>.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.try_create_ingestion_request","title":"try_create_ingestion_request","text":"<pre><code>try_create_ingestion_request(\n    flow_name: str,\n    timestamp: datetime,\n    channel_values: Union[\n        List[ChannelValue],\n        List[IngestWithConfigDataChannelValue],\n    ],\n) -&gt; IngestWithConfigDataStreamRequest\n</code></pre> <p>Creates an <code>IngestWithConfigDataStreamRequest</code>, i.e. a flow, given a <code>flow_name</code> and a list of <code>ChannelValue</code> objects. Channels that appear in the flow config but not in the <code>channel_values</code> will be assigned an empty value.</p> <p>This function will perform validation checks to ensure that the values provided in the dictionary; this includes:   - Making sure the flow exists   - Making sure that the there are no unexpected channels provided for the given flow   - Making sure the channel value is the expected type   - Making sure that the timestamp is in UTC</p> <p>If any of the above validations fail then a <code>IngestionValidationError</code> will be raised.</p> <p>If for performance reasons you'd prefer to skip the validation checks, or perhaps you did the validations on your own, prefer to use <code>create_ingestion_request</code>. Any errors that occur during ingestion will be handled by the Sift API.</p>"},{"location":"reference/sift_py/ingestion/service/#sift_py.ingestion.service.IngestionService.try_ingest_flows","title":"try_ingest_flows","text":"<pre><code>try_ingest_flows(*flows: Flow)\n</code></pre> <p>Combines the requests creation step and ingestion into a single call. See <code>try_create_ingestion_request</code> for information about how client-side validations are handled.</p>"},{"location":"reference/sift_py/report_templates/","title":"sift_py.report_templates","text":""},{"location":"reference/sift_py/report_templates/#sift_py.report_templates","title":"sift_py.report_templates","text":"MODULE DESCRIPTION <code>config</code> <code>service</code>"},{"location":"reference/sift_py/report_templates/config/","title":"sift_py.report_templates.config","text":""},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config","title":"sift_py.report_templates.config","text":"CLASS DESCRIPTION <code>ReportTemplateConfig</code> <p>Configuration for a report template.</p> <code>ReportTemplateUpdate</code> <p>Represents a dictionary for updating properties of a report template. All fields are optional</p>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig","title":"ReportTemplateConfig","text":"<p>               Bases: <code>BaseModel</code>, <code>AsJson</code></p> <p>Configuration for a report template.</p> <ul> <li><code>name</code>: Name of the report template.</li> <li><code>template_client_key</code>: Unique client key to identify the report template.</li> <li><code>organization_id</code>: Organization ID that the report template belongs to.</li> <li><code>tags</code>: Tags to associate with the report template.</li> <li><code>description</code>: Description of the report template.</li> <li><code>rule_client_keys</code>: List of rule client keys associated with the report template.</li> <li><code>archived_date</code>: Date when the report template was archived. Setting this field     will archive the report template, and unsetting it will unarchive the report template.</li> <li><code>archived</code>: True if the report template is archived, False otherwise.</li> </ul> METHOD DESCRIPTION <code>as_json</code> ATTRIBUTE DESCRIPTION <code>archived</code> <p> TYPE: <code>bool</code> </p> <code>archived_date</code> <p> TYPE: <code>Optional[datetime]</code> </p> <code>description</code> <p> TYPE: <code>Optional[str]</code> </p> <code>model_config</code> <p> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>rule_client_keys</code> <p> TYPE: <code>List[str]</code> </p> <code>tags</code> <p> TYPE: <code>Optional[List[str]]</code> </p> <code>template_client_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>template_id</code> <p> TYPE: <code>Optional[str]</code> </p>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.archived","title":"archived  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived: bool = False\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: Optional[datetime] = None\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.rule_client_keys","title":"rule_client_keys  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rule_client_keys: List[str] = []\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: Optional[List[str]] = None\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.template_client_key","title":"template_client_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template_client_key: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.template_id","title":"template_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template_id: Optional[str] = None\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateConfig.as_json","title":"as_json","text":"<pre><code>as_json() -&gt; Any\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate","title":"ReportTemplateUpdate","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a dictionary for updating properties of a report template. All fields are optional and only the provided fields will be updated.</p> <ul> <li><code>name</code>: Updated name of the report template.</li> <li><code>template_client_key</code>: Updated unique client key to identify the report template.</li> <li><code>organization_id</code>: Updated organization ID that the report template belongs to.</li> <li><code>tags</code>: Updated tags to associate with the report template.</li> <li><code>description</code>: Updated description of the report template.</li> <li><code>rule_client_keys</code>: Updated list of rule client keys associated with the report template.</li> <li><code>archived</code>: True if the report template is archived, False otherwise.</li> </ul> ATTRIBUTE DESCRIPTION <code>archived</code> <p> TYPE: <code>NotRequired[bool]</code> </p> <code>description</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>name</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>rule_client_keys</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>tags</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>template_client_key</code> <p> TYPE: <code>NotRequired[str]</code> </p>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate.archived","title":"archived  <code>instance-attribute</code>","text":"<pre><code>archived: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate.rule_client_keys","title":"rule_client_keys  <code>instance-attribute</code>","text":"<pre><code>rule_client_keys: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/report_templates/config/#sift_py.report_templates.config.ReportTemplateUpdate.template_client_key","title":"template_client_key  <code>instance-attribute</code>","text":"<pre><code>template_client_key: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/report_templates/service/","title":"sift_py.report_templates.service","text":""},{"location":"reference/sift_py/report_templates/service/#sift_py.report_templates.service","title":"sift_py.report_templates.service","text":"CLASS DESCRIPTION <code>ReportTemplateService</code> <p>A service for managing report templates. Allows for creating, updating, and retrieving report</p>"},{"location":"reference/sift_py/report_templates/service/#sift_py.report_templates.service.ReportTemplateService","title":"ReportTemplateService","text":"<pre><code>ReportTemplateService(channel: SiftChannel)\n</code></pre> <p>A service for managing report templates. Allows for creating, updating, and retrieving report templates.</p> METHOD DESCRIPTION <code>create_or_update_report_template</code> <p>Create or update a report template via a ReportTemplateConfig. The config must contain a</p> <code>get_report_template</code> <p>Retrieve a report template by client key or id. Only one of client_key or id should be</p> <code>load_report_templates_from_yaml</code> <p>Load report templates from YAML definitions. The YAML defined report template must have</p>"},{"location":"reference/sift_py/report_templates/service/#sift_py.report_templates.service.ReportTemplateService.create_or_update_report_template","title":"create_or_update_report_template","text":"<pre><code>create_or_update_report_template(\n    config: ReportTemplateConfig,\n    updates: Optional[ReportTemplateUpdate] = None,\n)\n</code></pre> <p>Create or update a report template via a ReportTemplateConfig. The config must contain a template_client_key, otherwise an exception will be raised. If a report template with the same client key exists, it will be updated. Otherwise, a new report template will be created. See <code>sift_py.report_templates.config.ReportTemplateConfig</code> for more information on available fields to configure.</p>"},{"location":"reference/sift_py/report_templates/service/#sift_py.report_templates.service.ReportTemplateService.get_report_template","title":"get_report_template","text":"<pre><code>get_report_template(\n    client_key: Optional[str] = None,\n    id: Optional[str] = None,\n) -&gt; Optional[ReportTemplateConfig]\n</code></pre> <p>Retrieve a report template by client key or id. Only one of client_key or id should be provided, otherwise an exception will be raised. If a report template is found, it will be returned as a ReportTemplateConfig object.</p>"},{"location":"reference/sift_py/report_templates/service/#sift_py.report_templates.service.ReportTemplateService.load_report_templates_from_yaml","title":"load_report_templates_from_yaml","text":"<pre><code>load_report_templates_from_yaml(\n    paths: List[Path],\n) -&gt; List[ReportTemplateConfig]\n</code></pre> <p>Load report templates from YAML definitions. The YAML defined report template must have a client key. If the report template with the given client key exists, it will be updated, otherwise a new report template will be created. See <code>sift_py.yaml.report_templates.load_report_templates</code> for more information on the YAML spec for report templates.</p>"},{"location":"reference/sift_py/rest/","title":"sift_py.rest","text":""},{"location":"reference/sift_py/rest/#sift_py.rest","title":"sift_py.rest","text":"CLASS DESCRIPTION <code>SiftRestConfig</code> <p>Config class used to to interact with services that use Sift's REST API.`.</p> FUNCTION DESCRIPTION <code>compute_uri</code>"},{"location":"reference/sift_py/rest/#sift_py.rest.SiftRestConfig","title":"SiftRestConfig","text":"<p>               Bases: <code>TypedDict</code></p> <p>Config class used to to interact with services that use Sift's REST API.<code>. -</code>uri<code>: The URI of Sift's REST API. The scheme portion of the URI i.e.</code>https://<code>should be ommitted. -</code>apikey<code>: User-generated API key generated via the Sift application. -</code>retry<code>: Urllib3 Retry configuration. If not provided, a default of 3 retries is used. -</code>use_ssl<code>: INTERNAL USE. Meant to be used for local development. -</code>cert_via_openssl<code>: Enable this if you want to use OpenSSL to load the certificates. Run</code>pip install sift-stack-py[openssl]` to install the dependencies required to use this option. Default is False.</p> ATTRIBUTE DESCRIPTION <code>apikey</code> <p> TYPE: <code>str</code> </p> <code>cert_via_openssl</code> <p> TYPE: <code>NotRequired[bool]</code> </p> <code>retry</code> <p> TYPE: <code>NotRequired[Retry]</code> </p> <code>uri</code> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p> TYPE: <code>NotRequired[bool]</code> </p>"},{"location":"reference/sift_py/rest/#sift_py.rest.SiftRestConfig.apikey","title":"apikey  <code>instance-attribute</code>","text":"<pre><code>apikey: str\n</code></pre>"},{"location":"reference/sift_py/rest/#sift_py.rest.SiftRestConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/rest/#sift_py.rest.SiftRestConfig.retry","title":"retry  <code>instance-attribute</code>","text":"<pre><code>retry: NotRequired[Retry]\n</code></pre>"},{"location":"reference/sift_py/rest/#sift_py.rest.SiftRestConfig.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre>"},{"location":"reference/sift_py/rest/#sift_py.rest.SiftRestConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl: NotRequired[bool]\n</code></pre>"},{"location":"reference/sift_py/rest/#sift_py.rest.compute_uri","title":"compute_uri","text":"<pre><code>compute_uri(restconf: SiftRestConfig) -&gt; str\n</code></pre>"},{"location":"reference/sift_py/rule/","title":"sift_py.rule","text":""},{"location":"reference/sift_py/rule/#sift_py.rule","title":"sift_py.rule","text":"MODULE DESCRIPTION <code>config</code> <code>service</code>"},{"location":"reference/sift_py/rule/config/","title":"sift_py.rule.config","text":""},{"location":"reference/sift_py/rule/config/#sift_py.rule.config","title":"sift_py.rule.config","text":"CLASS DESCRIPTION <code>ExpressionChannelReference</code> <p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression.</p> <code>ExpressionChannelReferenceChannelConfig</code> <p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression.</p> <code>RuleAction</code> <code>RuleActionAnnotationKind</code> <code>RuleActionCreateDataReviewAnnotation</code> <p>Action to create a data-review annotation when a rule evaluates to a truthy value.</p> <code>RuleActionCreatePhaseAnnotation</code> <p>Action to create a phase annotation when a rule evaluates to a truthy value.</p> <code>RuleActionKind</code> <code>RuleActionKindStrRep</code> <code>RuleConfig</code> <p>Defines a rule to be used during ingestion. If a rule's expression validates to try, then</p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.ExpressionChannelReference","title":"ExpressionChannelReference","text":"<p>               Bases: <code>TypedDict</code></p> <p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression. <code>channel_identifier</code>: The channel name.</p> ATTRIBUTE DESCRIPTION <code>channel_identifier</code> <p> TYPE: <code>str</code> </p> <code>channel_reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.ExpressionChannelReference.channel_identifier","title":"channel_identifier  <code>instance-attribute</code>","text":"<pre><code>channel_identifier: str\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.ExpressionChannelReference.channel_reference","title":"channel_reference  <code>instance-attribute</code>","text":"<pre><code>channel_reference: str\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.ExpressionChannelReferenceChannelConfig","title":"ExpressionChannelReferenceChannelConfig","text":"<p>               Bases: <code>TypedDict</code></p> <p><code>channel_reference</code>: The channel reference (e.g. '$1') used in the expression. <code>channel_config</code>: Instance of <code>sift_py.ingestion.channel.ChannelConfig</code>.</p> ATTRIBUTE DESCRIPTION <code>channel_config</code> <p> TYPE: <code>ChannelConfig</code> </p> <code>channel_reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_config","title":"channel_config  <code>instance-attribute</code>","text":"<pre><code>channel_config: ChannelConfig\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.ExpressionChannelReferenceChannelConfig.channel_reference","title":"channel_reference  <code>instance-attribute</code>","text":"<pre><code>channel_reference: str\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleAction","title":"RuleAction","text":"<p>               Bases: <code>ABC</code></p> METHOD DESCRIPTION <code>kind</code>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleAction.kind","title":"kind  <code>abstractmethod</code>","text":"<pre><code>kind() -&gt; RuleActionKind\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionAnnotationKind","title":"RuleActionAnnotationKind","text":"<p>               Bases: <code>Enum</code></p> METHOD DESCRIPTION <code>from_annotation_type</code> <code>from_str</code> ATTRIBUTE DESCRIPTION <code>PHASE</code> <p> </p> <code>REVIEW</code> <p> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionAnnotationKind.PHASE","title":"PHASE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PHASE = 'phase'\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionAnnotationKind.REVIEW","title":"REVIEW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REVIEW = 'review'\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionAnnotationKind.from_annotation_type","title":"from_annotation_type  <code>classmethod</code>","text":"<pre><code>from_annotation_type(\n    annotation_type: AnnotationType,\n) -&gt; \"RuleActionAnnotationKind\"\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionAnnotationKind.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(val: str) -&gt; 'RuleActionAnnotationKind'\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreateDataReviewAnnotation","title":"RuleActionCreateDataReviewAnnotation","text":"<pre><code>RuleActionCreateDataReviewAnnotation(\n    assignee: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n)\n</code></pre> <p>               Bases: <code>RuleAction</code></p> <p>Action to create a data-review annotation when a rule evaluates to a truthy value.</p> <ul> <li><code>tags</code>: List of tag names to associate with the newly created data-review annotation.</li> <li><code>assignee</code>: Email of user in organization to assign the newly created data-review annotation.</li> </ul> METHOD DESCRIPTION <code>kind</code> ATTRIBUTE DESCRIPTION <code>assignee</code> <p> TYPE: <code>Optional[str]</code> </p> <code>tags</code> <p> TYPE: <code>Optional[List[str]]</code> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreateDataReviewAnnotation.assignee","title":"assignee  <code>instance-attribute</code>","text":"<pre><code>assignee: Optional[str] = assignee\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreateDataReviewAnnotation.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: Optional[List[str]] = tags\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreateDataReviewAnnotation.kind","title":"kind","text":"<pre><code>kind() -&gt; RuleActionKind\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreatePhaseAnnotation","title":"RuleActionCreatePhaseAnnotation","text":"<pre><code>RuleActionCreatePhaseAnnotation(\n    tags: Optional[List[str]] = None,\n)\n</code></pre> <p>               Bases: <code>RuleAction</code></p> <p>Action to create a phase annotation when a rule evaluates to a truthy value.</p> <ul> <li><code>tags</code>: List of tag names to associate with the newly created data-review annotation.</li> </ul> METHOD DESCRIPTION <code>kind</code> ATTRIBUTE DESCRIPTION <code>tags</code> <p> TYPE: <code>Optional[List[str]]</code> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreatePhaseAnnotation.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: Optional[List[str]] = tags\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionCreatePhaseAnnotation.kind","title":"kind","text":"<pre><code>kind() -&gt; RuleActionKind\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKind","title":"RuleActionKind","text":"<p>               Bases: <code>Enum</code></p> METHOD DESCRIPTION <code>from_str</code> ATTRIBUTE DESCRIPTION <code>ANNOTATION</code> <p> </p> <code>NOTIFICATION</code> <p> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKind.ANNOTATION","title":"ANNOTATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANNOTATION = ANNOTATION\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKind.NOTIFICATION","title":"NOTIFICATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NOTIFICATION = NOTIFICATION\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKind.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(val: str) -&gt; Optional['RuleActionKind']\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKindStrRep","title":"RuleActionKindStrRep","text":"<p>               Bases: <code>Enum</code></p> ATTRIBUTE DESCRIPTION <code>ANNOTATION</code> <p> </p> <code>NOTIFICATION</code> <p> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKindStrRep.ANNOTATION","title":"ANNOTATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANNOTATION = 'annotation'\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleActionKindStrRep.NOTIFICATION","title":"NOTIFICATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NOTIFICATION = 'notification'\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig","title":"RuleConfig","text":"<pre><code>RuleConfig(\n    name: str,\n    channel_references: List[\n        Union[\n            ExpressionChannelReference,\n            ExpressionChannelReferenceChannelConfig,\n        ]\n    ],\n    description: str = \"\",\n    expression: str = \"\",\n    action: Optional[RuleAction] = None,\n    rule_client_key: Optional[str] = None,\n    asset_names: Optional[List[str]] = None,\n    tag_names: Optional[List[str]] = None,\n    sub_expressions: Dict[str, Any] = {},\n    contextual_channels: Optional[List[str]] = None,\n    is_external: bool = False,\n)\n</code></pre> <p>               Bases: <code>AsJson</code></p> <p>Defines a rule to be used during ingestion. If a rule's expression validates to try, then a specific action will take place as specified by the <code>kind</code> attribute.</p> <ul> <li><code>name</code>: Name of the rule.</li> <li><code>description</code>: Description of the rule.</li> <li><code>expression</code>: A CEL string expression that executes the <code>action</code> when evaluated to a truthy value.</li> <li><code>action</code>: The action to execute if the result of an <code>expression</code> evaluates to a truthy value.</li> <li><code>channel_references</code>: Reference to channel. If an expression is \"$1 &lt; 10\", then \"$1\" is the reference and thus should the key in the dict.</li> <li><code>rule_client_key</code>: User defined unique string that uniquely identifies this rule.</li> <li><code>asset_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</li> <li><code>tag_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</li> <li><code>contextual_channels</code>: A list of channel names that provide context but aren't directly used in the expression.</li> <li><code>is_external</code>: If this is an external rule.</li> </ul> METHOD DESCRIPTION <code>as_json</code> <p>Produces the appropriate JSON structure that's suitable for the Rules API.</p> <code>interpolate_sub_expressions</code> ATTRIBUTE DESCRIPTION <code>action</code> <p> TYPE: <code>Optional[RuleAction]</code> </p> <code>asset_names</code> <p> TYPE: <code>List[str]</code> </p> <code>channel_references</code> <p> TYPE: <code>List[ExpressionChannelReference]</code> </p> <code>contextual_channels</code> <p> TYPE: <code>List[str]</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>is_external</code> <p> TYPE: <code>bool</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>rule_client_key</code> <p> TYPE: <code>Optional[str]</code> </p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.action","title":"action  <code>instance-attribute</code>","text":"<pre><code>action: Optional[RuleAction] = action\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.asset_names","title":"asset_names  <code>instance-attribute</code>","text":"<pre><code>asset_names: List[str] = asset_names or []\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: List[ExpressionChannelReference] = (\n    _channel_references_from_dicts(channel_references)\n)\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.contextual_channels","title":"contextual_channels  <code>instance-attribute</code>","text":"<pre><code>contextual_channels: List[str] = contextual_channels or []\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str = description\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str = interpolate_sub_expressions(\n    expression, sub_expressions\n)\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.is_external","title":"is_external  <code>instance-attribute</code>","text":"<pre><code>is_external: bool = is_external\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.rule_client_key","title":"rule_client_key  <code>instance-attribute</code>","text":"<pre><code>rule_client_key: Optional[str] = rule_client_key\n</code></pre>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.as_json","title":"as_json","text":"<pre><code>as_json() -&gt; Any\n</code></pre> <p>Produces the appropriate JSON structure that's suitable for the Rules API.</p>"},{"location":"reference/sift_py/rule/config/#sift_py.rule.config.RuleConfig.interpolate_sub_expressions","title":"interpolate_sub_expressions  <code>staticmethod</code>","text":"<pre><code>interpolate_sub_expressions(\n    expression: str,\n    sub_expressions: Optional[Dict[str, str]],\n) -&gt; str\n</code></pre>"},{"location":"reference/sift_py/rule/service/","title":"sift_py.rule.service","text":""},{"location":"reference/sift_py/rule/service/#sift_py.rule.service","title":"sift_py.rule.service","text":"CLASS DESCRIPTION <code>RuleChannelReference</code> <p>Convenient wrapper to map rule names to relevant channel references</p> <code>RuleIdentifier</code> <p>Wrapper around RuleIdentifier for working with external rules.</p> <code>RuleService</code> <p>A service for managing rules. Allows for loading rules from YAML and creating or updating them in the Sift API.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleChannelReference","title":"RuleChannelReference  <code>dataclass</code>","text":"<pre><code>RuleChannelReference(\n    rule_name: str, channel_references: Dict[str, Any]\n)\n</code></pre> <p>Convenient wrapper to map rule names to relevant channel references when creating rules from yaml.</p> ATTRIBUTE DESCRIPTION <code>channel_references</code> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>rule_name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleChannelReference.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: Dict[str, Any]\n</code></pre>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleChannelReference.rule_name","title":"rule_name  <code>instance-attribute</code>","text":"<pre><code>rule_name: str\n</code></pre>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleIdentifier","title":"RuleIdentifier  <code>dataclass</code>","text":"<pre><code>RuleIdentifier(rule_id: str, name: str)\n</code></pre> <p>Wrapper around RuleIdentifier for working with external rules.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>rule_id</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleIdentifier.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleIdentifier.rule_id","title":"rule_id  <code>instance-attribute</code>","text":"<pre><code>rule_id: str\n</code></pre>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService","title":"RuleService","text":"<pre><code>RuleService(channel: SiftChannel)\n</code></pre> <p>A service for managing rules. Allows for loading rules from YAML and creating or updating them in the Sift API.</p> METHOD DESCRIPTION <code>attach_asset</code> <p>Associates a rule with an asset by name. The asset must already exist in the Sift API.</p> <code>create_external_rules</code> <p>Create external rules via RuleConfigs. The configs must have is_external set to</p> <code>create_external_rules_from_yaml</code> <p>Creates external rules from a YAML spec in the Sift API.</p> <code>create_or_update_rule</code> <p>Create or update a rule via a RuleConfig. The config must contain a rule_client_key or an exception will be raised.</p> <code>create_or_update_rules</code> <p>Create or update a list of rules via a list of RuleConfigs.</p> <code>detach_asset</code> <p>Disassociates a rule from an asset by name. The asset must already exist in the Sift API.</p> <code>get_rule</code> <p>Get a rule by rule id or client key. Returns a RuleConfig if the rule exists, otherwise None.</p> <code>load_rules_from_yaml</code> <p>Loads rules from a YAML spec, and creates or updates the rules in the Sift API.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.attach_asset","title":"attach_asset","text":"<pre><code>attach_asset(\n    rule: Union[str, RuleConfig], asset_names: List[str]\n) -&gt; RuleConfig\n</code></pre> <p>Associates a rule with an asset by name. The asset must already exist in the Sift API. The provided rule may either be a rule client key, rule id, or a RuleConfig.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.create_external_rules","title":"create_external_rules","text":"<pre><code>create_external_rules(\n    configs: List[RuleConfig],\n) -&gt; List[RuleIdentifier]\n</code></pre> <p>Create external rules via RuleConfigs. The configs must have is_external set to True or an exception will be raised. rule_client_key must be empty.</p> PARAMETER DESCRIPTION <code>configs</code> <p>The list of RuleConfigs to create as external rules.</p> <p> TYPE: <code>List[RuleConfig]</code> </p> RETURNS DESCRIPTION <code>List[RuleIdentifier]</code> <p>The list of RuleIdentifiers created.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.create_external_rules_from_yaml","title":"create_external_rules_from_yaml","text":"<pre><code>create_external_rules_from_yaml(\n    paths: List[Path],\n    named_expressions: Optional[Dict[str, str]] = None,\n) -&gt; List[RuleIdentifier]\n</code></pre> <p>Creates external rules from a YAML spec in the Sift API. For more on rule YAML definitions, see <code>sift_py.ingestion.config.yaml.spec.RuleYamlSpec</code>.</p> PARAMETER DESCRIPTION <code>paths</code> <p>The list of YAML paths to load.</p> <p> TYPE: <code>List[Path]</code> </p> <code>named_expressions</code> <p>The named expressions to substitute into the rules.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[RuleIdentifier]</code> <p>The loaded RuleConfigs as external rules.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.create_or_update_rule","title":"create_or_update_rule","text":"<pre><code>create_or_update_rule(config: RuleConfig)\n</code></pre> <p>Create or update a rule via a RuleConfig. The config must contain a rule_client_key or an exception will be raised. If a rule with the given client key already exists it will be updated, otherwise it will be created. See <code>sift_py.rule.config.RuleConfig</code> for more information on configuation parameters for rules.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.create_or_update_rules","title":"create_or_update_rules","text":"<pre><code>create_or_update_rules(rule_configs: List[RuleConfig])\n</code></pre> <p>Create or update a list of rules via a list of RuleConfigs. See <code>sift_py.rule.config.RuleConfig</code> for more information on configuation parameters for rules.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.detach_asset","title":"detach_asset","text":"<pre><code>detach_asset(\n    rule: Union[str, RuleConfig], asset_names: List[str]\n) -&gt; RuleConfig\n</code></pre> <p>Disassociates a rule from an asset by name. The asset must already exist in the Sift API. The provided rule may either be a rule client key, rule id, or a RuleConfig.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.get_rule","title":"get_rule","text":"<pre><code>get_rule(rule: str) -&gt; Optional[RuleConfig]\n</code></pre> <p>Get a rule by rule id or client key. Returns a RuleConfig if the rule exists, otherwise None.</p>"},{"location":"reference/sift_py/rule/service/#sift_py.rule.service.RuleService.load_rules_from_yaml","title":"load_rules_from_yaml","text":"<pre><code>load_rules_from_yaml(\n    paths: List[Path],\n    named_expressions: Optional[Dict[str, str]] = None,\n) -&gt; List[RuleConfig]\n</code></pre> <p>Loads rules from a YAML spec, and creates or updates the rules in the Sift API. For more on rule YAML definitions, see <code>sift_py.ingestion.config.yaml.spec.RuleYamlSpec</code>.</p> PARAMETER DESCRIPTION <code>paths</code> <p>The list of YAML paths to load.</p> <p> TYPE: <code>List[Path]</code> </p> <code>named_expressions</code> <p>The named expressions to substitute into the rules.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[RuleConfig]</code> <p>The loaded RuleConfigs.</p>"},{"location":"reference/sift_py/yaml/","title":"sift_py.yaml","text":""},{"location":"reference/sift_py/yaml/#sift_py.yaml","title":"sift_py.yaml","text":"MODULE DESCRIPTION <code>calculated_channels</code> <code>channel</code> <code>report_templates</code> <code>rule</code> <code>utils</code>"},{"location":"reference/sift_py/yaml/calculated_channels/","title":"sift_py.yaml.calculated_channels","text":""},{"location":"reference/sift_py/yaml/calculated_channels/#sift_py.yaml.calculated_channels","title":"sift_py.yaml.calculated_channels","text":"FUNCTION DESCRIPTION <code>load_calculated_channels</code> <p>Takes in a list of paths to YAML files which contains calculated channel configs and processes them into a list of</p>"},{"location":"reference/sift_py/yaml/calculated_channels/#sift_py.yaml.calculated_channels.load_calculated_channels","title":"load_calculated_channels","text":"<pre><code>load_calculated_channels(\n    paths: List[Path],\n) -&gt; List[CalculatedChannelConfig]\n</code></pre> <p>Takes in a list of paths to YAML files which contains calculated channel configs and processes them into a list of <code>CalculatedChannelConfig</code> objects. For more information on report templates see <code>sift_py.report_templates.config.CalculatedChannelConfig</code>.</p>"},{"location":"reference/sift_py/yaml/channel/","title":"sift_py.yaml.channel","text":""},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel","title":"sift_py.yaml.channel","text":"CLASS DESCRIPTION <code>ChannelBitFieldElementYamlSpec</code> <p>Formal spec that defines what a bit-field element should look like in YAML.</p> <code>ChannelConfigYamlSpec</code> <p>Formal spec that defines what a channel should look like in YAML.</p> <code>ChannelEnumTypeYamlSpec</code> <p>Formal spec that defines what a channel enum type should look like in YAML.</p>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelBitFieldElementYamlSpec","title":"ChannelBitFieldElementYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>Formal spec that defines what a bit-field element should look like in YAML.</p> ATTRIBUTE DESCRIPTION <code>bit_count</code> <p> TYPE: <code>int</code> </p> <code>index</code> <p> TYPE: <code>int</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.bit_count","title":"bit_count  <code>instance-attribute</code>","text":"<pre><code>bit_count: int\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.index","title":"index  <code>instance-attribute</code>","text":"<pre><code>index: int\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelBitFieldElementYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec","title":"ChannelConfigYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>Formal spec that defines what a channel should look like in YAML.</p> <p><code>name</code>: Name of channel. <code>description</code>: Optional channel description. <code>unit</code>: Unit of measurement. <code>component</code>: Name of component that channel belongs to. <code>data_type</code>: Type of the data associated with the channel. <code>enum_types</code>: Required if <code>data_type</code> is <code>enum.</code>bit_field_elements<code>: Required if</code>data_type<code>is</code>bit_field`.</p> ATTRIBUTE DESCRIPTION <code>bit_field_elements</code> <p> TYPE: <code>NotRequired[List[ChannelBitFieldElementYamlSpec]]</code> </p> <code>component</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>data_type</code> <p> TYPE: <code>Union[Literal['double'], Literal['string'], Literal['enum'], Literal['bit_field'], Literal['bool'], Literal['float'], Literal['int32'], Literal['int64'], Literal['uint32'], Literal['uint64']]</code> </p> <code>description</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>enum_types</code> <p> TYPE: <code>NotRequired[List[ChannelEnumTypeYamlSpec]]</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>unit</code> <p> TYPE: <code>NotRequired[str]</code> </p>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.bit_field_elements","title":"bit_field_elements  <code>instance-attribute</code>","text":"<pre><code>bit_field_elements: NotRequired[\n    List[ChannelBitFieldElementYamlSpec]\n]\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.component","title":"component  <code>instance-attribute</code>","text":"<pre><code>component: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.data_type","title":"data_type  <code>instance-attribute</code>","text":"<pre><code>data_type: Union[\n    Literal[\"double\"],\n    Literal[\"string\"],\n    Literal[\"enum\"],\n    Literal[\"bit_field\"],\n    Literal[\"bool\"],\n    Literal[\"float\"],\n    Literal[\"int32\"],\n    Literal[\"int64\"],\n    Literal[\"uint32\"],\n    Literal[\"uint64\"],\n]\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.enum_types","title":"enum_types  <code>instance-attribute</code>","text":"<pre><code>enum_types: NotRequired[List[ChannelEnumTypeYamlSpec]]\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelConfigYamlSpec.unit","title":"unit  <code>instance-attribute</code>","text":"<pre><code>unit: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelEnumTypeYamlSpec","title":"ChannelEnumTypeYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>Formal spec that defines what a channel enum type should look like in YAML.</p> ATTRIBUTE DESCRIPTION <code>key</code> <p> TYPE: <code>int</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelEnumTypeYamlSpec.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: int\n</code></pre>"},{"location":"reference/sift_py/yaml/channel/#sift_py.yaml.channel.ChannelEnumTypeYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/","title":"sift_py.yaml.report_templates","text":""},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates","title":"sift_py.yaml.report_templates","text":"CLASS DESCRIPTION <code>ReportTemplateYamlSpec</code> <p>Formal spec for a report template.</p> FUNCTION DESCRIPTION <code>load_report_templates</code> <p>Takes in a list of paths to YAML files which contains report templates and processes them into a list of</p>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec","title":"ReportTemplateYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>Formal spec for a report template.</p> <p><code>name</code>: Name of the report template. <code>template_client_key</code>: Unique client key to identify the report template. <code>organization_id</code>: Organization ID that the report template belongs to. <code>tags</code>: Tags to associate with the report template. <code>description</code>: Description of the report template. <code>rule_client_keys</code>: List of rule client keys associated with the report template. <code>archived_date</code>: Date when the report template was archived. Setting this field   will archive the report template, and unsetting it will unarchive the report template.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>NotRequired[datetime]</code> </p> <code>description</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>rule_client_keys</code> <p> TYPE: <code>List[str]</code> </p> <code>tags</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>template_client_key</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: NotRequired[datetime]\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.rule_client_keys","title":"rule_client_keys  <code>instance-attribute</code>","text":"<pre><code>rule_client_keys: List[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.ReportTemplateYamlSpec.template_client_key","title":"template_client_key  <code>instance-attribute</code>","text":"<pre><code>template_client_key: str\n</code></pre>"},{"location":"reference/sift_py/yaml/report_templates/#sift_py.yaml.report_templates.load_report_templates","title":"load_report_templates","text":"<pre><code>load_report_templates(\n    paths: List[Path],\n) -&gt; List[ReportTemplateConfig]\n</code></pre> <p>Takes in a list of paths to YAML files which contains report templates and processes them into a list of <code>ReportTemplateConfig</code> objects. For more information on report templates see <code>sift_py.report_templates.config.ReportTemplateConfig</code>.</p>"},{"location":"reference/sift_py/yaml/rule/","title":"sift_py.yaml.rule","text":""},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule","title":"sift_py.yaml.rule","text":"CLASS DESCRIPTION <code>NamedExpressionYamlSpec</code> <p>A named expression. This class is the formal definition of what a named expression</p> <code>RuleModuleYamlSpec</code> <p>The formal definition of what a rule module looks like in YAML.</p> <code>RuleYamlSpec</code> <p>The formal definition of what a single rule looks like in YAML.</p> FUNCTION DESCRIPTION <code>load_named_expression_modules</code> <p>Takes in a list of paths to YAML files which contains named expressions and processes them into a <code>dict</code>.</p> <code>load_rule_modules</code> <p>Takes in a list of paths which may either be directories or files containing rule module YAML files,</p>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.NamedExpressionYamlSpec","title":"NamedExpressionYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>A named expression. This class is the formal definition of what a named expression should look like in YAML. The value of <code>name</code> may contain a mix of channel references and channel identifiers.</p> <p>For a formal definition of channel references and channel identifiers see the following: <code>sift_py.ingestion.config.yaml.spec.RuleYamlSpec</code>.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.NamedExpressionYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleModuleYamlSpec","title":"RuleModuleYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>The formal definition of what a rule module looks like in YAML.</p> <p><code>rules</code>: A list of rules that belong to the module.</p> ATTRIBUTE DESCRIPTION <code>rules</code> <p> TYPE: <code>List[RuleYamlSpec]</code> </p>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleModuleYamlSpec.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules: List[RuleYamlSpec]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec","title":"RuleYamlSpec","text":"<p>               Bases: <code>TypedDict</code></p> <p>The formal definition of what a single rule looks like in YAML.</p> <p><code>name</code>: Name of the rule. <code>rule_client_key</code>: User-defined string-key that uniquely identifies this rule config. <code>description</code>: Description of rule. <code>expression</code>:     Either an expression-string or a <code>sift_py.ingestion.config.yaml.spec.NamedExpressionYamlSpec</code> referencing a named expression. <code>type</code>: Determines the action to perform if a rule gets evaluated to true. <code>assignee</code>: If <code>type</code> is <code>review</code>, determines who to notify. Expects an email. <code>tags</code>: Tags to associate with the rule. <code>channel_references</code>: A list of channel references that maps to an actual channel. More below. <code>contextual_channels</code>: A list of channel configs that provide context but aren't directly used in the expression. <code>sub_expressions</code>: A list of sub-expressions which is a mapping of place-holders to sub-expressions. Only used if using named expressions. <code>asset_names</code>: A list of asset names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config. <code>tag_names</code>: A list of tag names that this rule should be applied to. ONLY VALID if defining rules outside of a telemetry config.</p> <p>Channel references: A channel reference is a string containing a numerical value prefixed with \"$\". Examples include \"$1\", \"$2\", \"$11\", and so on. The channel reference is mapped to an actual channel config. In YAML it would look something like this:</p> <pre><code>channel_references:\n  - $1: *vehicle_state_channel\n  - $2: *voltage_channel\ncontextual_channels:\n  - name: log\n</code></pre> <p>Sub-expressions: A sub-expression is made up of two components: A reference and the actual sub-expression. The sub-expression reference is a string with a \"$\" prepended to another string comprised of characters in the following character set: <code>[a-zA-Z0-9_]</code>. This reference should be mapped to the actual sub-expression. For example, say you have kinematic equations in <code>kinematics.yml</code>, and the equation you're interested in using looks like the following:</p> <pre><code>kinetic_energy_gt:\n  0.5 * $mass * $1 * $1 &gt; $threshold\n</code></pre> <p>To properly use <code>kinetic_energy_gt</code> in your rule, it would look like the following:</p> <pre><code>rules:\n  - name: kinetic_energy\n    description: Tracks high energy output while in motion\n    type: review\n    assignee: bob@example.com\n    expression:\n      name: kinetic_energy_gt\n    channel_references:\n      - $1: *velocity_channel\n    sub_expressions:\n      - $mass: 10\n      - $threshold: 470\n    tags:\n        - nostromo\n</code></pre> ATTRIBUTE DESCRIPTION <code>asset_names</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>assignee</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>channel_references</code> <p> TYPE: <code>NotRequired[List[Dict[str, ChannelConfigYamlSpec]]]</code> </p> <code>contextual_channels</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>description</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>expression</code> <p> TYPE: <code>Union[str, NamedExpressionYamlSpec]</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>rule_client_key</code> <p> TYPE: <code>NotRequired[str]</code> </p> <code>sub_expressions</code> <p> TYPE: <code>NotRequired[List[Dict[str, str]]]</code> </p> <code>tag_names</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>tags</code> <p> TYPE: <code>NotRequired[List[str]]</code> </p> <code>type</code> <p> TYPE: <code>Union[Literal['phase'], Literal['review']]</code> </p>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.asset_names","title":"asset_names  <code>instance-attribute</code>","text":"<pre><code>asset_names: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.assignee","title":"assignee  <code>instance-attribute</code>","text":"<pre><code>assignee: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: NotRequired[\n    List[Dict[str, ChannelConfigYamlSpec]]\n]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.contextual_channels","title":"contextual_channels  <code>instance-attribute</code>","text":"<pre><code>contextual_channels: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: Union[str, NamedExpressionYamlSpec]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.rule_client_key","title":"rule_client_key  <code>instance-attribute</code>","text":"<pre><code>rule_client_key: NotRequired[str]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.sub_expressions","title":"sub_expressions  <code>instance-attribute</code>","text":"<pre><code>sub_expressions: NotRequired[List[Dict[str, str]]]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.tag_names","title":"tag_names  <code>instance-attribute</code>","text":"<pre><code>tag_names: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: NotRequired[List[str]]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.RuleYamlSpec.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Union[Literal['phase'], Literal['review']]\n</code></pre>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.load_named_expression_modules","title":"load_named_expression_modules","text":"<pre><code>load_named_expression_modules(\n    paths: List[Path],\n) -&gt; Dict[str, str]\n</code></pre> <p>Takes in a list of paths to YAML files which contains named expressions and processes them into a <code>dict</code>. The key is the name of the expression and the value is the expression itself. For more information on named expression modules see <code>sift_py/yaml/rule.py</code>.</p>"},{"location":"reference/sift_py/yaml/rule/#sift_py.yaml.rule.load_rule_modules","title":"load_rule_modules","text":"<pre><code>load_rule_modules(paths: List[Path]) -&gt; List[RuleYamlSpec]\n</code></pre> <p>Takes in a list of paths which may either be directories or files containing rule module YAML files, and processes them into a <code>list</code>. For more information on rule modules see RulemoduleYamlSpec in <code>sift_py/yaml/rule.py</code>.</p>"},{"location":"reference/sift_py/yaml/utils/","title":"sift_py.yaml.utils","text":""},{"location":"reference/sift_py/yaml/utils/#sift_py.yaml.utils","title":"sift_py.yaml.utils","text":""},{"location":"reference/sift_client/","title":"sift_client","text":""},{"location":"reference/sift_client/#sift_client","title":"sift_client","text":"<p>Warning</p> <p>The Sift Client is experimental and is subject to change.</p>"},{"location":"reference/sift_client/#sift_client--sift-client-library","title":"Sift Client Library","text":"<p>This library provides a high-level Python client for interacting with Sift APIs. It offers both synchronous and asynchronous interfaces, strong type checking, and a Pythonic API design.</p>"},{"location":"reference/sift_client/#sift_client--installation","title":"Installation","text":"<pre><code>pip install sift-stack-py\n</code></pre>"},{"location":"reference/sift_client/#sift_client--getting-started","title":"Getting Started","text":""},{"location":"reference/sift_client/#sift_client--initializing-the-client","title":"Initializing the Client","text":"<p>You can initialize the Sift client with your API key and service URLs:</p> <pre><code>from sift_client import SiftClient\nfrom datetime import datetime\n\n# Initialize with individual parameters\nclient = SiftClient(\n    api_key=\"your-api-key\",\n    grpc_url=\"your-sift-grpc-url\",\n    rest_url=\"your-sift-rest-url\"\n)\n\n# Or use a connection configuration\nfrom sift_client.transport import SiftConnectionConfig\n\nconfig = SiftConnectionConfig(\n    api_key=\"your-api-key\",\n    grpc_url=\"your-sift-grpc-url\",\n    rest_url=\"your-sift-rest-url\"\n)\nclient = SiftClient(connection_config=config)\n</code></pre> <p>The <code>SiftConnectionConfig</code> provides access to additional configuration options such as <code>use_ssl</code> and <code>cert_via_openssl</code>.</p>"},{"location":"reference/sift_client/#sift_client--using-synchronous-and-asynchronous-apis","title":"Using Synchronous and Asynchronous APIs","text":"<p>The Sift client provides both synchronous and asynchronous versions of all APIs. You can choose the one that best fits your application's needs.</p>"},{"location":"reference/sift_client/#sift_client--synchronous-api","title":"Synchronous API","text":"<p>The synchronous API is perfect for scripts, notebooks, and applications that don't need asynchronous operation:</p> <pre><code># Get an asset by ID\nasset = client.assets.get(asset_id=\"asset123\")\n\n# List assets with filtering\nassets = client.assets.list_(\n    name_contains=\"example\",\n    created_after=datetime(2023, 1, 1),\n    include_archived=False\n)\n\n# Find a single asset matching criteria\nasset = client.assets.find(name=\"my-asset\")\n</code></pre>"},{"location":"reference/sift_client/#sift_client--asynchronous-api","title":"Asynchronous API","text":"<p>The asynchronous API is ideal for high-performance applications and services that need to make concurrent API calls:</p> <pre><code>import asyncio\n\n\nasync def get_asset_async():\n    # Get an asset by ID asynchronously\n    asset = await client.assets_async.get(asset_id=\"asset123\")\n\n    # Running Sync within async also works\n    some_other_asset = client.assets.get(asset_id=\"asset456\")\n\n    return asset\n\n\n# Run in an async context\nasset = asyncio.run(get_asset_async())\n</code></pre>"},{"location":"reference/sift_client/#sift_client--working-with-sift-types","title":"Working with Sift Types","text":"<p>Sift types (like <code>Asset</code>, <code>Run</code>, etc.) are immutable Pydantic models that provide a convenient interface for working with Sift resources.</p>"},{"location":"reference/sift_client/#sift_client--accessing-properties","title":"Accessing Properties","text":"<pre><code># Get an asset\nasset = client.assets.get(asset_id=\"asset123\")\n\n# Access properties\nprint(f\"Asset name: {asset.name}\")\nprint(f\"Created on: {asset.created_date}\")\nprint(f\"Tags: {', '.join(asset.tags)}\")\nprint(f\"Is archived: {asset.is_archived}\")\n</code></pre>"},{"location":"reference/sift_client/#sift_client--using-methods-on-sift-types","title":"Using Methods on Sift Types","text":"<p>Sift types have convenient methods for common operations. These methods use the synchronous API internally. Using these methods will update the instance in-place.</p> <pre><code># Get an asset\nasset = client.assets.get(asset_id=\"asset123\")\n\n# Archive the asset\nasset.archive(archive_runs=True)\n\n# Update the asset\nasset.update({\n    \"tags\": [\"updated\", \"example\"]\n})\n</code></pre> <p>Note: Type methods only work with the synchronous API. If you need to use the asynchronous API, you should use the resource APIs directly.</p>"},{"location":"reference/sift_client/#sift_client--creating-update-models","title":"Creating Update Models","text":"<p>For more complex updates, you can create update models (instead of a key-value dictionary):</p> <pre><code>from sift_client.types.asset import AssetUpdate\n\n# Create an update model\nupdate = AssetUpdate(tags=[\"new\", \"tags\"])\n\n# Apply the update\nasset = client.assets.update(asset=\"asset123\", update=update)\n\n# Or using the asset method\nasset = client.assets.get(asset_id=\"asset123\").update(update)\n</code></pre>"},{"location":"reference/sift_client/#sift_client--advanced-usage","title":"Advanced Usage","text":""},{"location":"reference/sift_client/#sift_client--working-with-tags","title":"Working with Tags","text":"<p>Tags are a powerful way to organize and filter your assets:</p> <pre><code># Add tags when updating an asset\nasset.update({\n    \"tags\": [\"production\", \"model-v1\", \"trained\"]\n})\n\n# Filter assets by tags\nproduction_assets = client.assets.list_(\n    tags=[\"production\"]\n)\n</code></pre>"},{"location":"reference/sift_client/#sift_client--filtering-assets","title":"Filtering Assets","text":"<p>The client provides various ways to filter different Sift types:</p> <pre><code># Filter by name (exact match)\nassets = client.assets.list_(name=\"my-model\")\n\n# Filter by name (contains)\nassets = client.assets.list_(name_contains=\"model\")\n\n# Filter by name (regex)\nassets = client.assets.list_(name_regex=\"model-v[0-9]+\")\n\n# Filter by creation date\nassets = client.assets.list_(\n    created_after=datetime(2023, 1, 1),\n    created_before=datetime(2023, 12, 31)\n)\n\n# Filter by modification date\nassets = client.assets.list_(\n    modified_after=datetime(2023, 6, 1)\n)\n\n# Include archived assets\nall_assets = client.assets.list_(include_archived=True)\n\n# Limit the number of results\nrecent_assets = client.assets.list_(\n    limit=10,\n    order_by=\"modified_date desc\"\n)\n</code></pre> MODULE DESCRIPTION <code>client</code> <code>errors</code> <code>resources</code> <code>transport</code> <code>types</code> <code>util</code> <p>Utility modules for the sift_client package.</p> CLASS DESCRIPTION <code>SiftClient</code> <p>SiftClient is a high-level client for interacting with Sift's APIs.</p> <code>SiftConnectionConfig</code> <p>Configuration for Grpc and Rest cnnections.</p>"},{"location":"reference/sift_client/#sift_client.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = ['SiftClient', 'SiftConnectionConfig']\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftClient","title":"SiftClient","text":"<pre><code>SiftClient(\n    api_key: str | None = None,\n    grpc_url: str | None = None,\n    rest_url: str | None = None,\n    connection_config: SiftConnectionConfig | None = None,\n)\n</code></pre> <p>               Bases: <code>WithGrpcClient</code>, <code>WithRestClient</code></p> <p>SiftClient is a high-level client for interacting with Sift's APIs.</p> <p>It provides both synchronous and asynchronous interfaces, strong type checking, and a Pythonic API design.</p> <p>Warning</p> <p>The Sift Client is experimental and is subject to change.</p> <p>Initialize the SiftClient with specific connection parameters or a connection_config.</p> PARAMETER DESCRIPTION <code>api_key</code> <p>The Sift API key for authentication.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>grpc_url</code> <p>The Sift gRPC API URL.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>rest_url</code> <p>The Sift REST API URL.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>connection_config</code> <p>A SiftConnectionConfig object to configure the connection behavior of the SiftClient.</p> <p> TYPE: <code>SiftConnectionConfig | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>assets</code> <p>Instance of the Assets API for making synchronous requests.</p> <p> TYPE: <code>AssetsAPI</code> </p> <code>async_</code> <p>Accessor for the asynchronous APIs. All asynchronous APIs are available as attributes on this accessor.</p> <p> TYPE: <code>AsyncAPIs</code> </p> <code>calculated_channels</code> <p>Instance of the Calculated Channels API for making synchronous requests.</p> <p> TYPE: <code>CalculatedChannelsAPI</code> </p> <code>grpc_client</code> <p>The gRPC client used by the SiftClient for making gRPC API calls.</p> <p> TYPE: <code>GrpcClient</code> </p> <code>ping</code> <p>Instance of the Ping API for making synchronous requests.</p> <p> TYPE: <code>PingAPI</code> </p> <code>rest_client</code> <p>The REST client used by the SiftClient for making REST API calls.</p> <p> TYPE: <code>RestClient</code> </p> <code>runs</code> <p>Instance of the Runs API for making synchronous requests.</p> <p> TYPE: <code>RunsAPI</code> </p>"},{"location":"reference/sift_client/#sift_client.SiftClient.assets","title":"assets  <code>instance-attribute</code>","text":"<pre><code>assets: AssetsAPI = AssetsAPI(self)\n</code></pre> <p>Instance of the Assets API for making synchronous requests.</p>"},{"location":"reference/sift_client/#sift_client.SiftClient.async_","title":"async_  <code>instance-attribute</code>","text":"<pre><code>async_: AsyncAPIs = AsyncAPIs(\n    ping=PingAPIAsync(self),\n    assets=AssetsAPIAsync(self),\n    calculated_channels=CalculatedChannelsAPIAsync(self),\n    runs=RunsAPIAsync(self),\n)\n</code></pre> <p>Accessor for the asynchronous APIs. All asynchronous APIs are available as attributes on this accessor.</p>"},{"location":"reference/sift_client/#sift_client.SiftClient.calculated_channels","title":"calculated_channels  <code>instance-attribute</code>","text":"<pre><code>calculated_channels: CalculatedChannelsAPI = (\n    CalculatedChannelsAPI(self)\n)\n</code></pre> <p>Instance of the Calculated Channels API for making synchronous requests.</p>"},{"location":"reference/sift_client/#sift_client.SiftClient.grpc_client","title":"grpc_client  <code>property</code>","text":"<pre><code>grpc_client: GrpcClient\n</code></pre> <p>The gRPC client used by the SiftClient for making gRPC API calls.</p>"},{"location":"reference/sift_client/#sift_client.SiftClient.ping","title":"ping  <code>instance-attribute</code>","text":"<pre><code>ping: PingAPI = PingAPI(self)\n</code></pre> <p>Instance of the Ping API for making synchronous requests.</p>"},{"location":"reference/sift_client/#sift_client.SiftClient.rest_client","title":"rest_client  <code>property</code>","text":"<pre><code>rest_client: RestClient\n</code></pre> <p>The REST client used by the SiftClient for making REST API calls.</p>"},{"location":"reference/sift_client/#sift_client.SiftClient.runs","title":"runs  <code>instance-attribute</code>","text":"<pre><code>runs: RunsAPI = RunsAPI(self)\n</code></pre> <p>Instance of the Runs API for making synchronous requests.</p>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig","title":"SiftConnectionConfig","text":"<pre><code>SiftConnectionConfig(\n    grpc_url: str,\n    rest_url: str,\n    api_key: str,\n    use_ssl: bool = False,\n    cert_via_openssl: bool = False,\n)\n</code></pre> <p>Configuration for Grpc and Rest cnnections.</p> METHOD DESCRIPTION <code>get_grpc_config</code> <code>get_rest_config</code> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>grpc_url</code> <p> </p> <code>rest_url</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.grpc_url","title":"grpc_url  <code>instance-attribute</code>","text":"<pre><code>grpc_url = grpc_url\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.rest_url","title":"rest_url  <code>instance-attribute</code>","text":"<pre><code>rest_url = rest_url\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.get_grpc_config","title":"get_grpc_config","text":"<pre><code>get_grpc_config()\n</code></pre>"},{"location":"reference/sift_client/#sift_client.SiftConnectionConfig.get_rest_config","title":"get_rest_config","text":"<pre><code>get_rest_config()\n</code></pre>"},{"location":"reference/sift_client/client/","title":"sift_client.client","text":""},{"location":"reference/sift_client/client/#sift_client.client","title":"sift_client.client","text":"CLASS DESCRIPTION <code>SiftClient</code> <p>SiftClient is a high-level client for interacting with Sift's APIs.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient","title":"SiftClient","text":"<pre><code>SiftClient(\n    api_key: str | None = None,\n    grpc_url: str | None = None,\n    rest_url: str | None = None,\n    connection_config: SiftConnectionConfig | None = None,\n)\n</code></pre> <p>               Bases: <code>WithGrpcClient</code>, <code>WithRestClient</code></p> <p>SiftClient is a high-level client for interacting with Sift's APIs.</p> <p>It provides both synchronous and asynchronous interfaces, strong type checking, and a Pythonic API design.</p> <p>Warning</p> <p>The Sift Client is experimental and is subject to change.</p> <p>Initialize the SiftClient with specific connection parameters or a connection_config.</p> PARAMETER DESCRIPTION <code>api_key</code> <p>The Sift API key for authentication.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>grpc_url</code> <p>The Sift gRPC API URL.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>rest_url</code> <p>The Sift REST API URL.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>connection_config</code> <p>A SiftConnectionConfig object to configure the connection behavior of the SiftClient.</p> <p> TYPE: <code>SiftConnectionConfig | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>assets</code> <p>Instance of the Assets API for making synchronous requests.</p> <p> TYPE: <code>AssetsAPI</code> </p> <code>async_</code> <p>Accessor for the asynchronous APIs. All asynchronous APIs are available as attributes on this accessor.</p> <p> TYPE: <code>AsyncAPIs</code> </p> <code>calculated_channels</code> <p>Instance of the Calculated Channels API for making synchronous requests.</p> <p> TYPE: <code>CalculatedChannelsAPI</code> </p> <code>grpc_client</code> <p>The gRPC client used by the SiftClient for making gRPC API calls.</p> <p> TYPE: <code>GrpcClient</code> </p> <code>ping</code> <p>Instance of the Ping API for making synchronous requests.</p> <p> TYPE: <code>PingAPI</code> </p> <code>rest_client</code> <p>The REST client used by the SiftClient for making REST API calls.</p> <p> TYPE: <code>RestClient</code> </p> <code>runs</code> <p>Instance of the Runs API for making synchronous requests.</p> <p> TYPE: <code>RunsAPI</code> </p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.assets","title":"assets  <code>instance-attribute</code>","text":"<pre><code>assets: AssetsAPI = AssetsAPI(self)\n</code></pre> <p>Instance of the Assets API for making synchronous requests.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.async_","title":"async_  <code>instance-attribute</code>","text":"<pre><code>async_: AsyncAPIs = AsyncAPIs(\n    ping=PingAPIAsync(self),\n    assets=AssetsAPIAsync(self),\n    calculated_channels=CalculatedChannelsAPIAsync(self),\n    runs=RunsAPIAsync(self),\n)\n</code></pre> <p>Accessor for the asynchronous APIs. All asynchronous APIs are available as attributes on this accessor.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.calculated_channels","title":"calculated_channels  <code>instance-attribute</code>","text":"<pre><code>calculated_channels: CalculatedChannelsAPI = (\n    CalculatedChannelsAPI(self)\n)\n</code></pre> <p>Instance of the Calculated Channels API for making synchronous requests.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.grpc_client","title":"grpc_client  <code>property</code>","text":"<pre><code>grpc_client: GrpcClient\n</code></pre> <p>The gRPC client used by the SiftClient for making gRPC API calls.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.ping","title":"ping  <code>instance-attribute</code>","text":"<pre><code>ping: PingAPI = PingAPI(self)\n</code></pre> <p>Instance of the Ping API for making synchronous requests.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.rest_client","title":"rest_client  <code>property</code>","text":"<pre><code>rest_client: RestClient\n</code></pre> <p>The REST client used by the SiftClient for making REST API calls.</p>"},{"location":"reference/sift_client/client/#sift_client.client.SiftClient.runs","title":"runs  <code>instance-attribute</code>","text":"<pre><code>runs: RunsAPI = RunsAPI(self)\n</code></pre> <p>Instance of the Runs API for making synchronous requests.</p>"},{"location":"reference/sift_client/errors/","title":"sift_client.errors","text":""},{"location":"reference/sift_client/errors/#sift_client.errors","title":"sift_client.errors","text":"CLASS DESCRIPTION <code>SiftExperimentalWarning</code> <p>Warning for experimental features.</p> <code>SiftWarning</code> <p>Base warning for Sift generated warnings.</p>"},{"location":"reference/sift_client/errors/#sift_client.errors.SiftExperimentalWarning","title":"SiftExperimentalWarning","text":"<p>               Bases: <code>SiftWarning</code></p> <p>Warning for experimental features.</p>"},{"location":"reference/sift_client/errors/#sift_client.errors.SiftWarning","title":"SiftWarning","text":"<p>               Bases: <code>UserWarning</code></p> <p>Base warning for Sift generated warnings.</p>"},{"location":"reference/sift_client/resources/","title":"sift_client.resources","text":""},{"location":"reference/sift_client/resources/#sift_client.resources","title":"sift_client.resources","text":"MODULE DESCRIPTION <code>assets</code> <code>calculated_channels</code> <code>ping</code> <code>runs</code> <code>sync_stubs</code> CLASS DESCRIPTION <code>AssetsAPI</code> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <code>AssetsAPIAsync</code> <p>High-level API for interacting with assets.</p> <code>CalculatedChannelsAPI</code> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <code>CalculatedChannelsAPIAsync</code> <p>High-level API for interacting with calculated channels.</p> <code>PingAPI</code> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <code>PingAPIAsync</code> <p>High-level API for performing health checks.</p> <code>RunsAPI</code> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p> <code>RunsAPIAsync</code> <p>High-level API for interacting with runs.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"AssetsAPIAsync\",\n    \"CalculatedChannelsAPIAsync\",\n    \"PingAPIAsync\",\n    \"RunsAPIAsync\",\n    \"AssetsAPI\",\n    \"CalculatedChannelsAPI\",\n    \"PingAPI\",\n    \"RunsAPI\",\n]\n</code></pre>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI","title":"AssetsAPI","text":"<pre><code>AssetsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.archive","title":"archive","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.get","title":"get","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.list_","title":"list_","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPI.update","title":"update","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync","title":"AssetsAPIAsync","text":"<pre><code>AssetsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.list_","title":"list_  <code>async</code>","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.AssetsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI","title":"CalculatedChannelsAPI","text":"<pre><code>CalculatedChannelsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.archive","title":"archive","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.create","title":"create","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\",\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.get","title":"get","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.list_versions","title":"list_versions","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPI.update","title":"update","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync","title":"CalculatedChannelsAPIAsync","text":"<pre><code>CalculatedChannelsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\",\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.list_versions","title":"list_versions  <code>async</code>","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.CalculatedChannelsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPI","title":"PingAPI","text":"<pre><code>PingAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPI.ping","title":"ping","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPIAsync","title":"PingAPIAsync","text":"<pre><code>PingAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.PingAPIAsync.ping","title":"ping  <code>async</code>","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI","title":"RunsAPI","text":"<pre><code>RunsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.create","title":"create","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.create_automatic_association_for_assets","title":"create_automatic_association_for_assets","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.delete","title":"delete","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.get","title":"get","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.stop","title":"stop","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.stop_run","title":"stop_run","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPI.update","title":"update","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync","title":"RunsAPIAsync","text":"<pre><code>RunsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.create_automatic_association_for_assets","title":"create_automatic_association_for_assets  <code>async</code>","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.stop","title":"stop  <code>async</code>","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.stop_run","title":"stop_run  <code>async</code>","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/#sift_client.resources.RunsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/resources/assets/","title":"sift_client.resources.assets","text":""},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets","title":"sift_client.resources.assets","text":"CLASS DESCRIPTION <code>AssetsAPIAsync</code> <p>High-level API for interacting with assets.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync","title":"AssetsAPIAsync","text":"<pre><code>AssetsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.list_","title":"list_  <code>async</code>","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/assets/#sift_client.resources.assets.AssetsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/calculated_channels/","title":"sift_client.resources.calculated_channels","text":""},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels","title":"sift_client.resources.calculated_channels","text":"CLASS DESCRIPTION <code>CalculatedChannelsAPIAsync</code> <p>High-level API for interacting with calculated channels.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync","title":"CalculatedChannelsAPIAsync","text":"<pre><code>CalculatedChannelsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.archive","title":"archive  <code>async</code>","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\",\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.list_versions","title":"list_versions  <code>async</code>","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/calculated_channels/#sift_client.resources.calculated_channels.CalculatedChannelsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/ping/","title":"sift_client.resources.ping","text":""},{"location":"reference/sift_client/resources/ping/#sift_client.resources.ping","title":"sift_client.resources.ping","text":"CLASS DESCRIPTION <code>PingAPIAsync</code> <p>High-level API for performing health checks.</p>"},{"location":"reference/sift_client/resources/ping/#sift_client.resources.ping.PingAPIAsync","title":"PingAPIAsync","text":"<pre><code>PingAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/ping/#sift_client.resources.ping.PingAPIAsync.ping","title":"ping  <code>async</code>","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/runs/","title":"sift_client.resources.runs","text":""},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs","title":"sift_client.resources.runs","text":"CLASS DESCRIPTION <code>RunsAPIAsync</code> <p>High-level API for interacting with runs.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync","title":"RunsAPIAsync","text":"<pre><code>RunsAPIAsync(sift_client: 'SiftClient')\n</code></pre> <p>               Bases: <code>ResourceBase</code></p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.create","title":"create  <code>async</code>","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.create_automatic_association_for_assets","title":"create_automatic_association_for_assets  <code>async</code>","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.find","title":"find  <code>async</code>","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.get","title":"get  <code>async</code>","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.list","title":"list  <code>async</code>","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.stop","title":"stop  <code>async</code>","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.stop_run","title":"stop_run  <code>async</code>","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/runs/#sift_client.resources.runs.RunsAPIAsync.update","title":"update  <code>async</code>","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/","title":"sift_client.resources.sync_stubs","text":""},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs","title":"sift_client.resources.sync_stubs","text":"CLASS DESCRIPTION <code>AssetsAPI</code> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <code>CalculatedChannelsAPI</code> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <code>PingAPI</code> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <code>RunsAPI</code> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI","title":"AssetsAPI","text":"<pre><code>AssetsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>AssetsAPIAsync</code>.</p> <p>High-level API for interacting with assets.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the AssetsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Asset class from the low-level wrapper, which is a user-friendly representation of an asset using standard Python data structures and types.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive an asset.</p> <code>find</code> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found,</p> <code>get</code> <p>Get an Asset.</p> <code>list_</code> <p>List assets with optional filtering.</p> <code>update</code> <p>Update an Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.archive","title":"archive","text":"<pre><code>archive(\n    asset: str | Asset, *, archive_runs: bool = False\n) -&gt; Asset\n</code></pre> <p>Archive an asset.</p> <p>Args:      asset: The Asset or asset ID to archive.      archive_runs: If True, archive all Runs associated with the Asset.</p> <p>Returns:      The archived Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Asset | None\n</code></pre> <p>Find a single asset matching the given query. Takes the same arguments as <code>list_</code>. If more than one asset is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list_</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Asset | None</code> <p>The Asset found or None.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.get","title":"get","text":"<pre><code>get(\n    *, asset_id: str | None = None, name: str | None = None\n) -&gt; Asset\n</code></pre> <p>Get an Asset.</p> PARAMETER DESCRIPTION <code>asset_id</code> <p>The ID of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.list_","title":"list_","text":"<pre><code>list_(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_ids: list[str] | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    tags: list[str] | None = None,\n    metadata: list[Any] | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; list[Asset]\n</code></pre> <p>List assets with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the asset.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter assets by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>List of asset IDs to filter by.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Assets created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Assets last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Assets with these tags.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter assets.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved assets. # TODO: tooling for this?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many assets to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Asset]</code> <p>A list of Assets that matches the filter.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.AssetsAPI.update","title":"update","text":"<pre><code>update(\n    asset: str | Asset, update: AssetUpdate | dict\n) -&gt; Asset\n</code></pre> <p>Update an Asset.</p> PARAMETER DESCRIPTION <code>asset</code> <p>The Asset or asset ID to update.</p> <p> TYPE: <code>str | Asset</code> </p> <code>update</code> <p>Updates to apply to the Asset.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Asset</code> <p>The updated Asset.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI","title":"CalculatedChannelsAPI","text":"<pre><code>CalculatedChannelsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>CalculatedChannelsAPIAsync</code>.</p> <p>High-level API for interacting with calculated channels.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the CalculatedChannelsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the CalculatedChannel class from the low-level wrapper, which is a user-friendly representation of a calculated channel using standard Python data structures and types.</p> <p>Initialize the CalculatedChannelsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>archive</code> <p>Archive a Calculated Channel.</p> <code>create</code> <p>Create a calculated channel.</p> <code>find</code> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches.</p> <code>get</code> <p>Get a Calculated Channel.</p> <code>list</code> <p>List calculated channels with optional filtering.</p> <code>list_versions</code> <p>List versions of a calculated channel.</p> <code>update</code> <p>Update a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.archive","title":"archive","text":"<pre><code>archive(\n    *, calculated_channel: str | CalculatedChannel\n) -&gt; None\n</code></pre> <p>Archive a Calculated Channel.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.create","title":"create","text":"<pre><code>create(\n    *,\n    name: str,\n    expression: str,\n    channel_references: List[ChannelReference],\n    description: str = \"\",\n    units: str | None = None,\n    client_key: str | None = None,\n    asset_ids: List[str] | None = None,\n    tag_ids: List[str] | None = None,\n    all_assets: bool = False,\n    user_notes: str = \"\",\n) -&gt; CalculatedChannel\n</code></pre> <p>Create a calculated channel.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>expression</code> <p>The expression to calculate the value of the calculated channel.</p> <p> TYPE: <code>str</code> </p> <code>channel_references</code> <p>A list of channel references that are used in the expression.</p> <p> TYPE: <code>List[ChannelReference]</code> </p> <code>description</code> <p>The description of the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>units</code> <p>The units of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A user-defined unique identifier for the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_ids</code> <p>A list of asset IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>tag_ids</code> <p>A list of tag IDs to make the calculation available for.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>all_assets</code> <p>A flag that, when set to True, associates the calculated channel with all assets.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user_notes</code> <p>User notes for the calculated channel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The created CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If asset configuration is invalid.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; CalculatedChannel | None\n</code></pre> <p>Find a single calculated channel matching the given query. Takes the same arguments as <code>list</code> but handles checking for multiple matches. Will raise an error if multiple calculated channels are found.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel | None</code> <p>The CalculatedChannel found or None.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.get","title":"get","text":"<pre><code>get(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Get a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if using client_key and user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The CalculatedChannel.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    created_after: datetime | None = None,\n    created_before: datetime | None = None,\n    modified_after: datetime | None = None,\n    modified_before: datetime | None = None,\n    created_by: Any | None = None,\n    modified_by: Any | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    filter_query: str | None = None,\n    order_by: str | None = None,\n    limit: int | None = None,\n    organization_id: str | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List calculated channels with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter calculated channels by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>created_after</code> <p>Created after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>Created before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_after</code> <p>Modified after this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>modified_before</code> <p>Modified before this date.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>created_by</code> <p>Calculated channels created by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>modified_by</code> <p>Calculated channels last modified by this user.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name associated with the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_query</code> <p>Explicit CEL query to filter calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>How to order the retrieved calculated channels.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many calculated channels to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID (required if user belongs to multiple organizations).</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannels that matches the filter.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.list_versions","title":"list_versions","text":"<pre><code>list_versions(\n    *,\n    calculated_channel_id: str | None = None,\n    client_key: str | None = None,\n    organization_id: str | None = None,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    tag_id: str | None = None,\n    tag_name: str | None = None,\n    version: int | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[CalculatedChannel]\n</code></pre> <p>List versions of a calculated channel.</p> PARAMETER DESCRIPTION <code>calculated_channel_id</code> <p>The ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>The client key of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>The name of the calculated channel.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>The asset ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>The asset name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_id</code> <p>The tag ID of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tag_name</code> <p>The tag name of the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>version</code> <p>The version of the calculated channel.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived calculated channels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>organization_id</code> <p>The organization ID. Required if your user belongs to multiple organizations.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>order_by</code> <p>The field to order by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many versions to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[CalculatedChannel]</code> <p>A list of CalculatedChannel versions.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If neither calculated_channel_id nor client_key is provided.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.CalculatedChannelsAPI.update","title":"update","text":"<pre><code>update(\n    *,\n    calculated_channel: str | CalculatedChannel,\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update a Calculated Channel.</p> PARAMETER DESCRIPTION <code>calculated_channel</code> <p>The CalculatedChannel or id of the CalculatedChannel to update.</p> <p> TYPE: <code>str | CalculatedChannel</code> </p> <code>update</code> <p>Updates to apply to the CalculatedChannel.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>User notes for the update.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated CalculatedChannel.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.PingAPI","title":"PingAPI","text":"<pre><code>PingAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>PingAPIAsync</code>.</p> <p>High-level API for performing health checks.</p> <p>Initialize the AssetsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>ping</code> <p>Send a ping request to the server.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.PingAPI.ping","title":"ping","text":"<pre><code>ping() -&gt; str\n</code></pre> <p>Send a ping request to the server.</p> RETURNS DESCRIPTION <code>str</code> <p>The response from the server.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI","title":"RunsAPI","text":"<pre><code>RunsAPI(sift_client: 'SiftClient')\n</code></pre> <p>Sync counterpart to <code>RunsAPIAsync</code>.</p> <p>High-level API for interacting with runs.</p> <p>This class provides a Pythonic, notebook-friendly interface for interacting with the RunsAPI. It handles automatic handling of gRPC services, seamless type conversion, and clear error handling.</p> <p>All methods in this class use the Run class from the low-level wrapper, which is a user-friendly representation of a run using standard Python data structures and types.</p> <p>Initialize the RunsAPI.</p> PARAMETER DESCRIPTION <code>sift_client</code> <p>The Sift client to use.</p> <p> TYPE: <code>'SiftClient'</code> </p> METHOD DESCRIPTION <code>create</code> <p>Create a new run.</p> <code>create_automatic_association_for_assets</code> <p>Associate assets with a run for automatic data ingestion.</p> <code>delete</code> <p>Delete a run.</p> <code>find</code> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found,</p> <code>get</code> <p>Get a Run.</p> <code>list</code> <p>List runs with optional filtering.</p> <code>stop</code> <p>Stop a run by setting its stop time to the current time.</p> <code>stop_run</code> <p>Stop a run by setting its stop time to the current time.</p> <code>update</code> <p>Update a Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.create","title":"create","text":"<pre><code>create(\n    name: str,\n    description: str,\n    tags: List[str] | None = None,\n    start_time: datetime | None = None,\n    stop_time: datetime | None = None,\n    organization_id: str | None = None,\n    client_key: str | None = None,\n    metadata: dict[str, str | float | bool] | None = None,\n) -&gt; Run\n</code></pre> <p>Create a new run.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the run.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the run.</p> <p> TYPE: <code>str</code> </p> <code>tags</code> <p>Tags to associate with the run.</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>start_time</code> <p>The start time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>stop_time</code> <p>The stop time of the run.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> <code>organization_id</code> <p>The organization ID.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>A unique client key for the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>metadata</code> <p>Metadata values for the run.</p> <p> TYPE: <code>dict[str, str | float | bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The created Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.create_automatic_association_for_assets","title":"create_automatic_association_for_assets","text":"<pre><code>create_automatic_association_for_assets(\n    run: str | Run, asset_names: List[str]\n) -&gt; None\n</code></pre> <p>Associate assets with a run for automatic data ingestion.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID.</p> <p> TYPE: <code>str | Run</code> </p> <code>asset_names</code> <p>List of asset names to associate.</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.delete","title":"delete","text":"<pre><code>delete(*, run: str | Run) -&gt; None\n</code></pre> <p>Delete a run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to delete.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.find","title":"find","text":"<pre><code>find(**kwargs) -&gt; Run | None\n</code></pre> <p>Find a single run matching the given query. Takes the same arguments as <code>list</code>. If more than one run is found, raises an error.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments to pass to <code>list</code>.</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Run | None</code> <p>The Run found or None.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.get","title":"get","text":"<pre><code>get(*, run_id: str) -&gt; Run\n</code></pre> <p>Get a Run.</p> PARAMETER DESCRIPTION <code>run_id</code> <p>The ID of the run.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The Run.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.list","title":"list","text":"<pre><code>list(\n    *,\n    name: str | None = None,\n    name_contains: str | None = None,\n    name_regex: str | Pattern | None = None,\n    description: str | None = None,\n    description_contains: str | None = None,\n    duration_seconds: int | None = None,\n    client_key: str | None = None,\n    asset_id: str | None = None,\n    asset_name: str | None = None,\n    created_by_user_id: str | None = None,\n    is_stopped: bool | None = None,\n    include_archived: bool = False,\n    order_by: str | None = None,\n    limit: int | None = None,\n) -&gt; List[Run]\n</code></pre> <p>List runs with optional filtering.</p> PARAMETER DESCRIPTION <code>name</code> <p>Exact name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_contains</code> <p>Partial name of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>name_regex</code> <p>Regular expression string to filter runs by name.</p> <p> TYPE: <code>str | Pattern | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Exact description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>description_contains</code> <p>Partial description of the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>duration_seconds</code> <p>Duration of the run in seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>client_key</code> <p>Client key to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_id</code> <p>Asset ID to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>Asset name to filter by.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>created_by_user_id</code> <p>User ID who created the run.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_stopped</code> <p>Whether the run is stopped.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>include_archived</code> <p>Whether to include archived runs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order_by</code> <p>How to order the retrieved runs.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>How many runs to retrieve. If None, retrieves all matches.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Run]</code> <p>A list of Runs that matches the filter.</p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.stop","title":"stop","text":"<pre><code>stop(*, run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.stop_run","title":"stop_run","text":"<pre><code>stop_run(run: str | Run) -&gt; None\n</code></pre> <p>Stop a run by setting its stop time to the current time.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to stop.</p> <p> TYPE: <code>str | Run</code> </p>"},{"location":"reference/sift_client/resources/sync_stubs/#sift_client.resources.sync_stubs.RunsAPI.update","title":"update","text":"<pre><code>update(run: str | Run, update: RunUpdate | dict) -&gt; Run\n</code></pre> <p>Update a Run.</p> PARAMETER DESCRIPTION <code>run</code> <p>The Run or run ID to update.</p> <p> TYPE: <code>str | Run</code> </p> <code>update</code> <p>Updates to apply to the Run.</p> <p> TYPE: <code>RunUpdate | dict</code> </p> RETURNS DESCRIPTION <code>Run</code> <p>The updated Run.</p>"},{"location":"reference/sift_client/transport/","title":"sift_client.transport","text":""},{"location":"reference/sift_client/transport/#sift_client.transport","title":"sift_client.transport","text":"MODULE DESCRIPTION <code>base_connection</code> <code>grpc_transport</code> <p>Transport layer for gRPC communication.</p> <code>rest_transport</code> <p>Transport layer for REST communication.</p> CLASS DESCRIPTION <code>GrpcClient</code> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <code>GrpcConfig</code> <p>Configuration for gRPC API clients.</p> <code>RestClient</code> <p>A client wrapper for REST APIs.</p> <code>RestConfig</code> <p>Configuration for REST API clients.</p> <code>SiftConnectionConfig</code> <p>Configuration for Grpc and Rest cnnections.</p> <code>WithGrpcClient</code> <code>WithRestClient</code>"},{"location":"reference/sift_client/transport/#sift_client.transport.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"SiftConnectionConfig\",\n    \"WithGrpcClient\",\n    \"WithRestClient\",\n    \"GrpcClient\",\n    \"GrpcConfig\",\n    \"RestClient\",\n    \"RestConfig\",\n]\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient","title":"GrpcClient","text":"<pre><code>GrpcClient(config: GrpcConfig)\n</code></pre> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <p>This class just stores the channel and the stubs, without any additional functionality.</p> <p>Initialize the gRPC client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The gRPC client configuration.</p> <p> TYPE: <code>GrpcConfig</code> </p> METHOD DESCRIPTION <code>__aenter__</code> <code>__aexit__</code> <code>__enter__</code> <code>__exit__</code> <code>close</code> <p>Close sync and async channels and stop the default loop.</p> <code>close_sync</code> <p>Close the sync channel and all async channels.</p> <code>get_stub</code> <p>Get an async stub bound to the current event loop.</p> ATTRIBUTE DESCRIPTION <code>default_loop</code> <p> TYPE: <code>AbstractEventLoop</code> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.default_loop","title":"default_loop  <code>property</code>","text":"<pre><code>default_loop: AbstractEventLoop\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__aexit__","title":"__aexit__  <code>async</code>","text":"<pre><code>__aexit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close sync and async channels and stop the default loop.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.close_sync","title":"close_sync","text":"<pre><code>close_sync()\n</code></pre> <p>Close the sync channel and all async channels.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcClient.get_stub","title":"get_stub","text":"<pre><code>get_stub(stub_class: Type[Any]) -&gt; Any\n</code></pre> <p>Get an async stub bound to the current event loop. Creates a channel and stub for this loop if needed.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig","title":"GrpcConfig","text":"<pre><code>GrpcConfig(\n    url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    metadata: Dict[str, str] | None = None,\n)\n</code></pre> <p>Configuration for gRPC API clients.</p> <p>Initialize the gRPC configuration.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URI of the gRPC server.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_async</code> <p>Whether to use async gRPC client.</p> <p> </p> <code>metadata</code> <p>Additional metadata to include in all requests.</p> <p> TYPE: <code>Dict[str, str] | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>metadata</code> <p> </p> <code>uri</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata = metadata or {}\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri = url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.GrpcConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient","title":"RestClient","text":"<pre><code>RestClient(config: RestConfig)\n</code></pre> <p>A client wrapper for REST APIs.</p> <p>This class provides a wrapper around sift_py/rest.py for making REST API calls. It handles authentication, retries, and error mapping.</p> <p>Initialize the REST client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The REST client configuration.</p> <p> TYPE: <code>RestConfig</code> </p> METHOD DESCRIPTION <code>close</code> <code>delete</code> <code>get</code> <code>patch</code> <code>post</code> <code>put</code> ATTRIBUTE DESCRIPTION <code>base_url</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url: str\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.delete","title":"delete","text":"<pre><code>delete(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.get","title":"get","text":"<pre><code>get(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.patch","title":"patch","text":"<pre><code>patch(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs,\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.post","title":"post","text":"<pre><code>post(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs,\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestClient.put","title":"put","text":"<pre><code>put(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs,\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig","title":"RestConfig","text":"<pre><code>RestConfig(\n    base_url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    retry: Retry = _DEFAULT_REST_RETRY,\n)\n</code></pre> <p>Configuration for REST API clients.</p> <p>Initialize the REST configuration.</p> PARAMETER DESCRIPTION <code>base_url</code> <p>The base URL of the API.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use HTTPS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>base_url</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>retry</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = base_url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.retry","title":"retry  <code>instance-attribute</code>","text":"<pre><code>retry = retry\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.RestConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig","title":"SiftConnectionConfig","text":"<pre><code>SiftConnectionConfig(\n    grpc_url: str,\n    rest_url: str,\n    api_key: str,\n    use_ssl: bool = False,\n    cert_via_openssl: bool = False,\n)\n</code></pre> <p>Configuration for Grpc and Rest cnnections.</p> METHOD DESCRIPTION <code>get_grpc_config</code> <code>get_rest_config</code> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>grpc_url</code> <p> </p> <code>rest_url</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.grpc_url","title":"grpc_url  <code>instance-attribute</code>","text":"<pre><code>grpc_url = grpc_url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.rest_url","title":"rest_url  <code>instance-attribute</code>","text":"<pre><code>rest_url = rest_url\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.get_grpc_config","title":"get_grpc_config","text":"<pre><code>get_grpc_config()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.SiftConnectionConfig.get_rest_config","title":"get_rest_config","text":"<pre><code>get_rest_config()\n</code></pre>"},{"location":"reference/sift_client/transport/#sift_client.transport.WithGrpcClient","title":"WithGrpcClient","text":"<pre><code>WithGrpcClient(grpc_client: GrpcClient)\n</code></pre> <p>               Bases: <code>ABC</code></p> METHOD DESCRIPTION <code>get_asyncio_loop</code> <p>Gets the default asyncio loop used by the gRPC client.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.WithGrpcClient.get_asyncio_loop","title":"get_asyncio_loop","text":"<pre><code>get_asyncio_loop() -&gt; AbstractEventLoop\n</code></pre> <p>Gets the default asyncio loop used by the gRPC client.</p> RETURNS DESCRIPTION <code>AbstractEventLoop</code> <p>The default asyncio loop.</p>"},{"location":"reference/sift_client/transport/#sift_client.transport.WithRestClient","title":"WithRestClient","text":"<pre><code>WithRestClient(rest_client: RestClient)\n</code></pre> <p>               Bases: <code>ABC</code></p>"},{"location":"reference/sift_client/transport/base_connection/","title":"sift_client.transport.base_connection","text":""},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection","title":"sift_client.transport.base_connection","text":"CLASS DESCRIPTION <code>SiftConnectionConfig</code> <p>Configuration for Grpc and Rest cnnections.</p> <code>WithGrpcClient</code> <code>WithRestClient</code>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig","title":"SiftConnectionConfig","text":"<pre><code>SiftConnectionConfig(\n    grpc_url: str,\n    rest_url: str,\n    api_key: str,\n    use_ssl: bool = False,\n    cert_via_openssl: bool = False,\n)\n</code></pre> <p>Configuration for Grpc and Rest cnnections.</p> METHOD DESCRIPTION <code>get_grpc_config</code> <code>get_rest_config</code> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>grpc_url</code> <p> </p> <code>rest_url</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.grpc_url","title":"grpc_url  <code>instance-attribute</code>","text":"<pre><code>grpc_url = grpc_url\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.rest_url","title":"rest_url  <code>instance-attribute</code>","text":"<pre><code>rest_url = rest_url\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.get_grpc_config","title":"get_grpc_config","text":"<pre><code>get_grpc_config()\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.SiftConnectionConfig.get_rest_config","title":"get_rest_config","text":"<pre><code>get_rest_config()\n</code></pre>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.WithGrpcClient","title":"WithGrpcClient","text":"<pre><code>WithGrpcClient(grpc_client: GrpcClient)\n</code></pre> <p>               Bases: <code>ABC</code></p> METHOD DESCRIPTION <code>get_asyncio_loop</code> <p>Gets the default asyncio loop used by the gRPC client.</p>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.WithGrpcClient.get_asyncio_loop","title":"get_asyncio_loop","text":"<pre><code>get_asyncio_loop() -&gt; AbstractEventLoop\n</code></pre> <p>Gets the default asyncio loop used by the gRPC client.</p> RETURNS DESCRIPTION <code>AbstractEventLoop</code> <p>The default asyncio loop.</p>"},{"location":"reference/sift_client/transport/base_connection/#sift_client.transport.base_connection.WithRestClient","title":"WithRestClient","text":"<pre><code>WithRestClient(rest_client: RestClient)\n</code></pre> <p>               Bases: <code>ABC</code></p>"},{"location":"reference/sift_client/transport/grpc_transport/","title":"sift_client.transport.grpc_transport","text":""},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport","title":"sift_client.transport.grpc_transport","text":"<p>Transport layer for gRPC communication.</p> <p>This module provides a simple wrapper around sift_py/grpc/transport.py for making gRPC API calls. It just stores the channel and the stubs, without any additional functionality.</p> CLASS DESCRIPTION <code>GrpcClient</code> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <code>GrpcConfig</code> <p>Configuration for gRPC API clients.</p> ATTRIBUTE DESCRIPTION <code>logger</code> <p> </p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient","title":"GrpcClient","text":"<pre><code>GrpcClient(config: GrpcConfig)\n</code></pre> <p>A simple wrapper around sift_py/grpc/transport.py for making gRPC API calls.</p> <p>This class just stores the channel and the stubs, without any additional functionality.</p> <p>Initialize the gRPC client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The gRPC client configuration.</p> <p> TYPE: <code>GrpcConfig</code> </p> METHOD DESCRIPTION <code>__aenter__</code> <code>__aexit__</code> <code>__enter__</code> <code>__exit__</code> <code>close</code> <p>Close sync and async channels and stop the default loop.</p> <code>close_sync</code> <p>Close the sync channel and all async channels.</p> <code>get_stub</code> <p>Get an async stub bound to the current event loop.</p> ATTRIBUTE DESCRIPTION <code>default_loop</code> <p> TYPE: <code>AbstractEventLoop</code> </p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.default_loop","title":"default_loop  <code>property</code>","text":"<pre><code>default_loop: AbstractEventLoop\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__aenter__","title":"__aenter__  <code>async</code>","text":"<pre><code>__aenter__()\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__aexit__","title":"__aexit__  <code>async</code>","text":"<pre><code>__aexit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close sync and async channels and stop the default loop.</p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.close_sync","title":"close_sync","text":"<pre><code>close_sync()\n</code></pre> <p>Close the sync channel and all async channels.</p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcClient.get_stub","title":"get_stub","text":"<pre><code>get_stub(stub_class: Type[Any]) -&gt; Any\n</code></pre> <p>Get an async stub bound to the current event loop. Creates a channel and stub for this loop if needed.</p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig","title":"GrpcConfig","text":"<pre><code>GrpcConfig(\n    url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    metadata: Dict[str, str] | None = None,\n)\n</code></pre> <p>Configuration for gRPC API clients.</p> <p>Initialize the gRPC configuration.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URI of the gRPC server.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_async</code> <p>Whether to use async gRPC client.</p> <p> </p> <code>metadata</code> <p>Additional metadata to include in all requests.</p> <p> TYPE: <code>Dict[str, str] | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>metadata</code> <p> </p> <code>uri</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata = metadata or {}\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri = url\n</code></pre>"},{"location":"reference/sift_client/transport/grpc_transport/#sift_client.transport.grpc_transport.GrpcConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/","title":"sift_client.transport.rest_transport","text":""},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport","title":"sift_client.transport.rest_transport","text":"<p>Transport layer for REST communication.</p> <p>This module provides a simple wrapper around sift_py/rest.py for making REST API calls.</p> CLASS DESCRIPTION <code>RestClient</code> <p>A client wrapper for REST APIs.</p> <code>RestConfig</code> <p>Configuration for REST API clients.</p> ATTRIBUTE DESCRIPTION <code>logger</code> <p> </p>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient","title":"RestClient","text":"<pre><code>RestClient(config: RestConfig)\n</code></pre> <p>A client wrapper for REST APIs.</p> <p>This class provides a wrapper around sift_py/rest.py for making REST API calls. It handles authentication, retries, and error mapping.</p> <p>Initialize the REST client.</p> PARAMETER DESCRIPTION <code>config</code> <p>The REST client configuration.</p> <p> TYPE: <code>RestConfig</code> </p> METHOD DESCRIPTION <code>close</code> <code>delete</code> <code>get</code> <code>patch</code> <code>post</code> <code>put</code> ATTRIBUTE DESCRIPTION <code>base_url</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url: str\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.delete","title":"delete","text":"<pre><code>delete(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.get","title":"get","text":"<pre><code>get(\n    endpoint: str, headers: dict | None = None, **kwargs\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.patch","title":"patch","text":"<pre><code>patch(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs,\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.post","title":"post","text":"<pre><code>post(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs,\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestClient.put","title":"put","text":"<pre><code>put(\n    endpoint: str,\n    headers: dict | None = None,\n    data=None,\n    **kwargs,\n) -&gt; Response\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig","title":"RestConfig","text":"<pre><code>RestConfig(\n    base_url: str,\n    api_key: str,\n    use_ssl: bool = True,\n    cert_via_openssl: bool = False,\n    retry: Retry = _DEFAULT_REST_RETRY,\n)\n</code></pre> <p>Configuration for REST API clients.</p> <p>Initialize the REST configuration.</p> PARAMETER DESCRIPTION <code>base_url</code> <p>The base URL of the API.</p> <p> TYPE: <code>str</code> </p> <code>api_key</code> <p>The API key for authentication.</p> <p> TYPE: <code>str</code> </p> <code>use_ssl</code> <p>Whether to use HTTPS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cert_via_openssl</code> <p>Whether to use OpenSSL for SSL/TLS.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>api_key</code> <p> </p> <code>base_url</code> <p> </p> <code>cert_via_openssl</code> <p> </p> <code>retry</code> <p> </p> <code>use_ssl</code> <p> </p>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = base_url\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.cert_via_openssl","title":"cert_via_openssl  <code>instance-attribute</code>","text":"<pre><code>cert_via_openssl = cert_via_openssl\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.retry","title":"retry  <code>instance-attribute</code>","text":"<pre><code>retry = retry\n</code></pre>"},{"location":"reference/sift_client/transport/rest_transport/#sift_client.transport.rest_transport.RestConfig.use_ssl","title":"use_ssl  <code>instance-attribute</code>","text":"<pre><code>use_ssl = use_ssl\n</code></pre>"},{"location":"reference/sift_client/types/","title":"sift_client.types","text":""},{"location":"reference/sift_client/types/#sift_client.types","title":"sift_client.types","text":"MODULE DESCRIPTION <code>asset</code> <code>calculated_channel</code> <code>channel</code> <code>run</code> CLASS DESCRIPTION <code>Asset</code> <p>Model of the Sift Asset.</p> <code>AssetUpdate</code> <p>Model of the Asset Fields that can be updated.</p> <code>CalculatedChannel</code> <p>Model of the Sift Calculated Channel.</p> <code>CalculatedChannelUpdate</code> <p>Model of the Calculated Channel Fields that can be updated.</p> <code>ChannelReference</code> <p>Channel reference for calculated channel or rule.</p>"},{"location":"reference/sift_client/types/#sift_client.types.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"Asset\",\n    \"AssetUpdate\",\n    \"CalculatedChannel\",\n    \"CalculatedChannelUpdate\",\n    \"ChannelReference\",\n]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset","title":"Asset","text":"<p>               Bases: <code>BaseType[Asset, 'Asset']</code></p> <p>Model of the Sift Asset.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the asset.</p> <code>runs</code> <code>update</code> <p>Update the Asset.</p> ATTRIBUTE DESCRIPTION <code>annotations</code> <p> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the asset is archived.</p> <p> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>rules</code> <p> </p> <code>tags</code> <p> TYPE: <code>list[str]</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.annotations","title":"annotations  <code>property</code>","text":"<pre><code>annotations\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the asset is archived.</p>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.rules","title":"rules  <code>property</code>","text":"<pre><code>rules\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: list[str]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.archive","title":"archive","text":"<pre><code>archive(*, archive_runs: bool = False) -&gt; Asset\n</code></pre> <p>Archive the asset.</p> PARAMETER DESCRIPTION <code>archive_runs</code> <p>If True, archive all Runs associated with the Asset.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.runs","title":"runs","text":"<pre><code>runs(limit: int | None = None)\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.Asset.update","title":"update","text":"<pre><code>update(update: AssetUpdate | dict) -&gt; Asset\n</code></pre> <p>Update the Asset.</p> PARAMETER DESCRIPTION <code>update</code> <p>Either an AssetUpdate instance or a dictionary of key-value pairs to update.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate","title":"AssetUpdate","text":"<pre><code>AssetUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[Asset]</code></p> <p>Model of the Asset Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | str | None</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool] | None</code> </p> <code>tags</code> <p> TYPE: <code>list[str] | None</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.AssetUpdate.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel","title":"CalculatedChannel","text":"<p>               Bases: <code>BaseType[CalculatedChannel, 'CalculatedChannel']</code></p> <p>Model of the Sift Calculated Channel.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the calculated channel.</p> <code>update</code> <p>Update the Calculated Channel.</p> ATTRIBUTE DESCRIPTION <code>all_assets</code> <p> TYPE: <code>bool | None</code> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>asset_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>change_message</code> <p> TYPE: <code>str | None</code> </p> <code>channel_references</code> <p> TYPE: <code>list[ChannelReference]</code> </p> <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>created_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the calculated channel is archived.</p> <p> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p> <code>user_notes</code> <p> TYPE: <code>str | None</code> </p> <code>version</code> <p> TYPE: <code>int | None</code> </p> <code>version_id</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.all_assets","title":"all_assets  <code>instance-attribute</code>","text":"<pre><code>all_assets: bool | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.asset_ids","title":"asset_ids  <code>instance-attribute</code>","text":"<pre><code>asset_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.change_message","title":"change_message  <code>instance-attribute</code>","text":"<pre><code>change_message: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: list[ChannelReference]\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.client_key","title":"client_key  <code>instance-attribute</code>","text":"<pre><code>client_key: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the calculated channel is archived.</p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.tag_ids","title":"tag_ids  <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.units","title":"units  <code>instance-attribute</code>","text":"<pre><code>units: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.user_notes","title":"user_notes  <code>instance-attribute</code>","text":"<pre><code>user_notes: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: int | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.version_id","title":"version_id  <code>instance-attribute</code>","text":"<pre><code>version_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.archive","title":"archive","text":"<pre><code>archive() -&gt; CalculatedChannel\n</code></pre> <p>Archive the calculated channel.</p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannel.update","title":"update","text":"<pre><code>update(\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update the Calculated Channel.</p> PARAMETER DESCRIPTION <code>update</code> <p>The update to apply to the calculated channel. See CalculatedChannelUpdate for more updatable fields.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>The user notes to apply to the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated calculated channel.</p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate","title":"CalculatedChannelUpdate","text":"<pre><code>CalculatedChannelUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[CalculatedChannel]</code></p> <p>Model of the Calculated Channel Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str | None</code> </p> <code>expression</code> <p> TYPE: <code>str | None</code> </p> <code>expression_channel_references</code> <p> TYPE: <code>list[ChannelReference] | None</code> </p> <code>name</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.expression","title":"expression  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.expression_channel_references","title":"expression_channel_references  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_channel_references: (\n    list[ChannelReference] | None\n) = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.tag_ids","title":"tag_ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.CalculatedChannelUpdate.units","title":"units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>units: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.ChannelReference","title":"ChannelReference","text":"<p>               Bases: <code>BaseModel</code></p> <p>Channel reference for calculated channel or rule.</p> ATTRIBUTE DESCRIPTION <code>channel_identifier</code> <p> TYPE: <code>str</code> </p> <code>channel_reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/types/#sift_client.types.ChannelReference.channel_identifier","title":"channel_identifier  <code>instance-attribute</code>","text":"<pre><code>channel_identifier: str\n</code></pre>"},{"location":"reference/sift_client/types/#sift_client.types.ChannelReference.channel_reference","title":"channel_reference  <code>instance-attribute</code>","text":"<pre><code>channel_reference: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/","title":"sift_client.types.asset","text":""},{"location":"reference/sift_client/types/asset/#sift_client.types.asset","title":"sift_client.types.asset","text":"CLASS DESCRIPTION <code>Asset</code> <p>Model of the Sift Asset.</p> <code>AssetUpdate</code> <p>Model of the Asset Fields that can be updated.</p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset","title":"Asset","text":"<p>               Bases: <code>BaseType[Asset, 'Asset']</code></p> <p>Model of the Sift Asset.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the asset.</p> <code>runs</code> <code>update</code> <p>Update the Asset.</p> ATTRIBUTE DESCRIPTION <code>annotations</code> <p> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the asset is archived.</p> <p> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>rules</code> <p> </p> <code>tags</code> <p> TYPE: <code>list[str]</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.annotations","title":"annotations  <code>property</code>","text":"<pre><code>annotations\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the asset is archived.</p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool]\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.rules","title":"rules  <code>property</code>","text":"<pre><code>rules\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: list[str]\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.archive","title":"archive","text":"<pre><code>archive(*, archive_runs: bool = False) -&gt; Asset\n</code></pre> <p>Archive the asset.</p> PARAMETER DESCRIPTION <code>archive_runs</code> <p>If True, archive all Runs associated with the Asset.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.runs","title":"runs","text":"<pre><code>runs(limit: int | None = None)\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.Asset.update","title":"update","text":"<pre><code>update(update: AssetUpdate | dict) -&gt; Asset\n</code></pre> <p>Update the Asset.</p> PARAMETER DESCRIPTION <code>update</code> <p>Either an AssetUpdate instance or a dictionary of key-value pairs to update.</p> <p> TYPE: <code>AssetUpdate | dict</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate","title":"AssetUpdate","text":"<pre><code>AssetUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[Asset]</code></p> <p>Model of the Asset Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | str | None</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool] | None</code> </p> <code>tags</code> <p> TYPE: <code>list[str] | None</code> </p>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/asset/#sift_client.types.asset.AssetUpdate.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/","title":"sift_client.types.calculated_channel","text":""},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel","title":"sift_client.types.calculated_channel","text":"CLASS DESCRIPTION <code>CalculatedChannel</code> <p>Model of the Sift Calculated Channel.</p> <code>CalculatedChannelUpdate</code> <p>Model of the Calculated Channel Fields that can be updated.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel","title":"CalculatedChannel","text":"<p>               Bases: <code>BaseType[CalculatedChannel, 'CalculatedChannel']</code></p> <p>Model of the Sift Calculated Channel.</p> METHOD DESCRIPTION <code>archive</code> <p>Archive the calculated channel.</p> <code>update</code> <p>Update the Calculated Channel.</p> ATTRIBUTE DESCRIPTION <code>all_assets</code> <p> TYPE: <code>bool | None</code> </p> <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>asset_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>change_message</code> <p> TYPE: <code>str | None</code> </p> <code>channel_references</code> <p> TYPE: <code>list[ChannelReference]</code> </p> <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>created_by</code> <p> </p> <code>created_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>created_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>expression</code> <p> TYPE: <code>str</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>is_archived</code> <p>Whether the calculated channel is archived.</p> <p> </p> <code>modified_by</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str | None</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p> <code>user_notes</code> <p> TYPE: <code>str | None</code> </p> <code>version</code> <p> TYPE: <code>int | None</code> </p> <code>version_id</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.all_assets","title":"all_assets  <code>instance-attribute</code>","text":"<pre><code>all_assets: bool | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.archived_date","title":"archived_date  <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.asset_ids","title":"asset_ids  <code>instance-attribute</code>","text":"<pre><code>asset_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.change_message","title":"change_message  <code>instance-attribute</code>","text":"<pre><code>change_message: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.channel_references","title":"channel_references  <code>instance-attribute</code>","text":"<pre><code>channel_references: list[ChannelReference]\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.client_key","title":"client_key  <code>instance-attribute</code>","text":"<pre><code>client_key: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.created_by","title":"created_by  <code>property</code>","text":"<pre><code>created_by\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.is_archived","title":"is_archived  <code>property</code>","text":"<pre><code>is_archived\n</code></pre> <p>Whether the calculated channel is archived.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.modified_by","title":"modified_by  <code>property</code>","text":"<pre><code>modified_by\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.tag_ids","title":"tag_ids  <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.units","title":"units  <code>instance-attribute</code>","text":"<pre><code>units: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.user_notes","title":"user_notes  <code>instance-attribute</code>","text":"<pre><code>user_notes: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: int | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.version_id","title":"version_id  <code>instance-attribute</code>","text":"<pre><code>version_id: str | None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.archive","title":"archive","text":"<pre><code>archive() -&gt; CalculatedChannel\n</code></pre> <p>Archive the calculated channel.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannel.update","title":"update","text":"<pre><code>update(\n    update: CalculatedChannelUpdate | dict,\n    user_notes: str | None = None,\n) -&gt; CalculatedChannel\n</code></pre> <p>Update the Calculated Channel.</p> PARAMETER DESCRIPTION <code>update</code> <p>The update to apply to the calculated channel. See CalculatedChannelUpdate for more updatable fields.</p> <p> TYPE: <code>CalculatedChannelUpdate | dict</code> </p> <code>user_notes</code> <p>The user notes to apply to the calculated channel.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>CalculatedChannel</code> <p>The updated calculated channel.</p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate","title":"CalculatedChannelUpdate","text":"<pre><code>CalculatedChannelUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[CalculatedChannel]</code></p> <p>Model of the Calculated Channel Fields that can be updated.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>description</code> <p> TYPE: <code>str | None</code> </p> <code>expression</code> <p> TYPE: <code>str | None</code> </p> <code>expression_channel_references</code> <p> TYPE: <code>list[ChannelReference] | None</code> </p> <code>name</code> <p> TYPE: <code>str | None</code> </p> <code>tag_ids</code> <p> TYPE: <code>list[str] | None</code> </p> <code>units</code> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.expression","title":"expression  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.expression_channel_references","title":"expression_channel_references  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_channel_references: (\n    list[ChannelReference] | None\n) = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.tag_ids","title":"tag_ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag_ids: list[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/calculated_channel/#sift_client.types.calculated_channel.CalculatedChannelUpdate.units","title":"units  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>units: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/channel/","title":"sift_client.types.channel","text":""},{"location":"reference/sift_client/types/channel/#sift_client.types.channel","title":"sift_client.types.channel","text":"CLASS DESCRIPTION <code>ChannelReference</code> <p>Channel reference for calculated channel or rule.</p>"},{"location":"reference/sift_client/types/channel/#sift_client.types.channel.ChannelReference","title":"ChannelReference","text":"<p>               Bases: <code>BaseModel</code></p> <p>Channel reference for calculated channel or rule.</p> ATTRIBUTE DESCRIPTION <code>channel_identifier</code> <p> TYPE: <code>str</code> </p> <code>channel_reference</code> <p> TYPE: <code>str</code> </p>"},{"location":"reference/sift_client/types/channel/#sift_client.types.channel.ChannelReference.channel_identifier","title":"channel_identifier  <code>instance-attribute</code>","text":"<pre><code>channel_identifier: str\n</code></pre>"},{"location":"reference/sift_client/types/channel/#sift_client.types.channel.ChannelReference.channel_reference","title":"channel_reference  <code>instance-attribute</code>","text":"<pre><code>channel_reference: str\n</code></pre>"},{"location":"reference/sift_client/types/run/","title":"sift_client.types.run","text":""},{"location":"reference/sift_client/types/run/#sift_client.types.run","title":"sift_client.types.run","text":"CLASS DESCRIPTION <code>Run</code> <p>Run model representing a data collection run.</p> <code>RunUpdate</code> <p>Update model for Run.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run","title":"Run","text":"<p>               Bases: <code>BaseType[Run, 'Run']</code></p> <p>Run model representing a data collection run.</p> METHOD DESCRIPTION <code>assets</code> <p>Return all assets associated with this run.</p> <code>stop</code> <p>Stop the run.</p> <code>to_proto</code> <p>Convert to protobuf message.</p> ATTRIBUTE DESCRIPTION <code>archived_date</code> <p> TYPE: <code>datetime | None</code> </p> <code>asset_ids</code> <p> TYPE: <code>List[str] | None</code> </p> <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>created_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>created_date</code> <p> TYPE: <code>datetime</code> </p> <code>default_report_id</code> <p> TYPE: <code>str | None</code> </p> <code>description</code> <p> TYPE: <code>str</code> </p> <code>id</code> <p> TYPE: <code>str</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> <code>model_config</code> <p> </p> <code>modified_by_user_id</code> <p> TYPE: <code>str</code> </p> <code>modified_date</code> <p> TYPE: <code>datetime</code> </p> <code>name</code> <p> TYPE: <code>str</code> </p> <code>organization_id</code> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>stop_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>tags</code> <p> TYPE: <code>List[str] | None</code> </p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.archived_date","title":"archived_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>archived_date: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.asset_ids","title":"asset_ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asset_ids: List[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.client_key","title":"client_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_key: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.created_by_user_id","title":"created_by_user_id  <code>instance-attribute</code>","text":"<pre><code>created_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.created_date","title":"created_date  <code>instance-attribute</code>","text":"<pre><code>created_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.default_report_id","title":"default_report_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_report_id: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.metadata","title":"metadata  <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool]\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.modified_by_user_id","title":"modified_by_user_id  <code>instance-attribute</code>","text":"<pre><code>modified_by_user_id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.modified_date","title":"modified_date  <code>instance-attribute</code>","text":"<pre><code>modified_date: datetime\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.organization_id","title":"organization_id  <code>instance-attribute</code>","text":"<pre><code>organization_id: str\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.start_time","title":"start_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.stop_time","title":"stop_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: List[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.assets","title":"assets","text":"<pre><code>assets()\n</code></pre> <p>Return all assets associated with this run.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the run.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.Run.to_proto","title":"to_proto","text":"<pre><code>to_proto() -&gt; Run\n</code></pre> <p>Convert to protobuf message.</p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate","title":"RunUpdate","text":"<pre><code>RunUpdate(**data: Any)\n</code></pre> <p>               Bases: <code>ModelUpdate[Run]</code></p> <p>Update model for Run.</p> ATTRIBUTE DESCRIPTION <code>client_key</code> <p> TYPE: <code>str | None</code> </p> <code>description</code> <p> TYPE: <code>str | None</code> </p> <code>is_pinned</code> <p> TYPE: <code>bool | None</code> </p> <code>metadata</code> <p> TYPE: <code>dict[str, str | float | bool] | None</code> </p> <code>model_config</code> <p> </p> <code>name</code> <p> TYPE: <code>str | None</code> </p> <code>start_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>stop_time</code> <p> TYPE: <code>datetime | None</code> </p> <code>tags</code> <p> TYPE: <code>List[str] | None</code> </p>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.client_key","title":"client_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_key: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.is_pinned","title":"is_pinned  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_pinned: bool | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict[str, str | float | bool] | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.start_time","title":"start_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.stop_time","title":"stop_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop_time: datetime | None = None\n</code></pre>"},{"location":"reference/sift_client/types/run/#sift_client.types.run.RunUpdate.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: List[str] | None = None\n</code></pre>"},{"location":"reference/sift_client/util/","title":"sift_client.util","text":""},{"location":"reference/sift_client/util/#sift_client.util","title":"sift_client.util","text":"<p>Utility modules for the sift_client package.</p> MODULE DESCRIPTION <code>cel_utils</code> <p>CEL (Common Expression Language) utilities for generating CEL expressions.</p> <code>metadata</code> <code>timestamp</code> <code>util</code>"},{"location":"reference/sift_client/util/cel_utils/","title":"sift_client.util.cel_utils","text":""},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils","title":"sift_client.util.cel_utils","text":"<p>CEL (Common Expression Language) utilities for generating CEL expressions.</p> <p>This module provides helper functions to generate CEL expressions for building filters commonly used in Sift.</p> FUNCTION DESCRIPTION <code>and_</code> <p>Generates a CEL expression that joins all clauses with an AND operator.</p> <code>contains</code> <p>Generates a CEL expression that checks whether a string field contains a given value.</p> <code>equals</code> <p>Generates a CEL expression that checks for equality.</p> <code>equals_all</code> <p>Generates a CEL expression that checks for equality of all key-value pairs.</p> <code>equals_any</code> <p>Generates a CEL expression that checks for equality of any key-value pairs.</p> <code>equals_double</code> <p>Generates a CEL expression that checks for equality with a double value.</p> <code>equals_null</code> <p>Generates a CEL expression that checks for equality with null.</p> <code>greater_than</code> <p>Generates a CEL expression that checks whether a numeric or datetime field is greater than a given value.</p> <code>in_</code> <p>Generates a CEL expression that checks for <code>field</code> membership in <code>vals</code>.</p> <code>less_than</code> <p>Generates a CEL expression that checks whether a numeric or datetime field is less than a given value.</p> <code>match</code> <p>Generates a CEL expression that checks for a match on the specified field.</p> <code>not_</code> <p>Generates a CEL expression that negates the given clause.</p> <code>or_</code> <p>Generates a CEL expression that joins all clauses with an OR operator.</p> <code>parens</code> <p>Wraps the given expression in parentheses.</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.and_","title":"and_","text":"<pre><code>and_(*clauses: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that joins all clauses with an AND operator.</p> PARAMETER DESCRIPTION <code>*clauses</code> <p>Variable number of CEL expression strings</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all clauses joined by AND</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.contains","title":"contains","text":"<pre><code>contains(field: str, value: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks whether a string field contains a given value.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The substring to check for</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals","title":"equals","text":"<pre><code>equals(key: str, value: Any) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality.</p> PARAMETER DESCRIPTION <code>key</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_all","title":"equals_all","text":"<pre><code>equals_all(values: dict[str, Any]) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality of all key-value pairs.</p> PARAMETER DESCRIPTION <code>values</code> <p>Dictionary of field names and values to check for equality</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all equality checks joined by AND</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_any","title":"equals_any","text":"<pre><code>equals_any(values: dict[str, Any]) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality of any key-value pairs.</p> PARAMETER DESCRIPTION <code>values</code> <p>Dictionary of field names and values to check for equality</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all equality checks joined by OR</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_double","title":"equals_double","text":"<pre><code>equals_double(key: str, value: Any) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality with a double value.</p> PARAMETER DESCRIPTION <code>key</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against as a double</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.equals_null","title":"equals_null","text":"<pre><code>equals_null(key: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for equality with null.</p> PARAMETER DESCRIPTION <code>key</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.greater_than","title":"greater_than","text":"<pre><code>greater_than(\n    field: str, value: int | float | datetime\n) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks whether a numeric or datetime field is greater than a given value.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against</p> <p> TYPE: <code>int | float | datetime</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.in_","title":"in_","text":"<pre><code>in_(field: str, vals: list[str]) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for <code>field</code> membership in <code>vals</code>.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name to check</p> <p> TYPE: <code>str</code> </p> <code>vals</code> <p>List of string values to check membership against</p> <p> TYPE: <code>list[str]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string or empty string if vals is empty</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.less_than","title":"less_than","text":"<pre><code>less_than(field: str, value: int | float | datetime) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks whether a numeric or datetime field is less than a given value.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to compare against</p> <p> TYPE: <code>int | float | datetime</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.match","title":"match","text":"<pre><code>match(field: str, query: str | Pattern) -&gt; str\n</code></pre> <p>Generates a CEL expression that checks for a match on the specified field.</p> PARAMETER DESCRIPTION <code>field</code> <p>The field name</p> <p> TYPE: <code>str</code> </p> <code>query</code> <p>The regex pattern to match against</p> <p> TYPE: <code>str | Pattern</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.not_","title":"not_","text":"<pre><code>not_(clause: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that negates the given clause.</p> PARAMETER DESCRIPTION <code>clause</code> <p>The CEL expression to negate</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A negated CEL expression string</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.or_","title":"or_","text":"<pre><code>or_(*clauses: str) -&gt; str\n</code></pre> <p>Generates a CEL expression that joins all clauses with an OR operator.</p> PARAMETER DESCRIPTION <code>*clauses</code> <p>Variable number of CEL expression strings</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with all clauses joined by OR</p>"},{"location":"reference/sift_client/util/cel_utils/#sift_client.util.cel_utils.parens","title":"parens","text":"<pre><code>parens(expr: str) -&gt; str\n</code></pre> <p>Wraps the given expression in parentheses.</p> PARAMETER DESCRIPTION <code>expr</code> <p>The expression to wrap in parentheses</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A CEL expression string with parentheses</p>"},{"location":"reference/sift_client/util/metadata/","title":"sift_client.util.metadata","text":""},{"location":"reference/sift_client/util/metadata/#sift_client.util.metadata","title":"sift_client.util.metadata","text":"FUNCTION DESCRIPTION <code>metadata_dict_to_proto</code> <p>Converts metadata dictionary into a list of MetadataValue objects.</p> <code>metadata_proto_to_dict</code> <p>Converts a list of MetadataValue objects into a dictionary.</p>"},{"location":"reference/sift_client/util/metadata/#sift_client.util.metadata.metadata_dict_to_proto","title":"metadata_dict_to_proto","text":"<pre><code>metadata_dict_to_proto(\n    _metadata: dict[str, str | float | bool],\n) -&gt; list[MetadataValue]\n</code></pre> <p>Converts metadata dictionary into a list of MetadataValue objects.</p> PARAMETER DESCRIPTION <code>_metadata</code> <p>Dictionary of metadata key-value pairs.</p> <p> TYPE: <code>dict[str, str | float | bool]</code> </p> RETURNS DESCRIPTION <code>list[MetadataValue]</code> <p>List of MetadataValue objects.</p>"},{"location":"reference/sift_client/util/metadata/#sift_client.util.metadata.metadata_proto_to_dict","title":"metadata_proto_to_dict","text":"<pre><code>metadata_proto_to_dict(\n    metadata: list[MetadataValue],\n) -&gt; dict[str, str | float | bool]\n</code></pre> <p>Converts a list of MetadataValue objects into a dictionary.</p> PARAMETER DESCRIPTION <code>metadata</code> <p>List of MetadataValue objects.</p> <p> TYPE: <code>list[MetadataValue]</code> </p> RETURNS DESCRIPTION <code>dict[str, str | float | bool]</code> <p>Dictionary of metadata key-value pairs.</p>"},{"location":"reference/sift_client/util/timestamp/","title":"sift_client.util.timestamp","text":""},{"location":"reference/sift_client/util/timestamp/#sift_client.util.timestamp","title":"sift_client.util.timestamp","text":"FUNCTION DESCRIPTION <code>to_pb_timestamp</code>"},{"location":"reference/sift_client/util/timestamp/#sift_client.util.timestamp.to_pb_timestamp","title":"to_pb_timestamp","text":"<pre><code>to_pb_timestamp(timestamp: datetime) -&gt; Timestamp\n</code></pre>"},{"location":"reference/sift_client/util/util/","title":"sift_client.util.util","text":""},{"location":"reference/sift_client/util/util/#sift_client.util.util","title":"sift_client.util.util","text":"CLASS DESCRIPTION <code>AsyncAPIs</code> <p>Simple accessor for the asynchronous APIs, still uses the SiftClient instance.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs","title":"AsyncAPIs","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Simple accessor for the asynchronous APIs, still uses the SiftClient instance.</p> ATTRIBUTE DESCRIPTION <code>assets</code> <p>Instance of the Assets API for making asynchronous requests.</p> <p> TYPE: <code>AssetsAPIAsync</code> </p> <code>calculated_channels</code> <p>Instance of the Calculated Channels API for making asynchronous requests.</p> <p> TYPE: <code>CalculatedChannelsAPIAsync</code> </p> <code>ping</code> <p>Instance of the Ping API for making asynchronous requests.</p> <p> TYPE: <code>PingAPIAsync</code> </p> <code>runs</code> <p>Instance of the Runs API for making asynchronous requests.</p> <p> TYPE: <code>RunsAPIAsync</code> </p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.assets","title":"assets  <code>instance-attribute</code>","text":"<pre><code>assets: AssetsAPIAsync\n</code></pre> <p>Instance of the Assets API for making asynchronous requests.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.calculated_channels","title":"calculated_channels  <code>instance-attribute</code>","text":"<pre><code>calculated_channels: CalculatedChannelsAPIAsync\n</code></pre> <p>Instance of the Calculated Channels API for making asynchronous requests.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.ping","title":"ping  <code>instance-attribute</code>","text":"<pre><code>ping: PingAPIAsync\n</code></pre> <p>Instance of the Ping API for making asynchronous requests.</p>"},{"location":"reference/sift_client/util/util/#sift_client.util.util.AsyncAPIs.runs","title":"runs  <code>instance-attribute</code>","text":"<pre><code>runs: RunsAPIAsync\n</code></pre> <p>Instance of the Runs API for making asynchronous requests.</p>"}]}