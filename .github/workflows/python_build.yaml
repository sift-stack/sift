name: Offline Installation Archive

on:
  workflow_dispatch:
  pull_request:

jobs:
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Python versions from pyproject.toml
        id: get-versions
        run: |
          versions=$(grep "Programming Language :: Python :: " python/pyproject.toml | sed 's/.*Python :: \([0-9.]*\).*/\1/' | jq -R -s -c 'split("\n")[:-1]')
          echo "versions=$versions" >> $GITHUB_OUTPUT

  build_and_verify:
    name: Build and verify on ${{ matrix.os }} (${{ matrix.arch }}) with Python ${{ matrix.python-version }}
    needs: get-python-versions
    runs-on: ${{ matrix.runner }}
    env:
      PIP_PLATFORM: ${{ matrix.os == 'windows' && format('win_{0}', matrix.arch) || format('{0}-{1}', matrix.os, matrix.arch) }}
    strategy:
      matrix:
        include:
          # Ubuntu builds (x86_64 and aarch64)
          - os: ubuntu
            arch: x86_64
            runner: ubuntu-latest
          - os: ubuntu
            arch: aarch64
            runner: ubuntu-latest
            
          # macOS builds (x86_64 and arm64)
          - os: macos
            arch: x86_64
            runner: macos-latest
          - os: macos
            arch: arm64
            runner: macos-14
            
          # Windows builds (x64)
          - os: windows
            arch: amd64
            runner: windows-latest
        python-version: ${{fromJson(needs.get-python-versions.outputs.python-versions)}}

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install build pip-tools twine

      - name: Generate requirements
        working-directory: python
        shell: bash
        run: |
          pip-compile pyproject.toml --all-extras -o requirements-all.txt

      - name: Download dependencies
        working-directory: python
        shell: bash
        run: |
          mkdir -p dist/deps
          # Try to download all packages, preferring wheels but allowing source if wheels aren't available
          pip download -r requirements-all.txt -d dist/deps \
            --platform $PIP_PLATFORM \
            --python-version ${{ matrix.python-version }} \
            --prefer-binary \
            --no-deps

      - name: Build sift-py wheel
        working-directory: python
        shell: bash
        run: |
          python -m build --wheel

      - name: Verify wheel
        working-directory: python
        shell: bash
        run: |
          twine check dist/*.whl

      - name: Test installations
        working-directory: python
        shell: bash
        run: |
          # Function to create venv and test installation
          test_install() {
            local extras=$1
            echo "Testing installation with extras: ${extras:-none}"
            python -m venv test_venv
            source test_venv/bin/activate || source test_venv/Scripts/activate
            if [ -z "$extras" ]; then
              pip install --no-index --find-links=dist/deps dist/*.whl
            else
              pip install --no-index --find-links=dist/deps "dist/*.whl[$extras]"
            fi
            deactivate
            rm -rf test_venv
          }

          # Test each combination in a fresh venv
          test_install ""  # no extras
          test_install "openssl"
          test_install "build"
          test_install "dev"
          test_install "openssl,build,dev"

      - name: Create distribution archive
        working-directory: python
        shell: bash
        run: |
          python -c "import shutil; shutil.make_archive('dist/sift-py-dist-${{ env.PIP_PLATFORM }}-py${{ matrix.python-version }}', 'zip', 'dist')"

      - name: Upload distribution archive
        uses: actions/upload-artifact@v4
        with:
          name: sift-py-dist-${{ env.PIP_PLATFORM }}-py${{ matrix.python-version }}
          path: python/dist/sift-py-dist-*.zip
          retention-days: 7
