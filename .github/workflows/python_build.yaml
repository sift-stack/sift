name: Offline Installation Archive

on:
  workflow_dispatch:
  pull_request:

jobs:
  get-matrix-config:
    name: Get matrix configuration
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-versions.outputs.versions }}
      platforms: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Python versions from pyproject.toml
        id: get-versions
        run: |
          versions=$(grep "Programming Language :: Python :: " python/pyproject.toml | sed 's/.*Python :: \([0-9.]*\).*/\1/' | jq -R -s -c 'split("\n")[:-1]')
          echo "versions=$versions" >> $GITHUB_OUTPUT

      - name: Set platform matrix
        id: set-matrix
        uses: actions/github-script@v7
        with:
          script: |
            const matrix = {
              config: [
                {os: 'ubuntu', arch: 'x86_64', runner: 'ubuntu-latest'},
                {os: 'ubuntu', arch: 'aarch64', runner: 'ubuntu-latest'},
                {os: 'macos', arch: 'x86_64', runner: 'macos-latest'},
                {os: 'macos', arch: 'arm64', runner: 'macos-14'},
                {os: 'windows', arch: 'amd64', runner: 'windows-latest'}
              ]
            };
            core.setOutput('matrix', JSON.stringify(matrix));

  build_and_verify:
    name: Build and verify on ${{ matrix.config.os }} (${{ matrix.config.arch }}) with Python ${{ matrix.python-version }}
    needs: get-matrix-config
    runs-on: ${{ matrix.config.runner }}
    env:
      DIST_PLATFORM: ${{ matrix.config.os == 'windows' && format('win_{0}', matrix.config.arch) || format('{0}-{1}', matrix.config.os, matrix.config.arch) }}
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.get-matrix-config.outputs.platforms).config }}
        python-version: ${{fromJson(needs.get-matrix-config.outputs.python-versions)}}
    outputs:
      matrix-config: ${{ toJson(matrix.config) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install build pip-tools twine

      - name: Generate requirements
        working-directory: python
        shell: bash
        run: |
          # Generate requirements file with only openssl extras
          # npTDMS doesn't have wheels for all platforms, 
          # so we need to build it from source which was causing issues on windows
          pip-compile pyproject.toml --extra=openssl -o requirements-all.txt

      - name: Download dependencies
        working-directory: python
        shell: bash
        run: |
          mkdir -p dist/deps
          # First download build dependencies
          pip download -d dist/deps \
            setuptools wheel Cython \
            --prefer-binary \
            --no-deps

          # Then download package dependencies
          pip download -r requirements-all.txt -d dist/deps \
            --python-version ${{ matrix.python-version }} \
            --prefer-binary \
            --no-deps

      - name: Build sift-py wheel
        working-directory: python
        shell: bash
        run: |
          python -m build --wheel

      - name: Verify wheel
        working-directory: python
        shell: bash
        run: |
          twine check dist/*.whl

      - name: Test installations
        working-directory: python
        shell: bash
        run: |
          # Get the wheel file name
          WHEEL_FILE=$(ls dist/*.whl)
          
          # Test base installation
          python -m venv test_venv_base
          if [ "${{ matrix.config.os }}" = "windows" ]; then
            source test_venv_base/Scripts/activate
          else
            source test_venv_base/bin/activate
          fi
          pip install --no-index --find-links=dist/deps "$WHEEL_FILE"
          deactivate
          rm -rf test_venv_base

          # Test openssl installation
          python -m venv test_venv_openssl
          if [ "${{ matrix.config.os }}" = "windows" ]; then
            source test_venv_openssl/Scripts/activate
          else
            source test_venv_openssl/bin/activate
          fi
          pip install --no-index --find-links=dist/deps "$WHEEL_FILE[openssl]"
          deactivate
          rm -rf test_venv_openssl

      - name: Create distribution archive
        working-directory: python
        shell: bash
        run: |
          if [ "${{ matrix.config.os }}" = "windows" ]; then
            # Use PowerShell's Compress-Archive on Windows
            pwsh -Command "Compress-Archive -Path dist/* -DestinationPath dist/sift-py-dist-${{ env.DIST_PLATFORM }}-py${{ matrix.python-version }}.zip -Force"
          else
            # Use zip on Unix-like systems
            cd dist && zip -r "sift-py-dist-${{ env.DIST_PLATFORM }}-py${{ matrix.python-version }}.zip" *
          fi

      - name: Upload distribution archive
        uses: actions/upload-artifact@v4
        with:
          name: sift-py-dist-${{ env.DIST_PLATFORM }}-py${{ matrix.python-version }}
          path: python/dist/sift-py-dist-*.zip
          retention-days: 7

  merge_platform_archives:
    name: Merge archives for ${{ matrix.platform.os }} (${{ matrix.platform.arch }})
    needs: [build_and_verify, get-matrix-config]
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        platform: ${{ fromJson(needs.get-matrix-config.outputs.platforms).config }}
    env:
      DIST_PLATFORM: ${{ matrix.platform.os == 'windows' && format('win_{0}', matrix.platform.arch) || format('{0}-{1}', matrix.platform.os, matrix.platform.arch) }}
    steps:
      - name: Download platform archives
        uses: actions/download-artifact@v4
        with:
          pattern: sift-py-dist-${{ env.DIST_PLATFORM }}-py*
          path: platform_archives
          merge-multiple: false

      - name: Merge archives
        shell: bash
        run: |
          # Create directory for merged wheels
          mkdir -p merged/dist/deps
          
          # Extract and merge all archives for this platform
          for zip in platform_archives/*/sift-py-dist-${{ env.DIST_PLATFORM }}-py*.zip; do
            echo "Processing archive: $zip"
            
            # Create fresh temp directory
            rm -rf temp_extract
            mkdir -p temp_extract
            
            # Extract and show contents
            unzip -o "$zip" -d "temp_extract"
            echo "Contents of temp_extract:"
            ls -R temp_extract
            
            # Find all files recursively and copy them
            find temp_extract -type f -exec cp {} merged/dist/ \;
            
            # Cleanup
            rm -rf temp_extract
          done
          
          echo "Contents of merged directory:"
          ls -R merged/dist/
          
          # Create merged archive
          cd merged
          zip -r "../sift-py-dist-${{ env.DIST_PLATFORM }}-all-python.zip" dist/

      - name: Upload merged archive
        uses: actions/upload-artifact@v4
        with:
          name: sift-py-dist-${{ env.DIST_PLATFORM }}-all-python
          path: sift-py-dist-*-all-python.zip
          retention-days: 7
