name: Offline Installation Archive

on:
  workflow_dispatch:
  pull_request:

jobs:
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Python versions from pyproject.toml
        id: get-versions
        run: |
          versions=$(grep "Programming Language :: Python :: " python/pyproject.toml | sed 's/.*Python :: \([0-9.]*\).*/\1/' | jq -R -s -c 'split("\n")[:-1]')
          echo "versions=$versions" >> $GITHUB_OUTPUT

  build_packages:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }}) with Python ${{ matrix.python-version }}
    needs: get-python-versions
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Ubuntu builds (x86_64 and aarch64)
          - os: ubuntu
            arch: x86_64
            runner: ubuntu-latest
          - os: ubuntu
            arch: aarch64
            runner: ubuntu-latest
            
          # macOS builds (x86_64 and arm64)
          - os: macos
            arch: x86_64
            runner: macos-latest
          - os: macos
            arch: arm64
            runner: macos-14
            
          # Windows builds (x86 and x64)
          - os: windows
            arch: x86
            runner: windows-latest
          - os: windows
            arch: x64
            runner: windows-latest
        python-version: ${{fromJson(needs.get-python-versions.outputs.python-versions)}}

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build pip-tools

      - name: Generate requirements
        working-directory: python
        run: |
          pip-compile pyproject.toml --all-extras -o requirements-all.txt

      - name: Download dependencies
        working-directory: python
        env:
          PIP_PLATFORM: ${{ matrix.os == 'windows' && format('{0}_win32', matrix.arch) || format('{0}-{1}', matrix.os, matrix.arch) }}
        run: |
          mkdir -p dist/deps
          # Download all wheels
          pip download -r requirements-all.txt -d dist/deps \
            --platform $PIP_PLATFORM \
            --python-version ${{ matrix.python-version }} \
            --no-deps

      - name: Build sift-py wheel
        working-directory: python
        run: |
          python -m build --wheel

      - name: Create distribution archive
        working-directory: python
        run: |
          python -c "import shutil; shutil.make_archive('dist/sift-py-dist-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}', 'zip', 'dist')"

      - name: Upload distribution archive
        uses: actions/upload-artifact@v4
        with:
          name: sift-py-dist-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}
          path: python/dist/sift-py-dist-*.zip
          retention-days: 7

  verify_distributions:
    name: Verify distributions
    needs: build_packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: sift-py-dist-*
          path: dist
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install twine
        run: python -m pip install twine

      - name: Extract and verify distributions
        run: |
          # Extract all zip files
          for zip in dist/*.zip; do
            unzip -o "$zip" -d "./extracted/$(basename "$zip" .zip)"
          done
          
          # Check all wheels with twine
          find ./extracted -name "*.whl" -exec twine check {} +

      - name: Test installations
        run: |
          # Test installation from each distribution
          for dist_dir in ./extracted/*; do
            echo "Testing installation from $dist_dir"
            # Install the main package wheel with different combinations of extras
            main_wheel=$(find "$dist_dir" -name "sift_stack_py*.whl")
            pip install --no-index --find-links="$dist_dir" "$main_wheel"
            pip install --no-index --find-links="$dist_dir" "$main_wheel[openssl]"
            pip install --no-index --find-links="$dist_dir" "$main_wheel[build]"
            pip install --no-index --find-links="$dist_dir" "$main_wheel[dev]"
            pip install --no-index --find-links="$dist_dir" "$main_wheel[openssl,build,dev]"
            pip uninstall -y sift_stack_py
          done
