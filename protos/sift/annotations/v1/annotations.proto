syntax = "proto3";

package sift.annotations.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "azimuth/gen/protos/go/sift/annotations/v1;annotationsv1pb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {title: "Annotation service"}
};

service AnnotationService {
  rpc CreateAnnotation(CreateAnnotationRequest) returns (CreateAnnotationResponse) {
    option (google.api.http) = {
      post: "/api/v1/annotations"
      body: "*"
    };
  }
  rpc DeleteAnnotation(DeleteAnnotationRequest) returns (DeleteAnnotationResponse) {
    option (google.api.http) = {delete: "/api/v1/annotations/{annotation_id}"};
  }
  rpc BatchDeleteAnnotations(BatchDeleteAnnotationsRequest) returns (BatchDeleteAnnotationsResponse) {
    option (google.api.http) = {
      post: "/api/v1/annotations:batchDelete",
      body: "*"
    };
  }
  rpc ListAnnotations(ListAnnotationsRequest) returns (ListAnnotationsResponse) {
    option (google.api.http) = {get: "/api/v1/annotations"};
  }
  rpc GetAnnotation(GetAnnotationRequest) returns (GetAnnotationResponse) {
    option (google.api.http) = {get: "/api/v1/annotations/{annotation_id}"};
  }
  rpc UpdateAnnotation(UpdateAnnotationRequest) returns (UpdateAnnotationResponse) {
    option (google.api.http) = {
      patch: "/api/v1/annotations"
      body: "*"
    };
  }
}

message Annotation {
  string annotation_id = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  string description = 3 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp start_time = 4 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp end_time = 5 [(google.api.field_behavior) = REQUIRED];
  string created_by_user_id = 6 [(google.api.field_behavior) = REQUIRED];
  string modified_by_user_id = 7 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp created_date = 8 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp modified_date = 9 [(google.api.field_behavior) = REQUIRED];
  optional string run_id = 10 [(google.api.field_behavior) = OPTIONAL];
  optional AnnotationState state = 11 [(google.api.field_behavior) = OPTIONAL];
  string organization_id = 12 [(google.api.field_behavior) = REQUIRED];
  string assigned_to_user_id = 13 [(google.api.field_behavior) = OPTIONAL];
  AnnotationType annotation_type = 14 [(google.api.field_behavior) = REQUIRED];
  repeated string tags = 15 [(google.api.field_behavior) = REQUIRED];
  optional string legend_config = 16 [(google.api.field_behavior) = OPTIONAL];
  optional string created_by_condition_id = 17 [(google.api.field_behavior) = OPTIONAL];
}

enum AnnotationState {
  ANNOTATION_STATE_UNSPECIFIED = 0;
  ANNOTATION_STATE_OPEN = 1;
  ANNOTATION_STATE_FLAGGED = 2;
  ANNOTATION_STATE_RESOLVED = 3;
}
enum AnnotationType {
  ANNOTATION_TYPE_UNSPECIFIED = 0;
  ANNOTATION_TYPE_DATA_REVIEW = 1;
  ANNOTATION_TYPE_PHASE = 2;
}

message AnnotationLinkedChannelsChannel {
  string channel_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message AnnotationLinkedChannelsBitFieldElement {
  string channel_id = 1 [(google.api.field_behavior) = REQUIRED];
  string bit_field_name = 2 [(google.api.field_behavior) = REQUIRED];
}

message AnnotationLinkedChannel {
  oneof type {
    AnnotationLinkedChannelsChannel channel = 1;
    AnnotationLinkedChannelsBitFieldElement bit_field_element = 2;
  }
}

// The request for a call to `AnnotationService_CreateAnnotation` to create a new annotation.
// At least 1 asset, tag, or channel must be specified.
message CreateAnnotationRequest {
  // The name assigned to the new annotation.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  // A short description about the new annotation.
  string description = 2 [(google.api.field_behavior) = OPTIONAL];
  // When the annotation starts.
  google.protobuf.Timestamp start_time = 3 [(google.api.field_behavior) = REQUIRED];
  // When the annotation ends.
  google.protobuf.Timestamp end_time = 4 [(google.api.field_behavior) = REQUIRED];
  // The names of the assets to associate with this annotation.
  repeated string assets = 5 [(google.api.field_behavior) = OPTIONAL];
  // The channels to associate with this annotation.
  repeated AnnotationLinkedChannel linked_channels = 6 [(google.api.field_behavior) = OPTIONAL];
  // The names of the tags to associate with this annotation.
  repeated string tags = 7 [(google.api.field_behavior) = OPTIONAL];
  // The ID of the run that this annotation is associated with.
  optional string run_id = 8 [(google.api.field_behavior) = OPTIONAL];
  // The ID of the user that this annotation is assigned to.
  optional string assign_to_user_id = 9 [(google.api.field_behavior) = OPTIONAL];
  // The organization associated with this annotation. An organization ID is only required
  // if the user belongs to multiple organizations.
  string organization_id = 10 [(google.api.field_behavior) = OPTIONAL];
  // The state of the annotation. If an annotation has an `annotation_type` of `ANNOTATION_TYPE_PHASE`, then state must be
  // unset, otherwise an error will be returned.
  optional AnnotationState state = 11 [(google.api.field_behavior) = OPTIONAL];
  // The type of the annotation.
  AnnotationType annotation_type = 12 [(google.api.field_behavior) = OPTIONAL];
  // The ID of the rule condition that created this annotation.
  optional string created_by_condition_id = 14 [(google.api.field_behavior) = OPTIONAL];
  // A JSON string containing the axes configuration of the annotation's linked channels.
  optional string legend_config = 13 [(google.api.field_behavior) = OPTIONAL];
}

// The result of a call to `AnnotationService_CreateAnnotation`.
message CreateAnnotationResponse {
  Annotation annotation = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request for a call to `AnnotationService_DeleteAnnotation`.
message DeleteAnnotationRequest {
  string annotation_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `AnnotationService_DeleteAnnotation`.
message DeleteAnnotationResponse {}

message BatchDeleteAnnotationsRequest {
  repeated string annotation_ids = 1 [(google.api.field_behavior) = REQUIRED];
}

message BatchDeleteAnnotationsResponse {}

// The request for a call to `AnnotationService_GetAnnotation`.
message GetAnnotationRequest {
  string annotation_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `AnnotationService_GetAnnotation`.
message GetAnnotationResponse {
  Annotation annotation = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request for a call to `AnnotationService_ListAnnotations` to retrieve annotations.
message ListAnnotationsRequest {
  // The maximum number of annotations to return. The service may return fewer than this value.
  // If unspecified, at most 50 annotations will be returned. The maximum value is 1000; values above
  // 1000 will be coerced to 1000. Optional.
  uint32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

  // A page token, received from a previous `ListAnnotations` call.
  // Provide this to retrieve the subsequent page.
  // When paginating, all other parameters provided to `ListAnnotations` must match
  // the call that provided the page token. Optional.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
  // Available fields to filter by are `annotation_id`, `start_time`, `end_time`,
  // `created_date`, `modified_date`, `run_id`, `name`, `description`, `state`, `created_by_user_id`, `created_by_condition_id`,
  // and `annotation_type`.
  // For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
  // For more information about the fields used for filtering, please refer to [this definition](/ingestion/api#sift_annotations_v1_annotations-proto). Optional.
  string filter = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The result of a call to `AnnotationService_ListAnnotations`.
message ListAnnotationsResponse {
  repeated Annotation annotations = 1;
  string next_page_token = 5;
}

// The request for a call to `AnnotationService_UpdateAnnotation` to update an annotation.
message UpdateAnnotationRequest {
  // The annotation to update.
  Annotation annotation = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated. The fields available to be updated are `name`, `description`, `start_time`,
  // `end_time`, `assigned_to_user_id`, `state`, and `tags`.
  //
  // Important Note: if `tags` is specified in the update mask and `annotation.tags` is an empty list then all associated tags on the annotation
  // will be removed.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `AnnotationService_UpdateAnnotation`.
message UpdateAnnotationResponse {
  Annotation annotation = 1;
}
