syntax = "proto3";

package sift.views.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {title: "View Service"}
};

service ViewService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Service to programmatically interact with views."
    external_docs: {
      url: "https://customer.support.siftstack.com/servicedesk/customer/portal/2/article/298188809";
      description: "Read more about what views are.";
    }
  };

  // Retrieves a view.
  rpc GetView(GetViewRequest) returns (GetViewResponse) {
    option (google.api.http) = {get: "/api/v1/views/{view_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetView"
      description: "Retrieves a view."
    };
  }

  // Creates a view.
  rpc CreateView(CreateViewRequest) returns (CreateViewResponse) {
    option (google.api.http) = {
      post: "/api/v1/views"
      body: "view"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreateView"
      description: "Creates a view."
    };
  }

  // Updates an existing view using using the list of fields specified in `update_mask`.
  rpc UpdateView(UpdateViewRequest) returns (UpdateViewResponse) {
    option (google.api.http) = {
      patch: "/api/v1/views/{view.view_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "UpdateView"
      description: "Updates an existing view using using the list of fields specified in `update_mask`."
    };
  }

  // Retrieves views using an optional filter.
  rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {
    option (google.api.http) = {get: "/api/v1/views"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "ListViews"
      description: "Retrieves views using an optional filter."
    };
  }

  // Lists views that apply to assets/runs.
  rpc ListApplicableViews(ListApplicableViewsRequest) returns (ListApplicableViewsResponse) {
    option (google.api.http) = {get: "/api/v1/views:applicable"};
  }

  // Deletes a view.
  rpc DeleteView(DeleteViewRequest) returns (DeleteViewResponse) {
    option (google.api.http) = {delete: "/api/v1/views/{view_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "DeleteView"
      description: "Deletes a view."
    };
  }

  // Pins a view.
  rpc PinView(PinViewRequest) returns (PinViewResponse) {
    option (google.api.http) = {
      patch: "/api/v1/views/{view_id}/pin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "PinView"
      description: "Pins a view."
      external_docs: {
        url: "https://customer.support.siftstack.com/servicedesk/customer/portal/2/article/295436289";
        description: "Learn more about pinning views.";
      }
    };
  }

  // Unpins a view.
  rpc UnpinView(UnpinViewRequest) returns (UnpinViewResponse) {
    option (google.api.http) = {
      patch: "/api/v1/views/{view_id}/unpin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "UnpinView"
      description: "Unpins a view."
      external_docs: {
        url: "https://customer.support.siftstack.com/servicedesk/customer/portal/2/article/295436289";
        description: "Learn more about pinning views.";
      }
    };
  }
}

message View {
  string view_id = 1;
  string name = 2;
  message AxisGroups {
    repeated string left = 1;
    repeated string right = 2;
  }
  message Channel {
    string name = 1 [(google.api.field_behavior) = REQUIRED];
    string component = 2 [(google.api.field_behavior) = REQUIRED];
    string data_type = 3 [(google.api.field_behavior) = REQUIRED];
    string axis_group = 4;
    repeated string bit_field_names = 5;

    message CalculatedChannelConfig {
      message ChannelReference {
        string name = 1 [(google.api.field_behavior) = REQUIRED];
        string component = 2 [(google.api.field_behavior) = REQUIRED];
      }
      string channel_key = 1 [(google.api.field_behavior) = REQUIRED];
      map<string, ChannelReference> channel_references = 2 [(google.api.field_behavior) = REQUIRED];
      string expression = 3 [(google.api.field_behavior) = REQUIRED];
      string unit = 4 [(google.api.field_behavior) = REQUIRED];
    }
    optional CalculatedChannelConfig calculated_channel_config = 6;
  }
  AxisGroups axis_groups = 3;
  repeated Channel channels = 4;
  google.protobuf.Timestamp created_date = 5;
  google.protobuf.Timestamp modified_date = 6;
  string created_by_user_id = 7;
  string organization_id = 8;
  string modified_by_user_id = 9;
  bool is_pinned = 10;
}

message GetViewRequest {
  string view_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetViewResponse {
  View view = 1;
}

message CreateViewRequest {
  View view = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateViewResponse {
  View view = 1;
}

message UpdateViewRequest {
  View view = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateViewResponse {
  View view = 1;
}

message ListViewsRequest {
  // The maximum number of views to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 views will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  uint32 page_size = 1;

  // A page token, received from a previous `ListViews` call.
  // Provide this to retrieve the subsequent page.
  // When paginating, all other parameters provided to `ListViews` must match
  // the call that provided the page token.
  string page_token = 2;

  // A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
  // Available fields to filter by are 'name', 'createdDate', and 'modifiedDate'.
  // For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
  // For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#view). Optional.
  string filter = 3;
}

message ListViewsResponse {
  repeated View views = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message ListApplicableViewsRequest {
  // The maximum number of views to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 views will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  uint32 page_size = 1;

  // A page token, received from a previous `ListApplicableViews` call.
  // Provide this to retrieve the subsequent page.
  // When paginating, all other parameters provided to `ListApplicableViews` must match
  // the call that provided the page token.
  string page_token = 2;

  repeated string asset_ids = 3 [(google.api.field_behavior) = OPTIONAL];
  repeated string run_ids = 4 [(google.api.field_behavior) = OPTIONAL];
}

message ListApplicableViewsResponse {
  repeated View views = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteViewRequest {
  string view_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteViewResponse {}

message PinViewRequest {
  string view_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message PinViewResponse {}

message UnpinViewRequest {
  string view_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message UnpinViewResponse {}
