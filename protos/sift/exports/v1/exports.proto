syntax = "proto3";

package sift.exports.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "sift/calculated_channels/v2/calculated_channels.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {title: "Exports service"}
};

service ExportService {
  rpc ExportData(ExportDataRequest) returns (ExportDataResponse) {
    option (google.api.http) = {
      post: "/api/v1/export"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "ExportData"
      description: "Export data."
    };
  }

  rpc GetDownloadUrl(GetDownloadUrlRequest) returns (GetDownloadUrlResponse) {
    option (google.api.http) = {get: "/api/v1/export/{job_id}/download-url"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetDownloadUrl"
      description: "Retrieve the download URL for a completed job."
    };
  }
}

message ExportDataRequest {
  oneof time_selection {
    // If time_range used, channel_ids or calculated_chanel_configs must be provided to scope data.
    TimeRange time_range = 1;
    // Runs used to perform time selection and scope data. Times can optionally be provided to further scope within runs.
    // If channel_ids or calculated_channel_configs not provided, all channels from Run Assets are added to scope.
    RunsAndTimeRange runs_and_time_range = 2;
    // Assets and times provided to scope data.
    // If channel_ids or calculated_channel_configs not provided, all channels from Assets are added to scope.
    AssetsAndTimeRange assets_and_time_range = 3;
  }
  repeated string channel_ids = 4 [(google.api.field_behavior) = OPTIONAL];
  repeated CalculatedChannelConfig calculated_channel_configs = 5 [(google.api.field_behavior) = OPTIONAL];

  ExportOutputFormat output_format = 6 [(google.api.field_behavior) = REQUIRED];
  ExportOptions export_options = 7 [(google.api.field_behavior) = REQUIRED];
}

enum ExportOutputFormat {
  EXPORT_OUTPUT_FORMAT_UNSPECIFIED = 0;
  EXPORT_OUTPUT_FORMAT_CSV = 1;
  EXPORT_OUTPUT_FORMAT_SUN = 2;
}

message TimeRange {
  google.protobuf.Timestamp start_time = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp stop_time = 2 [(google.api.field_behavior) = REQUIRED];
}

message RunsAndTimeRange {
  repeated string run_ids = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp start_time = 2 [(google.api.field_behavior) = OPTIONAL];
  google.protobuf.Timestamp stop_time = 3 [(google.api.field_behavior) = OPTIONAL];
}

message AssetsAndTimeRange {
  repeated string asset_ids = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp start_time = 2 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp stop_time = 3 [(google.api.field_behavior) = REQUIRED];
}

message CalculatedChannelConfig {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  string expression = 2 [(google.api.field_behavior) = REQUIRED];
  repeated sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference channel_references = 3 [(google.api.field_behavior) = REQUIRED];
  optional string units = 4 [(google.api.field_behavior) = OPTIONAL];
}

message ExportOptions {
  // Whether to use legacy format string for channel headers which contains key-value metadata.
  bool use_legacy_format = 1;
  // Whether to simplify channel names by removing the component part of the name if name is unique in export file
  bool simplify_channel_names = 2;
  // Whether to combine runs. e.g. channels from the same asset in different runs will be combined into a single column of data.
  bool combine_runs = 3;
  // Split each asset into their own export file
  bool split_export_by_asset = 4;
  // Split each run into their own export file
  bool split_export_by_run = 5;
}

message ExportDataResponse {
  // Pre-signed URL of exported zip containing export files. This will be blank if
  // the job is processed as a background job, in which case `job_id` will be non-empty.
  string presigned_url = 1 [(google.api.field_behavior) = OPTIONAL];

  // This will be non-empty if the export is being processed asynchronously in a background job.
  string job_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

message GetDownloadUrlRequest {
  string job_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetDownloadUrlResponse {
  string presigned_url = 1 [(google.api.field_behavior) = REQUIRED];
}
