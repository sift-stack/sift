syntax = "proto3";

package sift.panel_configurations.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "sift/calculated_channels/v2/calculated_channels.proto";
import "sift/common/type/v1/channel_bit_field_element.proto";
import "sift/common/type/v1/channel_data_type.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {title: "Panel Configuration Service"}
};

service PanelConfigurationService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Service to programmatically interact with panel configurations."};

  // Retrieves a panel configuration.
  rpc GetPanelConfiguration(GetPanelConfigurationRequest) returns (GetPanelConfigurationResponse) {
    option (google.api.http) = {get: "/api/v1/panel-configurations/{panel_configuration_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetPanelConfiguration"
      description: "Retrieves a panel configuration."
    };
  }

  // Retrieves panel configurations using an optional filter.
  rpc ListPanelConfigurations(ListPanelConfigurationsRequest) returns (ListPanelConfigurationsResponse) {
    option (google.api.http) = {get: "/api/v1/panel-configurations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "ListPanelConfigurations"
      description: "Retrieves panel configurations using an optional filter."
    };
  }

  // Creates a panel configuration.
  rpc CreatePanelConfiguration(CreatePanelConfigurationRequest) returns (CreatePanelConfigurationResponse) {
    option (google.api.http) = {
      post: "/api/v1/panel-configurations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreatePanelConfiguration"
      description: "Creates a panel configuration."
    };
  }

  // Updates an existing panel configuration using using the list of fields specified in `update_mask`.
  rpc UpdatePanelConfiguration(UpdatePanelConfigurationRequest) returns (UpdatePanelConfigurationResponse) {
    option (google.api.http) = {
      patch: "/api/v1/panel-configurations/{panel_configuration.panel_configuration_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "UpdatePanelConfiguration"
      description: "Updates an existing panel configuration using using the list of fields specified in `update_mask`."
    };
  }
}

enum PanelType {
  PANEL_TYPE_UNSPECIFIED = 0 [deprecated = true];
  PANEL_TYPE_TIMESERIES = 1;
  PANEL_TYPE_TABLE = 2;
  PANEL_TYPE_FFT = 3;
  PANEL_TYPE_GEO_MAP = 4;
  PANEL_TYPE_SCATTER_PLOT = 5;
  PANEL_TYPE_FILE_VIEWER = 6;
  PANEL_TYPE_HISTOGRAM = 7;
}

enum PlottedChannelType {
  PLOTTED_CHANNEL_TYPE_UNSPECIFIED = 0 [deprecated = true];
  PLOTTED_CHANNEL_TYPE_REGULAR = 1;
  PLOTTED_CHANNEL_TYPE_CALCULATED_CHANNEL = 2;
  PLOTTED_CHANNEL_TYPE_BIT_FIELD_ELEMENT = 3;
  PLOTTED_CHANNEL_TYPE_ENUM = 4;
}

message PanelConfiguration {
  string panel_configuration_id = 1;
  string version_id = 2;
  uint32 version = 3;
  string change_message = 4;

  string name = 5;
  PanelType panel_type = 6;
  repeated ChannelConfigurations channel_configurations = 7;
  optional google.protobuf.Struct chart_settings = 8;

  google.protobuf.Timestamp created_date = 9;
  google.protobuf.Timestamp modified_date = 10;
  google.protobuf.Timestamp archived_date = 11;
  string created_by_user_id = 12;
  string modified_by_user_id = 13;
  bool is_archived = 14;
}

message ChannelConfigurations {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  PlottedChannelType type = 2 [(google.api.field_behavior) = REQUIRED];
  string color = 3 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Struct channel_settings = 4 [(google.api.field_behavior) = REQUIRED];

  // bitfield
  optional int32 bit_field_index = 5;
  optional sift.common.type.v1.ChannelBitFieldElement bit_field_element = 6;

  // temporary calculated channel
  optional string expression = 7;
  repeated sift.calculated_channels.v2.CalculatedChannelAbstractChannelReference expression_channel_references = 8;
  optional sift.common.type.v1.ChannelDataType data_type = 9;
}

message GetPanelConfigurationRequest {
  string panel_configuration_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetPanelConfigurationResponse {
  PanelConfiguration panel_configuration = 1;
}
message ListPanelConfigurationsRequest {
  // The maximum number of panel configurations to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 panel configurations will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  uint32 page_size = 1;

  // A page token, received from a previous `ListPanelConfigurations` call.
  // Provide this to retrieve the subsequent page.
  // When paginating, all other parameters provided to `ListPanelConfigurations` must match
  // the call that provided the page token.
  string page_token = 2;

  // A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string
  // Available fields to filter by are 'name', 'created_date', 'modified_date', and 'is_archived'.
  // For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
  string filter = 3;

  // How to order the retrieved panel configurations. Formatted as a comma-separated string i.e. "FIELD_NAME[ desc],...".
  // Available fields to order_by are `name`.
  // If left empty, items are ordered by `name` in ascending order (alphabetical).
  // For more information about the format of this field, read [this](https://google.aip.dev/132#ordering)
  // Example: "name"
  string order_by = 4 [(google.api.field_behavior) = OPTIONAL];
}

message ListPanelConfigurationsResponse {
  repeated PanelConfiguration panel_configurations = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreatePanelConfigurationRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  PanelType panel_type = 2 [(google.api.field_behavior) = REQUIRED];
  repeated ChannelConfigurations channel_configurations = 3 [(google.api.field_behavior) = REQUIRED];
  optional google.protobuf.Struct chart_settings = 4;
}

message CreatePanelConfigurationResponse {
  PanelConfiguration panel_configuration = 1;
}

// The request for a call to `PanelConfigurationService_UpdatePanelConfiguration` to update a panel configuration. Updating a panel
// configuration creates a new version of the panel configuration, leaving the previous untouched. If no update is deemed necessary, then the
// the current version is returned. Use `is_archived` to archive/unarchive a panel configuration.
message UpdatePanelConfigurationRequest {
  // The panel configuration to update.
  PanelConfiguration panel_configuration = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated. The fields available to be updated are `name`, `panel_type`, `channel_configurations`,
  // `chart_settings`, and `is_archived`.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdatePanelConfigurationResponse {
  PanelConfiguration panel_configuration = 1;
}
