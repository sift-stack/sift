syntax = "proto3";

package sift.runs.v2;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "azimuth/gen/protos/go/sift/runs/v2;runsv2pb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {title: "Run service"}
};

service RunService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Service to programmatically interact with [runs](/glossary#run)."
    external_docs: {
      url: "https://customer.support.siftstack.com/servicedesk/customer/portal/2/article/265454053";
      description: "Read more about what runs are.";
    }
  };

  // Retrieve a run.
  rpc GetRun(GetRunRequest) returns (GetRunResponse) {
    option (google.api.http) = {get: "/api/v2/runs/{run_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetRun"
      description: "Retrieve a run."
    };
  }

  // Retrieve runs using an optional filter.
  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse) {
    option (google.api.http) = {get: "/api/v2/runs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "ListRuns"
      description: "Retrieve runs using an optional filter."
    };
  }

  // Create a run.
  rpc CreateRun(CreateRunRequest) returns (CreateRunResponse) {
    option (google.api.http) = {
      post: "/api/v2/runs"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreateRun"
      description: "Create a run."
    };
  }

  // Updates an existing run using using the list of fields specified in `update_mask`.
  rpc UpdateRun(UpdateRunRequest) returns (UpdateRunResponse) {
    option (google.api.http) = {
      patch: "/api/v2/runs"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "UpdateRun"
      description: "Updates an existing run using using the list of fields specified in `update_mask`."
    };
  }

  // Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`.
  rpc DeleteRun(DeleteRunRequest) returns (DeleteRunResponse) {
    option (google.api.http) = {delete: "/api/v2/runs/{run_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "DeleteRun"
      description: "Permanently delete a given run. In order for a run to be deleted it must have a set `stop_time`."
    };
  }

  // Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`.
  rpc StopRun(StopRunRequest) returns (StopRunResponse) {
    option (google.api.http) = {
      patch: "/api/v2/runs:stop"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "StopRun"
      description: "Set the stop time of a run to the current time. To set the stop time of a run to an arbitrary time see `UpdateRun`."
    };
  }

  // Associates a list of assets with a given run.
  rpc CreateAutomaticRunAssociationForAssets(CreateAutomaticRunAssociationForAssetsRequest) returns (CreateAutomaticRunAssociationForAssetsResponse) {
    option (google.api.http) = {
      post: "/api/v2/runs/{run_id}:create-automatic-run-association-for-assets"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreateAutomaticRunAssociationForAssets"
      description: "Associates a list of assets with a given run."
    };
  }
}

message Run {
  string run_id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp created_date = 2 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp modified_date = 3 [(google.api.field_behavior) = REQUIRED];
  string created_by_user_id = 4 [(google.api.field_behavior) = REQUIRED];
  string modified_by_user_id = 5 [(google.api.field_behavior) = REQUIRED];
  string organization_id = 6 [(google.api.field_behavior) = REQUIRED];
  optional google.protobuf.Timestamp start_time = 7 [(google.api.field_behavior) = OPTIONAL];
  optional google.protobuf.Timestamp stop_time = 8 [(google.api.field_behavior) = OPTIONAL];
  bool is_pinned = 9 [(google.api.field_behavior) = REQUIRED];
  string name = 10 [(google.api.field_behavior) = REQUIRED];
  string description = 11 [(google.api.field_behavior) = REQUIRED];
  repeated string tags = 12 [(google.api.field_behavior) = REQUIRED];
}

// The request for a call to `RunService_GetRun` to retrieve run.
message GetRunRequest {
  // The ID of the run to retrieve.
  string run_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `RunService_GetRun` containing the requested run.
message GetRunResponse {
  Run run = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request for a call to `RunService_ListRuns` to retrieve runs.
message ListRunsRequest {
  // The maximum number of runs to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 runs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  uint32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

  // A page token, received from a previous `ListRuns` call.
  // Provide this to retrieve the subsequent page.
  // When paginating, all other parameters provided to `ListRuns` must match
  // the call that provided the page token.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // A [Common Expression Language (CEL)](https://github.com/google/cel-spec) filter string.
  // Available fields to filter by are `run_id`, `organization_id`, `name`, `description`, `created_by_user_id`, `modified_by_user_id`,
  // `created_date`, `modified_date`, `start_time`, `stop_time`, `client_key`, and `is_pinned`.
  // For further information about how to use CELs, please refer to [this guide](https://github.com/google/cel-spec/blob/master/doc/langdef.md#standard-definitions).
  // For more information about the fields used for filtering, please refer to [this definition](/protocol-buffers/documentation#run). Optional.
  string filter = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response of a call to `RunService_ListRuns` containing requested runs.
message ListRunsResponse {
  repeated Run runs = 1 [(google.api.field_behavior) = REQUIRED];
  string next_page_token = 2;
}

// The request of a call to `RunService_CreateRuns` to create a new run.
message CreateRunRequest {
  // The name that will be assigned to the new run.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // A description about the new run.
  string description = 2 [(google.api.field_behavior) = REQUIRED];

  // Tags to associate with the new run.
  repeated string tags = 3 [(google.api.field_behavior) = OPTIONAL];

  // The time at which data ingestion begins for this new run. It must be before the `stop_time`, and it must
  // be provided if a `stop_time` is provided.
  // Important note: `start_time` will be automatically computed during data ingestion and will be set
  // based on the timestamp of the data for this run.
  google.protobuf.Timestamp start_time = 4 [(google.api.field_behavior) = OPTIONAL];

  // The time at which data ingestion for this new run concludes.
  // Important note: `stop_time` will be automatically computed during data ingestion and will be
  // set based on the timestamp of the data for this run.
  google.protobuf.Timestamp stop_time = 5 [(google.api.field_behavior) = OPTIONAL];

  // An organization ID is only required if the user belongs to multiple organizations.
  string organization_id = 7 [(google.api.field_behavior) = OPTIONAL];
}

// The response of a call to `RunService_CreateRuns` containing the newly created run.
message CreateRunResponse {
  Run run = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request for a call to `RunService_UpdateRun` to update an existing run.
message UpdateRunRequest {
  // The run to update. The run's `run_id` field is used to identify the run to update
  // and is required.
  Run run = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated. The fields available to be updated are `name`, `description`,
  // `start_time`, `stop_time`, `is_pinned`,  and `tags`.
  // Important Note: When updating the `start_time`, please be aware that if a subsequent data ingestion
  // commences for this run, the `start_time` will be automatically overwritten and set to the timestamp
  // corresponding to the beginning of the latest run.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `RunService_UpdateRun` containing the updated run.
message UpdateRunResponse {
  Run run = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateAutomaticRunAssociationForAssetsRequest {
  // The ID of the run to associate the asset with.
  string run_id = 1 [(google.api.field_behavior) = REQUIRED];

  // A list of asset names to automatically associate with the run.
  // Any data that is received for these assets will automatically added to the run.
  // This applies even if the run has concluded, so long as the new data contains
  // timestamps that are between the `start_time` and `stop_time`.
  // If any of the assets are already associated with a different run whose run
  // period (the period between `start_time` and `end_time`) overlaps with the
  // requested run period, an error will be returned.
  repeated string asset_names = 2 [(google.api.field_behavior) = REQUIRED];
}

message CreateAutomaticRunAssociationForAssetsResponse {}

// The request for a call to `RunService_DeleteRun`.
message DeleteRunRequest {
  string run_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `RunService_DeleteRun`.
message DeleteRunResponse {}

// The request for a call to `RunService_StopRun` to stop a run.
message StopRunRequest {
  string run_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response of a call to `RunService_StopRun` to stop a run.
message StopRunResponse {}
