// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Annotation {
    #[prost(string, tag="1")]
    pub annotation_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="5")]
    pub end_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="6")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub modified_by_user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="8")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="9")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, optional, tag="10")]
    pub run_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration="AnnotationState", optional, tag="11")]
    pub state: ::core::option::Option<i32>,
    #[prost(string, tag="12")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub assigned_to_user_id: ::prost::alloc::string::String,
    #[prost(enumeration="AnnotationType", tag="14")]
    pub annotation_type: i32,
    #[prost(string, repeated, tag="15")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag="16")]
    pub legend_config: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="17")]
    pub created_by_condition_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="18")]
    pub created_by_rule_condition_version_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="19")]
    pub report_rule_version_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag="20")]
    pub pending: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnotationLinkedChannelsChannel {
    #[prost(string, tag="1")]
    pub channel_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnotationLinkedChannelsBitFieldElement {
    #[prost(string, tag="1")]
    pub channel_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub bit_field_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnotationLinkedChannel {
    #[prost(oneof="annotation_linked_channel::Type", tags="1, 2")]
    pub r#type: ::core::option::Option<annotation_linked_channel::Type>,
}
/// Nested message and enum types in `AnnotationLinkedChannel`.
pub mod annotation_linked_channel {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag="1")]
        Channel(super::AnnotationLinkedChannelsChannel),
        #[prost(message, tag="2")]
        BitFieldElement(super::AnnotationLinkedChannelsBitFieldElement),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAnnotationRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="4")]
    pub end_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, repeated, tag="5")]
    pub assets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="6")]
    pub linked_channels: ::prost::alloc::vec::Vec<AnnotationLinkedChannel>,
    #[prost(string, repeated, tag="7")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag="8")]
    pub run_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="9")]
    pub assign_to_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(enumeration="AnnotationState", optional, tag="11")]
    pub state: ::core::option::Option<i32>,
    #[prost(enumeration="AnnotationType", tag="12")]
    pub annotation_type: i32,
    #[prost(string, optional, tag="14")]
    pub created_by_condition_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="13")]
    pub legend_config: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="15")]
    pub created_by_rule_condition_version_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAnnotationResponse {
    #[prost(message, optional, tag="1")]
    pub annotation: ::core::option::Option<Annotation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteAnnotationRequest {
    #[prost(string, tag="1")]
    pub annotation_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteAnnotationResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDeleteAnnotationsRequest {
    #[prost(string, repeated, tag="1")]
    pub annotation_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchDeleteAnnotationsResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAnnotationRequest {
    #[prost(string, tag="1")]
    pub annotation_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAnnotationResponse {
    #[prost(message, optional, tag="1")]
    pub annotation: ::core::option::Option<Annotation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAnnotationsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAnnotationsResponse {
    #[prost(message, repeated, tag="1")]
    pub annotations: ::prost::alloc::vec::Vec<Annotation>,
    #[prost(string, tag="5")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAnnotationRequest {
    #[prost(message, optional, tag="1")]
    pub annotation: ::core::option::Option<Annotation>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAnnotationResponse {
    #[prost(message, optional, tag="1")]
    pub annotation: ::core::option::Option<Annotation>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AnnotationState {
    Unspecified = 0,
    Open = 1,
    Flagged = 2,
    Resolved = 3,
}
impl AnnotationState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AnnotationState::Unspecified => "ANNOTATION_STATE_UNSPECIFIED",
            AnnotationState::Open => "ANNOTATION_STATE_OPEN",
            AnnotationState::Flagged => "ANNOTATION_STATE_FLAGGED",
            AnnotationState::Resolved => "ANNOTATION_STATE_RESOLVED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANNOTATION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "ANNOTATION_STATE_OPEN" => Some(Self::Open),
            "ANNOTATION_STATE_FLAGGED" => Some(Self::Flagged),
            "ANNOTATION_STATE_RESOLVED" => Some(Self::Resolved),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AnnotationType {
    Unspecified = 0,
    DataReview = 1,
    Phase = 2,
}
impl AnnotationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AnnotationType::Unspecified => "ANNOTATION_TYPE_UNSPECIFIED",
            AnnotationType::DataReview => "ANNOTATION_TYPE_DATA_REVIEW",
            AnnotationType::Phase => "ANNOTATION_TYPE_PHASE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANNOTATION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ANNOTATION_TYPE_DATA_REVIEW" => Some(Self::DataReview),
            "ANNOTATION_TYPE_PHASE" => Some(Self::Phase),
            _ => None,
        }
    }
}
include!("sift.annotations.v1.tonic.rs");
include!("sift.annotations.v1.serde.rs");
// @@protoc_insertion_point(module)