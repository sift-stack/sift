// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Notification {
    #[prost(string, tag="1")]
    pub notification_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="3")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="4")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub modified_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub recipient_user_id: ::prost::alloc::string::String,
    #[prost(bool, tag="8")]
    pub is_read: bool,
    #[prost(string, tag="9")]
    pub full_link: ::prost::alloc::string::String,
    #[prost(enumeration="NotificationKind", tag="10")]
    pub notification_type: i32,
    #[prost(string, tag="11")]
    pub contents: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub entity_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNotificationsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNotificationsResponse {
    #[prost(message, repeated, tag="1")]
    pub notifications: ::prost::alloc::vec::Vec<Notification>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateNotificationsRequest {
    #[prost(message, repeated, tag="1")]
    pub requests: ::prost::alloc::vec::Vec<UpdateNotificationRequest>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateNotificationRequest {
    #[prost(message, optional, tag="1")]
    pub notification: ::core::option::Option<Notification>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateNotificationsResponse {
    #[prost(message, repeated, tag="1")]
    pub notifications: ::prost::alloc::vec::Vec<Notification>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NotificationKind {
    Unspecified = 0,
    Text = 1,
    AnnotationAssigned = 2,
    MentionedInAnnotationComment = 3,
    ConditionTriggered = 4,
    AnnotationStateChanged = 5,
    ReportReady = 6,
}
impl NotificationKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NotificationKind::Unspecified => "NOTIFICATION_KIND_UNSPECIFIED",
            NotificationKind::Text => "NOTIFICATION_KIND_TEXT",
            NotificationKind::AnnotationAssigned => "NOTIFICATION_KIND_ANNOTATION_ASSIGNED",
            NotificationKind::MentionedInAnnotationComment => "NOTIFICATION_KIND_MENTIONED_IN_ANNOTATION_COMMENT",
            NotificationKind::ConditionTriggered => "NOTIFICATION_KIND_CONDITION_TRIGGERED",
            NotificationKind::AnnotationStateChanged => "NOTIFICATION_KIND_ANNOTATION_STATE_CHANGED",
            NotificationKind::ReportReady => "NOTIFICATION_KIND_REPORT_READY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOTIFICATION_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "NOTIFICATION_KIND_TEXT" => Some(Self::Text),
            "NOTIFICATION_KIND_ANNOTATION_ASSIGNED" => Some(Self::AnnotationAssigned),
            "NOTIFICATION_KIND_MENTIONED_IN_ANNOTATION_COMMENT" => Some(Self::MentionedInAnnotationComment),
            "NOTIFICATION_KIND_CONDITION_TRIGGERED" => Some(Self::ConditionTriggered),
            "NOTIFICATION_KIND_ANNOTATION_STATE_CHANGED" => Some(Self::AnnotationStateChanged),
            "NOTIFICATION_KIND_REPORT_READY" => Some(Self::ReportReady),
            _ => None,
        }
    }
}
include!("sift.notifications.v1.tonic.rs");
include!("sift.notifications.v1.serde.rs");
// @@protoc_insertion_point(module)