// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PanelConfiguration {
    #[prost(string, tag="1")]
    pub panel_configuration_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub version_id: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub version: u32,
    #[prost(string, tag="4")]
    pub change_message: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration="PanelType", tag="6")]
    pub panel_type: i32,
    #[prost(message, repeated, tag="7")]
    pub channel_configurations: ::prost::alloc::vec::Vec<ChannelConfigurations>,
    #[prost(message, optional, tag="8")]
    pub chart_settings: ::core::option::Option<::pbjson_types::Struct>,
    #[prost(message, optional, tag="9")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="10")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="11")]
    pub archived_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="12")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub modified_by_user_id: ::prost::alloc::string::String,
    #[prost(bool, tag="14")]
    pub is_archived: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChannelConfigurations {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration="PlottedChannelType", tag="2")]
    pub r#type: i32,
    #[prost(string, tag="3")]
    pub color: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub channel_settings: ::core::option::Option<::pbjson_types::Struct>,
    #[prost(int32, optional, tag="5")]
    pub bit_field_index: ::core::option::Option<i32>,
    #[prost(message, optional, tag="6")]
    pub bit_field_element: ::core::option::Option<super::super::common::r#type::v1::ChannelBitFieldElement>,
    #[prost(string, optional, tag="7")]
    pub expression: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="8")]
    pub expression_channel_references: ::prost::alloc::vec::Vec<super::super::calculated_channels::v2::CalculatedChannelAbstractChannelReference>,
    #[prost(enumeration="super::super::common::r#type::v1::ChannelDataType", optional, tag="9")]
    pub data_type: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPanelConfigurationRequest {
    #[prost(string, tag="1")]
    pub panel_configuration_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPanelConfigurationResponse {
    #[prost(message, optional, tag="1")]
    pub panel_configuration: ::core::option::Option<PanelConfiguration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPanelConfigurationsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPanelConfigurationsResponse {
    #[prost(message, repeated, tag="1")]
    pub panel_configurations: ::prost::alloc::vec::Vec<PanelConfiguration>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePanelConfigurationRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration="PanelType", tag="2")]
    pub panel_type: i32,
    #[prost(message, repeated, tag="3")]
    pub channel_configurations: ::prost::alloc::vec::Vec<ChannelConfigurations>,
    #[prost(message, optional, tag="4")]
    pub chart_settings: ::core::option::Option<::pbjson_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePanelConfigurationResponse {
    #[prost(message, optional, tag="1")]
    pub panel_configuration: ::core::option::Option<PanelConfiguration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePanelConfigurationRequest {
    #[prost(message, optional, tag="1")]
    pub panel_configuration: ::core::option::Option<PanelConfiguration>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePanelConfigurationResponse {
    #[prost(message, optional, tag="1")]
    pub panel_configuration: ::core::option::Option<PanelConfiguration>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PanelType {
    Unspecified = 0,
    Timeseries = 1,
    Table = 2,
    Fft = 3,
    GeoMap = 4,
    ScatterPlot = 5,
    FileViewer = 6,
    Histogram = 7,
}
impl PanelType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PanelType::Unspecified => "PANEL_TYPE_UNSPECIFIED",
            PanelType::Timeseries => "PANEL_TYPE_TIMESERIES",
            PanelType::Table => "PANEL_TYPE_TABLE",
            PanelType::Fft => "PANEL_TYPE_FFT",
            PanelType::GeoMap => "PANEL_TYPE_GEO_MAP",
            PanelType::ScatterPlot => "PANEL_TYPE_SCATTER_PLOT",
            PanelType::FileViewer => "PANEL_TYPE_FILE_VIEWER",
            PanelType::Histogram => "PANEL_TYPE_HISTOGRAM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PANEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PANEL_TYPE_TIMESERIES" => Some(Self::Timeseries),
            "PANEL_TYPE_TABLE" => Some(Self::Table),
            "PANEL_TYPE_FFT" => Some(Self::Fft),
            "PANEL_TYPE_GEO_MAP" => Some(Self::GeoMap),
            "PANEL_TYPE_SCATTER_PLOT" => Some(Self::ScatterPlot),
            "PANEL_TYPE_FILE_VIEWER" => Some(Self::FileViewer),
            "PANEL_TYPE_HISTOGRAM" => Some(Self::Histogram),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlottedChannelType {
    Unspecified = 0,
    Regular = 1,
    CalculatedChannel = 2,
    BitFieldElement = 3,
    Enum = 4,
}
impl PlottedChannelType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PlottedChannelType::Unspecified => "PLOTTED_CHANNEL_TYPE_UNSPECIFIED",
            PlottedChannelType::Regular => "PLOTTED_CHANNEL_TYPE_REGULAR",
            PlottedChannelType::CalculatedChannel => "PLOTTED_CHANNEL_TYPE_CALCULATED_CHANNEL",
            PlottedChannelType::BitFieldElement => "PLOTTED_CHANNEL_TYPE_BIT_FIELD_ELEMENT",
            PlottedChannelType::Enum => "PLOTTED_CHANNEL_TYPE_ENUM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLOTTED_CHANNEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PLOTTED_CHANNEL_TYPE_REGULAR" => Some(Self::Regular),
            "PLOTTED_CHANNEL_TYPE_CALCULATED_CHANNEL" => Some(Self::CalculatedChannel),
            "PLOTTED_CHANNEL_TYPE_BIT_FIELD_ELEMENT" => Some(Self::BitFieldElement),
            "PLOTTED_CHANNEL_TYPE_ENUM" => Some(Self::Enum),
            _ => None,
        }
    }
}
include!("sift.panel_configurations.v1.tonic.rs");
include!("sift.panel_configurations.v1.serde.rs");
// @@protoc_insertion_point(module)