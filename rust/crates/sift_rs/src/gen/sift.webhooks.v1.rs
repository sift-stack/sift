// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Webhook {
    #[prost(string, tag="1")]
    pub webhook_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub target_url: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration="WebhookEventType", tag="5")]
    pub event_type: i32,
    #[prost(string, optional, tag="6")]
    pub payload: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="7")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="8")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="9")]
    pub archived_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="10")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub modified_by_user_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="12")]
    pub http_headers: ::prost::alloc::vec::Vec<WebhookHttpHeader>,
    #[prost(bool, tag="13")]
    pub is_archived: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WebhookLog {
    #[prost(string, tag="1")]
    pub webhook_log_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub webhook_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub event_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(enumeration="WebhookLogStatus", tag="5")]
    pub status: i32,
    #[prost(string, optional, tag="6")]
    pub payload: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, tag="7")]
    pub retry_attempt_number: u32,
    #[prost(string, optional, tag="8")]
    pub error_reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="9")]
    pub sent_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="10")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="11")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="12")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub modified_by_user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WebhookSignatureKey {
    #[prost(string, tag="1")]
    pub signature_key: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub active: bool,
    #[prost(message, optional, tag="3")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="4")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="5")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub modified_by_user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WebhookHttpHeader {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWebhookRequest {
    #[prost(string, tag="1")]
    pub webhook_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWebhookResponse {
    #[prost(message, optional, tag="1")]
    pub webhook: ::core::option::Option<Webhook>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWebhookRequest {
    #[prost(message, optional, tag="1")]
    pub webhook: ::core::option::Option<Webhook>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWebhookResponse {
    #[prost(message, optional, tag="1")]
    pub webhook: ::core::option::Option<Webhook>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWebhookRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub target_url: ::prost::alloc::string::String,
    #[prost(enumeration="WebhookEventType", tag="3")]
    pub event_type: i32,
    #[prost(string, optional, tag="4")]
    pub payload: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="5")]
    pub http_headers: ::prost::alloc::vec::Vec<WebhookHttpHeader>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWebhookResponse {
    #[prost(message, optional, tag="1")]
    pub webhook: ::core::option::Option<Webhook>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWebhooksRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWebhooksResponse {
    #[prost(message, repeated, tag="1")]
    pub webhooks: ::prost::alloc::vec::Vec<Webhook>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestWebhookRequest {
    #[prost(oneof="test_webhook_request::Form", tags="1, 2, 3")]
    pub form: ::core::option::Option<test_webhook_request::Form>,
}
/// Nested message and enum types in `TestWebhookRequest`.
pub mod test_webhook_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Form {
        #[prost(string, tag="1")]
        WebhookId(::prost::alloc::string::String),
        #[prost(message, tag="2")]
        Webhook(super::Webhook),
        #[prost(message, tag="3")]
        CreateRequest(super::CreateWebhookRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestWebhookResponse {
    #[prost(uint32, tag="1")]
    pub http_response_code: u32,
    #[prost(bytes="vec", tag="2")]
    pub http_response_body: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateWebhookSignatureKeyRequest {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWebhookSignatureKeyResponse {
    #[prost(message, optional, tag="1")]
    pub signature_key: ::core::option::Option<WebhookSignatureKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWebhookSignatureKeyRequest {
    #[prost(string, tag="1")]
    pub organization_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWebhookSignatureKeyResponse {
    #[prost(message, optional, tag="1")]
    pub signature_key: ::core::option::Option<WebhookSignatureKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ToggleWebhookSignatureKeyActivationRequest {
    #[prost(bool, tag="1")]
    pub enable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ToggleWebhookSignatureKeyActivationResponse {
    #[prost(message, optional, tag="1")]
    pub signature_key: ::core::option::Option<WebhookSignatureKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateWebhookSignatureKeyRequest {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RotateWebhookSignatureKeyResponse {
    #[prost(message, optional, tag="1")]
    pub signature_key: ::core::option::Option<WebhookSignatureKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWebhookLogsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWebhookLogsResponse {
    #[prost(message, repeated, tag="1")]
    pub logs: ::prost::alloc::vec::Vec<WebhookLog>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWebhookLogRequest {
    #[prost(string, tag="1")]
    pub webhook_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub event_id: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub retry_attempt_number: u32,
    #[prost(enumeration="WebhookLogStatus", tag="4")]
    pub status: i32,
    #[prost(string, optional, tag="5")]
    pub payload: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="6")]
    pub error_reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="7")]
    pub sent_date: ::core::option::Option<::pbjson_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateWebhookLogsRequest {
    #[prost(message, repeated, tag="1")]
    pub requests: ::prost::alloc::vec::Vec<CreateWebhookLogRequest>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchCreateWebhookLogsResponse {
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WebhookEventType {
    Unspecified = 0,
    RuleViolation = 1,
}
impl WebhookEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WebhookEventType::Unspecified => "WEBHOOK_EVENT_TYPE_UNSPECIFIED",
            WebhookEventType::RuleViolation => "WEBHOOK_EVENT_TYPE_RULE_VIOLATION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WEBHOOK_EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "WEBHOOK_EVENT_TYPE_RULE_VIOLATION" => Some(Self::RuleViolation),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WebhookLogStatus {
    Unspecified = 0,
    Sent = 1,
    Failed = 2,
    Retrying = 3,
}
impl WebhookLogStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WebhookLogStatus::Unspecified => "WEBHOOK_LOG_STATUS_UNSPECIFIED",
            WebhookLogStatus::Sent => "WEBHOOK_LOG_STATUS_SENT",
            WebhookLogStatus::Failed => "WEBHOOK_LOG_STATUS_FAILED",
            WebhookLogStatus::Retrying => "WEBHOOK_LOG_STATUS_RETRYING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WEBHOOK_LOG_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "WEBHOOK_LOG_STATUS_SENT" => Some(Self::Sent),
            "WEBHOOK_LOG_STATUS_FAILED" => Some(Self::Failed),
            "WEBHOOK_LOG_STATUS_RETRYING" => Some(Self::Retrying),
            _ => None,
        }
    }
}
include!("sift.webhooks.v1.tonic.rs");
include!("sift.webhooks.v1.serde.rs");
// @@protoc_insertion_point(module)