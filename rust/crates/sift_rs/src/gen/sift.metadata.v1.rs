// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetadataKey {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration="MetadataKeyType", tag="2")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetadataValue {
    #[prost(message, optional, tag="1")]
    pub key: ::core::option::Option<MetadataKey>,
    #[prost(oneof="metadata_value::Value", tags="2, 3, 4")]
    pub value: ::core::option::Option<metadata_value::Value>,
}
/// Nested message and enum types in `MetadataValue`.
pub mod metadata_value {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag="2")]
        StringValue(::prost::alloc::string::String),
        #[prost(double, tag="3")]
        NumberValue(f64),
        #[prost(bool, tag="4")]
        BooleanValue(bool),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMetadataKeyRequest {
    #[prost(message, optional, tag="1")]
    pub metadata_key: ::core::option::Option<MetadataKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMetadataKeyResponse {
    #[prost(message, optional, tag="1")]
    pub metadata_key: ::core::option::Option<MetadataKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMetadataKeysRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMetadataKeysResponse {
    #[prost(message, repeated, tag="1")]
    pub metadata_keys: ::prost::alloc::vec::Vec<MetadataKey>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MetadataKeyType {
    Unspecified = 0,
    String = 1,
    Number = 2,
    Boolean = 3,
}
impl MetadataKeyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MetadataKeyType::Unspecified => "METADATA_KEY_TYPE_UNSPECIFIED",
            MetadataKeyType::String => "METADATA_KEY_TYPE_STRING",
            MetadataKeyType::Number => "METADATA_KEY_TYPE_NUMBER",
            MetadataKeyType::Boolean => "METADATA_KEY_TYPE_BOOLEAN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "METADATA_KEY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "METADATA_KEY_TYPE_STRING" => Some(Self::String),
            "METADATA_KEY_TYPE_NUMBER" => Some(Self::Number),
            "METADATA_KEY_TYPE_BOOLEAN" => Some(Self::Boolean),
            _ => None,
        }
    }
}
include!("sift.metadata.v1.tonic.rs");
include!("sift.metadata.v1.serde.rs");
// @@protoc_insertion_point(module)