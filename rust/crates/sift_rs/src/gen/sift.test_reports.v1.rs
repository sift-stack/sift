// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestReport {
    #[prost(string, tag="1")]
    pub test_report_id: ::prost::alloc::string::String,
    #[prost(enumeration="TestStatus", tag="2")]
    pub status: i32,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub test_system_name: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub test_case: ::prost::alloc::string::String,
    #[prost(message, optional, tag="6")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="7")]
    pub end_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, repeated, tag="8")]
    pub metadata: ::prost::alloc::vec::Vec<super::super::metadata::v1::MetadataValue>,
    #[prost(string, tag="9")]
    pub serial_number: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub part_number: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub system_operator: ::prost::alloc::string::String,
    #[prost(message, optional, tag="12")]
    pub archived_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(bool, tag="13")]
    pub is_archived: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestStep {
    #[prost(string, tag="1")]
    pub test_step_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub test_report_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub parent_step_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration="TestStepType", tag="6")]
    pub step_type: i32,
    #[prost(string, tag="7")]
    pub step_path: ::prost::alloc::string::String,
    #[prost(enumeration="TestStatus", tag="8")]
    pub status: i32,
    #[prost(message, optional, tag="9")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="10")]
    pub end_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="11")]
    pub error_info: ::core::option::Option<ErrorInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorInfo {
    #[prost(int32, tag="1")]
    pub error_code: i32,
    #[prost(string, tag="2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestMeasurement {
    #[prost(string, tag="1")]
    pub measurement_id: ::prost::alloc::string::String,
    #[prost(enumeration="TestMeasurementType", tag="2")]
    pub measurement_type: i32,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub test_step_id: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub test_report_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="9")]
    pub unit: ::core::option::Option<super::super::unit::v2::Unit>,
    #[prost(bool, tag="12")]
    pub passed: bool,
    #[prost(message, optional, tag="13")]
    pub timestamp: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(oneof="test_measurement::Value", tags="6, 7, 8")]
    pub value: ::core::option::Option<test_measurement::Value>,
    #[prost(oneof="test_measurement::Bounds", tags="10, 11")]
    pub bounds: ::core::option::Option<test_measurement::Bounds>,
}
/// Nested message and enum types in `TestMeasurement`.
pub mod test_measurement {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(double, tag="6")]
        NumericValue(f64),
        #[prost(string, tag="7")]
        StringValue(::prost::alloc::string::String),
        #[prost(bool, tag="8")]
        BooleanValue(bool),
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Bounds {
        #[prost(message, tag="10")]
        NumericBounds(super::NumericBounds),
        #[prost(message, tag="11")]
        StringBounds(super::StringBounds),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NumericBounds {
    #[prost(double, optional, tag="1")]
    pub min: ::core::option::Option<f64>,
    #[prost(double, optional, tag="2")]
    pub max: ::core::option::Option<f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringBounds {
    #[prost(string, tag="1")]
    pub expected_value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportTestReportRequest {
    #[prost(string, tag="1")]
    pub remote_file_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportTestReportResponse {
    #[prost(message, optional, tag="1")]
    pub test_report: ::core::option::Option<TestReport>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestReportRequest {
    #[prost(enumeration="TestStatus", tag="1")]
    pub status: i32,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub test_system_name: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub test_case: ::prost::alloc::string::String,
    #[prost(message, optional, tag="5")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="6")]
    pub end_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, repeated, tag="7")]
    pub metadata: ::prost::alloc::vec::Vec<super::super::metadata::v1::MetadataValue>,
    #[prost(string, tag="8")]
    pub serial_number: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub part_number: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub system_operator: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestReportResponse {
    #[prost(message, optional, tag="1")]
    pub test_report: ::core::option::Option<TestReport>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTestReportRequest {
    #[prost(string, tag="1")]
    pub test_report_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTestReportResponse {
    #[prost(message, optional, tag="1")]
    pub test_report: ::core::option::Option<TestReport>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTestReportsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTestReportsResponse {
    #[prost(message, repeated, tag="1")]
    pub test_reports: ::prost::alloc::vec::Vec<TestReport>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTestReportRequest {
    #[prost(message, optional, tag="1")]
    pub test_report: ::core::option::Option<TestReport>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTestReportResponse {
    #[prost(message, optional, tag="1")]
    pub test_report: ::core::option::Option<TestReport>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTestReportRequest {
    #[prost(string, tag="1")]
    pub test_report_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteTestReportResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestStepRequest {
    #[prost(message, optional, tag="1")]
    pub test_step: ::core::option::Option<TestStep>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestStepResponse {
    #[prost(message, optional, tag="1")]
    pub test_step: ::core::option::Option<TestStep>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTestStepsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTestStepsResponse {
    #[prost(message, repeated, tag="1")]
    pub test_steps: ::prost::alloc::vec::Vec<TestStep>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTestStepRequest {
    #[prost(message, optional, tag="1")]
    pub test_step: ::core::option::Option<TestStep>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTestStepResponse {
    #[prost(message, optional, tag="1")]
    pub test_step: ::core::option::Option<TestStep>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTestStepRequest {
    #[prost(string, tag="1")]
    pub test_step_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteTestStepResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestMeasurementRequest {
    #[prost(message, optional, tag="1")]
    pub test_measurement: ::core::option::Option<TestMeasurement>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestMeasurementResponse {
    #[prost(message, optional, tag="1")]
    pub test_measurement: ::core::option::Option<TestMeasurement>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestMeasurementsRequest {
    #[prost(message, repeated, tag="1")]
    pub test_measurements: ::prost::alloc::vec::Vec<TestMeasurement>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTestMeasurementsResponse {
    #[prost(int32, tag="1")]
    pub measurements_created_count: i32,
    #[prost(string, repeated, tag="2")]
    pub measurement_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTestMeasurementsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTestMeasurementsResponse {
    #[prost(message, repeated, tag="1")]
    pub test_measurements: ::prost::alloc::vec::Vec<TestMeasurement>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CountTestStepsRequest {
    #[prost(string, tag="1")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountTestStepsResponse {
    #[prost(int64, tag="1")]
    pub count: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CountTestMeasurementsRequest {
    #[prost(string, tag="1")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CountTestMeasurementsResponse {
    #[prost(int64, tag="1")]
    pub count: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTestMeasurementRequest {
    #[prost(message, optional, tag="1")]
    pub test_measurement: ::core::option::Option<TestMeasurement>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTestMeasurementResponse {
    #[prost(message, optional, tag="1")]
    pub test_measurement: ::core::option::Option<TestMeasurement>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTestMeasurementRequest {
    #[prost(string, tag="1")]
    pub measurement_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteTestMeasurementResponse {
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TestStatus {
    Unspecified = 0,
    Draft = 1,
    Passed = 2,
    Failed = 3,
    Aborted = 4,
    Error = 5,
    InProgress = 6,
    Skipped = 7,
}
impl TestStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TestStatus::Unspecified => "TEST_STATUS_UNSPECIFIED",
            TestStatus::Draft => "TEST_STATUS_DRAFT",
            TestStatus::Passed => "TEST_STATUS_PASSED",
            TestStatus::Failed => "TEST_STATUS_FAILED",
            TestStatus::Aborted => "TEST_STATUS_ABORTED",
            TestStatus::Error => "TEST_STATUS_ERROR",
            TestStatus::InProgress => "TEST_STATUS_IN_PROGRESS",
            TestStatus::Skipped => "TEST_STATUS_SKIPPED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEST_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "TEST_STATUS_DRAFT" => Some(Self::Draft),
            "TEST_STATUS_PASSED" => Some(Self::Passed),
            "TEST_STATUS_FAILED" => Some(Self::Failed),
            "TEST_STATUS_ABORTED" => Some(Self::Aborted),
            "TEST_STATUS_ERROR" => Some(Self::Error),
            "TEST_STATUS_IN_PROGRESS" => Some(Self::InProgress),
            "TEST_STATUS_SKIPPED" => Some(Self::Skipped),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TestStepType {
    Unspecified = 0,
    Sequence = 1,
    Group = 2,
    Action = 3,
    FlowControl = 4,
}
impl TestStepType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TestStepType::Unspecified => "TEST_STEP_TYPE_UNSPECIFIED",
            TestStepType::Sequence => "TEST_STEP_TYPE_SEQUENCE",
            TestStepType::Group => "TEST_STEP_TYPE_GROUP",
            TestStepType::Action => "TEST_STEP_TYPE_ACTION",
            TestStepType::FlowControl => "TEST_STEP_TYPE_FLOW_CONTROL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEST_STEP_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "TEST_STEP_TYPE_SEQUENCE" => Some(Self::Sequence),
            "TEST_STEP_TYPE_GROUP" => Some(Self::Group),
            "TEST_STEP_TYPE_ACTION" => Some(Self::Action),
            "TEST_STEP_TYPE_FLOW_CONTROL" => Some(Self::FlowControl),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TestMeasurementType {
    Unspecified = 0,
    Double = 1,
    String = 3,
    Boolean = 4,
    Limit = 5,
}
impl TestMeasurementType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TestMeasurementType::Unspecified => "TEST_MEASUREMENT_TYPE_UNSPECIFIED",
            TestMeasurementType::Double => "TEST_MEASUREMENT_TYPE_DOUBLE",
            TestMeasurementType::String => "TEST_MEASUREMENT_TYPE_STRING",
            TestMeasurementType::Boolean => "TEST_MEASUREMENT_TYPE_BOOLEAN",
            TestMeasurementType::Limit => "TEST_MEASUREMENT_TYPE_LIMIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEST_MEASUREMENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "TEST_MEASUREMENT_TYPE_DOUBLE" => Some(Self::Double),
            "TEST_MEASUREMENT_TYPE_STRING" => Some(Self::String),
            "TEST_MEASUREMENT_TYPE_BOOLEAN" => Some(Self::Boolean),
            "TEST_MEASUREMENT_TYPE_LIMIT" => Some(Self::Limit),
            _ => None,
        }
    }
}
include!("sift.test_reports.v1.tonic.rs");
include!("sift.test_reports.v1.serde.rs");
// @@protoc_insertion_point(module)