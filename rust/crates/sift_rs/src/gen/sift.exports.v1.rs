// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataRequest {
    #[prost(string, repeated, tag="4")]
    pub channel_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="5")]
    pub calculated_channel_configs: ::prost::alloc::vec::Vec<CalculatedChannelConfig>,
    #[prost(enumeration="ExportOutputFormat", tag="6")]
    pub output_format: i32,
    #[prost(message, optional, tag="7")]
    pub export_options: ::core::option::Option<ExportOptions>,
    #[prost(oneof="export_data_request::TimeSelection", tags="1, 2, 3")]
    pub time_selection: ::core::option::Option<export_data_request::TimeSelection>,
}
/// Nested message and enum types in `ExportDataRequest`.
pub mod export_data_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TimeSelection {
        #[prost(message, tag="1")]
        TimeRange(super::TimeRange),
        #[prost(message, tag="2")]
        RunsAndTimeRange(super::RunsAndTimeRange),
        #[prost(message, tag="3")]
        AssetsAndTimeRange(super::AssetsAndTimeRange),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimeRange {
    #[prost(message, optional, tag="1")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="2")]
    pub stop_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunsAndTimeRange {
    #[prost(string, repeated, tag="1")]
    pub run_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="2")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="3")]
    pub stop_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssetsAndTimeRange {
    #[prost(string, repeated, tag="1")]
    pub asset_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="2")]
    pub start_time: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="3")]
    pub stop_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalculatedChannelConfig {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub expression: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub channel_references: ::prost::alloc::vec::Vec<super::super::calculated_channels::v2::CalculatedChannelAbstractChannelReference>,
    #[prost(string, optional, tag="4")]
    pub units: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExportOptions {
    #[prost(bool, tag="1")]
    pub use_legacy_format: bool,
    #[prost(bool, tag="2")]
    pub simplify_channel_names: bool,
    #[prost(bool, tag="3")]
    pub combine_runs: bool,
    #[prost(bool, tag="4")]
    pub split_export_by_asset: bool,
    #[prost(bool, tag="5")]
    pub split_export_by_run: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataResponse {
    #[prost(string, tag="1")]
    pub presigned_url: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub job_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDownloadUrlRequest {
    #[prost(string, tag="1")]
    pub job_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDownloadUrlResponse {
    #[prost(string, tag="1")]
    pub presigned_url: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExportOutputFormat {
    Unspecified = 0,
    Csv = 1,
    Sun = 2,
}
impl ExportOutputFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ExportOutputFormat::Unspecified => "EXPORT_OUTPUT_FORMAT_UNSPECIFIED",
            ExportOutputFormat::Csv => "EXPORT_OUTPUT_FORMAT_CSV",
            ExportOutputFormat::Sun => "EXPORT_OUTPUT_FORMAT_SUN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EXPORT_OUTPUT_FORMAT_UNSPECIFIED" => Some(Self::Unspecified),
            "EXPORT_OUTPUT_FORMAT_CSV" => Some(Self::Csv),
            "EXPORT_OUTPUT_FORMAT_SUN" => Some(Self::Sun),
            _ => None,
        }
    }
}
include!("sift.exports.v1.tonic.rs");
include!("sift.exports.v1.serde.rs");
// @@protoc_insertion_point(module)