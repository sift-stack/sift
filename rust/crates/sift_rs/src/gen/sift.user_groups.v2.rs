// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserGroup {
    #[prost(string, tag="1")]
    pub user_group_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub role_id: ::prost::alloc::string::String,
    #[prost(bool, tag="4")]
    pub is_default: bool,
    #[prost(message, optional, tag="6")]
    pub resources: ::core::option::Option<user_group::Resource>,
    #[prost(string, repeated, tag="7")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `UserGroup`.
pub mod user_group {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Resource {
        #[prost(string, repeated, tag="1")]
        pub asset_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(bool, tag="2")]
        pub all_assets: bool,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListUserGroupsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListUserGroupsResponse {
    #[prost(message, repeated, tag="1")]
    pub user_groups: ::prost::alloc::vec::Vec<UserGroup>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserGroupRequest {
    #[prost(string, tag="1")]
    pub user_group_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserGroupResponse {
    #[prost(message, optional, tag="1")]
    pub user_group: ::core::option::Option<UserGroup>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserUserGroupsRequest {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="2")]
    pub user_group_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateUserUserGroupsResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserGroupRequest {
    #[prost(message, optional, tag="1")]
    pub user_group: ::core::option::Option<UserGroup>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserGroupResponse {
    #[prost(message, optional, tag="1")]
    pub user_group: ::core::option::Option<UserGroup>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserGroupRequest {
    #[prost(message, optional, tag="1")]
    pub user_group: ::core::option::Option<UserGroup>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserGroupResponse {
    #[prost(message, optional, tag="1")]
    pub user_group: ::core::option::Option<UserGroup>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUserGroupRequest {
    #[prost(string, tag="1")]
    pub user_group_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteUserGroupResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUserToUserGroupRequest {
    #[prost(string, tag="1")]
    pub user_group_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddUserToUserGroupResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveUserFromUserGroupRequest {
    #[prost(string, tag="1")]
    pub user_group_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveUserFromUserGroupResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserGroupsForAssetsRequest {
    #[prost(string, repeated, tag="1")]
    pub asset_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserGroupsForAssetsResponse {
    #[prost(message, repeated, tag="1")]
    pub user_groups: ::prost::alloc::vec::Vec<UserGroup>,
    #[prost(message, repeated, tag="2")]
    pub roles: ::prost::alloc::vec::Vec<super::super::roles::v2::Role>,
}
include!("sift.user_groups.v2.tonic.rs");
include!("sift.user_groups.v2.serde.rs");
// @@protoc_insertion_point(module)