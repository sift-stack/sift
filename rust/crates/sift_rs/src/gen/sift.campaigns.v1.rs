// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Campaign {
    #[prost(string, tag="1")]
    pub campaign_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub client_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="4")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="5")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="6")]
    pub created_by_user_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub modified_by_user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="8")]
    pub created_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="9")]
    pub modified_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="10")]
    pub archived_date: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, repeated, tag="11")]
    pub tags: ::prost::alloc::vec::Vec<super::super::tags::v1::TagRef>,
    #[prost(message, repeated, tag="12")]
    pub reports: ::prost::alloc::vec::Vec<CampaignReport>,
    #[prost(string, optional, tag="13")]
    pub created_from_campaign_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CampaignReport {
    #[prost(string, tag="1")]
    pub report_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub report_name: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub num_annotations: u32,
    #[prost(uint32, tag="4")]
    pub num_passed_rules: u32,
    #[prost(uint32, tag="5")]
    pub num_accepted_rules: u32,
    #[prost(uint32, tag="6")]
    pub num_failed_rules: u32,
    #[prost(uint32, tag="7")]
    pub num_open_rules: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCampaignRequest {
    #[prost(string, tag="1")]
    pub campaign_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub client_key: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub organization_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCampaignResponse {
    #[prost(message, optional, tag="1")]
    pub campaign: ::core::option::Option<Campaign>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCampaignRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="3")]
    pub tags: ::core::option::Option<super::super::common::r#type::v1::NamedResources>,
    #[prost(string, tag="4")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="5")]
    pub client_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="6")]
    pub create_from: ::core::option::Option<CreateCampaignFrom>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCampaignFrom {
    #[prost(oneof="create_campaign_from::Initializer", tags="1, 2, 3")]
    pub initializer: ::core::option::Option<create_campaign_from::Initializer>,
}
/// Nested message and enum types in `CreateCampaignFrom`.
pub mod create_campaign_from {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Initializer {
        #[prost(message, tag="1")]
        Reports(super::super::super::common::r#type::v1::ResourceIdentifiers),
        #[prost(message, tag="2")]
        Runs(super::super::super::common::r#type::v1::ResourceIdentifiers),
        #[prost(message, tag="3")]
        OtherCampaign(super::super::super::common::r#type::v1::ResourceIdentifier),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCampaignResponse {
    #[prost(message, optional, tag="1")]
    pub campaign: ::core::option::Option<Campaign>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCampaignsRequest {
    #[prost(uint32, tag="1")]
    pub page_size: u32,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub filter: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(bool, tag="5")]
    pub include_archived: bool,
    #[prost(string, tag="6")]
    pub order_by: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCampaignsResponse {
    #[prost(message, repeated, tag="1")]
    pub campaigns: ::prost::alloc::vec::Vec<Campaign>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateCampaignRequest {
    #[prost(message, optional, tag="1")]
    pub campaign: ::core::option::Option<Campaign>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::pbjson_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateCampaignResponse {
    #[prost(message, optional, tag="1")]
    pub campaign: ::core::option::Option<Campaign>,
}
include!("sift.campaigns.v1.tonic.rs");
include!("sift.campaigns.v1.serde.rs");
// @@protoc_insertion_point(module)